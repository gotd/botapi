// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

// WriteJSON implements json.Marshaler.
func (s Animation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileName.Set {
		more.More()
		j.WriteObjectField("file_name")
		s.FileName.WriteJSON(j)
	}
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("height")
	j.WriteInt(s.Height)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("width")
	j.WriteInt(s.Width)
	j.WriteObjectEnd()
}

// WriteJSONTo writes Animation json value to io.Writer.
func (s Animation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Animation json value from io.Reader.
func (s *Animation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Animation from json stream.
func (s *Animation) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Audio) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileName.Set {
		more.More()
		j.WriteObjectField("file_name")
		s.FileName.WriteJSON(j)
	}
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	if s.Performer.Set {
		more.More()
		j.WriteObjectField("performer")
		s.Performer.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Audio json value to io.Writer.
func (s Audio) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Audio json value from io.Reader.
func (s *Audio) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Audio from json stream.
func (s *Audio) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "performer":
			if err := func() error {
				s.Performer.Reset()
				if err := s.Performer.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BotCommandScope) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes BotCommandScope json value to io.Writer.
func (s BotCommandScope) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BotCommandScope json value from io.Reader.
func (s *BotCommandScope) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BotCommandScope from json stream.
func (s *BotCommandScope) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Chat) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Bio.Set {
		more.More()
		j.WriteObjectField("bio")
		s.Bio.WriteJSON(j)
	}
	if s.CanSetStickerSet.Set {
		more.More()
		j.WriteObjectField("can_set_sticker_set")
		s.CanSetStickerSet.WriteJSON(j)
	}
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	if s.FirstName.Set {
		more.More()
		j.WriteObjectField("first_name")
		s.FirstName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)
	if s.InviteLink.Set {
		more.More()
		j.WriteObjectField("invite_link")
		s.InviteLink.WriteJSON(j)
	}
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	if s.LinkedChatID.Set {
		more.More()
		j.WriteObjectField("linked_chat_id")
		s.LinkedChatID.WriteJSON(j)
	}
	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}
	if s.MessageAutoDeleteTime.Set {
		more.More()
		j.WriteObjectField("message_auto_delete_time")
		s.MessageAutoDeleteTime.WriteJSON(j)
	}
	if s.Permissions.Set {
		more.More()
		j.WriteObjectField("permissions")
		s.Permissions.WriteJSON(j)
	}
	if s.Photo.Set {
		more.More()
		j.WriteObjectField("photo")
		s.Photo.WriteJSON(j)
	}
	if s.PinnedMessage.Set {
		more.More()
		j.WriteObjectField("pinned_message")
		s.PinnedMessage.WriteJSON(j)
	}
	if s.SlowModeDelay.Set {
		more.More()
		j.WriteObjectField("slow_mode_delay")
		s.SlowModeDelay.WriteJSON(j)
	}
	if s.StickerSetName.Set {
		more.More()
		j.WriteObjectField("sticker_set_name")
		s.StickerSetName.WriteJSON(j)
	}
	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Chat json value to io.Writer.
func (s Chat) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Chat json value from io.Reader.
func (s *Chat) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Chat from json stream.
func (s *Chat) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "bio":
			if err := func() error {
				s.Bio.Reset()
				if err := s.Bio.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_set_sticker_set":
			if err := func() error {
				s.CanSetStickerSet.Reset()
				if err := s.CanSetStickerSet.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "first_name":
			if err := func() error {
				s.FirstName.Reset()
				if err := s.FirstName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "invite_link":
			if err := func() error {
				s.InviteLink.Reset()
				if err := s.InviteLink.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "linked_chat_id":
			if err := func() error {
				s.LinkedChatID.Reset()
				if err := s.LinkedChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_auto_delete_time":
			if err := func() error {
				s.MessageAutoDeleteTime.Reset()
				if err := s.MessageAutoDeleteTime.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "permissions":
			if err := func() error {
				s.Permissions.Reset()
				if err := s.Permissions.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo":
			if err := func() error {
				s.Photo.Reset()
				if err := s.Photo.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pinned_message":
			if err := func() error {
				s.PinnedMessage.Reset()
				if err := s.PinnedMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "slow_mode_delay":
			if err := func() error {
				s.SlowModeDelay.Reset()
				if err := s.SlowModeDelay.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sticker_set_name":
			if err := func() error {
				s.StickerSetName.Reset()
				if err := s.StickerSetName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChatLocation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("address")
	j.WriteString(s.Address)
	more.More()
	j.WriteObjectField("location")
	s.Location.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes ChatLocation json value to io.Writer.
func (s ChatLocation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ChatLocation json value from io.Reader.
func (s *ChatLocation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ChatLocation from json stream.
func (s *ChatLocation) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "address":
			if err := func() error {
				s.Address = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChatPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanAddWebPagePreviews.Set {
		more.More()
		j.WriteObjectField("can_add_web_page_previews")
		s.CanAddWebPagePreviews.WriteJSON(j)
	}
	if s.CanChangeInfo.Set {
		more.More()
		j.WriteObjectField("can_change_info")
		s.CanChangeInfo.WriteJSON(j)
	}
	if s.CanInviteUsers.Set {
		more.More()
		j.WriteObjectField("can_invite_users")
		s.CanInviteUsers.WriteJSON(j)
	}
	if s.CanPinMessages.Set {
		more.More()
		j.WriteObjectField("can_pin_messages")
		s.CanPinMessages.WriteJSON(j)
	}
	if s.CanSendMediaMessages.Set {
		more.More()
		j.WriteObjectField("can_send_media_messages")
		s.CanSendMediaMessages.WriteJSON(j)
	}
	if s.CanSendMessages.Set {
		more.More()
		j.WriteObjectField("can_send_messages")
		s.CanSendMessages.WriteJSON(j)
	}
	if s.CanSendOtherMessages.Set {
		more.More()
		j.WriteObjectField("can_send_other_messages")
		s.CanSendOtherMessages.WriteJSON(j)
	}
	if s.CanSendPolls.Set {
		more.More()
		j.WriteObjectField("can_send_polls")
		s.CanSendPolls.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes ChatPermissions json value to io.Writer.
func (s ChatPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ChatPermissions json value from io.Reader.
func (s *ChatPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ChatPermissions from json stream.
func (s *ChatPermissions) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_add_web_page_previews":
			if err := func() error {
				s.CanAddWebPagePreviews.Reset()
				if err := s.CanAddWebPagePreviews.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_change_info":
			if err := func() error {
				s.CanChangeInfo.Reset()
				if err := s.CanChangeInfo.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_invite_users":
			if err := func() error {
				s.CanInviteUsers.Reset()
				if err := s.CanInviteUsers.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_pin_messages":
			if err := func() error {
				s.CanPinMessages.Reset()
				if err := s.CanPinMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_send_media_messages":
			if err := func() error {
				s.CanSendMediaMessages.Reset()
				if err := s.CanSendMediaMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_send_messages":
			if err := func() error {
				s.CanSendMessages.Reset()
				if err := s.CanSendMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_send_other_messages":
			if err := func() error {
				s.CanSendOtherMessages.Reset()
				if err := s.CanSendOtherMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_send_polls":
			if err := func() error {
				s.CanSendPolls.Reset()
				if err := s.CanSendPolls.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ChatPhoto) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("big_file_id")
	j.WriteString(s.BigFileID)
	more.More()
	j.WriteObjectField("big_file_unique_id")
	j.WriteString(s.BigFileUniqueID)
	more.More()
	j.WriteObjectField("small_file_id")
	j.WriteString(s.SmallFileID)
	more.More()
	j.WriteObjectField("small_file_unique_id")
	j.WriteString(s.SmallFileUniqueID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes ChatPhoto json value to io.Writer.
func (s ChatPhoto) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ChatPhoto json value from io.Reader.
func (s *ChatPhoto) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ChatPhoto from json stream.
func (s *ChatPhoto) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "big_file_id":
			if err := func() error {
				s.BigFileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "big_file_unique_id":
			if err := func() error {
				s.BigFileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "small_file_id":
			if err := func() error {
				s.SmallFileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "small_file_unique_id":
			if err := func() error {
				s.SmallFileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Contact) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("first_name")
	j.WriteString(s.FirstName)
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("phone_number")
	j.WriteString(s.PhoneNumber)
	if s.UserID.Set {
		more.More()
		j.WriteObjectField("user_id")
		s.UserID.WriteJSON(j)
	}
	if s.Vcard.Set {
		more.More()
		j.WriteObjectField("vcard")
		s.Vcard.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Contact json value to io.Writer.
func (s Contact) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Contact json value from io.Reader.
func (s *Contact) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Contact from json stream.
func (s *Contact) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "first_name":
			if err := func() error {
				s.FirstName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phone_number":
			if err := func() error {
				s.PhoneNumber = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID.Reset()
				if err := s.UserID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "vcard":
			if err := func() error {
				s.Vcard.Reset()
				if err := s.Vcard.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Dice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("emoji")
	j.WriteString(s.Emoji)
	more.More()
	j.WriteObjectField("value")
	j.WriteInt(s.Value)
	j.WriteObjectEnd()
}

// WriteJSONTo writes Dice json value to io.Writer.
func (s Dice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Dice json value from io.Reader.
func (s *Dice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Dice from json stream.
func (s *Dice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "emoji":
			if err := func() error {
				s.Emoji = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "value":
			if err := func() error {
				s.Value = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Document) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileName.Set {
		more.More()
		j.WriteObjectField("file_name")
		s.FileName.WriteJSON(j)
	}
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Document json value to io.Writer.
func (s Document) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Document json value from io.Reader.
func (s *Document) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Document from json stream.
func (s *Document) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EncryptedCredentials) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("data")
	j.WriteString(s.Data)
	more.More()
	j.WriteObjectField("hash")
	j.WriteString(s.Hash)
	more.More()
	j.WriteObjectField("secret")
	j.WriteString(s.Secret)
	j.WriteObjectEnd()
}

// WriteJSONTo writes EncryptedCredentials json value to io.Writer.
func (s EncryptedCredentials) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EncryptedCredentials json value from io.Reader.
func (s *EncryptedCredentials) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EncryptedCredentials from json stream.
func (s *EncryptedCredentials) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "data":
			if err := func() error {
				s.Data = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "hash":
			if err := func() error {
				s.Hash = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "secret":
			if err := func() error {
				s.Secret = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Error) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	more.More()
	j.WriteObjectField("error_code")
	j.WriteInt(s.ErrorCode)
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	if s.Parameters.Set {
		more.More()
		j.WriteObjectField("parameters")
		s.Parameters.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Error json value to io.Writer.
func (s Error) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Error json value from io.Reader.
func (s *Error) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Error from json stream.
func (s *Error) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "error_code":
			if err := func() error {
				s.ErrorCode = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parameters":
			if err := func() error {
				s.Parameters.Reset()
				if err := s.Parameters.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ErrorStatusCode) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes ErrorStatusCode json value to io.Writer.
func (s ErrorStatusCode) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ErrorStatusCode json value from io.Reader.
func (s *ErrorStatusCode) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ErrorStatusCode from json stream.
func (s *ErrorStatusCode) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Game) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Animation.Set {
		more.More()
		j.WriteObjectField("animation")
		s.Animation.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// WriteJSONTo writes Game json value to io.Writer.
func (s Game) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Game json value from io.Reader.
func (s *Game) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Game from json stream.
func (s *Game) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "animation":
			if err := func() error {
				s.Animation.Reset()
				if err := s.Animation.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InlineKeyboardMarkup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes InlineKeyboardMarkup json value to io.Writer.
func (s InlineKeyboardMarkup) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads InlineKeyboardMarkup json value from io.Reader.
func (s *InlineKeyboardMarkup) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads InlineKeyboardMarkup from json stream.
func (s *InlineKeyboardMarkup) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s InputMedia) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes InputMedia json value to io.Writer.
func (s InputMedia) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads InputMedia json value from io.Reader.
func (s *InputMedia) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads InputMedia from json stream.
func (s *InputMedia) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Invoice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	more.More()
	j.WriteObjectField("start_parameter")
	j.WriteString(s.StartParameter)
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	more.More()
	j.WriteObjectField("total_amount")
	j.WriteInt(s.TotalAmount)
	j.WriteObjectEnd()
}

// WriteJSONTo writes Invoice json value to io.Writer.
func (s Invoice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Invoice json value from io.Reader.
func (s *Invoice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Invoice from json stream.
func (s *Invoice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currency":
			if err := func() error {
				s.Currency = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "start_parameter":
			if err := func() error {
				s.StartParameter = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "total_amount":
			if err := func() error {
				s.TotalAmount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Location) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Heading.Set {
		more.More()
		j.WriteObjectField("heading")
		s.Heading.WriteJSON(j)
	}
	if s.HorizontalAccuracy.Set {
		more.More()
		j.WriteObjectField("horizontal_accuracy")
		s.HorizontalAccuracy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("latitude")
	j.WriteFloat64(s.Latitude)
	if s.LivePeriod.Set {
		more.More()
		j.WriteObjectField("live_period")
		s.LivePeriod.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("longitude")
	j.WriteFloat64(s.Longitude)
	if s.ProximityAlertRadius.Set {
		more.More()
		j.WriteObjectField("proximity_alert_radius")
		s.ProximityAlertRadius.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Location json value to io.Writer.
func (s Location) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Location json value from io.Reader.
func (s *Location) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Location from json stream.
func (s *Location) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "heading":
			if err := func() error {
				s.Heading.Reset()
				if err := s.Heading.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "horizontal_accuracy":
			if err := func() error {
				s.HorizontalAccuracy.Reset()
				if err := s.HorizontalAccuracy.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "latitude":
			if err := func() error {
				s.Latitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "live_period":
			if err := func() error {
				s.LivePeriod.Reset()
				if err := s.LivePeriod.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "longitude":
			if err := func() error {
				s.Longitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "proximity_alert_radius":
			if err := func() error {
				s.ProximityAlertRadius.Reset()
				if err := s.ProximityAlertRadius.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MaskPosition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("point")
	j.WriteString(s.Point)
	more.More()
	j.WriteObjectField("scale")
	j.WriteFloat64(s.Scale)
	more.More()
	j.WriteObjectField("x_shift")
	j.WriteFloat64(s.XShift)
	more.More()
	j.WriteObjectField("y_shift")
	j.WriteFloat64(s.YShift)
	j.WriteObjectEnd()
}

// WriteJSONTo writes MaskPosition json value to io.Writer.
func (s MaskPosition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MaskPosition json value from io.Reader.
func (s *MaskPosition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MaskPosition from json stream.
func (s *MaskPosition) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "point":
			if err := func() error {
				s.Point = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "scale":
			if err := func() error {
				s.Scale = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "x_shift":
			if err := func() error {
				s.XShift = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "y_shift":
			if err := func() error {
				s.YShift = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Message) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Animation.Set {
		more.More()
		j.WriteObjectField("animation")
		s.Animation.WriteJSON(j)
	}
	if s.Audio.Set {
		more.More()
		j.WriteObjectField("audio")
		s.Audio.WriteJSON(j)
	}
	if s.AuthorSignature.Set {
		more.More()
		j.WriteObjectField("author_signature")
		s.AuthorSignature.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.ChannelChatCreated.Set {
		more.More()
		j.WriteObjectField("channel_chat_created")
		s.ChannelChatCreated.WriteJSON(j)
	}
	if s.Chat != nil {
		more.More()
		j.WriteObjectField("chat")
		s.Chat.WriteJSON(j)
	}
	if s.ConnectedWebsite.Set {
		more.More()
		j.WriteObjectField("connected_website")
		s.ConnectedWebsite.WriteJSON(j)
	}
	if s.Contact.Set {
		more.More()
		j.WriteObjectField("contact")
		s.Contact.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("date")
	j.WriteInt(s.Date)
	if s.DeleteChatPhoto.Set {
		more.More()
		j.WriteObjectField("delete_chat_photo")
		s.DeleteChatPhoto.WriteJSON(j)
	}
	if s.Dice.Set {
		more.More()
		j.WriteObjectField("dice")
		s.Dice.WriteJSON(j)
	}
	if s.Document.Set {
		more.More()
		j.WriteObjectField("document")
		s.Document.WriteJSON(j)
	}
	if s.EditDate.Set {
		more.More()
		j.WriteObjectField("edit_date")
		s.EditDate.WriteJSON(j)
	}
	if s.ForwardDate.Set {
		more.More()
		j.WriteObjectField("forward_date")
		s.ForwardDate.WriteJSON(j)
	}
	if s.ForwardFrom.Set {
		more.More()
		j.WriteObjectField("forward_from")
		s.ForwardFrom.WriteJSON(j)
	}
	if s.ForwardFromChat != nil {
		more.More()
		j.WriteObjectField("forward_from_chat")
		s.ForwardFromChat.WriteJSON(j)
	}
	if s.ForwardFromMessageID.Set {
		more.More()
		j.WriteObjectField("forward_from_message_id")
		s.ForwardFromMessageID.WriteJSON(j)
	}
	if s.ForwardSenderName.Set {
		more.More()
		j.WriteObjectField("forward_sender_name")
		s.ForwardSenderName.WriteJSON(j)
	}
	if s.ForwardSignature.Set {
		more.More()
		j.WriteObjectField("forward_signature")
		s.ForwardSignature.WriteJSON(j)
	}
	if s.From.Set {
		more.More()
		j.WriteObjectField("from")
		s.From.WriteJSON(j)
	}
	if s.Game.Set {
		more.More()
		j.WriteObjectField("game")
		s.Game.WriteJSON(j)
	}
	if s.GroupChatCreated.Set {
		more.More()
		j.WriteObjectField("group_chat_created")
		s.GroupChatCreated.WriteJSON(j)
	}
	if s.Invoice.Set {
		more.More()
		j.WriteObjectField("invoice")
		s.Invoice.WriteJSON(j)
	}
	if s.LeftChatMember.Set {
		more.More()
		j.WriteObjectField("left_chat_member")
		s.LeftChatMember.WriteJSON(j)
	}
	if s.Location.Set {
		more.More()
		j.WriteObjectField("location")
		s.Location.WriteJSON(j)
	}
	if s.MediaGroupID.Set {
		more.More()
		j.WriteObjectField("media_group_id")
		s.MediaGroupID.WriteJSON(j)
	}
	if s.MessageAutoDeleteTimerChanged.Set {
		more.More()
		j.WriteObjectField("message_auto_delete_timer_changed")
		s.MessageAutoDeleteTimerChanged.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	if s.MigrateFromChatID.Set {
		more.More()
		j.WriteObjectField("migrate_from_chat_id")
		s.MigrateFromChatID.WriteJSON(j)
	}
	if s.MigrateToChatID.Set {
		more.More()
		j.WriteObjectField("migrate_to_chat_id")
		s.MigrateToChatID.WriteJSON(j)
	}
	if s.NewChatTitle.Set {
		more.More()
		j.WriteObjectField("new_chat_title")
		s.NewChatTitle.WriteJSON(j)
	}
	if s.PassportData.Set {
		more.More()
		j.WriteObjectField("passport_data")
		s.PassportData.WriteJSON(j)
	}
	if s.PinnedMessage != nil {
		more.More()
		j.WriteObjectField("pinned_message")
		s.PinnedMessage.WriteJSON(j)
	}
	if s.Poll.Set {
		more.More()
		j.WriteObjectField("poll")
		s.Poll.WriteJSON(j)
	}
	if s.ProximityAlertTriggered.Set {
		more.More()
		j.WriteObjectField("proximity_alert_triggered")
		s.ProximityAlertTriggered.WriteJSON(j)
	}
	if s.ReplyToMessage != nil {
		more.More()
		j.WriteObjectField("reply_to_message")
		s.ReplyToMessage.WriteJSON(j)
	}
	if s.SenderChat != nil {
		more.More()
		j.WriteObjectField("sender_chat")
		s.SenderChat.WriteJSON(j)
	}
	if s.Sticker.Set {
		more.More()
		j.WriteObjectField("sticker")
		s.Sticker.WriteJSON(j)
	}
	if s.SuccessfulPayment.Set {
		more.More()
		j.WriteObjectField("successful_payment")
		s.SuccessfulPayment.WriteJSON(j)
	}
	if s.SupergroupChatCreated.Set {
		more.More()
		j.WriteObjectField("supergroup_chat_created")
		s.SupergroupChatCreated.WriteJSON(j)
	}
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}
	if s.Venue.Set {
		more.More()
		j.WriteObjectField("venue")
		s.Venue.WriteJSON(j)
	}
	if s.ViaBot.Set {
		more.More()
		j.WriteObjectField("via_bot")
		s.ViaBot.WriteJSON(j)
	}
	if s.Video.Set {
		more.More()
		j.WriteObjectField("video")
		s.Video.WriteJSON(j)
	}
	if s.VideoNote.Set {
		more.More()
		j.WriteObjectField("video_note")
		s.VideoNote.WriteJSON(j)
	}
	if s.Voice.Set {
		more.More()
		j.WriteObjectField("voice")
		s.Voice.WriteJSON(j)
	}
	if s.VoiceChatEnded.Set {
		more.More()
		j.WriteObjectField("voice_chat_ended")
		s.VoiceChatEnded.WriteJSON(j)
	}
	if s.VoiceChatScheduled.Set {
		more.More()
		j.WriteObjectField("voice_chat_scheduled")
		s.VoiceChatScheduled.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Message json value to io.Writer.
func (s Message) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Message json value from io.Reader.
func (s *Message) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Message from json stream.
func (s *Message) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "animation":
			if err := func() error {
				s.Animation.Reset()
				if err := s.Animation.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "audio":
			if err := func() error {
				s.Audio.Reset()
				if err := s.Audio.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "author_signature":
			if err := func() error {
				s.AuthorSignature.Reset()
				if err := s.AuthorSignature.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "channel_chat_created":
			if err := func() error {
				s.ChannelChatCreated.Reset()
				if err := s.ChannelChatCreated.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chat":
			if err := func() error {
				s.Chat = nil
				var elem Chat
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.Chat = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "connected_website":
			if err := func() error {
				s.ConnectedWebsite.Reset()
				if err := s.ConnectedWebsite.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "contact":
			if err := func() error {
				s.Contact.Reset()
				if err := s.Contact.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "date":
			if err := func() error {
				s.Date = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "delete_chat_photo":
			if err := func() error {
				s.DeleteChatPhoto.Reset()
				if err := s.DeleteChatPhoto.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "dice":
			if err := func() error {
				s.Dice.Reset()
				if err := s.Dice.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "document":
			if err := func() error {
				s.Document.Reset()
				if err := s.Document.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "edit_date":
			if err := func() error {
				s.EditDate.Reset()
				if err := s.EditDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_date":
			if err := func() error {
				s.ForwardDate.Reset()
				if err := s.ForwardDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_from":
			if err := func() error {
				s.ForwardFrom.Reset()
				if err := s.ForwardFrom.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_from_chat":
			if err := func() error {
				s.ForwardFromChat = nil
				var elem Chat
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.ForwardFromChat = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_from_message_id":
			if err := func() error {
				s.ForwardFromMessageID.Reset()
				if err := s.ForwardFromMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_sender_name":
			if err := func() error {
				s.ForwardSenderName.Reset()
				if err := s.ForwardSenderName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "forward_signature":
			if err := func() error {
				s.ForwardSignature.Reset()
				if err := s.ForwardSignature.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "from":
			if err := func() error {
				s.From.Reset()
				if err := s.From.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "game":
			if err := func() error {
				s.Game.Reset()
				if err := s.Game.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "group_chat_created":
			if err := func() error {
				s.GroupChatCreated.Reset()
				if err := s.GroupChatCreated.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "invoice":
			if err := func() error {
				s.Invoice.Reset()
				if err := s.Invoice.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "left_chat_member":
			if err := func() error {
				s.LeftChatMember.Reset()
				if err := s.LeftChatMember.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				s.Location.Reset()
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "media_group_id":
			if err := func() error {
				s.MediaGroupID.Reset()
				if err := s.MediaGroupID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_auto_delete_timer_changed":
			if err := func() error {
				s.MessageAutoDeleteTimerChanged.Reset()
				if err := s.MessageAutoDeleteTimerChanged.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "migrate_from_chat_id":
			if err := func() error {
				s.MigrateFromChatID.Reset()
				if err := s.MigrateFromChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "migrate_to_chat_id":
			if err := func() error {
				s.MigrateToChatID.Reset()
				if err := s.MigrateToChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "new_chat_title":
			if err := func() error {
				s.NewChatTitle.Reset()
				if err := s.NewChatTitle.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "passport_data":
			if err := func() error {
				s.PassportData.Reset()
				if err := s.PassportData.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pinned_message":
			if err := func() error {
				s.PinnedMessage = nil
				var elem Message
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.PinnedMessage = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "poll":
			if err := func() error {
				s.Poll.Reset()
				if err := s.Poll.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "proximity_alert_triggered":
			if err := func() error {
				s.ProximityAlertTriggered.Reset()
				if err := s.ProximityAlertTriggered.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message":
			if err := func() error {
				s.ReplyToMessage = nil
				var elem Message
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.ReplyToMessage = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sender_chat":
			if err := func() error {
				s.SenderChat = nil
				var elem Chat
				if err := func() error {
					if err := elem.ReadJSON(i); err != nil {
						return err
					}
					return i.Error
				}(); err != nil {
					return err
				}
				s.SenderChat = &elem
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sticker":
			if err := func() error {
				s.Sticker.Reset()
				if err := s.Sticker.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "successful_payment":
			if err := func() error {
				s.SuccessfulPayment.Reset()
				if err := s.SuccessfulPayment.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "supergroup_chat_created":
			if err := func() error {
				s.SupergroupChatCreated.Reset()
				if err := s.SupergroupChatCreated.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "venue":
			if err := func() error {
				s.Venue.Reset()
				if err := s.Venue.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "via_bot":
			if err := func() error {
				s.ViaBot.Reset()
				if err := s.ViaBot.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "video":
			if err := func() error {
				s.Video.Reset()
				if err := s.Video.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "video_note":
			if err := func() error {
				s.VideoNote.Reset()
				if err := s.VideoNote.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "voice":
			if err := func() error {
				s.Voice.Reset()
				if err := s.Voice.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "voice_chat_ended":
			if err := func() error {
				s.VoiceChatEnded.Reset()
				if err := s.VoiceChatEnded.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "voice_chat_scheduled":
			if err := func() error {
				s.VoiceChatScheduled.Reset()
				if err := s.VoiceChatScheduled.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s MessageAutoDeleteTimerChanged) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("message_auto_delete_time")
	j.WriteInt(s.MessageAutoDeleteTime)
	j.WriteObjectEnd()
}

// WriteJSONTo writes MessageAutoDeleteTimerChanged json value to io.Writer.
func (s MessageAutoDeleteTimerChanged) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MessageAutoDeleteTimerChanged json value from io.Reader.
func (s *MessageAutoDeleteTimerChanged) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MessageAutoDeleteTimerChanged from json stream.
func (s *MessageAutoDeleteTimerChanged) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message_auto_delete_time":
			if err := func() error {
				s.MessageAutoDeleteTime = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON writes json value of Animation to json stream.
func (o OptAnimation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Animation from json iterator.
func (o *OptAnimation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAnimation", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Audio to json stream.
func (o OptAudio) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Audio from json iterator.
func (o *OptAudio) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptAudio", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(j *json.Stream) {
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.BoolValue:
		o.Set = true
		o.Value = bool(i.ReadBool())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBool", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ChatLocation to json stream.
func (o OptChatLocation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ChatLocation from json iterator.
func (o *OptChatLocation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptChatLocation", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ChatPermissions to json stream.
func (o OptChatPermissions) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ChatPermissions from json iterator.
func (o *OptChatPermissions) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptChatPermissions", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ChatPhoto to json stream.
func (o OptChatPhoto) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ChatPhoto from json iterator.
func (o *OptChatPhoto) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptChatPhoto", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Contact to json stream.
func (o OptContact) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Contact from json iterator.
func (o *OptContact) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptContact", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Dice to json stream.
func (o OptDice) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Dice from json iterator.
func (o *OptDice) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptDice", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Document to json stream.
func (o OptDocument) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Document from json iterator.
func (o *OptDocument) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptDocument", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(j *json.Stream) {
	j.WriteFloat64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = float64(i.ReadFloat64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFloat64", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Game to json stream.
func (o OptGame) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Game from json iterator.
func (o *OptGame) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptGame", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int to json stream.
func (o OptInt) WriteJSON(j *json.Stream) {
	j.WriteInt(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptInt) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = int(i.ReadInt())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInt", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int64 to json stream.
func (o OptInt64) WriteJSON(j *json.Stream) {
	j.WriteInt64(int64(o.Value))
}

// ReadJSON reads json value of int64 from json iterator.
func (o *OptInt64) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = int64(i.ReadInt64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInt64", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Invoice to json stream.
func (o OptInvoice) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Invoice from json iterator.
func (o *OptInvoice) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInvoice", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Location to json stream.
func (o OptLocation) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Location from json iterator.
func (o *OptLocation) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptLocation", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MaskPosition to json stream.
func (o OptMaskPosition) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MaskPosition from json iterator.
func (o *OptMaskPosition) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMaskPosition", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Message to json stream.
func (o OptMessage) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Message from json iterator.
func (o *OptMessage) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMessage", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MessageAutoDeleteTimerChanged to json stream.
func (o OptMessageAutoDeleteTimerChanged) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MessageAutoDeleteTimerChanged from json iterator.
func (o *OptMessageAutoDeleteTimerChanged) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMessageAutoDeleteTimerChanged", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of OrderInfo to json stream.
func (o OptOrderInfo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of OrderInfo from json iterator.
func (o *OptOrderInfo) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptOrderInfo", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PassportData to json stream.
func (o OptPassportData) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PassportData from json iterator.
func (o *OptPassportData) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPassportData", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of PhotoSize to json stream.
func (o OptPhotoSize) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of PhotoSize from json iterator.
func (o *OptPhotoSize) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPhotoSize", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Poll to json stream.
func (o OptPoll) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Poll from json iterator.
func (o *OptPoll) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptPoll", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ProximityAlertTriggered to json stream.
func (o OptProximityAlertTriggered) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ProximityAlertTriggered from json iterator.
func (o *OptProximityAlertTriggered) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptProximityAlertTriggered", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Response to json stream.
func (o OptResponse) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Response from json iterator.
func (o *OptResponse) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptResponse", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of ShippingAddress to json stream.
func (o OptShippingAddress) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of ShippingAddress from json iterator.
func (o *OptShippingAddress) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptShippingAddress", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Sticker to json stream.
func (o OptSticker) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Sticker from json iterator.
func (o *OptSticker) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptSticker", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = string(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptString", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of SuccessfulPayment to json stream.
func (o OptSuccessfulPayment) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of SuccessfulPayment from json iterator.
func (o *OptSuccessfulPayment) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptSuccessfulPayment", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of url.URL to json stream.
func (o OptURL) WriteJSON(j *json.Stream) {
	json.WriteURI(j, o.Value)
}

// ReadJSON reads json value of url.URL from json iterator.
func (o *OptURL) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		v, err := json.ReadURI(i)
		if err != nil {
			return err
		}
		o.Value = v
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptURL", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of User to json stream.
func (o OptUser) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of User from json iterator.
func (o *OptUser) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptUser", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Venue to json stream.
func (o OptVenue) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Venue from json iterator.
func (o *OptVenue) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVenue", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Video to json stream.
func (o OptVideo) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Video from json iterator.
func (o *OptVideo) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVideo", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of VideoNote to json stream.
func (o OptVideoNote) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of VideoNote from json iterator.
func (o *OptVideoNote) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVideoNote", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of Voice to json stream.
func (o OptVoice) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of Voice from json iterator.
func (o *OptVoice) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVoice", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of VoiceChatEnded to json stream.
func (o OptVoiceChatEnded) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of VoiceChatEnded from json iterator.
func (o *OptVoiceChatEnded) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVoiceChatEnded", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of VoiceChatScheduled to json stream.
func (o OptVoiceChatScheduled) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of VoiceChatScheduled from json iterator.
func (o *OptVoiceChatScheduled) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptVoiceChatScheduled", i.WhatIsNext())
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s OrderInfo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		j.WriteObjectField("email")
		s.Email.WriteJSON(j)
	}
	if s.Name.Set {
		more.More()
		j.WriteObjectField("name")
		s.Name.WriteJSON(j)
	}
	if s.PhoneNumber.Set {
		more.More()
		j.WriteObjectField("phone_number")
		s.PhoneNumber.WriteJSON(j)
	}
	if s.ShippingAddress.Set {
		more.More()
		j.WriteObjectField("shipping_address")
		s.ShippingAddress.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes OrderInfo json value to io.Writer.
func (s OrderInfo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads OrderInfo json value from io.Reader.
func (s *OrderInfo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads OrderInfo from json stream.
func (s *OrderInfo) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "email":
			if err := func() error {
				s.Email.Reset()
				if err := s.Email.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phone_number":
			if err := func() error {
				s.PhoneNumber.Reset()
				if err := s.PhoneNumber.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_address":
			if err := func() error {
				s.ShippingAddress.Reset()
				if err := s.ShippingAddress.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PassportData) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("credentials")
	s.Credentials.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes PassportData json value to io.Writer.
func (s PassportData) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PassportData json value from io.Reader.
func (s *PassportData) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PassportData from json stream.
func (s *PassportData) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "credentials":
			if err := func() error {
				if err := s.Credentials.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PhotoSize) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("height")
	j.WriteInt(s.Height)
	more.More()
	j.WriteObjectField("width")
	j.WriteInt(s.Width)
	j.WriteObjectEnd()
}

// WriteJSONTo writes PhotoSize json value to io.Writer.
func (s PhotoSize) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PhotoSize json value from io.Reader.
func (s *PhotoSize) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PhotoSize from json stream.
func (s *PhotoSize) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Poll) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("allows_multiple_answers")
	j.WriteBool(s.AllowsMultipleAnswers)
	if s.CloseDate.Set {
		more.More()
		j.WriteObjectField("close_date")
		s.CloseDate.WriteJSON(j)
	}
	if s.CorrectOptionID.Set {
		more.More()
		j.WriteObjectField("correct_option_id")
		s.CorrectOptionID.WriteJSON(j)
	}
	if s.Explanation.Set {
		more.More()
		j.WriteObjectField("explanation")
		s.Explanation.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("id")
	j.WriteString(s.ID)
	more.More()
	j.WriteObjectField("is_anonymous")
	j.WriteBool(s.IsAnonymous)
	more.More()
	j.WriteObjectField("is_closed")
	j.WriteBool(s.IsClosed)
	if s.OpenPeriod.Set {
		more.More()
		j.WriteObjectField("open_period")
		s.OpenPeriod.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("question")
	j.WriteString(s.Question)
	more.More()
	j.WriteObjectField("total_voter_count")
	j.WriteInt(s.TotalVoterCount)
	more.More()
	j.WriteObjectField("type")
	j.WriteString(s.Type)
	j.WriteObjectEnd()
}

// WriteJSONTo writes Poll json value to io.Writer.
func (s Poll) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Poll json value from io.Reader.
func (s *Poll) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Poll from json stream.
func (s *Poll) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allows_multiple_answers":
			if err := func() error {
				s.AllowsMultipleAnswers = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "close_date":
			if err := func() error {
				s.CloseDate.Reset()
				if err := s.CloseDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "correct_option_id":
			if err := func() error {
				s.CorrectOptionID.Reset()
				if err := s.CorrectOptionID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "explanation":
			if err := func() error {
				s.Explanation.Reset()
				if err := s.Explanation.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_anonymous":
			if err := func() error {
				s.IsAnonymous = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_closed":
			if err := func() error {
				s.IsClosed = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "open_period":
			if err := func() error {
				s.OpenPeriod.Reset()
				if err := s.OpenPeriod.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "question":
			if err := func() error {
				s.Question = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "total_voter_count":
			if err := func() error {
				s.TotalVoterCount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ProximityAlertTriggered) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("distance")
	j.WriteInt(s.Distance)
	more.More()
	j.WriteObjectField("traveler")
	s.Traveler.WriteJSON(j)
	more.More()
	j.WriteObjectField("watcher")
	s.Watcher.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes ProximityAlertTriggered json value to io.Writer.
func (s ProximityAlertTriggered) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ProximityAlertTriggered json value from io.Reader.
func (s *ProximityAlertTriggered) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ProximityAlertTriggered from json stream.
func (s *ProximityAlertTriggered) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "distance":
			if err := func() error {
				s.Distance = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "traveler":
			if err := func() error {
				if err := s.Traveler.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "watcher":
			if err := func() error {
				if err := s.Watcher.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Response) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MigrateToChatID.Set {
		more.More()
		j.WriteObjectField("migrate_to_chat_id")
		s.MigrateToChatID.WriteJSON(j)
	}
	if s.RetryAfter.Set {
		more.More()
		j.WriteObjectField("retry_after")
		s.RetryAfter.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Response json value to io.Writer.
func (s Response) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Response json value from io.Reader.
func (s *Response) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Response from json stream.
func (s *Response) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "migrate_to_chat_id":
			if err := func() error {
				s.MigrateToChatID.Reset()
				if err := s.MigrateToChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "retry_after":
			if err := func() error {
				s.RetryAfter.Reset()
				if err := s.RetryAfter.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Result) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	if s.Result.Set {
		more.More()
		j.WriteObjectField("result")
		s.Result.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Result json value to io.Writer.
func (s Result) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Result json value from io.Reader.
func (s *Result) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Result from json stream.
func (s *Result) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ResultMsg) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	if s.Result.Set {
		more.More()
		j.WriteObjectField("result")
		s.Result.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes ResultMsg json value to io.Writer.
func (s ResultMsg) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ResultMsg json value from io.Reader.
func (s *ResultMsg) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ResultMsg from json stream.
func (s *ResultMsg) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ResultUsr) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	if s.Result.Set {
		more.More()
		j.WriteObjectField("result")
		s.Result.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes ResultUsr json value to io.Writer.
func (s ResultUsr) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ResultUsr json value from io.Reader.
func (s *ResultUsr) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ResultUsr from json stream.
func (s *ResultUsr) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "result":
			if err := func() error {
				s.Result.Reset()
				if err := s.Result.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ShippingAddress) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("city")
	j.WriteString(s.City)
	more.More()
	j.WriteObjectField("country_code")
	j.WriteString(s.CountryCode)
	more.More()
	j.WriteObjectField("post_code")
	j.WriteString(s.PostCode)
	more.More()
	j.WriteObjectField("state")
	j.WriteString(s.State)
	more.More()
	j.WriteObjectField("street_line1")
	j.WriteString(s.StreetLine1)
	more.More()
	j.WriteObjectField("street_line2")
	j.WriteString(s.StreetLine2)
	j.WriteObjectEnd()
}

// WriteJSONTo writes ShippingAddress json value to io.Writer.
func (s ShippingAddress) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ShippingAddress json value from io.Reader.
func (s *ShippingAddress) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ShippingAddress from json stream.
func (s *ShippingAddress) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "city":
			if err := func() error {
				s.City = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "country_code":
			if err := func() error {
				s.CountryCode = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "post_code":
			if err := func() error {
				s.PostCode = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "state":
			if err := func() error {
				s.State = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "street_line1":
			if err := func() error {
				s.StreetLine1 = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "street_line2":
			if err := func() error {
				s.StreetLine2 = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Sticker) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Emoji.Set {
		more.More()
		j.WriteObjectField("emoji")
		s.Emoji.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("height")
	j.WriteInt(s.Height)
	more.More()
	j.WriteObjectField("is_animated")
	j.WriteBool(s.IsAnimated)
	if s.MaskPosition.Set {
		more.More()
		j.WriteObjectField("mask_position")
		s.MaskPosition.WriteJSON(j)
	}
	if s.SetName.Set {
		more.More()
		j.WriteObjectField("set_name")
		s.SetName.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("width")
	j.WriteInt(s.Width)
	j.WriteObjectEnd()
}

// WriteJSONTo writes Sticker json value to io.Writer.
func (s Sticker) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Sticker json value from io.Reader.
func (s *Sticker) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Sticker from json stream.
func (s *Sticker) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "emoji":
			if err := func() error {
				s.Emoji.Reset()
				if err := s.Emoji.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_animated":
			if err := func() error {
				s.IsAnimated = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mask_position":
			if err := func() error {
				s.MaskPosition.Reset()
				if err := s.MaskPosition.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "set_name":
			if err := func() error {
				s.SetName.Reset()
				if err := s.SetName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SuccessfulPayment) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("invoice_payload")
	j.WriteString(s.InvoicePayload)
	if s.OrderInfo.Set {
		more.More()
		j.WriteObjectField("order_info")
		s.OrderInfo.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("provider_payment_charge_id")
	j.WriteString(s.ProviderPaymentChargeID)
	if s.ShippingOptionID.Set {
		more.More()
		j.WriteObjectField("shipping_option_id")
		s.ShippingOptionID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("telegram_payment_charge_id")
	j.WriteString(s.TelegramPaymentChargeID)
	more.More()
	j.WriteObjectField("total_amount")
	j.WriteInt(s.TotalAmount)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SuccessfulPayment json value to io.Writer.
func (s SuccessfulPayment) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SuccessfulPayment json value from io.Reader.
func (s *SuccessfulPayment) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SuccessfulPayment from json stream.
func (s *SuccessfulPayment) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "currency":
			if err := func() error {
				s.Currency = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "invoice_payload":
			if err := func() error {
				s.InvoicePayload = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "order_info":
			if err := func() error {
				s.OrderInfo.Reset()
				if err := s.OrderInfo.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_payment_charge_id":
			if err := func() error {
				s.ProviderPaymentChargeID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_option_id":
			if err := func() error {
				s.ShippingOptionID.Reset()
				if err := s.ShippingOptionID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "telegram_payment_charge_id":
			if err := func() error {
				s.TelegramPaymentChargeID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "total_amount":
			if err := func() error {
				s.TotalAmount = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s User) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanJoinGroups.Set {
		more.More()
		j.WriteObjectField("can_join_groups")
		s.CanJoinGroups.WriteJSON(j)
	}
	if s.CanReadAllGroupMessages.Set {
		more.More()
		j.WriteObjectField("can_read_all_group_messages")
		s.CanReadAllGroupMessages.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("first_name")
	j.WriteString(s.FirstName)
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)
	more.More()
	j.WriteObjectField("is_bot")
	j.WriteBool(s.IsBot)
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	if s.SupportsInlineQueries.Set {
		more.More()
		j.WriteObjectField("supports_inline_queries")
		s.SupportsInlineQueries.WriteJSON(j)
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes User json value to io.Writer.
func (s User) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads User json value from io.Reader.
func (s *User) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads User from json stream.
func (s *User) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_join_groups":
			if err := func() error {
				s.CanJoinGroups.Reset()
				if err := s.CanJoinGroups.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_read_all_group_messages":
			if err := func() error {
				s.CanReadAllGroupMessages.Reset()
				if err := s.CanReadAllGroupMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "first_name":
			if err := func() error {
				s.FirstName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "id":
			if err := func() error {
				s.ID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_bot":
			if err := func() error {
				s.IsBot = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "language_code":
			if err := func() error {
				s.LanguageCode.Reset()
				if err := s.LanguageCode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "supports_inline_queries":
			if err := func() error {
				s.SupportsInlineQueries.Reset()
				if err := s.SupportsInlineQueries.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "username":
			if err := func() error {
				s.Username.Reset()
				if err := s.Username.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Venue) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("address")
	j.WriteString(s.Address)
	if s.FoursquareID.Set {
		more.More()
		j.WriteObjectField("foursquare_id")
		s.FoursquareID.WriteJSON(j)
	}
	if s.FoursquareType.Set {
		more.More()
		j.WriteObjectField("foursquare_type")
		s.FoursquareType.WriteJSON(j)
	}
	if s.GooglePlaceID.Set {
		more.More()
		j.WriteObjectField("google_place_id")
		s.GooglePlaceID.WriteJSON(j)
	}
	if s.GooglePlaceType.Set {
		more.More()
		j.WriteObjectField("google_place_type")
		s.GooglePlaceType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("location")
	s.Location.WriteJSON(j)
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// WriteJSONTo writes Venue json value to io.Writer.
func (s Venue) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Venue json value from io.Reader.
func (s *Venue) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Venue from json stream.
func (s *Venue) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "address":
			if err := func() error {
				s.Address = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "foursquare_id":
			if err := func() error {
				s.FoursquareID.Reset()
				if err := s.FoursquareID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "foursquare_type":
			if err := func() error {
				s.FoursquareType.Reset()
				if err := s.FoursquareType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "google_place_id":
			if err := func() error {
				s.GooglePlaceID.Reset()
				if err := s.GooglePlaceID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "google_place_type":
			if err := func() error {
				s.GooglePlaceType.Reset()
				if err := s.GooglePlaceType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "location":
			if err := func() error {
				if err := s.Location.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Video) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileName.Set {
		more.More()
		j.WriteObjectField("file_name")
		s.FileName.WriteJSON(j)
	}
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("height")
	j.WriteInt(s.Height)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("width")
	j.WriteInt(s.Width)
	j.WriteObjectEnd()
}

// WriteJSONTo writes Video json value to io.Writer.
func (s Video) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Video json value from io.Reader.
func (s *Video) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Video from json stream.
func (s *Video) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_name":
			if err := func() error {
				s.FileName.Reset()
				if err := s.FileName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s VideoNote) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	more.More()
	j.WriteObjectField("length")
	j.WriteInt(s.Length)
	if s.Thumb.Set {
		more.More()
		j.WriteObjectField("thumb")
		s.Thumb.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes VideoNote json value to io.Writer.
func (s VideoNote) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads VideoNote json value from io.Reader.
func (s *VideoNote) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads VideoNote from json stream.
func (s *VideoNote) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "length":
			if err := func() error {
				s.Length = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "thumb":
			if err := func() error {
				s.Thumb.Reset()
				if err := s.Thumb.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s Voice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	if s.FileSize.Set {
		more.More()
		j.WriteObjectField("file_size")
		s.FileSize.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("file_unique_id")
	j.WriteString(s.FileUniqueID)
	if s.MimeType.Set {
		more.More()
		j.WriteObjectField("mime_type")
		s.MimeType.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Voice json value to io.Writer.
func (s Voice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Voice json value from io.Reader.
func (s *Voice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Voice from json stream.
func (s *Voice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_size":
			if err := func() error {
				s.FileSize.Reset()
				if err := s.FileSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "file_unique_id":
			if err := func() error {
				s.FileUniqueID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mime_type":
			if err := func() error {
				s.MimeType.Reset()
				if err := s.MimeType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s VoiceChatEnded) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("duration")
	j.WriteInt(s.Duration)
	j.WriteObjectEnd()
}

// WriteJSONTo writes VoiceChatEnded json value to io.Writer.
func (s VoiceChatEnded) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads VoiceChatEnded json value from io.Reader.
func (s *VoiceChatEnded) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads VoiceChatEnded from json stream.
func (s *VoiceChatEnded) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "duration":
			if err := func() error {
				s.Duration = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s VoiceChatParticipantsInvited) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes VoiceChatParticipantsInvited json value to io.Writer.
func (s VoiceChatParticipantsInvited) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads VoiceChatParticipantsInvited json value from io.Reader.
func (s *VoiceChatParticipantsInvited) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads VoiceChatParticipantsInvited from json stream.
func (s *VoiceChatParticipantsInvited) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s VoiceChatScheduled) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("start_date")
	j.WriteInt(s.StartDate)
	j.WriteObjectEnd()
}

// WriteJSONTo writes VoiceChatScheduled json value to io.Writer.
func (s VoiceChatScheduled) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads VoiceChatScheduled json value from io.Reader.
func (s *VoiceChatScheduled) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads VoiceChatScheduled from json stream.
func (s *VoiceChatScheduled) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "start_date":
			if err := func() error {
				s.StartDate = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s VoiceChatStarted) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes VoiceChatStarted json value to io.Writer.
func (s VoiceChatStarted) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads VoiceChatStarted json value from io.Reader.
func (s *VoiceChatStarted) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads VoiceChatStarted from json stream.
func (s *VoiceChatStarted) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AddStickerToSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("emojis")
	j.WriteString(s.Emojis)
	if s.MaskPosition.Set {
		more.More()
		j.WriteObjectField("mask_position")
		s.MaskPosition.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TgsSticker.Set {
		more.More()
		j.WriteObjectField("tgs_sticker")
		s.TgsSticker.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes AddStickerToSet json value to io.Writer.
func (s AddStickerToSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AddStickerToSet json value from io.Reader.
func (s *AddStickerToSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AddStickerToSet from json stream.
func (s *AddStickerToSet) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "emojis":
			if err := func() error {
				s.Emojis = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mask_position":
			if err := func() error {
				s.MaskPosition.Reset()
				if err := s.MaskPosition.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tgs_sticker":
			if err := func() error {
				s.TgsSticker.Reset()
				if err := s.TgsSticker.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerCallbackQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CacheTime.Set {
		more.More()
		j.WriteObjectField("cache_time")
		s.CacheTime.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("callback_query_id")
	j.WriteString(s.CallbackQueryID)
	if s.ShowAlert.Set {
		more.More()
		j.WriteObjectField("show_alert")
		s.ShowAlert.WriteJSON(j)
	}
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes AnswerCallbackQuery json value to io.Writer.
func (s AnswerCallbackQuery) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AnswerCallbackQuery json value from io.Reader.
func (s *AnswerCallbackQuery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AnswerCallbackQuery from json stream.
func (s *AnswerCallbackQuery) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cache_time":
			if err := func() error {
				s.CacheTime.Reset()
				if err := s.CacheTime.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "callback_query_id":
			if err := func() error {
				s.CallbackQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "show_alert":
			if err := func() error {
				s.ShowAlert.Reset()
				if err := s.ShowAlert.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text.Reset()
				if err := s.Text.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				s.URL.Reset()
				if err := s.URL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerInlineQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CacheTime.Set {
		more.More()
		j.WriteObjectField("cache_time")
		s.CacheTime.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("inline_query_id")
	j.WriteString(s.InlineQueryID)
	if s.IsPersonal.Set {
		more.More()
		j.WriteObjectField("is_personal")
		s.IsPersonal.WriteJSON(j)
	}
	if s.NextOffset.Set {
		more.More()
		j.WriteObjectField("next_offset")
		s.NextOffset.WriteJSON(j)
	}
	if s.SwitchPmParameter.Set {
		more.More()
		j.WriteObjectField("switch_pm_parameter")
		s.SwitchPmParameter.WriteJSON(j)
	}
	if s.SwitchPmText.Set {
		more.More()
		j.WriteObjectField("switch_pm_text")
		s.SwitchPmText.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes AnswerInlineQuery json value to io.Writer.
func (s AnswerInlineQuery) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AnswerInlineQuery json value from io.Reader.
func (s *AnswerInlineQuery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AnswerInlineQuery from json stream.
func (s *AnswerInlineQuery) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cache_time":
			if err := func() error {
				s.CacheTime.Reset()
				if err := s.CacheTime.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_query_id":
			if err := func() error {
				s.InlineQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_personal":
			if err := func() error {
				s.IsPersonal.Reset()
				if err := s.IsPersonal.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "next_offset":
			if err := func() error {
				s.NextOffset.Reset()
				if err := s.NextOffset.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "switch_pm_parameter":
			if err := func() error {
				s.SwitchPmParameter.Reset()
				if err := s.SwitchPmParameter.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "switch_pm_text":
			if err := func() error {
				s.SwitchPmText.Reset()
				if err := s.SwitchPmText.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerPreCheckoutQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("pre_checkout_query_id")
	j.WriteString(s.PreCheckoutQueryID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes AnswerPreCheckoutQuery json value to io.Writer.
func (s AnswerPreCheckoutQuery) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AnswerPreCheckoutQuery json value from io.Reader.
func (s *AnswerPreCheckoutQuery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AnswerPreCheckoutQuery from json stream.
func (s *AnswerPreCheckoutQuery) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "pre_checkout_query_id":
			if err := func() error {
				s.PreCheckoutQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerShippingQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("shipping_query_id")
	j.WriteString(s.ShippingQueryID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes AnswerShippingQuery json value to io.Writer.
func (s AnswerShippingQuery) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AnswerShippingQuery json value from io.Reader.
func (s *AnswerShippingQuery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AnswerShippingQuery from json stream.
func (s *AnswerShippingQuery) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			if err := func() error {
				s.ErrorMessage.Reset()
				if err := s.ErrorMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ok":
			if err := func() error {
				s.Ok = bool(i.ReadBool())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "shipping_query_id":
			if err := func() error {
				s.ShippingQueryID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BanChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RevokeMessages.Set {
		more.More()
		j.WriteObjectField("revoke_messages")
		s.RevokeMessages.WriteJSON(j)
	}
	if s.UntilDate.Set {
		more.More()
		j.WriteObjectField("until_date")
		s.UntilDate.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes BanChatMember json value to io.Writer.
func (s BanChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BanChatMember json value from io.Reader.
func (s *BanChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BanChatMember from json stream.
func (s *BanChatMember) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "revoke_messages":
			if err := func() error {
				s.RevokeMessages.Reset()
				if err := s.RevokeMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "until_date":
			if err := func() error {
				s.UntilDate.Reset()
				if err := s.UntilDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CopyMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes CopyMessage json value to io.Writer.
func (s CopyMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CopyMessage json value from io.Reader.
func (s *CopyMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CopyMessage from json stream.
func (s *CopyMessage) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CreateChatInviteLink) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ExpireDate.Set {
		more.More()
		j.WriteObjectField("expire_date")
		s.ExpireDate.WriteJSON(j)
	}
	if s.MemberLimit.Set {
		more.More()
		j.WriteObjectField("member_limit")
		s.MemberLimit.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes CreateChatInviteLink json value to io.Writer.
func (s CreateChatInviteLink) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CreateChatInviteLink json value from io.Reader.
func (s *CreateChatInviteLink) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CreateChatInviteLink from json stream.
func (s *CreateChatInviteLink) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expire_date":
			if err := func() error {
				s.ExpireDate.Reset()
				if err := s.ExpireDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "member_limit":
			if err := func() error {
				s.MemberLimit.Reset()
				if err := s.MemberLimit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CreateNewStickerSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainsMasks.Set {
		more.More()
		j.WriteObjectField("contains_masks")
		s.ContainsMasks.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("emojis")
	j.WriteString(s.Emojis)
	if s.MaskPosition.Set {
		more.More()
		j.WriteObjectField("mask_position")
		s.MaskPosition.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TgsSticker.Set {
		more.More()
		j.WriteObjectField("tgs_sticker")
		s.TgsSticker.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes CreateNewStickerSet json value to io.Writer.
func (s CreateNewStickerSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CreateNewStickerSet json value from io.Reader.
func (s *CreateNewStickerSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CreateNewStickerSet from json stream.
func (s *CreateNewStickerSet) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "contains_masks":
			if err := func() error {
				s.ContainsMasks.Reset()
				if err := s.ContainsMasks.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "emojis":
			if err := func() error {
				s.Emojis = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "mask_position":
			if err := func() error {
				s.MaskPosition.Reset()
				if err := s.MaskPosition.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "name":
			if err := func() error {
				s.Name = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "tgs_sticker":
			if err := func() error {
				s.TgsSticker.Reset()
				if err := s.TgsSticker.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteChatPhoto) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteChatPhoto json value to io.Writer.
func (s DeleteChatPhoto) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteChatPhoto json value from io.Reader.
func (s *DeleteChatPhoto) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteChatPhoto from json stream.
func (s *DeleteChatPhoto) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteChatStickerSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteChatStickerSet json value to io.Writer.
func (s DeleteChatStickerSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteChatStickerSet json value from io.Reader.
func (s *DeleteChatStickerSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteChatStickerSet from json stream.
func (s *DeleteChatStickerSet) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteMessage json value to io.Writer.
func (s DeleteMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteMessage json value from io.Reader.
func (s *DeleteMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteMessage from json stream.
func (s *DeleteMessage) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message_id":
			if err := func() error {
				s.MessageID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteMyCommands) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteMyCommands json value to io.Writer.
func (s DeleteMyCommands) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteMyCommands json value from io.Reader.
func (s *DeleteMyCommands) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteMyCommands from json stream.
func (s *DeleteMyCommands) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "language_code":
			if err := func() error {
				s.LanguageCode.Reset()
				if err := s.LanguageCode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteStickerFromSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteStickerFromSet json value to io.Writer.
func (s DeleteStickerFromSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteStickerFromSet json value from io.Reader.
func (s *DeleteStickerFromSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteStickerFromSet from json stream.
func (s *DeleteStickerFromSet) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sticker":
			if err := func() error {
				s.Sticker = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DropPendingUpdates.Set {
		more.More()
		j.WriteObjectField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteWebhook json value to io.Writer.
func (s DeleteWebhook) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteWebhook json value from io.Reader.
func (s *DeleteWebhook) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteWebhook from json stream.
func (s *DeleteWebhook) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "drop_pending_updates":
			if err := func() error {
				s.DropPendingUpdates.Reset()
				if err := s.DropPendingUpdates.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditChatInviteLink) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ExpireDate.Set {
		more.More()
		j.WriteObjectField("expire_date")
		s.ExpireDate.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("invite_link")
	j.WriteString(s.InviteLink)
	if s.MemberLimit.Set {
		more.More()
		j.WriteObjectField("member_limit")
		s.MemberLimit.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditChatInviteLink json value to io.Writer.
func (s EditChatInviteLink) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditChatInviteLink json value from io.Reader.
func (s *EditChatInviteLink) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditChatInviteLink from json stream.
func (s *EditChatInviteLink) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expire_date":
			if err := func() error {
				s.ExpireDate.Reset()
				if err := s.ExpireDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "invite_link":
			if err := func() error {
				s.InviteLink = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "member_limit":
			if err := func() error {
				s.MemberLimit.Reset()
				if err := s.MemberLimit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageCaption) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageCaption json value to io.Writer.
func (s EditMessageCaption) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageCaption json value from io.Reader.
func (s *EditMessageCaption) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageCaption from json stream.
func (s *EditMessageCaption) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageLiveLocation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Heading.Set {
		more.More()
		j.WriteObjectField("heading")
		s.Heading.WriteJSON(j)
	}
	if s.HorizontalAccuracy.Set {
		more.More()
		j.WriteObjectField("horizontal_accuracy")
		s.HorizontalAccuracy.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("latitude")
	j.WriteFloat64(s.Latitude)
	more.More()
	j.WriteObjectField("longitude")
	j.WriteFloat64(s.Longitude)
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	if s.ProximityAlertRadius.Set {
		more.More()
		j.WriteObjectField("proximity_alert_radius")
		s.ProximityAlertRadius.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageLiveLocation json value to io.Writer.
func (s EditMessageLiveLocation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageLiveLocation json value from io.Reader.
func (s *EditMessageLiveLocation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageLiveLocation from json stream.
func (s *EditMessageLiveLocation) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "heading":
			if err := func() error {
				s.Heading.Reset()
				if err := s.Heading.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "horizontal_accuracy":
			if err := func() error {
				s.HorizontalAccuracy.Reset()
				if err := s.HorizontalAccuracy.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "latitude":
			if err := func() error {
				s.Latitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "longitude":
			if err := func() error {
				s.Longitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "proximity_alert_radius":
			if err := func() error {
				s.ProximityAlertRadius.Reset()
				if err := s.ProximityAlertRadius.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageMedia) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageMedia json value to io.Writer.
func (s EditMessageMedia) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageMedia json value from io.Reader.
func (s *EditMessageMedia) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageMedia from json stream.
func (s *EditMessageMedia) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageReplyMarkup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageReplyMarkup json value to io.Writer.
func (s EditMessageReplyMarkup) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageReplyMarkup json value from io.Reader.
func (s *EditMessageReplyMarkup) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageReplyMarkup from json stream.
func (s *EditMessageReplyMarkup) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageText) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DisableWebPagePreview.Set {
		more.More()
		j.WriteObjectField("disable_web_page_preview")
		s.DisableWebPagePreview.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("text")
	j.WriteString(s.Text)
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageText json value to io.Writer.
func (s EditMessageText) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageText json value from io.Reader.
func (s *EditMessageText) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageText from json stream.
func (s *EditMessageText) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "disable_web_page_preview":
			if err := func() error {
				s.DisableWebPagePreview.Reset()
				if err := s.DisableWebPagePreview.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ExportChatInviteLink) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes ExportChatInviteLink json value to io.Writer.
func (s ExportChatInviteLink) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ExportChatInviteLink json value from io.Reader.
func (s *ExportChatInviteLink) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ExportChatInviteLink from json stream.
func (s *ExportChatInviteLink) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s ForwardMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes ForwardMessage json value to io.Writer.
func (s ForwardMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ForwardMessage json value from io.Reader.
func (s *ForwardMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ForwardMessage from json stream.
func (s *ForwardMessage) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetChat) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetChat json value to io.Writer.
func (s GetChat) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetChat json value from io.Reader.
func (s *GetChat) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetChat from json stream.
func (s *GetChat) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetChatAdministrators) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetChatAdministrators json value to io.Writer.
func (s GetChatAdministrators) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetChatAdministrators json value from io.Reader.
func (s *GetChatAdministrators) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetChatAdministrators from json stream.
func (s *GetChatAdministrators) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetChatMember json value to io.Writer.
func (s GetChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetChatMember json value from io.Reader.
func (s *GetChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetChatMember from json stream.
func (s *GetChatMember) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetChatMemberCount) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetChatMemberCount json value to io.Writer.
func (s GetChatMemberCount) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetChatMemberCount json value from io.Reader.
func (s *GetChatMemberCount) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetChatMemberCount from json stream.
func (s *GetChatMemberCount) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetFile json value to io.Writer.
func (s GetFile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetFile json value from io.Reader.
func (s *GetFile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetFile from json stream.
func (s *GetFile) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			if err := func() error {
				s.FileID = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetGameHighScores) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetGameHighScores json value to io.Writer.
func (s GetGameHighScores) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetGameHighScores json value from io.Reader.
func (s *GetGameHighScores) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetGameHighScores from json stream.
func (s *GetGameHighScores) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			if err := func() error {
				s.ChatID.Reset()
				if err := s.ChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetMyCommands) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetMyCommands json value to io.Writer.
func (s GetMyCommands) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetMyCommands json value from io.Reader.
func (s *GetMyCommands) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetMyCommands from json stream.
func (s *GetMyCommands) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "language_code":
			if err := func() error {
				s.LanguageCode.Reset()
				if err := s.LanguageCode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetStickerSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetStickerSet json value to io.Writer.
func (s GetStickerSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetStickerSet json value from io.Reader.
func (s *GetStickerSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetStickerSet from json stream.
func (s *GetStickerSet) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUpdates) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	if s.Timeout.Set {
		more.More()
		j.WriteObjectField("timeout")
		s.Timeout.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetUpdates json value to io.Writer.
func (s GetUpdates) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetUpdates json value from io.Reader.
func (s *GetUpdates) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetUpdates from json stream.
func (s *GetUpdates) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset.Reset()
				if err := s.Offset.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "timeout":
			if err := func() error {
				s.Timeout.Reset()
				if err := s.Timeout.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUserProfilePhotos) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetUserProfilePhotos json value to io.Writer.
func (s GetUserProfilePhotos) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetUserProfilePhotos json value from io.Reader.
func (s *GetUserProfilePhotos) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetUserProfilePhotos from json stream.
func (s *GetUserProfilePhotos) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limit":
			if err := func() error {
				s.Limit.Reset()
				if err := s.Limit.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "offset":
			if err := func() error {
				s.Offset.Reset()
				if err := s.Offset.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s LeaveChat) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes LeaveChat json value to io.Writer.
func (s LeaveChat) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads LeaveChat json value from io.Reader.
func (s *LeaveChat) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads LeaveChat from json stream.
func (s *LeaveChat) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PinChatMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes PinChatMessage json value to io.Writer.
func (s PinChatMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PinChatMessage json value from io.Reader.
func (s *PinChatMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PinChatMessage from json stream.
func (s *PinChatMessage) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PromoteChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanChangeInfo.Set {
		more.More()
		j.WriteObjectField("can_change_info")
		s.CanChangeInfo.WriteJSON(j)
	}
	if s.CanDeleteMessages.Set {
		more.More()
		j.WriteObjectField("can_delete_messages")
		s.CanDeleteMessages.WriteJSON(j)
	}
	if s.CanEditMessages.Set {
		more.More()
		j.WriteObjectField("can_edit_messages")
		s.CanEditMessages.WriteJSON(j)
	}
	if s.CanInviteUsers.Set {
		more.More()
		j.WriteObjectField("can_invite_users")
		s.CanInviteUsers.WriteJSON(j)
	}
	if s.CanManageChat.Set {
		more.More()
		j.WriteObjectField("can_manage_chat")
		s.CanManageChat.WriteJSON(j)
	}
	if s.CanManageVoiceChats.Set {
		more.More()
		j.WriteObjectField("can_manage_voice_chats")
		s.CanManageVoiceChats.WriteJSON(j)
	}
	if s.CanPinMessages.Set {
		more.More()
		j.WriteObjectField("can_pin_messages")
		s.CanPinMessages.WriteJSON(j)
	}
	if s.CanPostMessages.Set {
		more.More()
		j.WriteObjectField("can_post_messages")
		s.CanPostMessages.WriteJSON(j)
	}
	if s.CanPromoteMembers.Set {
		more.More()
		j.WriteObjectField("can_promote_members")
		s.CanPromoteMembers.WriteJSON(j)
	}
	if s.CanRestrictMembers.Set {
		more.More()
		j.WriteObjectField("can_restrict_members")
		s.CanRestrictMembers.WriteJSON(j)
	}
	if s.IsAnonymous.Set {
		more.More()
		j.WriteObjectField("is_anonymous")
		s.IsAnonymous.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes PromoteChatMember json value to io.Writer.
func (s PromoteChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PromoteChatMember json value from io.Reader.
func (s *PromoteChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PromoteChatMember from json stream.
func (s *PromoteChatMember) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_change_info":
			if err := func() error {
				s.CanChangeInfo.Reset()
				if err := s.CanChangeInfo.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_delete_messages":
			if err := func() error {
				s.CanDeleteMessages.Reset()
				if err := s.CanDeleteMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_edit_messages":
			if err := func() error {
				s.CanEditMessages.Reset()
				if err := s.CanEditMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_invite_users":
			if err := func() error {
				s.CanInviteUsers.Reset()
				if err := s.CanInviteUsers.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_manage_chat":
			if err := func() error {
				s.CanManageChat.Reset()
				if err := s.CanManageChat.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_manage_voice_chats":
			if err := func() error {
				s.CanManageVoiceChats.Reset()
				if err := s.CanManageVoiceChats.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_pin_messages":
			if err := func() error {
				s.CanPinMessages.Reset()
				if err := s.CanPinMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_post_messages":
			if err := func() error {
				s.CanPostMessages.Reset()
				if err := s.CanPostMessages.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_promote_members":
			if err := func() error {
				s.CanPromoteMembers.Reset()
				if err := s.CanPromoteMembers.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "can_restrict_members":
			if err := func() error {
				s.CanRestrictMembers.Reset()
				if err := s.CanRestrictMembers.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_anonymous":
			if err := func() error {
				s.IsAnonymous.Reset()
				if err := s.IsAnonymous.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RestrictChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("permissions")
	s.Permissions.WriteJSON(j)
	if s.UntilDate.Set {
		more.More()
		j.WriteObjectField("until_date")
		s.UntilDate.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes RestrictChatMember json value to io.Writer.
func (s RestrictChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RestrictChatMember json value from io.Reader.
func (s *RestrictChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RestrictChatMember from json stream.
func (s *RestrictChatMember) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permissions":
			if err := func() error {
				if err := s.Permissions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "until_date":
			if err := func() error {
				s.UntilDate.Reset()
				if err := s.UntilDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RevokeChatInviteLink) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("invite_link")
	j.WriteString(s.InviteLink)
	j.WriteObjectEnd()
}

// WriteJSONTo writes RevokeChatInviteLink json value to io.Writer.
func (s RevokeChatInviteLink) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RevokeChatInviteLink json value from io.Reader.
func (s *RevokeChatInviteLink) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RevokeChatInviteLink from json stream.
func (s *RevokeChatInviteLink) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "invite_link":
			if err := func() error {
				s.InviteLink = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendAnimation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.Height.Set {
		more.More()
		j.WriteObjectField("height")
		s.Height.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.Width.Set {
		more.More()
		j.WriteObjectField("width")
		s.Width.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendAnimation json value to io.Writer.
func (s SendAnimation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendAnimation json value from io.Reader.
func (s *SendAnimation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendAnimation from json stream.
func (s *SendAnimation) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendAudio) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.Performer.Set {
		more.More()
		j.WriteObjectField("performer")
		s.Performer.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendAudio json value to io.Writer.
func (s SendAudio) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendAudio json value from io.Reader.
func (s *SendAudio) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendAudio from json stream.
func (s *SendAudio) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "performer":
			if err := func() error {
				s.Performer.Reset()
				if err := s.Performer.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendChatAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("action")
	j.WriteString(s.Action)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendChatAction json value to io.Writer.
func (s SendChatAction) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendChatAction json value from io.Reader.
func (s *SendChatAction) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendChatAction from json stream.
func (s *SendChatAction) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action":
			if err := func() error {
				s.Action = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendContact) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("first_name")
	j.WriteString(s.FirstName)
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("phone_number")
	j.WriteString(s.PhoneNumber)
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.Vcard.Set {
		more.More()
		j.WriteObjectField("vcard")
		s.Vcard.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendContact json value to io.Writer.
func (s SendContact) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendContact json value from io.Reader.
func (s *SendContact) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendContact from json stream.
func (s *SendContact) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "first_name":
			if err := func() error {
				s.FirstName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "last_name":
			if err := func() error {
				s.LastName.Reset()
				if err := s.LastName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "phone_number":
			if err := func() error {
				s.PhoneNumber = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "vcard":
			if err := func() error {
				s.Vcard.Reset()
				if err := s.Vcard.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendDice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Emoji.Set {
		more.More()
		j.WriteObjectField("emoji")
		s.Emoji.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendDice json value to io.Writer.
func (s SendDice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendDice json value from io.Reader.
func (s *SendDice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendDice from json stream.
func (s *SendDice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "emoji":
			if err := func() error {
				s.Emoji.Reset()
				if err := s.Emoji.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendDocument) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableContentTypeDetection.Set {
		more.More()
		j.WriteObjectField("disable_content_type_detection")
		s.DisableContentTypeDetection.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendDocument json value to io.Writer.
func (s SendDocument) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendDocument json value from io.Reader.
func (s *SendDocument) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendDocument from json stream.
func (s *SendDocument) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_content_type_detection":
			if err := func() error {
				s.DisableContentTypeDetection.Reset()
				if err := s.DisableContentTypeDetection.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendGame) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("chat_id")
	j.WriteInt(s.ChatID)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("game_short_name")
	j.WriteString(s.GameShortName)
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendGame json value to io.Writer.
func (s SendGame) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendGame json value from io.Reader.
func (s *SendGame) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendGame from json stream.
func (s *SendGame) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "chat_id":
			if err := func() error {
				s.ChatID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "game_short_name":
			if err := func() error {
				s.GameShortName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendInvoice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.IsFlexible.Set {
		more.More()
		j.WriteObjectField("is_flexible")
		s.IsFlexible.WriteJSON(j)
	}
	if s.MaxTipAmount.Set {
		more.More()
		j.WriteObjectField("max_tip_amount")
		s.MaxTipAmount.WriteJSON(j)
	}
	if s.NeedEmail.Set {
		more.More()
		j.WriteObjectField("need_email")
		s.NeedEmail.WriteJSON(j)
	}
	if s.NeedName.Set {
		more.More()
		j.WriteObjectField("need_name")
		s.NeedName.WriteJSON(j)
	}
	if s.NeedPhoneNumber.Set {
		more.More()
		j.WriteObjectField("need_phone_number")
		s.NeedPhoneNumber.WriteJSON(j)
	}
	if s.NeedShippingAddress.Set {
		more.More()
		j.WriteObjectField("need_shipping_address")
		s.NeedShippingAddress.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("payload")
	j.WriteString(s.Payload)
	if s.PhotoHeight.Set {
		more.More()
		j.WriteObjectField("photo_height")
		s.PhotoHeight.WriteJSON(j)
	}
	if s.PhotoSize.Set {
		more.More()
		j.WriteObjectField("photo_size")
		s.PhotoSize.WriteJSON(j)
	}
	if s.PhotoURL.Set {
		more.More()
		j.WriteObjectField("photo_url")
		s.PhotoURL.WriteJSON(j)
	}
	if s.PhotoWidth.Set {
		more.More()
		j.WriteObjectField("photo_width")
		s.PhotoWidth.WriteJSON(j)
	}
	if s.ProviderData.Set {
		more.More()
		j.WriteObjectField("provider_data")
		s.ProviderData.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("provider_token")
	j.WriteString(s.ProviderToken)
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.SendEmailToProvider.Set {
		more.More()
		j.WriteObjectField("send_email_to_provider")
		s.SendEmailToProvider.WriteJSON(j)
	}
	if s.SendPhoneNumberToProvider.Set {
		more.More()
		j.WriteObjectField("send_phone_number_to_provider")
		s.SendPhoneNumberToProvider.WriteJSON(j)
	}
	if s.StartParameter.Set {
		more.More()
		j.WriteObjectField("start_parameter")
		s.StartParameter.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendInvoice json value to io.Writer.
func (s SendInvoice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendInvoice json value from io.Reader.
func (s *SendInvoice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendInvoice from json stream.
func (s *SendInvoice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "currency":
			if err := func() error {
				s.Currency = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "description":
			if err := func() error {
				s.Description = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_flexible":
			if err := func() error {
				s.IsFlexible.Reset()
				if err := s.IsFlexible.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "max_tip_amount":
			if err := func() error {
				s.MaxTipAmount.Reset()
				if err := s.MaxTipAmount.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_email":
			if err := func() error {
				s.NeedEmail.Reset()
				if err := s.NeedEmail.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_name":
			if err := func() error {
				s.NeedName.Reset()
				if err := s.NeedName.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_phone_number":
			if err := func() error {
				s.NeedPhoneNumber.Reset()
				if err := s.NeedPhoneNumber.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "need_shipping_address":
			if err := func() error {
				s.NeedShippingAddress.Reset()
				if err := s.NeedShippingAddress.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "payload":
			if err := func() error {
				s.Payload = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_height":
			if err := func() error {
				s.PhotoHeight.Reset()
				if err := s.PhotoHeight.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_size":
			if err := func() error {
				s.PhotoSize.Reset()
				if err := s.PhotoSize.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_url":
			if err := func() error {
				s.PhotoURL.Reset()
				if err := s.PhotoURL.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "photo_width":
			if err := func() error {
				s.PhotoWidth.Reset()
				if err := s.PhotoWidth.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_data":
			if err := func() error {
				s.ProviderData.Reset()
				if err := s.ProviderData.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "provider_token":
			if err := func() error {
				s.ProviderToken = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "send_email_to_provider":
			if err := func() error {
				s.SendEmailToProvider.Reset()
				if err := s.SendEmailToProvider.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "send_phone_number_to_provider":
			if err := func() error {
				s.SendPhoneNumberToProvider.Reset()
				if err := s.SendPhoneNumberToProvider.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "start_parameter":
			if err := func() error {
				s.StartParameter.Reset()
				if err := s.StartParameter.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendLocation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Heading.Set {
		more.More()
		j.WriteObjectField("heading")
		s.Heading.WriteJSON(j)
	}
	if s.HorizontalAccuracy.Set {
		more.More()
		j.WriteObjectField("horizontal_accuracy")
		s.HorizontalAccuracy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("latitude")
	j.WriteFloat64(s.Latitude)
	if s.LivePeriod.Set {
		more.More()
		j.WriteObjectField("live_period")
		s.LivePeriod.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("longitude")
	j.WriteFloat64(s.Longitude)
	if s.ProximityAlertRadius.Set {
		more.More()
		j.WriteObjectField("proximity_alert_radius")
		s.ProximityAlertRadius.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendLocation json value to io.Writer.
func (s SendLocation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendLocation json value from io.Reader.
func (s *SendLocation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendLocation from json stream.
func (s *SendLocation) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "heading":
			if err := func() error {
				s.Heading.Reset()
				if err := s.Heading.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "horizontal_accuracy":
			if err := func() error {
				s.HorizontalAccuracy.Reset()
				if err := s.HorizontalAccuracy.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "latitude":
			if err := func() error {
				s.Latitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "live_period":
			if err := func() error {
				s.LivePeriod.Reset()
				if err := s.LivePeriod.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "longitude":
			if err := func() error {
				s.Longitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "proximity_alert_radius":
			if err := func() error {
				s.ProximityAlertRadius.Reset()
				if err := s.ProximityAlertRadius.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendMediaGroup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendMediaGroup json value to io.Writer.
func (s SendMediaGroup) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendMediaGroup json value from io.Reader.
func (s *SendMediaGroup) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendMediaGroup from json stream.
func (s *SendMediaGroup) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.DisableWebPagePreview.Set {
		more.More()
		j.WriteObjectField("disable_web_page_preview")
		s.DisableWebPagePreview.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("text")
	j.WriteString(s.Text)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendMessage json value to io.Writer.
func (s SendMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendMessage json value from io.Reader.
func (s *SendMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendMessage from json stream.
func (s *SendMessage) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_web_page_preview":
			if err := func() error {
				s.DisableWebPagePreview.Reset()
				if err := s.DisableWebPagePreview.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "text":
			if err := func() error {
				s.Text = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendPhoto) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendPhoto json value to io.Writer.
func (s SendPhoto) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendPhoto json value from io.Reader.
func (s *SendPhoto) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendPhoto from json stream.
func (s *SendPhoto) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendPoll) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.AllowsMultipleAnswers.Set {
		more.More()
		j.WriteObjectField("allows_multiple_answers")
		s.AllowsMultipleAnswers.WriteJSON(j)
	}
	if s.CloseDate.Set {
		more.More()
		j.WriteObjectField("close_date")
		s.CloseDate.WriteJSON(j)
	}
	if s.CorrectOptionID.Set {
		more.More()
		j.WriteObjectField("correct_option_id")
		s.CorrectOptionID.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Explanation.Set {
		more.More()
		j.WriteObjectField("explanation")
		s.Explanation.WriteJSON(j)
	}
	if s.ExplanationParseMode.Set {
		more.More()
		j.WriteObjectField("explanation_parse_mode")
		s.ExplanationParseMode.WriteJSON(j)
	}
	if s.IsAnonymous.Set {
		more.More()
		j.WriteObjectField("is_anonymous")
		s.IsAnonymous.WriteJSON(j)
	}
	if s.IsClosed.Set {
		more.More()
		j.WriteObjectField("is_closed")
		s.IsClosed.WriteJSON(j)
	}
	if s.OpenPeriod.Set {
		more.More()
		j.WriteObjectField("open_period")
		s.OpenPeriod.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("question")
	j.WriteString(s.Question)
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendPoll json value to io.Writer.
func (s SendPoll) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendPoll json value from io.Reader.
func (s *SendPoll) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendPoll from json stream.
func (s *SendPoll) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allows_multiple_answers":
			if err := func() error {
				s.AllowsMultipleAnswers.Reset()
				if err := s.AllowsMultipleAnswers.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "close_date":
			if err := func() error {
				s.CloseDate.Reset()
				if err := s.CloseDate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "correct_option_id":
			if err := func() error {
				s.CorrectOptionID.Reset()
				if err := s.CorrectOptionID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "explanation":
			if err := func() error {
				s.Explanation.Reset()
				if err := s.Explanation.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "explanation_parse_mode":
			if err := func() error {
				s.ExplanationParseMode.Reset()
				if err := s.ExplanationParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_anonymous":
			if err := func() error {
				s.IsAnonymous.Reset()
				if err := s.IsAnonymous.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "is_closed":
			if err := func() error {
				s.IsClosed.Reset()
				if err := s.IsClosed.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "open_period":
			if err := func() error {
				s.OpenPeriod.Reset()
				if err := s.OpenPeriod.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "question":
			if err := func() error {
				s.Question = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendSticker) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendSticker json value to io.Writer.
func (s SendSticker) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendSticker json value from io.Reader.
func (s *SendSticker) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendSticker from json stream.
func (s *SendSticker) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendVenue) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("address")
	j.WriteString(s.Address)
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.FoursquareID.Set {
		more.More()
		j.WriteObjectField("foursquare_id")
		s.FoursquareID.WriteJSON(j)
	}
	if s.FoursquareType.Set {
		more.More()
		j.WriteObjectField("foursquare_type")
		s.FoursquareType.WriteJSON(j)
	}
	if s.GooglePlaceID.Set {
		more.More()
		j.WriteObjectField("google_place_id")
		s.GooglePlaceID.WriteJSON(j)
	}
	if s.GooglePlaceType.Set {
		more.More()
		j.WriteObjectField("google_place_type")
		s.GooglePlaceType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("latitude")
	j.WriteFloat64(s.Latitude)
	more.More()
	j.WriteObjectField("longitude")
	j.WriteFloat64(s.Longitude)
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendVenue json value to io.Writer.
func (s SendVenue) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendVenue json value from io.Reader.
func (s *SendVenue) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendVenue from json stream.
func (s *SendVenue) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "address":
			if err := func() error {
				s.Address = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "foursquare_id":
			if err := func() error {
				s.FoursquareID.Reset()
				if err := s.FoursquareID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "foursquare_type":
			if err := func() error {
				s.FoursquareType.Reset()
				if err := s.FoursquareType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "google_place_id":
			if err := func() error {
				s.GooglePlaceID.Reset()
				if err := s.GooglePlaceID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "google_place_type":
			if err := func() error {
				s.GooglePlaceType.Reset()
				if err := s.GooglePlaceType.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "latitude":
			if err := func() error {
				s.Latitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "longitude":
			if err := func() error {
				s.Longitude = float64(i.ReadFloat64())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendVideo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.Height.Set {
		more.More()
		j.WriteObjectField("height")
		s.Height.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.SupportsStreaming.Set {
		more.More()
		j.WriteObjectField("supports_streaming")
		s.SupportsStreaming.WriteJSON(j)
	}
	if s.Width.Set {
		more.More()
		j.WriteObjectField("width")
		s.Width.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendVideo json value to io.Writer.
func (s SendVideo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendVideo json value from io.Reader.
func (s *SendVideo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendVideo from json stream.
func (s *SendVideo) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "height":
			if err := func() error {
				s.Height.Reset()
				if err := s.Height.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "supports_streaming":
			if err := func() error {
				s.SupportsStreaming.Reset()
				if err := s.SupportsStreaming.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "width":
			if err := func() error {
				s.Width.Reset()
				if err := s.Width.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendVideoNote) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.Length.Set {
		more.More()
		j.WriteObjectField("length")
		s.Length.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendVideoNote json value to io.Writer.
func (s SendVideoNote) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendVideoNote json value from io.Reader.
func (s *SendVideoNote) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendVideoNote from json stream.
func (s *SendVideoNote) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "length":
			if err := func() error {
				s.Length.Reset()
				if err := s.Length.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendVoice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendVoice json value to io.Writer.
func (s SendVoice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendVoice json value from io.Reader.
func (s *SendVoice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendVoice from json stream.
func (s *SendVoice) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			if err := func() error {
				s.AllowSendingWithoutReply.Reset()
				if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "caption":
			if err := func() error {
				s.Caption.Reset()
				if err := s.Caption.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_notification":
			if err := func() error {
				s.DisableNotification.Reset()
				if err := s.DisableNotification.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "duration":
			if err := func() error {
				s.Duration.Reset()
				if err := s.Duration.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "parse_mode":
			if err := func() error {
				s.ParseMode.Reset()
				if err := s.ParseMode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "reply_to_message_id":
			if err := func() error {
				s.ReplyToMessageID.Reset()
				if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatAdministratorCustomTitle) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("custom_title")
	j.WriteString(s.CustomTitle)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatAdministratorCustomTitle json value to io.Writer.
func (s SetChatAdministratorCustomTitle) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatAdministratorCustomTitle json value from io.Reader.
func (s *SetChatAdministratorCustomTitle) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatAdministratorCustomTitle from json stream.
func (s *SetChatAdministratorCustomTitle) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "custom_title":
			if err := func() error {
				s.CustomTitle = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatDescription) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatDescription json value to io.Writer.
func (s SetChatDescription) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatDescription json value from io.Reader.
func (s *SetChatDescription) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatDescription from json stream.
func (s *SetChatDescription) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("permissions")
	s.Permissions.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatPermissions json value to io.Writer.
func (s SetChatPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatPermissions json value from io.Reader.
func (s *SetChatPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatPermissions from json stream.
func (s *SetChatPermissions) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permissions":
			if err := func() error {
				if err := s.Permissions.ReadJSON(i); err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatPhoto) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("photo")
	j.WriteString(s.Photo)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatPhoto json value to io.Writer.
func (s SetChatPhoto) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatPhoto json value from io.Reader.
func (s *SetChatPhoto) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatPhoto from json stream.
func (s *SetChatPhoto) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "photo":
			if err := func() error {
				s.Photo = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatStickerSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sticker_set_name")
	j.WriteString(s.StickerSetName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatStickerSet json value to io.Writer.
func (s SetChatStickerSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatStickerSet json value from io.Reader.
func (s *SetChatStickerSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatStickerSet from json stream.
func (s *SetChatStickerSet) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sticker_set_name":
			if err := func() error {
				s.StickerSetName = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatTitle) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatTitle json value to io.Writer.
func (s SetChatTitle) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatTitle json value from io.Reader.
func (s *SetChatTitle) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatTitle from json stream.
func (s *SetChatTitle) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "title":
			if err := func() error {
				s.Title = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetGameScore) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.DisableEditMessage.Set {
		more.More()
		j.WriteObjectField("disable_edit_message")
		s.DisableEditMessage.WriteJSON(j)
	}
	if s.Force.Set {
		more.More()
		j.WriteObjectField("force")
		s.Force.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("score")
	j.WriteInt(s.Score)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetGameScore json value to io.Writer.
func (s SetGameScore) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetGameScore json value from io.Reader.
func (s *SetGameScore) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetGameScore from json stream.
func (s *SetGameScore) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			if err := func() error {
				s.ChatID.Reset()
				if err := s.ChatID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "disable_edit_message":
			if err := func() error {
				s.DisableEditMessage.Reset()
				if err := s.DisableEditMessage.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "force":
			if err := func() error {
				s.Force.Reset()
				if err := s.Force.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "score":
			if err := func() error {
				s.Score = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetMyCommands) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetMyCommands json value to io.Writer.
func (s SetMyCommands) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetMyCommands json value from io.Reader.
func (s *SetMyCommands) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetMyCommands from json stream.
func (s *SetMyCommands) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "language_code":
			if err := func() error {
				s.LanguageCode.Reset()
				if err := s.LanguageCode.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetPassportDataErrors) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetPassportDataErrors json value to io.Writer.
func (s SetPassportDataErrors) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetPassportDataErrors json value from io.Reader.
func (s *SetPassportDataErrors) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetPassportDataErrors from json stream.
func (s *SetPassportDataErrors) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetStickerPositionInSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("position")
	j.WriteInt(s.Position)
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetStickerPositionInSet json value to io.Writer.
func (s SetStickerPositionInSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetStickerPositionInSet json value from io.Reader.
func (s *SetStickerPositionInSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetStickerPositionInSet from json stream.
func (s *SetStickerPositionInSet) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "position":
			if err := func() error {
				s.Position = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "sticker":
			if err := func() error {
				s.Sticker = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetStickerSetThumb) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetStickerSetThumb json value to io.Writer.
func (s SetStickerSetThumb) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetStickerSetThumb json value from io.Reader.
func (s *SetStickerSetThumb) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetStickerSetThumb from json stream.
func (s *SetStickerSetThumb) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			if err := func() error {
				s.Name = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Certificate.Set {
		more.More()
		j.WriteObjectField("certificate")
		s.Certificate.WriteJSON(j)
	}
	if s.DropPendingUpdates.Set {
		more.More()
		j.WriteObjectField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(j)
	}
	if s.IPAddress.Set {
		more.More()
		j.WriteObjectField("ip_address")
		s.IPAddress.WriteJSON(j)
	}
	if s.MaxConnections.Set {
		more.More()
		j.WriteObjectField("max_connections")
		s.MaxConnections.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("url")
	json.WriteURI(j, s.URL)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetWebhook json value to io.Writer.
func (s SetWebhook) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetWebhook json value from io.Reader.
func (s *SetWebhook) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetWebhook from json stream.
func (s *SetWebhook) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "certificate":
			if err := func() error {
				s.Certificate.Reset()
				if err := s.Certificate.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "drop_pending_updates":
			if err := func() error {
				s.DropPendingUpdates.Reset()
				if err := s.DropPendingUpdates.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "ip_address":
			if err := func() error {
				s.IPAddress.Reset()
				if err := s.IPAddress.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "max_connections":
			if err := func() error {
				s.MaxConnections.Reset()
				if err := s.MaxConnections.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "url":
			if err := func() error {
				v, err := json.ReadURI(i)
				s.URL = v
				if err != nil {
					return err
				}
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s StopMessageLiveLocation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes StopMessageLiveLocation json value to io.Writer.
func (s StopMessageLiveLocation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads StopMessageLiveLocation json value from io.Reader.
func (s *StopMessageLiveLocation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads StopMessageLiveLocation from json stream.
func (s *StopMessageLiveLocation) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "inline_message_id":
			if err := func() error {
				s.InlineMessageID.Reset()
				if err := s.InlineMessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s StopPoll) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes StopPoll json value to io.Writer.
func (s StopPoll) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads StopPoll json value from io.Reader.
func (s *StopPoll) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads StopPoll from json stream.
func (s *StopPoll) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message_id":
			if err := func() error {
				s.MessageID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UnbanChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.OnlyIfBanned.Set {
		more.More()
		j.WriteObjectField("only_if_banned")
		s.OnlyIfBanned.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes UnbanChatMember json value to io.Writer.
func (s UnbanChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UnbanChatMember json value from io.Reader.
func (s *UnbanChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UnbanChatMember from json stream.
func (s *UnbanChatMember) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "only_if_banned":
			if err := func() error {
				s.OnlyIfBanned.Reset()
				if err := s.OnlyIfBanned.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UnpinAllChatMessages) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	j.WriteObjectEnd()
}

// WriteJSONTo writes UnpinAllChatMessages json value to io.Writer.
func (s UnpinAllChatMessages) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UnpinAllChatMessages json value from io.Reader.
func (s *UnpinAllChatMessages) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UnpinAllChatMessages from json stream.
func (s *UnpinAllChatMessages) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UnpinChatMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes UnpinChatMessage json value to io.Writer.
func (s UnpinChatMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UnpinChatMessage json value from io.Reader.
func (s *UnpinChatMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UnpinChatMessage from json stream.
func (s *UnpinChatMessage) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message_id":
			if err := func() error {
				s.MessageID.Reset()
				if err := s.MessageID.ReadJSON(i); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UploadStickerFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("png_sticker")
	j.WriteString(s.PNGSticker)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes UploadStickerFile json value to io.Writer.
func (s UploadStickerFile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UploadStickerFile json value from io.Reader.
func (s *UploadStickerFile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UploadStickerFile from json stream.
func (s *UploadStickerFile) ReadJSON(i *json.Iterator) error {
	var retErr error
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "png_sticker":
			if err := func() error {
				s.PNGSticker = string(i.ReadString())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		case "user_id":
			if err := func() error {
				s.UserID = int(i.ReadInt())
				return i.Error
			}(); err != nil {
				retErr = err
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	if retErr != nil {
		return retErr
	}
	return i.Error
}
