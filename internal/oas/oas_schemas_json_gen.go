// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
)

// WriteJSON implements json.Marshaler.
func (s AddStickerToSet) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("emojis")
	w.Str(s.Emojis)
	if s.MaskPosition.Set {
		more.More()
		w.ObjField("mask_position")
		s.MaskPosition.WriteJSON(w)
	}
	more.More()
	w.ObjField("name")
	w.Str(s.Name)
	if s.PNGSticker.Set {
		more.More()
		w.ObjField("png_sticker")
		s.PNGSticker.WriteJSON(w)
	}
	if s.TgsSticker.Set {
		more.More()
		w.ObjField("tgs_sticker")
		s.TgsSticker.WriteJSON(w)
	}
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads AddStickerToSet from json stream.
func (s *AddStickerToSet) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AddStickerToSet to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "emojis":
			v, err := r.Str()
			s.Emojis = string(v)
			if err != nil {
				return err
			}
		case "mask_position":
			s.MaskPosition.Reset()
			if err := s.MaskPosition.ReadJSON(r); err != nil {
				return err
			}
		case "name":
			v, err := r.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "png_sticker":
			s.PNGSticker.Reset()
			if err := s.PNGSticker.ReadJSON(r); err != nil {
				return err
			}
		case "tgs_sticker":
			s.TgsSticker.Reset()
			if err := s.TgsSticker.ReadJSON(r); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Animation) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("duration")
	w.Int(s.Duration)
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	if s.FileName.Set {
		more.More()
		w.ObjField("file_name")
		s.FileName.WriteJSON(w)
	}
	if s.FileSize.Set {
		more.More()
		w.ObjField("file_size")
		s.FileSize.WriteJSON(w)
	}
	more.More()
	w.ObjField("file_unique_id")
	w.Str(s.FileUniqueID)
	more.More()
	w.ObjField("height")
	w.Int(s.Height)
	if s.MimeType.Set {
		more.More()
		w.ObjField("mime_type")
		s.MimeType.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	more.More()
	w.ObjField("width")
	w.Int(s.Width)
	w.ObjEnd()
}

// ReadJSON reads Animation from json stream.
func (s *Animation) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Animation to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "duration":
			v, err := r.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_name":
			s.FileName.Reset()
			if err := s.FileName.ReadJSON(r); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.ReadJSON(r); err != nil {
				return err
			}
		case "file_unique_id":
			v, err := r.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "height":
			v, err := r.Int()
			s.Height = int(v)
			if err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		case "width":
			v, err := r.Int()
			s.Width = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AnswerCallbackQuery) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.CacheTime.Set {
		more.More()
		w.ObjField("cache_time")
		s.CacheTime.WriteJSON(w)
	}
	more.More()
	w.ObjField("callback_query_id")
	w.Str(s.CallbackQueryID)
	if s.ShowAlert.Set {
		more.More()
		w.ObjField("show_alert")
		s.ShowAlert.WriteJSON(w)
	}
	if s.Text.Set {
		more.More()
		w.ObjField("text")
		s.Text.WriteJSON(w)
	}
	if s.URL.Set {
		more.More()
		w.ObjField("url")
		s.URL.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads AnswerCallbackQuery from json stream.
func (s *AnswerCallbackQuery) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AnswerCallbackQuery to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "cache_time":
			s.CacheTime.Reset()
			if err := s.CacheTime.ReadJSON(r); err != nil {
				return err
			}
		case "callback_query_id":
			v, err := r.Str()
			s.CallbackQueryID = string(v)
			if err != nil {
				return err
			}
		case "show_alert":
			s.ShowAlert.Reset()
			if err := s.ShowAlert.ReadJSON(r); err != nil {
				return err
			}
		case "text":
			s.Text.Reset()
			if err := s.Text.ReadJSON(r); err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AnswerInlineQuery) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.CacheTime.Set {
		more.More()
		w.ObjField("cache_time")
		s.CacheTime.WriteJSON(w)
	}
	more.More()
	w.ObjField("inline_query_id")
	w.Str(s.InlineQueryID)
	if s.IsPersonal.Set {
		more.More()
		w.ObjField("is_personal")
		s.IsPersonal.WriteJSON(w)
	}
	if s.NextOffset.Set {
		more.More()
		w.ObjField("next_offset")
		s.NextOffset.WriteJSON(w)
	}
	more.More()
	w.ObjField("results")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Results {
		_ = elem // Unsupported kind "alias".
	}
	w.ArrEnd()
	more.Up()
	if s.SwitchPmParameter.Set {
		more.More()
		w.ObjField("switch_pm_parameter")
		s.SwitchPmParameter.WriteJSON(w)
	}
	if s.SwitchPmText.Set {
		more.More()
		w.ObjField("switch_pm_text")
		s.SwitchPmText.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads AnswerInlineQuery from json stream.
func (s *AnswerInlineQuery) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AnswerInlineQuery to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "cache_time":
			s.CacheTime.Reset()
			if err := s.CacheTime.ReadJSON(r); err != nil {
				return err
			}
		case "inline_query_id":
			v, err := r.Str()
			s.InlineQueryID = string(v)
			if err != nil {
				return err
			}
		case "is_personal":
			s.IsPersonal.Reset()
			if err := s.IsPersonal.ReadJSON(r); err != nil {
				return err
			}
		case "next_offset":
			s.NextOffset.Reset()
			if err := s.NextOffset.ReadJSON(r); err != nil {
				return err
			}
		case "results":
			s.Results = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem InlineQueryResult
				if err := fmt.Errorf(`decoding of "InlineQueryResult" (alias) is not implemented`); err != nil {
					return err
				}
				s.Results = append(s.Results, elem)
				return nil
			}); err != nil {
				return err
			}
		case "switch_pm_parameter":
			s.SwitchPmParameter.Reset()
			if err := s.SwitchPmParameter.ReadJSON(r); err != nil {
				return err
			}
		case "switch_pm_text":
			s.SwitchPmText.Reset()
			if err := s.SwitchPmText.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AnswerPreCheckoutQuery) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		w.ObjField("error_message")
		s.ErrorMessage.WriteJSON(w)
	}
	more.More()
	w.ObjField("ok")
	w.Bool(s.Ok)
	more.More()
	w.ObjField("pre_checkout_query_id")
	w.Str(s.PreCheckoutQueryID)
	w.ObjEnd()
}

// ReadJSON reads AnswerPreCheckoutQuery from json stream.
func (s *AnswerPreCheckoutQuery) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AnswerPreCheckoutQuery to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "error_message":
			s.ErrorMessage.Reset()
			if err := s.ErrorMessage.ReadJSON(r); err != nil {
				return err
			}
		case "ok":
			v, err := r.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "pre_checkout_query_id":
			v, err := r.Str()
			s.PreCheckoutQueryID = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s AnswerShippingQuery) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		w.ObjField("error_message")
		s.ErrorMessage.WriteJSON(w)
	}
	more.More()
	w.ObjField("ok")
	w.Bool(s.Ok)
	if s.ShippingOptions != nil {
		more.More()
		w.ObjField("shipping_options")
		more.Down()
		w.ArrStart()
		for _, elem := range s.ShippingOptions {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("shipping_query_id")
	w.Str(s.ShippingQueryID)
	w.ObjEnd()
}

// ReadJSON reads AnswerShippingQuery from json stream.
func (s *AnswerShippingQuery) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode AnswerShippingQuery to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "error_message":
			s.ErrorMessage.Reset()
			if err := s.ErrorMessage.ReadJSON(r); err != nil {
				return err
			}
		case "ok":
			v, err := r.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "shipping_options":
			s.ShippingOptions = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem ShippingOption
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.ShippingOptions = append(s.ShippingOptions, elem)
				return nil
			}); err != nil {
				return err
			}
		case "shipping_query_id":
			v, err := r.Str()
			s.ShippingQueryID = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Audio) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("duration")
	w.Int(s.Duration)
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	if s.FileName.Set {
		more.More()
		w.ObjField("file_name")
		s.FileName.WriteJSON(w)
	}
	if s.FileSize.Set {
		more.More()
		w.ObjField("file_size")
		s.FileSize.WriteJSON(w)
	}
	more.More()
	w.ObjField("file_unique_id")
	w.Str(s.FileUniqueID)
	if s.MimeType.Set {
		more.More()
		w.ObjField("mime_type")
		s.MimeType.WriteJSON(w)
	}
	if s.Performer.Set {
		more.More()
		w.ObjField("performer")
		s.Performer.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	if s.Title.Set {
		more.More()
		w.ObjField("title")
		s.Title.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Audio from json stream.
func (s *Audio) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Audio to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "duration":
			v, err := r.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_name":
			s.FileName.Reset()
			if err := s.FileName.ReadJSON(r); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.ReadJSON(r); err != nil {
				return err
			}
		case "file_unique_id":
			v, err := r.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.ReadJSON(r); err != nil {
				return err
			}
		case "performer":
			s.Performer.Reset()
			if err := s.Performer.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BanChatMember) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.RevokeMessages.Set {
		more.More()
		w.ObjField("revoke_messages")
		s.RevokeMessages.WriteJSON(w)
	}
	if s.UntilDate.Set {
		more.More()
		w.ObjField("until_date")
		s.UntilDate.WriteJSON(w)
	}
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads BanChatMember from json stream.
func (s *BanChatMember) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BanChatMember to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "revoke_messages":
			s.RevokeMessages.Reset()
			if err := s.RevokeMessages.ReadJSON(r); err != nil {
				return err
			}
		case "until_date":
			s.UntilDate.Reset()
			if err := s.UntilDate.ReadJSON(r); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BotCommand) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("command")
	w.Str(s.Command)
	more.More()
	w.ObjField("description")
	w.Str(s.Description)
	w.ObjEnd()
}

// ReadJSON reads BotCommand from json stream.
func (s *BotCommand) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BotCommand to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "command":
			v, err := r.Str()
			s.Command = string(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := r.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s BotCommandScope) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads BotCommandScope from json stream.
func (s *BotCommandScope) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode BotCommandScope to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Chat) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Bio.Set {
		more.More()
		w.ObjField("bio")
		s.Bio.WriteJSON(w)
	}
	if s.CanSetStickerSet.Set {
		more.More()
		w.ObjField("can_set_sticker_set")
		s.CanSetStickerSet.WriteJSON(w)
	}
	if s.Description.Set {
		more.More()
		w.ObjField("description")
		s.Description.WriteJSON(w)
	}
	if s.FirstName.Set {
		more.More()
		w.ObjField("first_name")
		s.FirstName.WriteJSON(w)
	}
	more.More()
	w.ObjField("id")
	w.Int(s.ID)
	if s.InviteLink.Set {
		more.More()
		w.ObjField("invite_link")
		s.InviteLink.WriteJSON(w)
	}
	if s.LastName.Set {
		more.More()
		w.ObjField("last_name")
		s.LastName.WriteJSON(w)
	}
	if s.LinkedChatID.Set {
		more.More()
		w.ObjField("linked_chat_id")
		s.LinkedChatID.WriteJSON(w)
	}
	if s.Location.Set {
		more.More()
		w.ObjField("location")
		s.Location.WriteJSON(w)
	}
	if s.MessageAutoDeleteTime.Set {
		more.More()
		w.ObjField("message_auto_delete_time")
		s.MessageAutoDeleteTime.WriteJSON(w)
	}
	if s.Permissions.Set {
		more.More()
		w.ObjField("permissions")
		s.Permissions.WriteJSON(w)
	}
	if s.Photo.Set {
		more.More()
		w.ObjField("photo")
		s.Photo.WriteJSON(w)
	}
	if s.PinnedMessage.Set {
		more.More()
		w.ObjField("pinned_message")
		s.PinnedMessage.WriteJSON(w)
	}
	if s.SlowModeDelay.Set {
		more.More()
		w.ObjField("slow_mode_delay")
		s.SlowModeDelay.WriteJSON(w)
	}
	if s.StickerSetName.Set {
		more.More()
		w.ObjField("sticker_set_name")
		s.StickerSetName.WriteJSON(w)
	}
	if s.Title.Set {
		more.More()
		w.ObjField("title")
		s.Title.WriteJSON(w)
	}
	more.More()
	w.ObjField("type")
	w.Str(s.Type)
	if s.Username.Set {
		more.More()
		w.ObjField("username")
		s.Username.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Chat from json stream.
func (s *Chat) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Chat to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "bio":
			s.Bio.Reset()
			if err := s.Bio.ReadJSON(r); err != nil {
				return err
			}
		case "can_set_sticker_set":
			s.CanSetStickerSet.Reset()
			if err := s.CanSetStickerSet.ReadJSON(r); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(r); err != nil {
				return err
			}
		case "first_name":
			s.FirstName.Reset()
			if err := s.FirstName.ReadJSON(r); err != nil {
				return err
			}
		case "id":
			v, err := r.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "invite_link":
			s.InviteLink.Reset()
			if err := s.InviteLink.ReadJSON(r); err != nil {
				return err
			}
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.ReadJSON(r); err != nil {
				return err
			}
		case "linked_chat_id":
			s.LinkedChatID.Reset()
			if err := s.LinkedChatID.ReadJSON(r); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(r); err != nil {
				return err
			}
		case "message_auto_delete_time":
			s.MessageAutoDeleteTime.Reset()
			if err := s.MessageAutoDeleteTime.ReadJSON(r); err != nil {
				return err
			}
		case "permissions":
			s.Permissions.Reset()
			if err := s.Permissions.ReadJSON(r); err != nil {
				return err
			}
		case "photo":
			s.Photo.Reset()
			if err := s.Photo.ReadJSON(r); err != nil {
				return err
			}
		case "pinned_message":
			s.PinnedMessage.Reset()
			if err := s.PinnedMessage.ReadJSON(r); err != nil {
				return err
			}
		case "slow_mode_delay":
			s.SlowModeDelay.Reset()
			if err := s.SlowModeDelay.ReadJSON(r); err != nil {
				return err
			}
		case "sticker_set_name":
			s.StickerSetName.Reset()
			if err := s.StickerSetName.ReadJSON(r); err != nil {
				return err
			}
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(r); err != nil {
				return err
			}
		case "type":
			v, err := r.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ChatLocation) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("address")
	w.Str(s.Address)
	more.More()
	w.ObjField("location")
	s.Location.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads ChatLocation from json stream.
func (s *ChatLocation) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChatLocation to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "address":
			v, err := r.Str()
			s.Address = string(v)
			if err != nil {
				return err
			}
		case "location":
			if err := s.Location.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ChatPermissions) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.CanAddWebPagePreviews.Set {
		more.More()
		w.ObjField("can_add_web_page_previews")
		s.CanAddWebPagePreviews.WriteJSON(w)
	}
	if s.CanChangeInfo.Set {
		more.More()
		w.ObjField("can_change_info")
		s.CanChangeInfo.WriteJSON(w)
	}
	if s.CanInviteUsers.Set {
		more.More()
		w.ObjField("can_invite_users")
		s.CanInviteUsers.WriteJSON(w)
	}
	if s.CanPinMessages.Set {
		more.More()
		w.ObjField("can_pin_messages")
		s.CanPinMessages.WriteJSON(w)
	}
	if s.CanSendMediaMessages.Set {
		more.More()
		w.ObjField("can_send_media_messages")
		s.CanSendMediaMessages.WriteJSON(w)
	}
	if s.CanSendMessages.Set {
		more.More()
		w.ObjField("can_send_messages")
		s.CanSendMessages.WriteJSON(w)
	}
	if s.CanSendOtherMessages.Set {
		more.More()
		w.ObjField("can_send_other_messages")
		s.CanSendOtherMessages.WriteJSON(w)
	}
	if s.CanSendPolls.Set {
		more.More()
		w.ObjField("can_send_polls")
		s.CanSendPolls.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads ChatPermissions from json stream.
func (s *ChatPermissions) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChatPermissions to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "can_add_web_page_previews":
			s.CanAddWebPagePreviews.Reset()
			if err := s.CanAddWebPagePreviews.ReadJSON(r); err != nil {
				return err
			}
		case "can_change_info":
			s.CanChangeInfo.Reset()
			if err := s.CanChangeInfo.ReadJSON(r); err != nil {
				return err
			}
		case "can_invite_users":
			s.CanInviteUsers.Reset()
			if err := s.CanInviteUsers.ReadJSON(r); err != nil {
				return err
			}
		case "can_pin_messages":
			s.CanPinMessages.Reset()
			if err := s.CanPinMessages.ReadJSON(r); err != nil {
				return err
			}
		case "can_send_media_messages":
			s.CanSendMediaMessages.Reset()
			if err := s.CanSendMediaMessages.ReadJSON(r); err != nil {
				return err
			}
		case "can_send_messages":
			s.CanSendMessages.Reset()
			if err := s.CanSendMessages.ReadJSON(r); err != nil {
				return err
			}
		case "can_send_other_messages":
			s.CanSendOtherMessages.Reset()
			if err := s.CanSendOtherMessages.ReadJSON(r); err != nil {
				return err
			}
		case "can_send_polls":
			s.CanSendPolls.Reset()
			if err := s.CanSendPolls.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ChatPhoto) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("big_file_id")
	w.Str(s.BigFileID)
	more.More()
	w.ObjField("big_file_unique_id")
	w.Str(s.BigFileUniqueID)
	more.More()
	w.ObjField("small_file_id")
	w.Str(s.SmallFileID)
	more.More()
	w.ObjField("small_file_unique_id")
	w.Str(s.SmallFileUniqueID)
	w.ObjEnd()
}

// ReadJSON reads ChatPhoto from json stream.
func (s *ChatPhoto) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ChatPhoto to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "big_file_id":
			v, err := r.Str()
			s.BigFileID = string(v)
			if err != nil {
				return err
			}
		case "big_file_unique_id":
			v, err := r.Str()
			s.BigFileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "small_file_id":
			v, err := r.Str()
			s.SmallFileID = string(v)
			if err != nil {
				return err
			}
		case "small_file_unique_id":
			v, err := r.Str()
			s.SmallFileUniqueID = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Contact) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("first_name")
	w.Str(s.FirstName)
	if s.LastName.Set {
		more.More()
		w.ObjField("last_name")
		s.LastName.WriteJSON(w)
	}
	more.More()
	w.ObjField("phone_number")
	w.Str(s.PhoneNumber)
	if s.UserID.Set {
		more.More()
		w.ObjField("user_id")
		s.UserID.WriteJSON(w)
	}
	if s.Vcard.Set {
		more.More()
		w.ObjField("vcard")
		s.Vcard.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Contact from json stream.
func (s *Contact) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Contact to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "first_name":
			v, err := r.Str()
			s.FirstName = string(v)
			if err != nil {
				return err
			}
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.ReadJSON(r); err != nil {
				return err
			}
		case "phone_number":
			v, err := r.Str()
			s.PhoneNumber = string(v)
			if err != nil {
				return err
			}
		case "user_id":
			s.UserID.Reset()
			if err := s.UserID.ReadJSON(r); err != nil {
				return err
			}
		case "vcard":
			s.Vcard.Reset()
			if err := s.Vcard.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CopyMessage) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	if s.Caption.Set {
		more.More()
		w.ObjField("caption")
		s.Caption.WriteJSON(w)
	}
	if s.CaptionEntities != nil {
		more.More()
		w.ObjField("caption_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	more.More()
	w.ObjField("from_chat_id")
	s.FromChatID.WriteJSON(w)
	more.More()
	w.ObjField("message_id")
	w.Int(s.MessageID)
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads CopyMessage from json stream.
func (s *CopyMessage) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CopyMessage to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(r); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "from_chat_id":
			if err := s.FromChatID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			v, err := r.Int()
			s.MessageID = int(v)
			if err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CreateChatInviteLink) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.ExpireDate.Set {
		more.More()
		w.ObjField("expire_date")
		s.ExpireDate.WriteJSON(w)
	}
	if s.MemberLimit.Set {
		more.More()
		w.ObjField("member_limit")
		s.MemberLimit.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads CreateChatInviteLink from json stream.
func (s *CreateChatInviteLink) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateChatInviteLink to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "expire_date":
			s.ExpireDate.Reset()
			if err := s.ExpireDate.ReadJSON(r); err != nil {
				return err
			}
		case "member_limit":
			s.MemberLimit.Reset()
			if err := s.MemberLimit.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s CreateNewStickerSet) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ContainsMasks.Set {
		more.More()
		w.ObjField("contains_masks")
		s.ContainsMasks.WriteJSON(w)
	}
	more.More()
	w.ObjField("emojis")
	w.Str(s.Emojis)
	if s.MaskPosition.Set {
		more.More()
		w.ObjField("mask_position")
		s.MaskPosition.WriteJSON(w)
	}
	more.More()
	w.ObjField("name")
	w.Str(s.Name)
	if s.PNGSticker.Set {
		more.More()
		w.ObjField("png_sticker")
		s.PNGSticker.WriteJSON(w)
	}
	if s.TgsSticker.Set {
		more.More()
		w.ObjField("tgs_sticker")
		s.TgsSticker.WriteJSON(w)
	}
	more.More()
	w.ObjField("title")
	w.Str(s.Title)
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads CreateNewStickerSet from json stream.
func (s *CreateNewStickerSet) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode CreateNewStickerSet to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "contains_masks":
			s.ContainsMasks.Reset()
			if err := s.ContainsMasks.ReadJSON(r); err != nil {
				return err
			}
		case "emojis":
			v, err := r.Str()
			s.Emojis = string(v)
			if err != nil {
				return err
			}
		case "mask_position":
			s.MaskPosition.Reset()
			if err := s.MaskPosition.ReadJSON(r); err != nil {
				return err
			}
		case "name":
			v, err := r.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "png_sticker":
			s.PNGSticker.Reset()
			if err := s.PNGSticker.ReadJSON(r); err != nil {
				return err
			}
		case "tgs_sticker":
			s.TgsSticker.Reset()
			if err := s.TgsSticker.ReadJSON(r); err != nil {
				return err
			}
		case "title":
			v, err := r.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeleteChatPhoto) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads DeleteChatPhoto from json stream.
func (s *DeleteChatPhoto) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteChatPhoto to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeleteChatStickerSet) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads DeleteChatStickerSet from json stream.
func (s *DeleteChatStickerSet) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteChatStickerSet to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeleteMessage) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("message_id")
	w.Int(s.MessageID)
	w.ObjEnd()
}

// ReadJSON reads DeleteMessage from json stream.
func (s *DeleteMessage) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteMessage to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			v, err := r.Int()
			s.MessageID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeleteMyCommands) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.LanguageCode.Set {
		more.More()
		w.ObjField("language_code")
		s.LanguageCode.WriteJSON(w)
	}
	if s.Scope != nil {
		more.More()
		w.ObjField("scope")
		s.Scope.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads DeleteMyCommands from json stream.
func (s *DeleteMyCommands) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteMyCommands to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.ReadJSON(r); err != nil {
				return err
			}
		case "scope":
			s.Scope = nil
			var elem BotCommandScope
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.Scope = &elem
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeleteStickerFromSet) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("sticker")
	w.Str(s.Sticker)
	w.ObjEnd()
}

// ReadJSON reads DeleteStickerFromSet from json stream.
func (s *DeleteStickerFromSet) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteStickerFromSet to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "sticker":
			v, err := r.Str()
			s.Sticker = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s DeleteWebhook) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.DropPendingUpdates.Set {
		more.More()
		w.ObjField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads DeleteWebhook from json stream.
func (s *DeleteWebhook) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode DeleteWebhook to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "drop_pending_updates":
			s.DropPendingUpdates.Reset()
			if err := s.DropPendingUpdates.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Dice) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("emoji")
	w.Str(s.Emoji)
	more.More()
	w.ObjField("value")
	w.Int(s.Value)
	w.ObjEnd()
}

// ReadJSON reads Dice from json stream.
func (s *Dice) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Dice to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "emoji":
			v, err := r.Str()
			s.Emoji = string(v)
			if err != nil {
				return err
			}
		case "value":
			v, err := r.Int()
			s.Value = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Document) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	if s.FileName.Set {
		more.More()
		w.ObjField("file_name")
		s.FileName.WriteJSON(w)
	}
	if s.FileSize.Set {
		more.More()
		w.ObjField("file_size")
		s.FileSize.WriteJSON(w)
	}
	more.More()
	w.ObjField("file_unique_id")
	w.Str(s.FileUniqueID)
	if s.MimeType.Set {
		more.More()
		w.ObjField("mime_type")
		s.MimeType.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Document from json stream.
func (s *Document) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Document to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_name":
			s.FileName.Reset()
			if err := s.FileName.ReadJSON(r); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.ReadJSON(r); err != nil {
				return err
			}
		case "file_unique_id":
			v, err := r.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EditChatInviteLink) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.ExpireDate.Set {
		more.More()
		w.ObjField("expire_date")
		s.ExpireDate.WriteJSON(w)
	}
	more.More()
	w.ObjField("invite_link")
	w.Str(s.InviteLink)
	if s.MemberLimit.Set {
		more.More()
		w.ObjField("member_limit")
		s.MemberLimit.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads EditChatInviteLink from json stream.
func (s *EditChatInviteLink) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EditChatInviteLink to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "expire_date":
			s.ExpireDate.Reset()
			if err := s.ExpireDate.ReadJSON(r); err != nil {
				return err
			}
		case "invite_link":
			v, err := r.Str()
			s.InviteLink = string(v)
			if err != nil {
				return err
			}
		case "member_limit":
			s.MemberLimit.Reset()
			if err := s.MemberLimit.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EditMessageCaption) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Caption.Set {
		more.More()
		w.ObjField("caption")
		s.Caption.WriteJSON(w)
	}
	if s.CaptionEntities != nil {
		more.More()
		w.ObjField("caption_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.ChatID != nil {
		more.More()
		w.ObjField("chat_id")
		s.ChatID.WriteJSON(w)
	}
	if s.InlineMessageID.Set {
		more.More()
		w.ObjField("inline_message_id")
		s.InlineMessageID.WriteJSON(w)
	}
	if s.MessageID.Set {
		more.More()
		w.ObjField("message_id")
		s.MessageID.WriteJSON(w)
	}
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads EditMessageCaption from json stream.
func (s *EditMessageCaption) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EditMessageCaption to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(r); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "chat_id":
			s.ChatID = nil
			var elem ID
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.ChatID = &elem
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(r); err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EditMessageLiveLocation) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ChatID != nil {
		more.More()
		w.ObjField("chat_id")
		s.ChatID.WriteJSON(w)
	}
	if s.Heading.Set {
		more.More()
		w.ObjField("heading")
		s.Heading.WriteJSON(w)
	}
	if s.HorizontalAccuracy.Set {
		more.More()
		w.ObjField("horizontal_accuracy")
		s.HorizontalAccuracy.WriteJSON(w)
	}
	if s.InlineMessageID.Set {
		more.More()
		w.ObjField("inline_message_id")
		s.InlineMessageID.WriteJSON(w)
	}
	more.More()
	w.ObjField("latitude")
	w.Float64(s.Latitude)
	more.More()
	w.ObjField("longitude")
	w.Float64(s.Longitude)
	if s.MessageID.Set {
		more.More()
		w.ObjField("message_id")
		s.MessageID.WriteJSON(w)
	}
	if s.ProximityAlertRadius.Set {
		more.More()
		w.ObjField("proximity_alert_radius")
		s.ProximityAlertRadius.WriteJSON(w)
	}
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads EditMessageLiveLocation from json stream.
func (s *EditMessageLiveLocation) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EditMessageLiveLocation to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			s.ChatID = nil
			var elem ID
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.ChatID = &elem
		case "heading":
			s.Heading.Reset()
			if err := s.Heading.ReadJSON(r); err != nil {
				return err
			}
		case "horizontal_accuracy":
			s.HorizontalAccuracy.Reset()
			if err := s.HorizontalAccuracy.ReadJSON(r); err != nil {
				return err
			}
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "latitude":
			v, err := r.Float64()
			s.Latitude = float64(v)
			if err != nil {
				return err
			}
		case "longitude":
			v, err := r.Float64()
			s.Longitude = float64(v)
			if err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(r); err != nil {
				return err
			}
		case "proximity_alert_radius":
			s.ProximityAlertRadius.Reset()
			if err := s.ProximityAlertRadius.ReadJSON(r); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EditMessageMedia) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ChatID != nil {
		more.More()
		w.ObjField("chat_id")
		s.ChatID.WriteJSON(w)
	}
	if s.InlineMessageID.Set {
		more.More()
		w.ObjField("inline_message_id")
		s.InlineMessageID.WriteJSON(w)
	}
	more.More()
	w.ObjField("media")
	s.Media.WriteJSON(w)
	if s.MessageID.Set {
		more.More()
		w.ObjField("message_id")
		s.MessageID.WriteJSON(w)
	}
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads EditMessageMedia from json stream.
func (s *EditMessageMedia) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EditMessageMedia to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			s.ChatID = nil
			var elem ID
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.ChatID = &elem
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "media":
			if err := s.Media.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(r); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EditMessageReplyMarkup) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ChatID != nil {
		more.More()
		w.ObjField("chat_id")
		s.ChatID.WriteJSON(w)
	}
	if s.InlineMessageID.Set {
		more.More()
		w.ObjField("inline_message_id")
		s.InlineMessageID.WriteJSON(w)
	}
	if s.MessageID.Set {
		more.More()
		w.ObjField("message_id")
		s.MessageID.WriteJSON(w)
	}
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads EditMessageReplyMarkup from json stream.
func (s *EditMessageReplyMarkup) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EditMessageReplyMarkup to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			s.ChatID = nil
			var elem ID
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.ChatID = &elem
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(r); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EditMessageText) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ChatID != nil {
		more.More()
		w.ObjField("chat_id")
		s.ChatID.WriteJSON(w)
	}
	if s.DisableWebPagePreview.Set {
		more.More()
		w.ObjField("disable_web_page_preview")
		s.DisableWebPagePreview.WriteJSON(w)
	}
	if s.Entities != nil {
		more.More()
		w.ObjField("entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.Entities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.InlineMessageID.Set {
		more.More()
		w.ObjField("inline_message_id")
		s.InlineMessageID.WriteJSON(w)
	}
	if s.MessageID.Set {
		more.More()
		w.ObjField("message_id")
		s.MessageID.WriteJSON(w)
	}
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	more.More()
	w.ObjField("text")
	w.Str(s.Text)
	w.ObjEnd()
}

// ReadJSON reads EditMessageText from json stream.
func (s *EditMessageText) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EditMessageText to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			s.ChatID = nil
			var elem ID
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.ChatID = &elem
		case "disable_web_page_preview":
			s.DisableWebPagePreview.Reset()
			if err := s.DisableWebPagePreview.ReadJSON(r); err != nil {
				return err
			}
		case "entities":
			s.Entities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Entities = append(s.Entities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(r); err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		case "text":
			v, err := r.Str()
			s.Text = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EncryptedCredentials) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("data")
	w.Str(s.Data)
	more.More()
	w.ObjField("hash")
	w.Str(s.Hash)
	more.More()
	w.ObjField("secret")
	w.Str(s.Secret)
	w.ObjEnd()
}

// ReadJSON reads EncryptedCredentials from json stream.
func (s *EncryptedCredentials) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EncryptedCredentials to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "data":
			v, err := r.Str()
			s.Data = string(v)
			if err != nil {
				return err
			}
		case "hash":
			v, err := r.Str()
			s.Hash = string(v)
			if err != nil {
				return err
			}
		case "secret":
			v, err := r.Str()
			s.Secret = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s EncryptedPassportElement) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Data.Set {
		more.More()
		w.ObjField("data")
		s.Data.WriteJSON(w)
	}
	if s.Email.Set {
		more.More()
		w.ObjField("email")
		s.Email.WriteJSON(w)
	}
	if s.Files != nil {
		more.More()
		w.ObjField("files")
		more.Down()
		w.ArrStart()
		for _, elem := range s.Files {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.FrontSide.Set {
		more.More()
		w.ObjField("front_side")
		s.FrontSide.WriteJSON(w)
	}
	more.More()
	w.ObjField("hash")
	w.Str(s.Hash)
	if s.PhoneNumber.Set {
		more.More()
		w.ObjField("phone_number")
		s.PhoneNumber.WriteJSON(w)
	}
	if s.ReverseSide.Set {
		more.More()
		w.ObjField("reverse_side")
		s.ReverseSide.WriteJSON(w)
	}
	if s.Selfie.Set {
		more.More()
		w.ObjField("selfie")
		s.Selfie.WriteJSON(w)
	}
	if s.Translation != nil {
		more.More()
		w.ObjField("translation")
		more.Down()
		w.ArrStart()
		for _, elem := range s.Translation {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("type")
	w.Str(s.Type)
	w.ObjEnd()
}

// ReadJSON reads EncryptedPassportElement from json stream.
func (s *EncryptedPassportElement) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode EncryptedPassportElement to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "data":
			s.Data.Reset()
			if err := s.Data.ReadJSON(r); err != nil {
				return err
			}
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(r); err != nil {
				return err
			}
		case "files":
			s.Files = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem PassportFile
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Files = append(s.Files, elem)
				return nil
			}); err != nil {
				return err
			}
		case "front_side":
			s.FrontSide.Reset()
			if err := s.FrontSide.ReadJSON(r); err != nil {
				return err
			}
		case "hash":
			v, err := r.Str()
			s.Hash = string(v)
			if err != nil {
				return err
			}
		case "phone_number":
			s.PhoneNumber.Reset()
			if err := s.PhoneNumber.ReadJSON(r); err != nil {
				return err
			}
		case "reverse_side":
			s.ReverseSide.Reset()
			if err := s.ReverseSide.ReadJSON(r); err != nil {
				return err
			}
		case "selfie":
			s.Selfie.Reset()
			if err := s.Selfie.ReadJSON(r); err != nil {
				return err
			}
		case "translation":
			s.Translation = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem PassportFile
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Translation = append(s.Translation, elem)
				return nil
			}); err != nil {
				return err
			}
		case "type":
			v, err := r.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Error) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("description")
	w.Str(s.Description)
	more.More()
	w.ObjField("error_code")
	w.Int(s.ErrorCode)
	more.More()
	w.ObjField("ok")
	w.Bool(s.Ok)
	if s.Parameters.Set {
		more.More()
		w.ObjField("parameters")
		s.Parameters.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Error from json stream.
func (s *Error) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Error to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "description":
			v, err := r.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "error_code":
			v, err := r.Int()
			s.ErrorCode = int(v)
			if err != nil {
				return err
			}
		case "ok":
			v, err := r.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "parameters":
			s.Parameters.Reset()
			if err := s.Parameters.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ErrorStatusCode) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads ErrorStatusCode from json stream.
func (s *ErrorStatusCode) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ErrorStatusCode to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ExportChatInviteLink) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads ExportChatInviteLink from json stream.
func (s *ExportChatInviteLink) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ExportChatInviteLink to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ForwardMessage) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	more.More()
	w.ObjField("from_chat_id")
	s.FromChatID.WriteJSON(w)
	more.More()
	w.ObjField("message_id")
	w.Int(s.MessageID)
	w.ObjEnd()
}

// ReadJSON reads ForwardMessage from json stream.
func (s *ForwardMessage) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ForwardMessage to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "from_chat_id":
			if err := s.FromChatID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			v, err := r.Int()
			s.MessageID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Game) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Animation.Set {
		more.More()
		w.ObjField("animation")
		s.Animation.WriteJSON(w)
	}
	more.More()
	w.ObjField("description")
	w.Str(s.Description)
	more.More()
	w.ObjField("photo")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Photo {
		more.More()
		elem.WriteJSON(w)
	}
	w.ArrEnd()
	more.Up()
	if s.Text.Set {
		more.More()
		w.ObjField("text")
		s.Text.WriteJSON(w)
	}
	if s.TextEntities != nil {
		more.More()
		w.ObjField("text_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.TextEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("title")
	w.Str(s.Title)
	w.ObjEnd()
}

// ReadJSON reads Game from json stream.
func (s *Game) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Game to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "animation":
			s.Animation.Reset()
			if err := s.Animation.ReadJSON(r); err != nil {
				return err
			}
		case "description":
			v, err := r.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "photo":
			s.Photo = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem PhotoSize
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Photo = append(s.Photo, elem)
				return nil
			}); err != nil {
				return err
			}
		case "text":
			s.Text.Reset()
			if err := s.Text.ReadJSON(r); err != nil {
				return err
			}
		case "text_entities":
			s.TextEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.TextEntities = append(s.TextEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "title":
			v, err := r.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetChat) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads GetChat from json stream.
func (s *GetChat) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetChat to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetChatAdministrators) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads GetChatAdministrators from json stream.
func (s *GetChatAdministrators) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetChatAdministrators to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetChatMember) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads GetChatMember from json stream.
func (s *GetChatMember) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetChatMember to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetChatMemberCount) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads GetChatMemberCount from json stream.
func (s *GetChatMemberCount) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetChatMemberCount to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetFile) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	w.ObjEnd()
}

// ReadJSON reads GetFile from json stream.
func (s *GetFile) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetFile to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetGameHighScores) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		w.ObjField("chat_id")
		s.ChatID.WriteJSON(w)
	}
	if s.InlineMessageID.Set {
		more.More()
		w.ObjField("inline_message_id")
		s.InlineMessageID.WriteJSON(w)
	}
	if s.MessageID.Set {
		more.More()
		w.ObjField("message_id")
		s.MessageID.WriteJSON(w)
	}
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads GetGameHighScores from json stream.
func (s *GetGameHighScores) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetGameHighScores to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			s.ChatID.Reset()
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(r); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetMyCommands) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.LanguageCode.Set {
		more.More()
		w.ObjField("language_code")
		s.LanguageCode.WriteJSON(w)
	}
	if s.Scope != nil {
		more.More()
		w.ObjField("scope")
		s.Scope.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads GetMyCommands from json stream.
func (s *GetMyCommands) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetMyCommands to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.ReadJSON(r); err != nil {
				return err
			}
		case "scope":
			s.Scope = nil
			var elem BotCommandScope
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.Scope = &elem
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetStickerSet) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("name")
	w.Str(s.Name)
	w.ObjEnd()
}

// ReadJSON reads GetStickerSet from json stream.
func (s *GetStickerSet) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetStickerSet to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "name":
			v, err := r.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetUpdates) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowedUpdates != nil {
		more.More()
		w.ObjField("allowed_updates")
		more.Down()
		w.ArrStart()
		for _, elem := range s.AllowedUpdates {
			more.More()
			w.Str(elem)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.Limit.Set {
		more.More()
		w.ObjField("limit")
		s.Limit.WriteJSON(w)
	}
	if s.Offset.Set {
		more.More()
		w.ObjField("offset")
		s.Offset.WriteJSON(w)
	}
	if s.Timeout.Set {
		more.More()
		w.ObjField("timeout")
		s.Timeout.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads GetUpdates from json stream.
func (s *GetUpdates) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetUpdates to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allowed_updates":
			s.AllowedUpdates = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem string
				v, err := r.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AllowedUpdates = append(s.AllowedUpdates, elem)
				return nil
			}); err != nil {
				return err
			}
		case "limit":
			s.Limit.Reset()
			if err := s.Limit.ReadJSON(r); err != nil {
				return err
			}
		case "offset":
			s.Offset.Reset()
			if err := s.Offset.ReadJSON(r); err != nil {
				return err
			}
		case "timeout":
			s.Timeout.Reset()
			if err := s.Timeout.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s GetUserProfilePhotos) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Limit.Set {
		more.More()
		w.ObjField("limit")
		s.Limit.WriteJSON(w)
	}
	if s.Offset.Set {
		more.More()
		w.ObjField("offset")
		s.Offset.WriteJSON(w)
	}
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads GetUserProfilePhotos from json stream.
func (s *GetUserProfilePhotos) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode GetUserProfilePhotos to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "limit":
			s.Limit.Reset()
			if err := s.Limit.ReadJSON(r); err != nil {
				return err
			}
		case "offset":
			s.Offset.Reset()
			if err := s.Offset.ReadJSON(r); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ID) WriteJSON(w *json.Writer) {
	switch s.Type {
	case StringID:
		w.Str(s.String)
	case IntID:
		w.Int(s.Int)
	}
}

// ReadJSON reads value from json reader.
func (s *ID) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ID to nil`)
	}
	switch t := r.Next(); t {
	case json.String:
		v, err := r.Str()
		s.String = string(v)
		if err != nil {
			return err
		}
		s.Type = StringID
	case json.Number:
		v, err := r.Int()
		s.Int = int(v)
		if err != nil {
			return err
		}
		s.Type = IntID
	default:
		return fmt.Errorf("unexpected json type %q", t)
	}
	return nil
}

func (InlineKeyboardMarkup) WriteJSON(w *json.Writer)      {}
func (InlineKeyboardMarkup) ReadJSON(r *json.Reader) error { return nil }

func (InlineQueryResult) WriteJSON(w *json.Writer)      {}
func (InlineQueryResult) ReadJSON(r *json.Reader) error { return nil }

// WriteJSON implements json.Marshaler.
func (s InputMedia) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads InputMedia from json stream.
func (s *InputMedia) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode InputMedia to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Invoice) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("currency")
	w.Str(s.Currency)
	more.More()
	w.ObjField("description")
	w.Str(s.Description)
	more.More()
	w.ObjField("start_parameter")
	w.Str(s.StartParameter)
	more.More()
	w.ObjField("title")
	w.Str(s.Title)
	more.More()
	w.ObjField("total_amount")
	w.Int(s.TotalAmount)
	w.ObjEnd()
}

// ReadJSON reads Invoice from json stream.
func (s *Invoice) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Invoice to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "currency":
			v, err := r.Str()
			s.Currency = string(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := r.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "start_parameter":
			v, err := r.Str()
			s.StartParameter = string(v)
			if err != nil {
				return err
			}
		case "title":
			v, err := r.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		case "total_amount":
			v, err := r.Int()
			s.TotalAmount = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s LabeledPrice) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("amount")
	w.Int(s.Amount)
	more.More()
	w.ObjField("label")
	w.Str(s.Label)
	w.ObjEnd()
}

// ReadJSON reads LabeledPrice from json stream.
func (s *LabeledPrice) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode LabeledPrice to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "amount":
			v, err := r.Int()
			s.Amount = int(v)
			if err != nil {
				return err
			}
		case "label":
			v, err := r.Str()
			s.Label = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s LeaveChat) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads LeaveChat from json stream.
func (s *LeaveChat) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode LeaveChat to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Location) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Heading.Set {
		more.More()
		w.ObjField("heading")
		s.Heading.WriteJSON(w)
	}
	if s.HorizontalAccuracy.Set {
		more.More()
		w.ObjField("horizontal_accuracy")
		s.HorizontalAccuracy.WriteJSON(w)
	}
	more.More()
	w.ObjField("latitude")
	w.Float64(s.Latitude)
	if s.LivePeriod.Set {
		more.More()
		w.ObjField("live_period")
		s.LivePeriod.WriteJSON(w)
	}
	more.More()
	w.ObjField("longitude")
	w.Float64(s.Longitude)
	if s.ProximityAlertRadius.Set {
		more.More()
		w.ObjField("proximity_alert_radius")
		s.ProximityAlertRadius.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Location from json stream.
func (s *Location) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Location to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "heading":
			s.Heading.Reset()
			if err := s.Heading.ReadJSON(r); err != nil {
				return err
			}
		case "horizontal_accuracy":
			s.HorizontalAccuracy.Reset()
			if err := s.HorizontalAccuracy.ReadJSON(r); err != nil {
				return err
			}
		case "latitude":
			v, err := r.Float64()
			s.Latitude = float64(v)
			if err != nil {
				return err
			}
		case "live_period":
			s.LivePeriod.Reset()
			if err := s.LivePeriod.ReadJSON(r); err != nil {
				return err
			}
		case "longitude":
			v, err := r.Float64()
			s.Longitude = float64(v)
			if err != nil {
				return err
			}
		case "proximity_alert_radius":
			s.ProximityAlertRadius.Reset()
			if err := s.ProximityAlertRadius.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MaskPosition) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("point")
	w.Str(s.Point)
	more.More()
	w.ObjField("scale")
	w.Float64(s.Scale)
	more.More()
	w.ObjField("x_shift")
	w.Float64(s.XShift)
	more.More()
	w.ObjField("y_shift")
	w.Float64(s.YShift)
	w.ObjEnd()
}

// ReadJSON reads MaskPosition from json stream.
func (s *MaskPosition) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MaskPosition to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "point":
			v, err := r.Str()
			s.Point = string(v)
			if err != nil {
				return err
			}
		case "scale":
			v, err := r.Float64()
			s.Scale = float64(v)
			if err != nil {
				return err
			}
		case "x_shift":
			v, err := r.Float64()
			s.XShift = float64(v)
			if err != nil {
				return err
			}
		case "y_shift":
			v, err := r.Float64()
			s.YShift = float64(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Message) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Animation.Set {
		more.More()
		w.ObjField("animation")
		s.Animation.WriteJSON(w)
	}
	if s.Audio.Set {
		more.More()
		w.ObjField("audio")
		s.Audio.WriteJSON(w)
	}
	if s.AuthorSignature.Set {
		more.More()
		w.ObjField("author_signature")
		s.AuthorSignature.WriteJSON(w)
	}
	if s.Caption.Set {
		more.More()
		w.ObjField("caption")
		s.Caption.WriteJSON(w)
	}
	if s.CaptionEntities != nil {
		more.More()
		w.ObjField("caption_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.ChannelChatCreated.Set {
		more.More()
		w.ObjField("channel_chat_created")
		s.ChannelChatCreated.WriteJSON(w)
	}
	if s.Chat != nil {
		more.More()
		w.ObjField("chat")
		s.Chat.WriteJSON(w)
	}
	if s.ConnectedWebsite.Set {
		more.More()
		w.ObjField("connected_website")
		s.ConnectedWebsite.WriteJSON(w)
	}
	if s.Contact.Set {
		more.More()
		w.ObjField("contact")
		s.Contact.WriteJSON(w)
	}
	more.More()
	w.ObjField("date")
	w.Int(s.Date)
	if s.DeleteChatPhoto.Set {
		more.More()
		w.ObjField("delete_chat_photo")
		s.DeleteChatPhoto.WriteJSON(w)
	}
	if s.Dice.Set {
		more.More()
		w.ObjField("dice")
		s.Dice.WriteJSON(w)
	}
	if s.Document.Set {
		more.More()
		w.ObjField("document")
		s.Document.WriteJSON(w)
	}
	if s.EditDate.Set {
		more.More()
		w.ObjField("edit_date")
		s.EditDate.WriteJSON(w)
	}
	if s.Entities != nil {
		more.More()
		w.ObjField("entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.Entities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.ForwardDate.Set {
		more.More()
		w.ObjField("forward_date")
		s.ForwardDate.WriteJSON(w)
	}
	if s.ForwardFrom.Set {
		more.More()
		w.ObjField("forward_from")
		s.ForwardFrom.WriteJSON(w)
	}
	if s.ForwardFromChat != nil {
		more.More()
		w.ObjField("forward_from_chat")
		s.ForwardFromChat.WriteJSON(w)
	}
	if s.ForwardFromMessageID.Set {
		more.More()
		w.ObjField("forward_from_message_id")
		s.ForwardFromMessageID.WriteJSON(w)
	}
	if s.ForwardSenderName.Set {
		more.More()
		w.ObjField("forward_sender_name")
		s.ForwardSenderName.WriteJSON(w)
	}
	if s.ForwardSignature.Set {
		more.More()
		w.ObjField("forward_signature")
		s.ForwardSignature.WriteJSON(w)
	}
	if s.From.Set {
		more.More()
		w.ObjField("from")
		s.From.WriteJSON(w)
	}
	if s.Game.Set {
		more.More()
		w.ObjField("game")
		s.Game.WriteJSON(w)
	}
	if s.GroupChatCreated.Set {
		more.More()
		w.ObjField("group_chat_created")
		s.GroupChatCreated.WriteJSON(w)
	}
	if s.Invoice.Set {
		more.More()
		w.ObjField("invoice")
		s.Invoice.WriteJSON(w)
	}
	if s.LeftChatMember.Set {
		more.More()
		w.ObjField("left_chat_member")
		s.LeftChatMember.WriteJSON(w)
	}
	if s.Location.Set {
		more.More()
		w.ObjField("location")
		s.Location.WriteJSON(w)
	}
	if s.MediaGroupID.Set {
		more.More()
		w.ObjField("media_group_id")
		s.MediaGroupID.WriteJSON(w)
	}
	if s.MessageAutoDeleteTimerChanged.Set {
		more.More()
		w.ObjField("message_auto_delete_timer_changed")
		s.MessageAutoDeleteTimerChanged.WriteJSON(w)
	}
	more.More()
	w.ObjField("message_id")
	w.Int(s.MessageID)
	if s.MigrateFromChatID.Set {
		more.More()
		w.ObjField("migrate_from_chat_id")
		s.MigrateFromChatID.WriteJSON(w)
	}
	if s.MigrateToChatID.Set {
		more.More()
		w.ObjField("migrate_to_chat_id")
		s.MigrateToChatID.WriteJSON(w)
	}
	if s.NewChatMembers != nil {
		more.More()
		w.ObjField("new_chat_members")
		more.Down()
		w.ArrStart()
		for _, elem := range s.NewChatMembers {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.NewChatPhoto != nil {
		more.More()
		w.ObjField("new_chat_photo")
		more.Down()
		w.ArrStart()
		for _, elem := range s.NewChatPhoto {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.NewChatTitle.Set {
		more.More()
		w.ObjField("new_chat_title")
		s.NewChatTitle.WriteJSON(w)
	}
	if s.PassportData.Set {
		more.More()
		w.ObjField("passport_data")
		s.PassportData.WriteJSON(w)
	}
	if s.Photo != nil {
		more.More()
		w.ObjField("photo")
		more.Down()
		w.ArrStart()
		for _, elem := range s.Photo {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.PinnedMessage != nil {
		more.More()
		w.ObjField("pinned_message")
		s.PinnedMessage.WriteJSON(w)
	}
	if s.Poll.Set {
		more.More()
		w.ObjField("poll")
		s.Poll.WriteJSON(w)
	}
	if s.ProximityAlertTriggered.Set {
		more.More()
		w.ObjField("proximity_alert_triggered")
		s.ProximityAlertTriggered.WriteJSON(w)
	}
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	if s.ReplyToMessage != nil {
		more.More()
		w.ObjField("reply_to_message")
		s.ReplyToMessage.WriteJSON(w)
	}
	if s.SenderChat != nil {
		more.More()
		w.ObjField("sender_chat")
		s.SenderChat.WriteJSON(w)
	}
	if s.Sticker.Set {
		more.More()
		w.ObjField("sticker")
		s.Sticker.WriteJSON(w)
	}
	if s.SuccessfulPayment.Set {
		more.More()
		w.ObjField("successful_payment")
		s.SuccessfulPayment.WriteJSON(w)
	}
	if s.SupergroupChatCreated.Set {
		more.More()
		w.ObjField("supergroup_chat_created")
		s.SupergroupChatCreated.WriteJSON(w)
	}
	if s.Text.Set {
		more.More()
		w.ObjField("text")
		s.Text.WriteJSON(w)
	}
	if s.Venue.Set {
		more.More()
		w.ObjField("venue")
		s.Venue.WriteJSON(w)
	}
	if s.ViaBot.Set {
		more.More()
		w.ObjField("via_bot")
		s.ViaBot.WriteJSON(w)
	}
	if s.Video.Set {
		more.More()
		w.ObjField("video")
		s.Video.WriteJSON(w)
	}
	if s.VideoNote.Set {
		more.More()
		w.ObjField("video_note")
		s.VideoNote.WriteJSON(w)
	}
	if s.Voice.Set {
		more.More()
		w.ObjField("voice")
		s.Voice.WriteJSON(w)
	}
	if s.VoiceChatEnded.Set {
		more.More()
		w.ObjField("voice_chat_ended")
		s.VoiceChatEnded.WriteJSON(w)
	}
	if s.VoiceChatParticipantsInvited.Set {
		more.More()
		w.ObjField("voice_chat_participants_invited")
		s.VoiceChatParticipantsInvited.WriteJSON(w)
	}
	if s.VoiceChatScheduled.Set {
		more.More()
		w.ObjField("voice_chat_scheduled")
		s.VoiceChatScheduled.WriteJSON(w)
	}
	if s.VoiceChatStarted != nil {
		more.More()
		w.ObjField("voice_chat_started")
		s.VoiceChatStarted.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Message from json stream.
func (s *Message) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Message to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "animation":
			s.Animation.Reset()
			if err := s.Animation.ReadJSON(r); err != nil {
				return err
			}
		case "audio":
			s.Audio.Reset()
			if err := s.Audio.ReadJSON(r); err != nil {
				return err
			}
		case "author_signature":
			s.AuthorSignature.Reset()
			if err := s.AuthorSignature.ReadJSON(r); err != nil {
				return err
			}
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(r); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "channel_chat_created":
			s.ChannelChatCreated.Reset()
			if err := s.ChannelChatCreated.ReadJSON(r); err != nil {
				return err
			}
		case "chat":
			s.Chat = nil
			var elem Chat
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.Chat = &elem
		case "connected_website":
			s.ConnectedWebsite.Reset()
			if err := s.ConnectedWebsite.ReadJSON(r); err != nil {
				return err
			}
		case "contact":
			s.Contact.Reset()
			if err := s.Contact.ReadJSON(r); err != nil {
				return err
			}
		case "date":
			v, err := r.Int()
			s.Date = int(v)
			if err != nil {
				return err
			}
		case "delete_chat_photo":
			s.DeleteChatPhoto.Reset()
			if err := s.DeleteChatPhoto.ReadJSON(r); err != nil {
				return err
			}
		case "dice":
			s.Dice.Reset()
			if err := s.Dice.ReadJSON(r); err != nil {
				return err
			}
		case "document":
			s.Document.Reset()
			if err := s.Document.ReadJSON(r); err != nil {
				return err
			}
		case "edit_date":
			s.EditDate.Reset()
			if err := s.EditDate.ReadJSON(r); err != nil {
				return err
			}
		case "entities":
			s.Entities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Entities = append(s.Entities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "forward_date":
			s.ForwardDate.Reset()
			if err := s.ForwardDate.ReadJSON(r); err != nil {
				return err
			}
		case "forward_from":
			s.ForwardFrom.Reset()
			if err := s.ForwardFrom.ReadJSON(r); err != nil {
				return err
			}
		case "forward_from_chat":
			s.ForwardFromChat = nil
			var elem Chat
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.ForwardFromChat = &elem
		case "forward_from_message_id":
			s.ForwardFromMessageID.Reset()
			if err := s.ForwardFromMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "forward_sender_name":
			s.ForwardSenderName.Reset()
			if err := s.ForwardSenderName.ReadJSON(r); err != nil {
				return err
			}
		case "forward_signature":
			s.ForwardSignature.Reset()
			if err := s.ForwardSignature.ReadJSON(r); err != nil {
				return err
			}
		case "from":
			s.From.Reset()
			if err := s.From.ReadJSON(r); err != nil {
				return err
			}
		case "game":
			s.Game.Reset()
			if err := s.Game.ReadJSON(r); err != nil {
				return err
			}
		case "group_chat_created":
			s.GroupChatCreated.Reset()
			if err := s.GroupChatCreated.ReadJSON(r); err != nil {
				return err
			}
		case "invoice":
			s.Invoice.Reset()
			if err := s.Invoice.ReadJSON(r); err != nil {
				return err
			}
		case "left_chat_member":
			s.LeftChatMember.Reset()
			if err := s.LeftChatMember.ReadJSON(r); err != nil {
				return err
			}
		case "location":
			s.Location.Reset()
			if err := s.Location.ReadJSON(r); err != nil {
				return err
			}
		case "media_group_id":
			s.MediaGroupID.Reset()
			if err := s.MediaGroupID.ReadJSON(r); err != nil {
				return err
			}
		case "message_auto_delete_timer_changed":
			s.MessageAutoDeleteTimerChanged.Reset()
			if err := s.MessageAutoDeleteTimerChanged.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			v, err := r.Int()
			s.MessageID = int(v)
			if err != nil {
				return err
			}
		case "migrate_from_chat_id":
			s.MigrateFromChatID.Reset()
			if err := s.MigrateFromChatID.ReadJSON(r); err != nil {
				return err
			}
		case "migrate_to_chat_id":
			s.MigrateToChatID.Reset()
			if err := s.MigrateToChatID.ReadJSON(r); err != nil {
				return err
			}
		case "new_chat_members":
			s.NewChatMembers = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem User
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.NewChatMembers = append(s.NewChatMembers, elem)
				return nil
			}); err != nil {
				return err
			}
		case "new_chat_photo":
			s.NewChatPhoto = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem PhotoSize
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.NewChatPhoto = append(s.NewChatPhoto, elem)
				return nil
			}); err != nil {
				return err
			}
		case "new_chat_title":
			s.NewChatTitle.Reset()
			if err := s.NewChatTitle.ReadJSON(r); err != nil {
				return err
			}
		case "passport_data":
			s.PassportData.Reset()
			if err := s.PassportData.ReadJSON(r); err != nil {
				return err
			}
		case "photo":
			s.Photo = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem PhotoSize
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Photo = append(s.Photo, elem)
				return nil
			}); err != nil {
				return err
			}
		case "pinned_message":
			s.PinnedMessage = nil
			var elem Message
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.PinnedMessage = &elem
		case "poll":
			s.Poll.Reset()
			if err := s.Poll.ReadJSON(r); err != nil {
				return err
			}
		case "proximity_alert_triggered":
			s.ProximityAlertTriggered.Reset()
			if err := s.ProximityAlertTriggered.ReadJSON(r); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message":
			s.ReplyToMessage = nil
			var elem Message
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.ReplyToMessage = &elem
		case "sender_chat":
			s.SenderChat = nil
			var elem Chat
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.SenderChat = &elem
		case "sticker":
			s.Sticker.Reset()
			if err := s.Sticker.ReadJSON(r); err != nil {
				return err
			}
		case "successful_payment":
			s.SuccessfulPayment.Reset()
			if err := s.SuccessfulPayment.ReadJSON(r); err != nil {
				return err
			}
		case "supergroup_chat_created":
			s.SupergroupChatCreated.Reset()
			if err := s.SupergroupChatCreated.ReadJSON(r); err != nil {
				return err
			}
		case "text":
			s.Text.Reset()
			if err := s.Text.ReadJSON(r); err != nil {
				return err
			}
		case "venue":
			s.Venue.Reset()
			if err := s.Venue.ReadJSON(r); err != nil {
				return err
			}
		case "via_bot":
			s.ViaBot.Reset()
			if err := s.ViaBot.ReadJSON(r); err != nil {
				return err
			}
		case "video":
			s.Video.Reset()
			if err := s.Video.ReadJSON(r); err != nil {
				return err
			}
		case "video_note":
			s.VideoNote.Reset()
			if err := s.VideoNote.ReadJSON(r); err != nil {
				return err
			}
		case "voice":
			s.Voice.Reset()
			if err := s.Voice.ReadJSON(r); err != nil {
				return err
			}
		case "voice_chat_ended":
			s.VoiceChatEnded.Reset()
			if err := s.VoiceChatEnded.ReadJSON(r); err != nil {
				return err
			}
		case "voice_chat_participants_invited":
			s.VoiceChatParticipantsInvited.Reset()
			if err := s.VoiceChatParticipantsInvited.ReadJSON(r); err != nil {
				return err
			}
		case "voice_chat_scheduled":
			s.VoiceChatScheduled.Reset()
			if err := s.VoiceChatScheduled.ReadJSON(r); err != nil {
				return err
			}
		case "voice_chat_started":
			s.VoiceChatStarted = nil
			var elem VoiceChatStarted
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.VoiceChatStarted = &elem
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MessageAutoDeleteTimerChanged) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("message_auto_delete_time")
	w.Int(s.MessageAutoDeleteTime)
	w.ObjEnd()
}

// ReadJSON reads MessageAutoDeleteTimerChanged from json stream.
func (s *MessageAutoDeleteTimerChanged) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MessageAutoDeleteTimerChanged to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "message_auto_delete_time":
			v, err := r.Int()
			s.MessageAutoDeleteTime = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s MessageEntity) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Language.Set {
		more.More()
		w.ObjField("language")
		s.Language.WriteJSON(w)
	}
	more.More()
	w.ObjField("length")
	w.Int(s.Length)
	more.More()
	w.ObjField("offset")
	w.Int(s.Offset)
	more.More()
	w.ObjField("type")
	w.Str(s.Type)
	if s.URL.Set {
		more.More()
		w.ObjField("url")
		s.URL.WriteJSON(w)
	}
	if s.User.Set {
		more.More()
		w.ObjField("user")
		s.User.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads MessageEntity from json stream.
func (s *MessageEntity) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode MessageEntity to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "language":
			s.Language.Reset()
			if err := s.Language.ReadJSON(r); err != nil {
				return err
			}
		case "length":
			v, err := r.Int()
			s.Length = int(v)
			if err != nil {
				return err
			}
		case "offset":
			v, err := r.Int()
			s.Offset = int(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := r.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(r); err != nil {
				return err
			}
		case "user":
			s.User.Reset()
			if err := s.User.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON writes json value of Animation to json stream.
func (o OptAnimation) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Animation from json iterator.
func (o *OptAnimation) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAnimation to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAnimation", r.Next())
	}
}

// WriteJSON writes json value of Audio to json stream.
func (o OptAudio) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Audio from json iterator.
func (o *OptAudio) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptAudio to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptAudio", r.Next())
	}
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(w *json.Writer) {
	w.Bool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptBool to nil`)
	}
	switch r.Next() {
	case json.Bool:
		o.Set = true
		v, err := r.Bool()
		if err != nil {
			return err
		}
		o.Value = bool(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptBool", r.Next())
	}
}

// WriteJSON writes json value of ChatLocation to json stream.
func (o OptChatLocation) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of ChatLocation from json iterator.
func (o *OptChatLocation) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptChatLocation to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptChatLocation", r.Next())
	}
}

// WriteJSON writes json value of ChatPermissions to json stream.
func (o OptChatPermissions) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of ChatPermissions from json iterator.
func (o *OptChatPermissions) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptChatPermissions to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptChatPermissions", r.Next())
	}
}

// WriteJSON writes json value of ChatPhoto to json stream.
func (o OptChatPhoto) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of ChatPhoto from json iterator.
func (o *OptChatPhoto) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptChatPhoto to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptChatPhoto", r.Next())
	}
}

// WriteJSON writes json value of Contact to json stream.
func (o OptContact) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Contact from json iterator.
func (o *OptContact) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptContact to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptContact", r.Next())
	}
}

// WriteJSON writes json value of Dice to json stream.
func (o OptDice) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Dice from json iterator.
func (o *OptDice) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptDice to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptDice", r.Next())
	}
}

// WriteJSON writes json value of Document to json stream.
func (o OptDocument) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Document from json iterator.
func (o *OptDocument) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptDocument to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptDocument", r.Next())
	}
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(w *json.Writer) {
	w.Float64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptFloat64 to nil`)
	}
	switch r.Next() {
	case json.Number:
		o.Set = true
		v, err := r.Float64()
		if err != nil {
			return err
		}
		o.Value = float64(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptFloat64", r.Next())
	}
}

// WriteJSON writes json value of Game to json stream.
func (o OptGame) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Game from json iterator.
func (o *OptGame) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptGame to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptGame", r.Next())
	}
}

// WriteJSON writes json value of InlineKeyboardMarkup to json stream.
func (o OptInlineKeyboardMarkup) WriteJSON(w *json.Writer) {
}

// ReadJSON reads json value of InlineKeyboardMarkup from json iterator.
func (o *OptInlineKeyboardMarkup) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInlineKeyboardMarkup to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Set = true
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInlineKeyboardMarkup", r.Next())
	}
}

// WriteJSON writes json value of int to json stream.
func (o OptInt) WriteJSON(w *json.Writer) {
	w.Int(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptInt) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInt to nil`)
	}
	switch r.Next() {
	case json.Number:
		o.Set = true
		v, err := r.Int()
		if err != nil {
			return err
		}
		o.Value = int(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInt", r.Next())
	}
}

// WriteJSON writes json value of int64 to json stream.
func (o OptInt64) WriteJSON(w *json.Writer) {
	w.Int64(int64(o.Value))
}

// ReadJSON reads json value of int64 from json iterator.
func (o *OptInt64) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInt64 to nil`)
	}
	switch r.Next() {
	case json.Number:
		o.Set = true
		v, err := r.Int64()
		if err != nil {
			return err
		}
		o.Value = int64(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInt64", r.Next())
	}
}

// WriteJSON writes json value of Invoice to json stream.
func (o OptInvoice) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Invoice from json iterator.
func (o *OptInvoice) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptInvoice to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptInvoice", r.Next())
	}
}

// WriteJSON writes json value of Location to json stream.
func (o OptLocation) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Location from json iterator.
func (o *OptLocation) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptLocation to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptLocation", r.Next())
	}
}

// WriteJSON writes json value of MaskPosition to json stream.
func (o OptMaskPosition) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of MaskPosition from json iterator.
func (o *OptMaskPosition) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptMaskPosition to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptMaskPosition", r.Next())
	}
}

// WriteJSON writes json value of Message to json stream.
func (o OptMessage) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Message from json iterator.
func (o *OptMessage) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptMessage to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptMessage", r.Next())
	}
}

// WriteJSON writes json value of MessageAutoDeleteTimerChanged to json stream.
func (o OptMessageAutoDeleteTimerChanged) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of MessageAutoDeleteTimerChanged from json iterator.
func (o *OptMessageAutoDeleteTimerChanged) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptMessageAutoDeleteTimerChanged to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptMessageAutoDeleteTimerChanged", r.Next())
	}
}

// WriteJSON writes json value of OrderInfo to json stream.
func (o OptOrderInfo) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of OrderInfo from json iterator.
func (o *OptOrderInfo) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptOrderInfo to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptOrderInfo", r.Next())
	}
}

// WriteJSON writes json value of PassportData to json stream.
func (o OptPassportData) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of PassportData from json iterator.
func (o *OptPassportData) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPassportData to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPassportData", r.Next())
	}
}

// WriteJSON writes json value of PassportFile to json stream.
func (o OptPassportFile) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of PassportFile from json iterator.
func (o *OptPassportFile) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPassportFile to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPassportFile", r.Next())
	}
}

// WriteJSON writes json value of PhotoSize to json stream.
func (o OptPhotoSize) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of PhotoSize from json iterator.
func (o *OptPhotoSize) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPhotoSize to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPhotoSize", r.Next())
	}
}

// WriteJSON writes json value of Poll to json stream.
func (o OptPoll) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Poll from json iterator.
func (o *OptPoll) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptPoll to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptPoll", r.Next())
	}
}

// WriteJSON writes json value of ProximityAlertTriggered to json stream.
func (o OptProximityAlertTriggered) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of ProximityAlertTriggered from json iterator.
func (o *OptProximityAlertTriggered) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptProximityAlertTriggered to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptProximityAlertTriggered", r.Next())
	}
}

// WriteJSON writes json value of Response to json stream.
func (o OptResponse) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Response from json iterator.
func (o *OptResponse) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptResponse to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptResponse", r.Next())
	}
}

// WriteJSON writes json value of ShippingAddress to json stream.
func (o OptShippingAddress) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of ShippingAddress from json iterator.
func (o *OptShippingAddress) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptShippingAddress to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptShippingAddress", r.Next())
	}
}

// WriteJSON writes json value of Sticker to json stream.
func (o OptSticker) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Sticker from json iterator.
func (o *OptSticker) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptSticker to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptSticker", r.Next())
	}
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(w *json.Writer) {
	w.Str(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptString to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Set = true
		v, err := r.Str()
		if err != nil {
			return err
		}
		o.Value = string(v)
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptString", r.Next())
	}
}

// WriteJSON writes json value of SuccessfulPayment to json stream.
func (o OptSuccessfulPayment) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of SuccessfulPayment from json iterator.
func (o *OptSuccessfulPayment) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptSuccessfulPayment to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptSuccessfulPayment", r.Next())
	}
}

// WriteJSON writes json value of url.URL to json stream.
func (o OptURL) WriteJSON(w *json.Writer) {
	json.WriteURI(w, o.Value)
}

// ReadJSON reads json value of url.URL from json iterator.
func (o *OptURL) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptURL to nil`)
	}
	switch r.Next() {
	case json.String:
		o.Set = true
		v, err := json.ReadURI(r)
		if err != nil {
			return err
		}
		o.Value = v
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptURL", r.Next())
	}
}

// WriteJSON writes json value of User to json stream.
func (o OptUser) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of User from json iterator.
func (o *OptUser) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptUser to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptUser", r.Next())
	}
}

// WriteJSON writes json value of Venue to json stream.
func (o OptVenue) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Venue from json iterator.
func (o *OptVenue) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptVenue to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptVenue", r.Next())
	}
}

// WriteJSON writes json value of Video to json stream.
func (o OptVideo) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Video from json iterator.
func (o *OptVideo) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptVideo to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptVideo", r.Next())
	}
}

// WriteJSON writes json value of VideoNote to json stream.
func (o OptVideoNote) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of VideoNote from json iterator.
func (o *OptVideoNote) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptVideoNote to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptVideoNote", r.Next())
	}
}

// WriteJSON writes json value of Voice to json stream.
func (o OptVoice) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of Voice from json iterator.
func (o *OptVoice) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptVoice to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptVoice", r.Next())
	}
}

// WriteJSON writes json value of VoiceChatEnded to json stream.
func (o OptVoiceChatEnded) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of VoiceChatEnded from json iterator.
func (o *OptVoiceChatEnded) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptVoiceChatEnded to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptVoiceChatEnded", r.Next())
	}
}

// WriteJSON writes json value of VoiceChatParticipantsInvited to json stream.
func (o OptVoiceChatParticipantsInvited) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of VoiceChatParticipantsInvited from json iterator.
func (o *OptVoiceChatParticipantsInvited) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptVoiceChatParticipantsInvited to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptVoiceChatParticipantsInvited", r.Next())
	}
}

// WriteJSON writes json value of VoiceChatScheduled to json stream.
func (o OptVoiceChatScheduled) WriteJSON(w *json.Writer) {
	o.Value.WriteJSON(w)
}

// ReadJSON reads json value of VoiceChatScheduled from json iterator.
func (o *OptVoiceChatScheduled) ReadJSON(r *json.Reader) error {
	if o == nil {
		return fmt.Errorf(`invalid: unable to decode OptVoiceChatScheduled to nil`)
	}
	switch r.Next() {
	case json.Object:
		o.Set = true
		if err := o.Value.ReadJSON(r); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("unexpected type %q while reading OptVoiceChatScheduled", r.Next())
	}
}

// WriteJSON implements json.Marshaler.
func (s OrderInfo) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Email.Set {
		more.More()
		w.ObjField("email")
		s.Email.WriteJSON(w)
	}
	if s.Name.Set {
		more.More()
		w.ObjField("name")
		s.Name.WriteJSON(w)
	}
	if s.PhoneNumber.Set {
		more.More()
		w.ObjField("phone_number")
		s.PhoneNumber.WriteJSON(w)
	}
	if s.ShippingAddress.Set {
		more.More()
		w.ObjField("shipping_address")
		s.ShippingAddress.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads OrderInfo from json stream.
func (s *OrderInfo) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode OrderInfo to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "email":
			s.Email.Reset()
			if err := s.Email.ReadJSON(r); err != nil {
				return err
			}
		case "name":
			s.Name.Reset()
			if err := s.Name.ReadJSON(r); err != nil {
				return err
			}
		case "phone_number":
			s.PhoneNumber.Reset()
			if err := s.PhoneNumber.ReadJSON(r); err != nil {
				return err
			}
		case "shipping_address":
			s.ShippingAddress.Reset()
			if err := s.ShippingAddress.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PassportData) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("credentials")
	s.Credentials.WriteJSON(w)
	more.More()
	w.ObjField("data")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Data {
		more.More()
		elem.WriteJSON(w)
	}
	w.ArrEnd()
	more.Up()
	w.ObjEnd()
}

// ReadJSON reads PassportData from json stream.
func (s *PassportData) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PassportData to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "credentials":
			if err := s.Credentials.ReadJSON(r); err != nil {
				return err
			}
		case "data":
			s.Data = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem EncryptedPassportElement
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Data = append(s.Data, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PassportElementError) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads PassportElementError from json stream.
func (s *PassportElementError) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PassportElementError to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PassportFile) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("file_date")
	w.Int(s.FileDate)
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	more.More()
	w.ObjField("file_size")
	w.Int(s.FileSize)
	more.More()
	w.ObjField("file_unique_id")
	w.Str(s.FileUniqueID)
	w.ObjEnd()
}

// ReadJSON reads PassportFile from json stream.
func (s *PassportFile) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PassportFile to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "file_date":
			v, err := r.Int()
			s.FileDate = int(v)
			if err != nil {
				return err
			}
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_size":
			v, err := r.Int()
			s.FileSize = int(v)
			if err != nil {
				return err
			}
		case "file_unique_id":
			v, err := r.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PhotoSize) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	if s.FileSize.Set {
		more.More()
		w.ObjField("file_size")
		s.FileSize.WriteJSON(w)
	}
	more.More()
	w.ObjField("file_unique_id")
	w.Str(s.FileUniqueID)
	more.More()
	w.ObjField("height")
	w.Int(s.Height)
	more.More()
	w.ObjField("width")
	w.Int(s.Width)
	w.ObjEnd()
}

// ReadJSON reads PhotoSize from json stream.
func (s *PhotoSize) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PhotoSize to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.ReadJSON(r); err != nil {
				return err
			}
		case "file_unique_id":
			v, err := r.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "height":
			v, err := r.Int()
			s.Height = int(v)
			if err != nil {
				return err
			}
		case "width":
			v, err := r.Int()
			s.Width = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PinChatMessage) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	more.More()
	w.ObjField("message_id")
	w.Int(s.MessageID)
	w.ObjEnd()
}

// ReadJSON reads PinChatMessage from json stream.
func (s *PinChatMessage) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PinChatMessage to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			v, err := r.Int()
			s.MessageID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Poll) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("allows_multiple_answers")
	w.Bool(s.AllowsMultipleAnswers)
	if s.CloseDate.Set {
		more.More()
		w.ObjField("close_date")
		s.CloseDate.WriteJSON(w)
	}
	if s.CorrectOptionID.Set {
		more.More()
		w.ObjField("correct_option_id")
		s.CorrectOptionID.WriteJSON(w)
	}
	if s.Explanation.Set {
		more.More()
		w.ObjField("explanation")
		s.Explanation.WriteJSON(w)
	}
	if s.ExplanationEntities != nil {
		more.More()
		w.ObjField("explanation_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.ExplanationEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("id")
	w.Str(s.ID)
	more.More()
	w.ObjField("is_anonymous")
	w.Bool(s.IsAnonymous)
	more.More()
	w.ObjField("is_closed")
	w.Bool(s.IsClosed)
	if s.OpenPeriod.Set {
		more.More()
		w.ObjField("open_period")
		s.OpenPeriod.WriteJSON(w)
	}
	more.More()
	w.ObjField("options")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Options {
		more.More()
		elem.WriteJSON(w)
	}
	w.ArrEnd()
	more.Up()
	more.More()
	w.ObjField("question")
	w.Str(s.Question)
	more.More()
	w.ObjField("total_voter_count")
	w.Int(s.TotalVoterCount)
	more.More()
	w.ObjField("type")
	w.Str(s.Type)
	w.ObjEnd()
}

// ReadJSON reads Poll from json stream.
func (s *Poll) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Poll to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allows_multiple_answers":
			v, err := r.Bool()
			s.AllowsMultipleAnswers = bool(v)
			if err != nil {
				return err
			}
		case "close_date":
			s.CloseDate.Reset()
			if err := s.CloseDate.ReadJSON(r); err != nil {
				return err
			}
		case "correct_option_id":
			s.CorrectOptionID.Reset()
			if err := s.CorrectOptionID.ReadJSON(r); err != nil {
				return err
			}
		case "explanation":
			s.Explanation.Reset()
			if err := s.Explanation.ReadJSON(r); err != nil {
				return err
			}
		case "explanation_entities":
			s.ExplanationEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.ExplanationEntities = append(s.ExplanationEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "id":
			v, err := r.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "is_anonymous":
			v, err := r.Bool()
			s.IsAnonymous = bool(v)
			if err != nil {
				return err
			}
		case "is_closed":
			v, err := r.Bool()
			s.IsClosed = bool(v)
			if err != nil {
				return err
			}
		case "open_period":
			s.OpenPeriod.Reset()
			if err := s.OpenPeriod.ReadJSON(r); err != nil {
				return err
			}
		case "options":
			s.Options = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem PollOption
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Options = append(s.Options, elem)
				return nil
			}); err != nil {
				return err
			}
		case "question":
			v, err := r.Str()
			s.Question = string(v)
			if err != nil {
				return err
			}
		case "total_voter_count":
			v, err := r.Int()
			s.TotalVoterCount = int(v)
			if err != nil {
				return err
			}
		case "type":
			v, err := r.Str()
			s.Type = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PollOption) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("text")
	w.Str(s.Text)
	more.More()
	w.ObjField("voter_count")
	w.Int(s.VoterCount)
	w.ObjEnd()
}

// ReadJSON reads PollOption from json stream.
func (s *PollOption) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PollOption to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "text":
			v, err := r.Str()
			s.Text = string(v)
			if err != nil {
				return err
			}
		case "voter_count":
			v, err := r.Int()
			s.VoterCount = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s PromoteChatMember) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.CanChangeInfo.Set {
		more.More()
		w.ObjField("can_change_info")
		s.CanChangeInfo.WriteJSON(w)
	}
	if s.CanDeleteMessages.Set {
		more.More()
		w.ObjField("can_delete_messages")
		s.CanDeleteMessages.WriteJSON(w)
	}
	if s.CanEditMessages.Set {
		more.More()
		w.ObjField("can_edit_messages")
		s.CanEditMessages.WriteJSON(w)
	}
	if s.CanInviteUsers.Set {
		more.More()
		w.ObjField("can_invite_users")
		s.CanInviteUsers.WriteJSON(w)
	}
	if s.CanManageChat.Set {
		more.More()
		w.ObjField("can_manage_chat")
		s.CanManageChat.WriteJSON(w)
	}
	if s.CanManageVoiceChats.Set {
		more.More()
		w.ObjField("can_manage_voice_chats")
		s.CanManageVoiceChats.WriteJSON(w)
	}
	if s.CanPinMessages.Set {
		more.More()
		w.ObjField("can_pin_messages")
		s.CanPinMessages.WriteJSON(w)
	}
	if s.CanPostMessages.Set {
		more.More()
		w.ObjField("can_post_messages")
		s.CanPostMessages.WriteJSON(w)
	}
	if s.CanPromoteMembers.Set {
		more.More()
		w.ObjField("can_promote_members")
		s.CanPromoteMembers.WriteJSON(w)
	}
	if s.CanRestrictMembers.Set {
		more.More()
		w.ObjField("can_restrict_members")
		s.CanRestrictMembers.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.IsAnonymous.Set {
		more.More()
		w.ObjField("is_anonymous")
		s.IsAnonymous.WriteJSON(w)
	}
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads PromoteChatMember from json stream.
func (s *PromoteChatMember) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode PromoteChatMember to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "can_change_info":
			s.CanChangeInfo.Reset()
			if err := s.CanChangeInfo.ReadJSON(r); err != nil {
				return err
			}
		case "can_delete_messages":
			s.CanDeleteMessages.Reset()
			if err := s.CanDeleteMessages.ReadJSON(r); err != nil {
				return err
			}
		case "can_edit_messages":
			s.CanEditMessages.Reset()
			if err := s.CanEditMessages.ReadJSON(r); err != nil {
				return err
			}
		case "can_invite_users":
			s.CanInviteUsers.Reset()
			if err := s.CanInviteUsers.ReadJSON(r); err != nil {
				return err
			}
		case "can_manage_chat":
			s.CanManageChat.Reset()
			if err := s.CanManageChat.ReadJSON(r); err != nil {
				return err
			}
		case "can_manage_voice_chats":
			s.CanManageVoiceChats.Reset()
			if err := s.CanManageVoiceChats.ReadJSON(r); err != nil {
				return err
			}
		case "can_pin_messages":
			s.CanPinMessages.Reset()
			if err := s.CanPinMessages.ReadJSON(r); err != nil {
				return err
			}
		case "can_post_messages":
			s.CanPostMessages.Reset()
			if err := s.CanPostMessages.ReadJSON(r); err != nil {
				return err
			}
		case "can_promote_members":
			s.CanPromoteMembers.Reset()
			if err := s.CanPromoteMembers.ReadJSON(r); err != nil {
				return err
			}
		case "can_restrict_members":
			s.CanRestrictMembers.Reset()
			if err := s.CanRestrictMembers.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "is_anonymous":
			s.IsAnonymous.Reset()
			if err := s.IsAnonymous.ReadJSON(r); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ProximityAlertTriggered) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("distance")
	w.Int(s.Distance)
	more.More()
	w.ObjField("traveler")
	s.Traveler.WriteJSON(w)
	more.More()
	w.ObjField("watcher")
	s.Watcher.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads ProximityAlertTriggered from json stream.
func (s *ProximityAlertTriggered) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ProximityAlertTriggered to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "distance":
			v, err := r.Int()
			s.Distance = int(v)
			if err != nil {
				return err
			}
		case "traveler":
			if err := s.Traveler.ReadJSON(r); err != nil {
				return err
			}
		case "watcher":
			if err := s.Watcher.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Response) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.MigrateToChatID.Set {
		more.More()
		w.ObjField("migrate_to_chat_id")
		s.MigrateToChatID.WriteJSON(w)
	}
	if s.RetryAfter.Set {
		more.More()
		w.ObjField("retry_after")
		s.RetryAfter.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Response from json stream.
func (s *Response) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Response to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "migrate_to_chat_id":
			s.MigrateToChatID.Reset()
			if err := s.MigrateToChatID.ReadJSON(r); err != nil {
				return err
			}
		case "retry_after":
			s.RetryAfter.Reset()
			if err := s.RetryAfter.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RestrictChatMember) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("permissions")
	s.Permissions.WriteJSON(w)
	if s.UntilDate.Set {
		more.More()
		w.ObjField("until_date")
		s.UntilDate.WriteJSON(w)
	}
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads RestrictChatMember from json stream.
func (s *RestrictChatMember) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RestrictChatMember to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "permissions":
			if err := s.Permissions.ReadJSON(r); err != nil {
				return err
			}
		case "until_date":
			s.UntilDate.Reset()
			if err := s.UntilDate.ReadJSON(r); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Result) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("ok")
	w.Bool(s.Ok)
	if s.Result.Set {
		more.More()
		w.ObjField("result")
		s.Result.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Result from json stream.
func (s *Result) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Result to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := r.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			s.Result.Reset()
			if err := s.Result.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ResultMsg) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("ok")
	w.Bool(s.Ok)
	if s.Result.Set {
		more.More()
		w.ObjField("result")
		s.Result.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads ResultMsg from json stream.
func (s *ResultMsg) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ResultMsg to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := r.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			s.Result.Reset()
			if err := s.Result.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ResultUsr) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("ok")
	w.Bool(s.Ok)
	if s.Result.Set {
		more.More()
		w.ObjField("result")
		s.Result.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads ResultUsr from json stream.
func (s *ResultUsr) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ResultUsr to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "ok":
			v, err := r.Bool()
			s.Ok = bool(v)
			if err != nil {
				return err
			}
		case "result":
			s.Result.Reset()
			if err := s.Result.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s RevokeChatInviteLink) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("invite_link")
	w.Str(s.InviteLink)
	w.ObjEnd()
}

// ReadJSON reads RevokeChatInviteLink from json stream.
func (s *RevokeChatInviteLink) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode RevokeChatInviteLink to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "invite_link":
			v, err := r.Str()
			s.InviteLink = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendAnimation) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("animation")
	w.Str(s.Animation)
	if s.Caption.Set {
		more.More()
		w.ObjField("caption")
		s.Caption.WriteJSON(w)
	}
	if s.CaptionEntities != nil {
		more.More()
		w.ObjField("caption_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.Duration.Set {
		more.More()
		w.ObjField("duration")
		s.Duration.WriteJSON(w)
	}
	if s.Height.Set {
		more.More()
		w.ObjField("height")
		s.Height.WriteJSON(w)
	}
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	if s.Width.Set {
		more.More()
		w.ObjField("width")
		s.Width.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendAnimation from json stream.
func (s *SendAnimation) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendAnimation to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "animation":
			v, err := r.Str()
			s.Animation = string(v)
			if err != nil {
				return err
			}
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(r); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(r); err != nil {
				return err
			}
		case "height":
			s.Height.Reset()
			if err := s.Height.ReadJSON(r); err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		case "width":
			s.Width.Reset()
			if err := s.Width.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendAudio) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("audio")
	w.Str(s.Audio)
	if s.Caption.Set {
		more.More()
		w.ObjField("caption")
		s.Caption.WriteJSON(w)
	}
	if s.CaptionEntities != nil {
		more.More()
		w.ObjField("caption_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.Duration.Set {
		more.More()
		w.ObjField("duration")
		s.Duration.WriteJSON(w)
	}
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	if s.Performer.Set {
		more.More()
		w.ObjField("performer")
		s.Performer.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	if s.Title.Set {
		more.More()
		w.ObjField("title")
		s.Title.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendAudio from json stream.
func (s *SendAudio) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendAudio to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "audio":
			v, err := r.Str()
			s.Audio = string(v)
			if err != nil {
				return err
			}
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(r); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(r); err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "performer":
			s.Performer.Reset()
			if err := s.Performer.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendChatAction) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("action")
	w.Str(s.Action)
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads SendChatAction from json stream.
func (s *SendChatAction) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendChatAction to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "action":
			v, err := r.Str()
			s.Action = string(v)
			if err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendContact) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	more.More()
	w.ObjField("first_name")
	w.Str(s.FirstName)
	if s.LastName.Set {
		more.More()
		w.ObjField("last_name")
		s.LastName.WriteJSON(w)
	}
	more.More()
	w.ObjField("phone_number")
	w.Str(s.PhoneNumber)
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	if s.Vcard.Set {
		more.More()
		w.ObjField("vcard")
		s.Vcard.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendContact from json stream.
func (s *SendContact) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendContact to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "first_name":
			v, err := r.Str()
			s.FirstName = string(v)
			if err != nil {
				return err
			}
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.ReadJSON(r); err != nil {
				return err
			}
		case "phone_number":
			v, err := r.Str()
			s.PhoneNumber = string(v)
			if err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "vcard":
			s.Vcard.Reset()
			if err := s.Vcard.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendDice) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.Emoji.Set {
		more.More()
		w.ObjField("emoji")
		s.Emoji.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendDice from json stream.
func (s *SendDice) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendDice to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "emoji":
			s.Emoji.Reset()
			if err := s.Emoji.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendDocument) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	if s.Caption.Set {
		more.More()
		w.ObjField("caption")
		s.Caption.WriteJSON(w)
	}
	if s.CaptionEntities != nil {
		more.More()
		w.ObjField("caption_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableContentTypeDetection.Set {
		more.More()
		w.ObjField("disable_content_type_detection")
		s.DisableContentTypeDetection.WriteJSON(w)
	}
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	more.More()
	w.ObjField("document")
	w.Str(s.Document)
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendDocument from json stream.
func (s *SendDocument) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendDocument to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(r); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_content_type_detection":
			s.DisableContentTypeDetection.Reset()
			if err := s.DisableContentTypeDetection.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "document":
			v, err := r.Str()
			s.Document = string(v)
			if err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendGame) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	w.Int(s.ChatID)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	more.More()
	w.ObjField("game_short_name")
	w.Str(s.GameShortName)
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendGame from json stream.
func (s *SendGame) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendGame to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			v, err := r.Int()
			s.ChatID = int(v)
			if err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "game_short_name":
			v, err := r.Str()
			s.GameShortName = string(v)
			if err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendInvoice) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("currency")
	w.Str(s.Currency)
	more.More()
	w.ObjField("description")
	w.Str(s.Description)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.IsFlexible.Set {
		more.More()
		w.ObjField("is_flexible")
		s.IsFlexible.WriteJSON(w)
	}
	if s.MaxTipAmount.Set {
		more.More()
		w.ObjField("max_tip_amount")
		s.MaxTipAmount.WriteJSON(w)
	}
	if s.NeedEmail.Set {
		more.More()
		w.ObjField("need_email")
		s.NeedEmail.WriteJSON(w)
	}
	if s.NeedName.Set {
		more.More()
		w.ObjField("need_name")
		s.NeedName.WriteJSON(w)
	}
	if s.NeedPhoneNumber.Set {
		more.More()
		w.ObjField("need_phone_number")
		s.NeedPhoneNumber.WriteJSON(w)
	}
	if s.NeedShippingAddress.Set {
		more.More()
		w.ObjField("need_shipping_address")
		s.NeedShippingAddress.WriteJSON(w)
	}
	more.More()
	w.ObjField("payload")
	w.Str(s.Payload)
	if s.PhotoHeight.Set {
		more.More()
		w.ObjField("photo_height")
		s.PhotoHeight.WriteJSON(w)
	}
	if s.PhotoSize.Set {
		more.More()
		w.ObjField("photo_size")
		s.PhotoSize.WriteJSON(w)
	}
	if s.PhotoURL.Set {
		more.More()
		w.ObjField("photo_url")
		s.PhotoURL.WriteJSON(w)
	}
	if s.PhotoWidth.Set {
		more.More()
		w.ObjField("photo_width")
		s.PhotoWidth.WriteJSON(w)
	}
	more.More()
	w.ObjField("prices")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Prices {
		more.More()
		elem.WriteJSON(w)
	}
	w.ArrEnd()
	more.Up()
	if s.ProviderData.Set {
		more.More()
		w.ObjField("provider_data")
		s.ProviderData.WriteJSON(w)
	}
	more.More()
	w.ObjField("provider_token")
	w.Str(s.ProviderToken)
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	if s.SendEmailToProvider.Set {
		more.More()
		w.ObjField("send_email_to_provider")
		s.SendEmailToProvider.WriteJSON(w)
	}
	if s.SendPhoneNumberToProvider.Set {
		more.More()
		w.ObjField("send_phone_number_to_provider")
		s.SendPhoneNumberToProvider.WriteJSON(w)
	}
	if s.StartParameter.Set {
		more.More()
		w.ObjField("start_parameter")
		s.StartParameter.WriteJSON(w)
	}
	if s.SuggestedTipAmounts != nil {
		more.More()
		w.ObjField("suggested_tip_amounts")
		more.Down()
		w.ArrStart()
		for _, elem := range s.SuggestedTipAmounts {
			more.More()
			w.Int(elem)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("title")
	w.Str(s.Title)
	w.ObjEnd()
}

// ReadJSON reads SendInvoice from json stream.
func (s *SendInvoice) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendInvoice to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "currency":
			v, err := r.Str()
			s.Currency = string(v)
			if err != nil {
				return err
			}
		case "description":
			v, err := r.Str()
			s.Description = string(v)
			if err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "is_flexible":
			s.IsFlexible.Reset()
			if err := s.IsFlexible.ReadJSON(r); err != nil {
				return err
			}
		case "max_tip_amount":
			s.MaxTipAmount.Reset()
			if err := s.MaxTipAmount.ReadJSON(r); err != nil {
				return err
			}
		case "need_email":
			s.NeedEmail.Reset()
			if err := s.NeedEmail.ReadJSON(r); err != nil {
				return err
			}
		case "need_name":
			s.NeedName.Reset()
			if err := s.NeedName.ReadJSON(r); err != nil {
				return err
			}
		case "need_phone_number":
			s.NeedPhoneNumber.Reset()
			if err := s.NeedPhoneNumber.ReadJSON(r); err != nil {
				return err
			}
		case "need_shipping_address":
			s.NeedShippingAddress.Reset()
			if err := s.NeedShippingAddress.ReadJSON(r); err != nil {
				return err
			}
		case "payload":
			v, err := r.Str()
			s.Payload = string(v)
			if err != nil {
				return err
			}
		case "photo_height":
			s.PhotoHeight.Reset()
			if err := s.PhotoHeight.ReadJSON(r); err != nil {
				return err
			}
		case "photo_size":
			s.PhotoSize.Reset()
			if err := s.PhotoSize.ReadJSON(r); err != nil {
				return err
			}
		case "photo_url":
			s.PhotoURL.Reset()
			if err := s.PhotoURL.ReadJSON(r); err != nil {
				return err
			}
		case "photo_width":
			s.PhotoWidth.Reset()
			if err := s.PhotoWidth.ReadJSON(r); err != nil {
				return err
			}
		case "prices":
			s.Prices = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem LabeledPrice
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Prices = append(s.Prices, elem)
				return nil
			}); err != nil {
				return err
			}
		case "provider_data":
			s.ProviderData.Reset()
			if err := s.ProviderData.ReadJSON(r); err != nil {
				return err
			}
		case "provider_token":
			v, err := r.Str()
			s.ProviderToken = string(v)
			if err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "send_email_to_provider":
			s.SendEmailToProvider.Reset()
			if err := s.SendEmailToProvider.ReadJSON(r); err != nil {
				return err
			}
		case "send_phone_number_to_provider":
			s.SendPhoneNumberToProvider.Reset()
			if err := s.SendPhoneNumberToProvider.ReadJSON(r); err != nil {
				return err
			}
		case "start_parameter":
			s.StartParameter.Reset()
			if err := s.StartParameter.ReadJSON(r); err != nil {
				return err
			}
		case "suggested_tip_amounts":
			s.SuggestedTipAmounts = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem int
				v, err := r.Int()
				elem = int(v)
				if err != nil {
					return err
				}
				s.SuggestedTipAmounts = append(s.SuggestedTipAmounts, elem)
				return nil
			}); err != nil {
				return err
			}
		case "title":
			v, err := r.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendLocation) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.Heading.Set {
		more.More()
		w.ObjField("heading")
		s.Heading.WriteJSON(w)
	}
	if s.HorizontalAccuracy.Set {
		more.More()
		w.ObjField("horizontal_accuracy")
		s.HorizontalAccuracy.WriteJSON(w)
	}
	more.More()
	w.ObjField("latitude")
	w.Float64(s.Latitude)
	if s.LivePeriod.Set {
		more.More()
		w.ObjField("live_period")
		s.LivePeriod.WriteJSON(w)
	}
	more.More()
	w.ObjField("longitude")
	w.Float64(s.Longitude)
	if s.ProximityAlertRadius.Set {
		more.More()
		w.ObjField("proximity_alert_radius")
		s.ProximityAlertRadius.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendLocation from json stream.
func (s *SendLocation) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendLocation to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "heading":
			s.Heading.Reset()
			if err := s.Heading.ReadJSON(r); err != nil {
				return err
			}
		case "horizontal_accuracy":
			s.HorizontalAccuracy.Reset()
			if err := s.HorizontalAccuracy.ReadJSON(r); err != nil {
				return err
			}
		case "latitude":
			v, err := r.Float64()
			s.Latitude = float64(v)
			if err != nil {
				return err
			}
		case "live_period":
			s.LivePeriod.Reset()
			if err := s.LivePeriod.ReadJSON(r); err != nil {
				return err
			}
		case "longitude":
			v, err := r.Float64()
			s.Longitude = float64(v)
			if err != nil {
				return err
			}
		case "proximity_alert_radius":
			s.ProximityAlertRadius.Reset()
			if err := s.ProximityAlertRadius.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendMediaGroup) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	more.More()
	w.ObjField("media")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Media {
		more.More()
		w.Str(elem)
	}
	w.ArrEnd()
	more.Up()
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendMediaGroup from json stream.
func (s *SendMediaGroup) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendMediaGroup to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "media":
			s.Media = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem string
				v, err := r.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Media = append(s.Media, elem)
				return nil
			}); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendMessage) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.DisableWebPagePreview.Set {
		more.More()
		w.ObjField("disable_web_page_preview")
		s.DisableWebPagePreview.WriteJSON(w)
	}
	if s.Entities != nil {
		more.More()
		w.ObjField("entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.Entities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	more.More()
	w.ObjField("text")
	w.Str(s.Text)
	w.ObjEnd()
}

// ReadJSON reads SendMessage from json stream.
func (s *SendMessage) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendMessage to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "disable_web_page_preview":
			s.DisableWebPagePreview.Reset()
			if err := s.DisableWebPagePreview.ReadJSON(r); err != nil {
				return err
			}
		case "entities":
			s.Entities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Entities = append(s.Entities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "text":
			v, err := r.Str()
			s.Text = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendPhoto) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	if s.Caption.Set {
		more.More()
		w.ObjField("caption")
		s.Caption.WriteJSON(w)
	}
	if s.CaptionEntities != nil {
		more.More()
		w.ObjField("caption_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	more.More()
	w.ObjField("photo")
	w.Str(s.Photo)
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendPhoto from json stream.
func (s *SendPhoto) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendPhoto to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(r); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "photo":
			v, err := r.Str()
			s.Photo = string(v)
			if err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendPoll) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	if s.AllowsMultipleAnswers.Set {
		more.More()
		w.ObjField("allows_multiple_answers")
		s.AllowsMultipleAnswers.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.CloseDate.Set {
		more.More()
		w.ObjField("close_date")
		s.CloseDate.WriteJSON(w)
	}
	if s.CorrectOptionID.Set {
		more.More()
		w.ObjField("correct_option_id")
		s.CorrectOptionID.WriteJSON(w)
	}
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.Explanation.Set {
		more.More()
		w.ObjField("explanation")
		s.Explanation.WriteJSON(w)
	}
	if s.ExplanationEntities != nil {
		more.More()
		w.ObjField("explanation_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.ExplanationEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.ExplanationParseMode.Set {
		more.More()
		w.ObjField("explanation_parse_mode")
		s.ExplanationParseMode.WriteJSON(w)
	}
	if s.IsAnonymous.Set {
		more.More()
		w.ObjField("is_anonymous")
		s.IsAnonymous.WriteJSON(w)
	}
	if s.IsClosed.Set {
		more.More()
		w.ObjField("is_closed")
		s.IsClosed.WriteJSON(w)
	}
	if s.OpenPeriod.Set {
		more.More()
		w.ObjField("open_period")
		s.OpenPeriod.WriteJSON(w)
	}
	more.More()
	w.ObjField("options")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Options {
		more.More()
		w.Str(elem)
	}
	w.ArrEnd()
	more.Up()
	more.More()
	w.ObjField("question")
	w.Str(s.Question)
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	if s.Type.Set {
		more.More()
		w.ObjField("type")
		s.Type.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendPoll from json stream.
func (s *SendPoll) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendPoll to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "allows_multiple_answers":
			s.AllowsMultipleAnswers.Reset()
			if err := s.AllowsMultipleAnswers.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "close_date":
			s.CloseDate.Reset()
			if err := s.CloseDate.ReadJSON(r); err != nil {
				return err
			}
		case "correct_option_id":
			s.CorrectOptionID.Reset()
			if err := s.CorrectOptionID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "explanation":
			s.Explanation.Reset()
			if err := s.Explanation.ReadJSON(r); err != nil {
				return err
			}
		case "explanation_entities":
			s.ExplanationEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.ExplanationEntities = append(s.ExplanationEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "explanation_parse_mode":
			s.ExplanationParseMode.Reset()
			if err := s.ExplanationParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "is_anonymous":
			s.IsAnonymous.Reset()
			if err := s.IsAnonymous.ReadJSON(r); err != nil {
				return err
			}
		case "is_closed":
			s.IsClosed.Reset()
			if err := s.IsClosed.ReadJSON(r); err != nil {
				return err
			}
		case "open_period":
			s.OpenPeriod.Reset()
			if err := s.OpenPeriod.ReadJSON(r); err != nil {
				return err
			}
		case "options":
			s.Options = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem string
				v, err := r.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.Options = append(s.Options, elem)
				return nil
			}); err != nil {
				return err
			}
		case "question":
			v, err := r.Str()
			s.Question = string(v)
			if err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendSticker) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	more.More()
	w.ObjField("sticker")
	w.Str(s.Sticker)
	w.ObjEnd()
}

// ReadJSON reads SendSticker from json stream.
func (s *SendSticker) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendSticker to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "sticker":
			v, err := r.Str()
			s.Sticker = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendVenue) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("address")
	w.Str(s.Address)
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.FoursquareID.Set {
		more.More()
		w.ObjField("foursquare_id")
		s.FoursquareID.WriteJSON(w)
	}
	if s.FoursquareType.Set {
		more.More()
		w.ObjField("foursquare_type")
		s.FoursquareType.WriteJSON(w)
	}
	if s.GooglePlaceID.Set {
		more.More()
		w.ObjField("google_place_id")
		s.GooglePlaceID.WriteJSON(w)
	}
	if s.GooglePlaceType.Set {
		more.More()
		w.ObjField("google_place_type")
		s.GooglePlaceType.WriteJSON(w)
	}
	more.More()
	w.ObjField("latitude")
	w.Float64(s.Latitude)
	more.More()
	w.ObjField("longitude")
	w.Float64(s.Longitude)
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	more.More()
	w.ObjField("title")
	w.Str(s.Title)
	w.ObjEnd()
}

// ReadJSON reads SendVenue from json stream.
func (s *SendVenue) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendVenue to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "address":
			v, err := r.Str()
			s.Address = string(v)
			if err != nil {
				return err
			}
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "foursquare_id":
			s.FoursquareID.Reset()
			if err := s.FoursquareID.ReadJSON(r); err != nil {
				return err
			}
		case "foursquare_type":
			s.FoursquareType.Reset()
			if err := s.FoursquareType.ReadJSON(r); err != nil {
				return err
			}
		case "google_place_id":
			s.GooglePlaceID.Reset()
			if err := s.GooglePlaceID.ReadJSON(r); err != nil {
				return err
			}
		case "google_place_type":
			s.GooglePlaceType.Reset()
			if err := s.GooglePlaceType.ReadJSON(r); err != nil {
				return err
			}
		case "latitude":
			v, err := r.Float64()
			s.Latitude = float64(v)
			if err != nil {
				return err
			}
		case "longitude":
			v, err := r.Float64()
			s.Longitude = float64(v)
			if err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "title":
			v, err := r.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendVideo) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	if s.Caption.Set {
		more.More()
		w.ObjField("caption")
		s.Caption.WriteJSON(w)
	}
	if s.CaptionEntities != nil {
		more.More()
		w.ObjField("caption_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.Duration.Set {
		more.More()
		w.ObjField("duration")
		s.Duration.WriteJSON(w)
	}
	if s.Height.Set {
		more.More()
		w.ObjField("height")
		s.Height.WriteJSON(w)
	}
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	if s.SupportsStreaming.Set {
		more.More()
		w.ObjField("supports_streaming")
		s.SupportsStreaming.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	more.More()
	w.ObjField("video")
	w.Str(s.Video)
	if s.Width.Set {
		more.More()
		w.ObjField("width")
		s.Width.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SendVideo from json stream.
func (s *SendVideo) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendVideo to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(r); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(r); err != nil {
				return err
			}
		case "height":
			s.Height.Reset()
			if err := s.Height.ReadJSON(r); err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "supports_streaming":
			s.SupportsStreaming.Reset()
			if err := s.SupportsStreaming.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		case "video":
			v, err := r.Str()
			s.Video = string(v)
			if err != nil {
				return err
			}
		case "width":
			s.Width.Reset()
			if err := s.Width.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendVideoNote) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.Duration.Set {
		more.More()
		w.ObjField("duration")
		s.Duration.WriteJSON(w)
	}
	if s.Length.Set {
		more.More()
		w.ObjField("length")
		s.Length.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	more.More()
	w.ObjField("video_note")
	w.Str(s.VideoNote)
	w.ObjEnd()
}

// ReadJSON reads SendVideoNote from json stream.
func (s *SendVideoNote) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendVideoNote to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(r); err != nil {
				return err
			}
		case "length":
			s.Length.Reset()
			if err := s.Length.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		case "video_note":
			v, err := r.Str()
			s.VideoNote = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SendVoice) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		w.ObjField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(w)
	}
	if s.Caption.Set {
		more.More()
		w.ObjField("caption")
		s.Caption.WriteJSON(w)
	}
	if s.CaptionEntities != nil {
		more.More()
		w.ObjField("caption_entities")
		more.Down()
		w.ArrStart()
		for _, elem := range s.CaptionEntities {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.DisableNotification.Set {
		more.More()
		w.ObjField("disable_notification")
		s.DisableNotification.WriteJSON(w)
	}
	if s.Duration.Set {
		more.More()
		w.ObjField("duration")
		s.Duration.WriteJSON(w)
	}
	if s.ParseMode.Set {
		more.More()
		w.ObjField("parse_mode")
		s.ParseMode.WriteJSON(w)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		w.ObjField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(w)
	}
	more.More()
	w.ObjField("voice")
	w.Str(s.Voice)
	w.ObjEnd()
}

// ReadJSON reads SendVoice from json stream.
func (s *SendVoice) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SendVoice to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(r); err != nil {
				return err
			}
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(r); err != nil {
				return err
			}
		case "caption_entities":
			s.CaptionEntities = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem MessageEntity
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.CaptionEntities = append(s.CaptionEntities, elem)
				return nil
			}); err != nil {
				return err
			}
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(r); err != nil {
				return err
			}
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(r); err != nil {
				return err
			}
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(r); err != nil {
				return err
			}
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "voice":
			v, err := r.Str()
			s.Voice = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetChatAdministratorCustomTitle) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("custom_title")
	w.Str(s.CustomTitle)
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads SetChatAdministratorCustomTitle from json stream.
func (s *SetChatAdministratorCustomTitle) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetChatAdministratorCustomTitle to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "custom_title":
			v, err := r.Str()
			s.CustomTitle = string(v)
			if err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetChatDescription) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.Description.Set {
		more.More()
		w.ObjField("description")
		s.Description.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SetChatDescription from json stream.
func (s *SetChatDescription) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetChatDescription to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetChatPermissions) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("permissions")
	s.Permissions.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads SetChatPermissions from json stream.
func (s *SetChatPermissions) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetChatPermissions to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "permissions":
			if err := s.Permissions.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetChatPhoto) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("photo")
	w.Str(s.Photo)
	w.ObjEnd()
}

// ReadJSON reads SetChatPhoto from json stream.
func (s *SetChatPhoto) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetChatPhoto to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "photo":
			v, err := r.Str()
			s.Photo = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetChatStickerSet) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("sticker_set_name")
	w.Str(s.StickerSetName)
	w.ObjEnd()
}

// ReadJSON reads SetChatStickerSet from json stream.
func (s *SetChatStickerSet) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetChatStickerSet to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "sticker_set_name":
			v, err := r.Str()
			s.StickerSetName = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetChatTitle) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("title")
	w.Str(s.Title)
	w.ObjEnd()
}

// ReadJSON reads SetChatTitle from json stream.
func (s *SetChatTitle) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetChatTitle to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "title":
			v, err := r.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetGameScore) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		w.ObjField("chat_id")
		s.ChatID.WriteJSON(w)
	}
	if s.DisableEditMessage.Set {
		more.More()
		w.ObjField("disable_edit_message")
		s.DisableEditMessage.WriteJSON(w)
	}
	if s.Force.Set {
		more.More()
		w.ObjField("force")
		s.Force.WriteJSON(w)
	}
	if s.InlineMessageID.Set {
		more.More()
		w.ObjField("inline_message_id")
		s.InlineMessageID.WriteJSON(w)
	}
	if s.MessageID.Set {
		more.More()
		w.ObjField("message_id")
		s.MessageID.WriteJSON(w)
	}
	more.More()
	w.ObjField("score")
	w.Int(s.Score)
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads SetGameScore from json stream.
func (s *SetGameScore) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetGameScore to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			s.ChatID.Reset()
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "disable_edit_message":
			s.DisableEditMessage.Reset()
			if err := s.DisableEditMessage.ReadJSON(r); err != nil {
				return err
			}
		case "force":
			s.Force.Reset()
			if err := s.Force.ReadJSON(r); err != nil {
				return err
			}
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(r); err != nil {
				return err
			}
		case "score":
			v, err := r.Int()
			s.Score = int(v)
			if err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetMyCommands) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("commands")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Commands {
		more.More()
		elem.WriteJSON(w)
	}
	w.ArrEnd()
	more.Up()
	if s.LanguageCode.Set {
		more.More()
		w.ObjField("language_code")
		s.LanguageCode.WriteJSON(w)
	}
	if s.Scope != nil {
		more.More()
		w.ObjField("scope")
		s.Scope.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads SetMyCommands from json stream.
func (s *SetMyCommands) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetMyCommands to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "commands":
			s.Commands = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem BotCommand
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Commands = append(s.Commands, elem)
				return nil
			}); err != nil {
				return err
			}
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.ReadJSON(r); err != nil {
				return err
			}
		case "scope":
			s.Scope = nil
			var elem BotCommandScope
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.Scope = &elem
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetPassportDataErrors) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("errors")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Errors {
		more.More()
		elem.WriteJSON(w)
	}
	w.ArrEnd()
	more.Up()
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads SetPassportDataErrors from json stream.
func (s *SetPassportDataErrors) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetPassportDataErrors to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "errors":
			s.Errors = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem PassportElementError
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Errors = append(s.Errors, elem)
				return nil
			}); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetStickerPositionInSet) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("position")
	w.Int(s.Position)
	more.More()
	w.ObjField("sticker")
	w.Str(s.Sticker)
	w.ObjEnd()
}

// ReadJSON reads SetStickerPositionInSet from json stream.
func (s *SetStickerPositionInSet) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetStickerPositionInSet to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "position":
			v, err := r.Int()
			s.Position = int(v)
			if err != nil {
				return err
			}
		case "sticker":
			v, err := r.Str()
			s.Sticker = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetStickerSetThumb) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("name")
	w.Str(s.Name)
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads SetStickerSetThumb from json stream.
func (s *SetStickerSetThumb) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetStickerSetThumb to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "name":
			v, err := r.Str()
			s.Name = string(v)
			if err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SetWebhook) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.AllowedUpdates != nil {
		more.More()
		w.ObjField("allowed_updates")
		more.Down()
		w.ArrStart()
		for _, elem := range s.AllowedUpdates {
			more.More()
			w.Str(elem)
		}
		w.ArrEnd()
		more.Up()
	}
	if s.Certificate.Set {
		more.More()
		w.ObjField("certificate")
		s.Certificate.WriteJSON(w)
	}
	if s.DropPendingUpdates.Set {
		more.More()
		w.ObjField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(w)
	}
	if s.IPAddress.Set {
		more.More()
		w.ObjField("ip_address")
		s.IPAddress.WriteJSON(w)
	}
	if s.MaxConnections.Set {
		more.More()
		w.ObjField("max_connections")
		s.MaxConnections.WriteJSON(w)
	}
	more.More()
	w.ObjField("url")
	json.WriteURI(w, s.URL)
	w.ObjEnd()
}

// ReadJSON reads SetWebhook from json stream.
func (s *SetWebhook) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SetWebhook to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "allowed_updates":
			s.AllowedUpdates = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem string
				v, err := r.Str()
				elem = string(v)
				if err != nil {
					return err
				}
				s.AllowedUpdates = append(s.AllowedUpdates, elem)
				return nil
			}); err != nil {
				return err
			}
		case "certificate":
			s.Certificate.Reset()
			if err := s.Certificate.ReadJSON(r); err != nil {
				return err
			}
		case "drop_pending_updates":
			s.DropPendingUpdates.Reset()
			if err := s.DropPendingUpdates.ReadJSON(r); err != nil {
				return err
			}
		case "ip_address":
			s.IPAddress.Reset()
			if err := s.IPAddress.ReadJSON(r); err != nil {
				return err
			}
		case "max_connections":
			s.MaxConnections.Reset()
			if err := s.MaxConnections.ReadJSON(r); err != nil {
				return err
			}
		case "url":
			v, err := json.ReadURI(r)
			s.URL = v
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ShippingAddress) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("city")
	w.Str(s.City)
	more.More()
	w.ObjField("country_code")
	w.Str(s.CountryCode)
	more.More()
	w.ObjField("post_code")
	w.Str(s.PostCode)
	more.More()
	w.ObjField("state")
	w.Str(s.State)
	more.More()
	w.ObjField("street_line1")
	w.Str(s.StreetLine1)
	more.More()
	w.ObjField("street_line2")
	w.Str(s.StreetLine2)
	w.ObjEnd()
}

// ReadJSON reads ShippingAddress from json stream.
func (s *ShippingAddress) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ShippingAddress to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "city":
			v, err := r.Str()
			s.City = string(v)
			if err != nil {
				return err
			}
		case "country_code":
			v, err := r.Str()
			s.CountryCode = string(v)
			if err != nil {
				return err
			}
		case "post_code":
			v, err := r.Str()
			s.PostCode = string(v)
			if err != nil {
				return err
			}
		case "state":
			v, err := r.Str()
			s.State = string(v)
			if err != nil {
				return err
			}
		case "street_line1":
			v, err := r.Str()
			s.StreetLine1 = string(v)
			if err != nil {
				return err
			}
		case "street_line2":
			v, err := r.Str()
			s.StreetLine2 = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s ShippingOption) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("id")
	w.Str(s.ID)
	more.More()
	w.ObjField("prices")
	more.Down()
	w.ArrStart()
	for _, elem := range s.Prices {
		more.More()
		elem.WriteJSON(w)
	}
	w.ArrEnd()
	more.Up()
	more.More()
	w.ObjField("title")
	w.Str(s.Title)
	w.ObjEnd()
}

// ReadJSON reads ShippingOption from json stream.
func (s *ShippingOption) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode ShippingOption to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "id":
			v, err := r.Str()
			s.ID = string(v)
			if err != nil {
				return err
			}
		case "prices":
			s.Prices = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem LabeledPrice
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Prices = append(s.Prices, elem)
				return nil
			}); err != nil {
				return err
			}
		case "title":
			v, err := r.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Sticker) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Emoji.Set {
		more.More()
		w.ObjField("emoji")
		s.Emoji.WriteJSON(w)
	}
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	if s.FileSize.Set {
		more.More()
		w.ObjField("file_size")
		s.FileSize.WriteJSON(w)
	}
	more.More()
	w.ObjField("file_unique_id")
	w.Str(s.FileUniqueID)
	more.More()
	w.ObjField("height")
	w.Int(s.Height)
	more.More()
	w.ObjField("is_animated")
	w.Bool(s.IsAnimated)
	if s.MaskPosition.Set {
		more.More()
		w.ObjField("mask_position")
		s.MaskPosition.WriteJSON(w)
	}
	if s.SetName.Set {
		more.More()
		w.ObjField("set_name")
		s.SetName.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	more.More()
	w.ObjField("width")
	w.Int(s.Width)
	w.ObjEnd()
}

// ReadJSON reads Sticker from json stream.
func (s *Sticker) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Sticker to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "emoji":
			s.Emoji.Reset()
			if err := s.Emoji.ReadJSON(r); err != nil {
				return err
			}
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.ReadJSON(r); err != nil {
				return err
			}
		case "file_unique_id":
			v, err := r.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "height":
			v, err := r.Int()
			s.Height = int(v)
			if err != nil {
				return err
			}
		case "is_animated":
			v, err := r.Bool()
			s.IsAnimated = bool(v)
			if err != nil {
				return err
			}
		case "mask_position":
			s.MaskPosition.Reset()
			if err := s.MaskPosition.ReadJSON(r); err != nil {
				return err
			}
		case "set_name":
			s.SetName.Reset()
			if err := s.SetName.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		case "width":
			v, err := r.Int()
			s.Width = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s StopMessageLiveLocation) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.ChatID != nil {
		more.More()
		w.ObjField("chat_id")
		s.ChatID.WriteJSON(w)
	}
	if s.InlineMessageID.Set {
		more.More()
		w.ObjField("inline_message_id")
		s.InlineMessageID.WriteJSON(w)
	}
	if s.MessageID.Set {
		more.More()
		w.ObjField("message_id")
		s.MessageID.WriteJSON(w)
	}
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads StopMessageLiveLocation from json stream.
func (s *StopMessageLiveLocation) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode StopMessageLiveLocation to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			s.ChatID = nil
			var elem ID
			if err := elem.ReadJSON(r); err != nil {
				return err
			}
			s.ChatID = &elem
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(r); err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s StopPoll) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	more.More()
	w.ObjField("message_id")
	w.Int(s.MessageID)
	if s.ReplyMarkup.Set {
		more.More()
		w.ObjField("reply_markup")
		s.ReplyMarkup.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads StopPoll from json stream.
func (s *StopPoll) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode StopPoll to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			v, err := r.Int()
			s.MessageID = int(v)
			if err != nil {
				return err
			}
		case "reply_markup":
			s.ReplyMarkup.Reset()
			if err := s.ReplyMarkup.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s SuccessfulPayment) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("currency")
	w.Str(s.Currency)
	more.More()
	w.ObjField("invoice_payload")
	w.Str(s.InvoicePayload)
	if s.OrderInfo.Set {
		more.More()
		w.ObjField("order_info")
		s.OrderInfo.WriteJSON(w)
	}
	more.More()
	w.ObjField("provider_payment_charge_id")
	w.Str(s.ProviderPaymentChargeID)
	if s.ShippingOptionID.Set {
		more.More()
		w.ObjField("shipping_option_id")
		s.ShippingOptionID.WriteJSON(w)
	}
	more.More()
	w.ObjField("telegram_payment_charge_id")
	w.Str(s.TelegramPaymentChargeID)
	more.More()
	w.ObjField("total_amount")
	w.Int(s.TotalAmount)
	w.ObjEnd()
}

// ReadJSON reads SuccessfulPayment from json stream.
func (s *SuccessfulPayment) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode SuccessfulPayment to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "currency":
			v, err := r.Str()
			s.Currency = string(v)
			if err != nil {
				return err
			}
		case "invoice_payload":
			v, err := r.Str()
			s.InvoicePayload = string(v)
			if err != nil {
				return err
			}
		case "order_info":
			s.OrderInfo.Reset()
			if err := s.OrderInfo.ReadJSON(r); err != nil {
				return err
			}
		case "provider_payment_charge_id":
			v, err := r.Str()
			s.ProviderPaymentChargeID = string(v)
			if err != nil {
				return err
			}
		case "shipping_option_id":
			s.ShippingOptionID.Reset()
			if err := s.ShippingOptionID.ReadJSON(r); err != nil {
				return err
			}
		case "telegram_payment_charge_id":
			v, err := r.Str()
			s.TelegramPaymentChargeID = string(v)
			if err != nil {
				return err
			}
		case "total_amount":
			v, err := r.Int()
			s.TotalAmount = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UnbanChatMember) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.OnlyIfBanned.Set {
		more.More()
		w.ObjField("only_if_banned")
		s.OnlyIfBanned.WriteJSON(w)
	}
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads UnbanChatMember from json stream.
func (s *UnbanChatMember) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UnbanChatMember to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "only_if_banned":
			s.OnlyIfBanned.Reset()
			if err := s.OnlyIfBanned.ReadJSON(r); err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UnpinAllChatMessages) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	w.ObjEnd()
}

// ReadJSON reads UnpinAllChatMessages from json stream.
func (s *UnpinAllChatMessages) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UnpinAllChatMessages to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UnpinChatMessage) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("chat_id")
	s.ChatID.WriteJSON(w)
	if s.MessageID.Set {
		more.More()
		w.ObjField("message_id")
		s.MessageID.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads UnpinChatMessage from json stream.
func (s *UnpinChatMessage) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UnpinChatMessage to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "chat_id":
			if err := s.ChatID.ReadJSON(r); err != nil {
				return err
			}
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s UploadStickerFile) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("png_sticker")
	w.Str(s.PNGSticker)
	more.More()
	w.ObjField("user_id")
	w.Int(s.UserID)
	w.ObjEnd()
}

// ReadJSON reads UploadStickerFile from json stream.
func (s *UploadStickerFile) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode UploadStickerFile to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "png_sticker":
			v, err := r.Str()
			s.PNGSticker = string(v)
			if err != nil {
				return err
			}
		case "user_id":
			v, err := r.Int()
			s.UserID = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s User) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.CanJoinGroups.Set {
		more.More()
		w.ObjField("can_join_groups")
		s.CanJoinGroups.WriteJSON(w)
	}
	if s.CanReadAllGroupMessages.Set {
		more.More()
		w.ObjField("can_read_all_group_messages")
		s.CanReadAllGroupMessages.WriteJSON(w)
	}
	more.More()
	w.ObjField("first_name")
	w.Str(s.FirstName)
	more.More()
	w.ObjField("id")
	w.Int(s.ID)
	more.More()
	w.ObjField("is_bot")
	w.Bool(s.IsBot)
	if s.LanguageCode.Set {
		more.More()
		w.ObjField("language_code")
		s.LanguageCode.WriteJSON(w)
	}
	if s.LastName.Set {
		more.More()
		w.ObjField("last_name")
		s.LastName.WriteJSON(w)
	}
	if s.SupportsInlineQueries.Set {
		more.More()
		w.ObjField("supports_inline_queries")
		s.SupportsInlineQueries.WriteJSON(w)
	}
	if s.Username.Set {
		more.More()
		w.ObjField("username")
		s.Username.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads User from json stream.
func (s *User) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode User to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "can_join_groups":
			s.CanJoinGroups.Reset()
			if err := s.CanJoinGroups.ReadJSON(r); err != nil {
				return err
			}
		case "can_read_all_group_messages":
			s.CanReadAllGroupMessages.Reset()
			if err := s.CanReadAllGroupMessages.ReadJSON(r); err != nil {
				return err
			}
		case "first_name":
			v, err := r.Str()
			s.FirstName = string(v)
			if err != nil {
				return err
			}
		case "id":
			v, err := r.Int()
			s.ID = int(v)
			if err != nil {
				return err
			}
		case "is_bot":
			v, err := r.Bool()
			s.IsBot = bool(v)
			if err != nil {
				return err
			}
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.ReadJSON(r); err != nil {
				return err
			}
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.ReadJSON(r); err != nil {
				return err
			}
		case "supports_inline_queries":
			s.SupportsInlineQueries.Reset()
			if err := s.SupportsInlineQueries.ReadJSON(r); err != nil {
				return err
			}
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Venue) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("address")
	w.Str(s.Address)
	if s.FoursquareID.Set {
		more.More()
		w.ObjField("foursquare_id")
		s.FoursquareID.WriteJSON(w)
	}
	if s.FoursquareType.Set {
		more.More()
		w.ObjField("foursquare_type")
		s.FoursquareType.WriteJSON(w)
	}
	if s.GooglePlaceID.Set {
		more.More()
		w.ObjField("google_place_id")
		s.GooglePlaceID.WriteJSON(w)
	}
	if s.GooglePlaceType.Set {
		more.More()
		w.ObjField("google_place_type")
		s.GooglePlaceType.WriteJSON(w)
	}
	more.More()
	w.ObjField("location")
	s.Location.WriteJSON(w)
	more.More()
	w.ObjField("title")
	w.Str(s.Title)
	w.ObjEnd()
}

// ReadJSON reads Venue from json stream.
func (s *Venue) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Venue to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "address":
			v, err := r.Str()
			s.Address = string(v)
			if err != nil {
				return err
			}
		case "foursquare_id":
			s.FoursquareID.Reset()
			if err := s.FoursquareID.ReadJSON(r); err != nil {
				return err
			}
		case "foursquare_type":
			s.FoursquareType.Reset()
			if err := s.FoursquareType.ReadJSON(r); err != nil {
				return err
			}
		case "google_place_id":
			s.GooglePlaceID.Reset()
			if err := s.GooglePlaceID.ReadJSON(r); err != nil {
				return err
			}
		case "google_place_type":
			s.GooglePlaceType.Reset()
			if err := s.GooglePlaceType.ReadJSON(r); err != nil {
				return err
			}
		case "location":
			if err := s.Location.ReadJSON(r); err != nil {
				return err
			}
		case "title":
			v, err := r.Str()
			s.Title = string(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Video) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("duration")
	w.Int(s.Duration)
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	if s.FileName.Set {
		more.More()
		w.ObjField("file_name")
		s.FileName.WriteJSON(w)
	}
	if s.FileSize.Set {
		more.More()
		w.ObjField("file_size")
		s.FileSize.WriteJSON(w)
	}
	more.More()
	w.ObjField("file_unique_id")
	w.Str(s.FileUniqueID)
	more.More()
	w.ObjField("height")
	w.Int(s.Height)
	if s.MimeType.Set {
		more.More()
		w.ObjField("mime_type")
		s.MimeType.WriteJSON(w)
	}
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	more.More()
	w.ObjField("width")
	w.Int(s.Width)
	w.ObjEnd()
}

// ReadJSON reads Video from json stream.
func (s *Video) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Video to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "duration":
			v, err := r.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_name":
			s.FileName.Reset()
			if err := s.FileName.ReadJSON(r); err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.ReadJSON(r); err != nil {
				return err
			}
		case "file_unique_id":
			v, err := r.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "height":
			v, err := r.Int()
			s.Height = int(v)
			if err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.ReadJSON(r); err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		case "width":
			v, err := r.Int()
			s.Width = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s VideoNote) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("duration")
	w.Int(s.Duration)
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	if s.FileSize.Set {
		more.More()
		w.ObjField("file_size")
		s.FileSize.WriteJSON(w)
	}
	more.More()
	w.ObjField("file_unique_id")
	w.Str(s.FileUniqueID)
	more.More()
	w.ObjField("length")
	w.Int(s.Length)
	if s.Thumb.Set {
		more.More()
		w.ObjField("thumb")
		s.Thumb.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads VideoNote from json stream.
func (s *VideoNote) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode VideoNote to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "duration":
			v, err := r.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.ReadJSON(r); err != nil {
				return err
			}
		case "file_unique_id":
			v, err := r.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "length":
			v, err := r.Int()
			s.Length = int(v)
			if err != nil {
				return err
			}
		case "thumb":
			s.Thumb.Reset()
			if err := s.Thumb.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s Voice) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("duration")
	w.Int(s.Duration)
	more.More()
	w.ObjField("file_id")
	w.Str(s.FileID)
	if s.FileSize.Set {
		more.More()
		w.ObjField("file_size")
		s.FileSize.WriteJSON(w)
	}
	more.More()
	w.ObjField("file_unique_id")
	w.Str(s.FileUniqueID)
	if s.MimeType.Set {
		more.More()
		w.ObjField("mime_type")
		s.MimeType.WriteJSON(w)
	}
	w.ObjEnd()
}

// ReadJSON reads Voice from json stream.
func (s *Voice) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode Voice to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "duration":
			v, err := r.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		case "file_id":
			v, err := r.Str()
			s.FileID = string(v)
			if err != nil {
				return err
			}
		case "file_size":
			s.FileSize.Reset()
			if err := s.FileSize.ReadJSON(r); err != nil {
				return err
			}
		case "file_unique_id":
			v, err := r.Str()
			s.FileUniqueID = string(v)
			if err != nil {
				return err
			}
		case "mime_type":
			s.MimeType.Reset()
			if err := s.MimeType.ReadJSON(r); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s VoiceChatEnded) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("duration")
	w.Int(s.Duration)
	w.ObjEnd()
}

// ReadJSON reads VoiceChatEnded from json stream.
func (s *VoiceChatEnded) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode VoiceChatEnded to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "duration":
			v, err := r.Int()
			s.Duration = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s VoiceChatParticipantsInvited) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	if s.Users != nil {
		more.More()
		w.ObjField("users")
		more.Down()
		w.ArrStart()
		for _, elem := range s.Users {
			more.More()
			elem.WriteJSON(w)
		}
		w.ArrEnd()
		more.Up()
	}
	w.ObjEnd()
}

// ReadJSON reads VoiceChatParticipantsInvited from json stream.
func (s *VoiceChatParticipantsInvited) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode VoiceChatParticipantsInvited to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "users":
			s.Users = nil
			if err := r.Array(func(r *json.Reader) error {
				var elem User
				if err := elem.ReadJSON(r); err != nil {
					return err
				}
				s.Users = append(s.Users, elem)
				return nil
			}); err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s VoiceChatScheduled) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	more.More()
	w.ObjField("start_date")
	w.Int(s.StartDate)
	w.ObjEnd()
}

// ReadJSON reads VoiceChatScheduled from json stream.
func (s *VoiceChatScheduled) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode VoiceChatScheduled to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		case "start_date":
			v, err := r.Int()
			s.StartDate = int(v)
			if err != nil {
				return err
			}
		default:
			return r.Skip()
		}
		return nil
	})
}

// WriteJSON implements json.Marshaler.
func (s VoiceChatStarted) WriteJSON(w *json.Writer) {
	w.ObjStart()
	more := json.NewMore(w)
	defer more.Reset()
	w.ObjEnd()
}

// ReadJSON reads VoiceChatStarted from json stream.
func (s *VoiceChatStarted) ReadJSON(r *json.Reader) error {
	if s == nil {
		return fmt.Errorf(`invalid: unable to decode VoiceChatStarted to nil`)
	}
	return r.ObjBytes(func(r *json.Reader, k []byte) error {
		switch string(k) {
		default:
			return r.Skip()
		}
		return nil
	})
}
