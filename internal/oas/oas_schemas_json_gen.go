// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(j *json.Stream) {
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.BoolValue:
		o.Set = true
		o.Value = bool(i.ReadBool())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBool", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = string(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptString", i.WhatIsNext())
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s User) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanJoinGroups.Set {
		more.More()
		j.WriteObjectField("can_join_groups")
		s.CanJoinGroups.WriteJSON(j)
	}
	if s.CanReadAllGroupMessages.Set {
		more.More()
		j.WriteObjectField("can_read_all_group_messages")
		s.CanReadAllGroupMessages.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("first_name")
	j.WriteString(s.FirstName)
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)
	more.More()
	j.WriteObjectField("is_bot")
	j.WriteBool(s.IsBot)
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	if s.SupportsInlineQueries.Set {
		more.More()
		j.WriteObjectField("supports_inline_queries")
		s.SupportsInlineQueries.WriteJSON(j)
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes User json value to io.Writer.
func (s User) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads User json value from io.Reader.
func (s *User) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads User from json stream.
func (s *User) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_join_groups":
			s.CanJoinGroups.Reset()
			if err := s.CanJoinGroups.ReadJSON(i); err != nil {
				i.ReportError("Field CanJoinGroups", err.Error())
				return false
			}
			return true
		case "can_read_all_group_messages":
			s.CanReadAllGroupMessages.Reset()
			if err := s.CanReadAllGroupMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanReadAllGroupMessages", err.Error())
				return false
			}
			return true
		case "first_name":
			s.FirstName = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "is_bot":
			s.IsBot = i.ReadBool()
			return i.Error == nil
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.ReadJSON(i); err != nil {
				i.ReportError("Field LanguageCode", err.Error())
				return false
			}
			return true
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.ReadJSON(i); err != nil {
				i.ReportError("Field LastName", err.Error())
				return false
			}
			return true
		case "supports_inline_queries":
			s.SupportsInlineQueries.Reset()
			if err := s.SupportsInlineQueries.ReadJSON(i); err != nil {
				i.ReportError("Field SupportsInlineQueries", err.Error())
				return false
			}
			return true
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(i); err != nil {
				i.ReportError("Field Username", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}
