// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func (BotCommandScope) WriteJSON(j *json.Stream)        {}
func (BotCommandScope) ReadJSON(i *json.Iterator) error { return nil }
func (BotCommandScope) ReadJSONFrom(r io.Reader) error  { return nil }
func (BotCommandScope) WriteJSONTo(w io.Writer) error   { return nil }

// WriteJSON implements json.Marshaler.
func (s ChatPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanAddWebPagePreviews.Set {
		more.More()
		j.WriteObjectField("can_add_web_page_previews")
		s.CanAddWebPagePreviews.WriteJSON(j)
	}
	if s.CanChangeInfo.Set {
		more.More()
		j.WriteObjectField("can_change_info")
		s.CanChangeInfo.WriteJSON(j)
	}
	if s.CanInviteUsers.Set {
		more.More()
		j.WriteObjectField("can_invite_users")
		s.CanInviteUsers.WriteJSON(j)
	}
	if s.CanPinMessages.Set {
		more.More()
		j.WriteObjectField("can_pin_messages")
		s.CanPinMessages.WriteJSON(j)
	}
	if s.CanSendMediaMessages.Set {
		more.More()
		j.WriteObjectField("can_send_media_messages")
		s.CanSendMediaMessages.WriteJSON(j)
	}
	if s.CanSendMessages.Set {
		more.More()
		j.WriteObjectField("can_send_messages")
		s.CanSendMessages.WriteJSON(j)
	}
	if s.CanSendOtherMessages.Set {
		more.More()
		j.WriteObjectField("can_send_other_messages")
		s.CanSendOtherMessages.WriteJSON(j)
	}
	if s.CanSendPolls.Set {
		more.More()
		j.WriteObjectField("can_send_polls")
		s.CanSendPolls.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes ChatPermissions json value to io.Writer.
func (s ChatPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ChatPermissions json value from io.Reader.
func (s *ChatPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ChatPermissions from json stream.
func (s *ChatPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_add_web_page_previews":
			s.CanAddWebPagePreviews.Reset()
			if err := s.CanAddWebPagePreviews.ReadJSON(i); err != nil {
				i.ReportError("Field CanAddWebPagePreviews", err.Error())
				return false
			}
			return true
		case "can_change_info":
			s.CanChangeInfo.Reset()
			if err := s.CanChangeInfo.ReadJSON(i); err != nil {
				i.ReportError("Field CanChangeInfo", err.Error())
				return false
			}
			return true
		case "can_invite_users":
			s.CanInviteUsers.Reset()
			if err := s.CanInviteUsers.ReadJSON(i); err != nil {
				i.ReportError("Field CanInviteUsers", err.Error())
				return false
			}
			return true
		case "can_pin_messages":
			s.CanPinMessages.Reset()
			if err := s.CanPinMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanPinMessages", err.Error())
				return false
			}
			return true
		case "can_send_media_messages":
			s.CanSendMediaMessages.Reset()
			if err := s.CanSendMediaMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanSendMediaMessages", err.Error())
				return false
			}
			return true
		case "can_send_messages":
			s.CanSendMessages.Reset()
			if err := s.CanSendMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanSendMessages", err.Error())
				return false
			}
			return true
		case "can_send_other_messages":
			s.CanSendOtherMessages.Reset()
			if err := s.CanSendOtherMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanSendOtherMessages", err.Error())
				return false
			}
			return true
		case "can_send_polls":
			s.CanSendPolls.Reset()
			if err := s.CanSendPolls.ReadJSON(i); err != nil {
				i.ReportError("Field CanSendPolls", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

func (InlineKeyboardMarkup) WriteJSON(j *json.Stream)        {}
func (InlineKeyboardMarkup) ReadJSON(i *json.Iterator) error { return nil }
func (InlineKeyboardMarkup) ReadJSONFrom(r io.Reader) error  { return nil }
func (InlineKeyboardMarkup) WriteJSONTo(w io.Writer) error   { return nil }

func (InputMedia) WriteJSON(j *json.Stream)        {}
func (InputMedia) ReadJSON(i *json.Iterator) error { return nil }
func (InputMedia) ReadJSONFrom(r io.Reader) error  { return nil }
func (InputMedia) WriteJSONTo(w io.Writer) error   { return nil }

// WriteJSON implements json.Marshaler.
func (s MaskPosition) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("point")
	j.WriteString(s.Point)
	more.More()
	j.WriteObjectField("scale")
	j.WriteFloat64(s.Scale)
	more.More()
	j.WriteObjectField("x_shift")
	j.WriteFloat64(s.XShift)
	more.More()
	j.WriteObjectField("y_shift")
	j.WriteFloat64(s.YShift)
	j.WriteObjectEnd()
}

// WriteJSONTo writes MaskPosition json value to io.Writer.
func (s MaskPosition) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads MaskPosition json value from io.Reader.
func (s *MaskPosition) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads MaskPosition from json stream.
func (s *MaskPosition) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "point":
			s.Point = i.ReadString()
			return i.Error == nil
		case "scale":
			s.Scale = i.ReadFloat64()
			return i.Error == nil
		case "x_shift":
			s.XShift = i.ReadFloat64()
			return i.Error == nil
		case "y_shift":
			s.YShift = i.ReadFloat64()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON writes json value of bool to json stream.
func (o OptBool) WriteJSON(j *json.Stream) {
	j.WriteBool(bool(o.Value))
}

// ReadJSON reads json value of bool from json iterator.
func (o *OptBool) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.BoolValue:
		o.Set = true
		o.Value = bool(i.ReadBool())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptBool", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of float64 to json stream.
func (o OptFloat64) WriteJSON(j *json.Stream) {
	j.WriteFloat64(float64(o.Value))
}

// ReadJSON reads json value of float64 from json iterator.
func (o *OptFloat64) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = float64(i.ReadFloat64())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptFloat64", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of int to json stream.
func (o OptInt) WriteJSON(j *json.Stream) {
	j.WriteInt(int(o.Value))
}

// ReadJSON reads json value of int from json iterator.
func (o *OptInt) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.NumberValue:
		o.Set = true
		o.Value = int(i.ReadInt())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptInt", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of MaskPosition to json stream.
func (o OptMaskPosition) WriteJSON(j *json.Stream) {
	o.Value.WriteJSON(j)
}

// ReadJSON reads json value of MaskPosition from json iterator.
func (o *OptMaskPosition) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.ObjectValue:
		o.Set = true
		if err := o.Value.ReadJSON(i); err != nil {
			return err
		}
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptMaskPosition", i.WhatIsNext())
	}
	return nil
}

// WriteJSON writes json value of string to json stream.
func (o OptString) WriteJSON(j *json.Stream) {
	j.WriteString(string(o.Value))
}

// ReadJSON reads json value of string from json iterator.
func (o *OptString) ReadJSON(i *json.Iterator) error {
	switch i.WhatIsNext() {
	case json.StringValue:
		o.Set = true
		o.Value = string(i.ReadString())
		return i.Error
	default:
		return fmt.Errorf("unexpected type %d while reading OptString", i.WhatIsNext())
	}
	return nil
}

// WriteJSON implements json.Marshaler.
func (s Result) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	if s.Result.Set {
		more.More()
		j.WriteObjectField("result")
		s.Result.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes Result json value to io.Writer.
func (s Result) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads Result json value from io.Reader.
func (s *Result) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads Result from json stream.
func (s *Result) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "ok":
			s.Ok = i.ReadBool()
			return i.Error == nil
		case "result":
			s.Result.Reset()
			if err := s.Result.ReadJSON(i); err != nil {
				i.ReportError("Field Result", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s User) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanJoinGroups.Set {
		more.More()
		j.WriteObjectField("can_join_groups")
		s.CanJoinGroups.WriteJSON(j)
	}
	if s.CanReadAllGroupMessages.Set {
		more.More()
		j.WriteObjectField("can_read_all_group_messages")
		s.CanReadAllGroupMessages.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("first_name")
	j.WriteString(s.FirstName)
	more.More()
	j.WriteObjectField("id")
	j.WriteInt(s.ID)
	more.More()
	j.WriteObjectField("is_bot")
	j.WriteBool(s.IsBot)
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	if s.SupportsInlineQueries.Set {
		more.More()
		j.WriteObjectField("supports_inline_queries")
		s.SupportsInlineQueries.WriteJSON(j)
	}
	if s.Username.Set {
		more.More()
		j.WriteObjectField("username")
		s.Username.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes User json value to io.Writer.
func (s User) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads User json value from io.Reader.
func (s *User) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads User from json stream.
func (s *User) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_join_groups":
			s.CanJoinGroups.Reset()
			if err := s.CanJoinGroups.ReadJSON(i); err != nil {
				i.ReportError("Field CanJoinGroups", err.Error())
				return false
			}
			return true
		case "can_read_all_group_messages":
			s.CanReadAllGroupMessages.Reset()
			if err := s.CanReadAllGroupMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanReadAllGroupMessages", err.Error())
				return false
			}
			return true
		case "first_name":
			s.FirstName = i.ReadString()
			return i.Error == nil
		case "id":
			s.ID = i.ReadInt()
			return i.Error == nil
		case "is_bot":
			s.IsBot = i.ReadBool()
			return i.Error == nil
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.ReadJSON(i); err != nil {
				i.ReportError("Field LanguageCode", err.Error())
				return false
			}
			return true
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.ReadJSON(i); err != nil {
				i.ReportError("Field LastName", err.Error())
				return false
			}
			return true
		case "supports_inline_queries":
			s.SupportsInlineQueries.Reset()
			if err := s.SupportsInlineQueries.ReadJSON(i); err != nil {
				i.ReportError("Field SupportsInlineQueries", err.Error())
				return false
			}
			return true
		case "username":
			s.Username.Reset()
			if err := s.Username.ReadJSON(i); err != nil {
				i.ReportError("Field Username", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AddStickerToSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("emojis")
	j.WriteString(s.Emojis)
	if s.MaskPosition.Set {
		more.More()
		j.WriteObjectField("mask_position")
		s.MaskPosition.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TgsSticker.Set {
		more.More()
		j.WriteObjectField("tgs_sticker")
		s.TgsSticker.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes AddStickerToSet json value to io.Writer.
func (s AddStickerToSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AddStickerToSet json value from io.Reader.
func (s *AddStickerToSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AddStickerToSet from json stream.
func (s *AddStickerToSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "emojis":
			s.Emojis = i.ReadString()
			return i.Error == nil
		case "mask_position":
			s.MaskPosition.Reset()
			if err := s.MaskPosition.ReadJSON(i); err != nil {
				i.ReportError("Field MaskPosition", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "tgs_sticker":
			s.TgsSticker.Reset()
			if err := s.TgsSticker.ReadJSON(i); err != nil {
				i.ReportError("Field TgsSticker", err.Error())
				return false
			}
			return true
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerCallbackQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CacheTime.Set {
		more.More()
		j.WriteObjectField("cache_time")
		s.CacheTime.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("callback_query_id")
	j.WriteString(s.CallbackQueryID)
	if s.ShowAlert.Set {
		more.More()
		j.WriteObjectField("show_alert")
		s.ShowAlert.WriteJSON(j)
	}
	if s.Text.Set {
		more.More()
		j.WriteObjectField("text")
		s.Text.WriteJSON(j)
	}
	if s.URL.Set {
		more.More()
		j.WriteObjectField("url")
		s.URL.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes AnswerCallbackQuery json value to io.Writer.
func (s AnswerCallbackQuery) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AnswerCallbackQuery json value from io.Reader.
func (s *AnswerCallbackQuery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AnswerCallbackQuery from json stream.
func (s *AnswerCallbackQuery) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cache_time":
			s.CacheTime.Reset()
			if err := s.CacheTime.ReadJSON(i); err != nil {
				i.ReportError("Field CacheTime", err.Error())
				return false
			}
			return true
		case "callback_query_id":
			s.CallbackQueryID = i.ReadString()
			return i.Error == nil
		case "show_alert":
			s.ShowAlert.Reset()
			if err := s.ShowAlert.ReadJSON(i); err != nil {
				i.ReportError("Field ShowAlert", err.Error())
				return false
			}
			return true
		case "text":
			s.Text.Reset()
			if err := s.Text.ReadJSON(i); err != nil {
				i.ReportError("Field Text", err.Error())
				return false
			}
			return true
		case "url":
			s.URL.Reset()
			if err := s.URL.ReadJSON(i); err != nil {
				i.ReportError("Field URL", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerInlineQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CacheTime.Set {
		more.More()
		j.WriteObjectField("cache_time")
		s.CacheTime.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("inline_query_id")
	j.WriteString(s.InlineQueryID)
	if s.IsPersonal.Set {
		more.More()
		j.WriteObjectField("is_personal")
		s.IsPersonal.WriteJSON(j)
	}
	if s.NextOffset.Set {
		more.More()
		j.WriteObjectField("next_offset")
		s.NextOffset.WriteJSON(j)
	}
	if s.SwitchPmParameter.Set {
		more.More()
		j.WriteObjectField("switch_pm_parameter")
		s.SwitchPmParameter.WriteJSON(j)
	}
	if s.SwitchPmText.Set {
		more.More()
		j.WriteObjectField("switch_pm_text")
		s.SwitchPmText.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes AnswerInlineQuery json value to io.Writer.
func (s AnswerInlineQuery) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AnswerInlineQuery json value from io.Reader.
func (s *AnswerInlineQuery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AnswerInlineQuery from json stream.
func (s *AnswerInlineQuery) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "cache_time":
			s.CacheTime.Reset()
			if err := s.CacheTime.ReadJSON(i); err != nil {
				i.ReportError("Field CacheTime", err.Error())
				return false
			}
			return true
		case "inline_query_id":
			s.InlineQueryID = i.ReadString()
			return i.Error == nil
		case "is_personal":
			s.IsPersonal.Reset()
			if err := s.IsPersonal.ReadJSON(i); err != nil {
				i.ReportError("Field IsPersonal", err.Error())
				return false
			}
			return true
		case "next_offset":
			s.NextOffset.Reset()
			if err := s.NextOffset.ReadJSON(i); err != nil {
				i.ReportError("Field NextOffset", err.Error())
				return false
			}
			return true
		case "switch_pm_parameter":
			s.SwitchPmParameter.Reset()
			if err := s.SwitchPmParameter.ReadJSON(i); err != nil {
				i.ReportError("Field SwitchPmParameter", err.Error())
				return false
			}
			return true
		case "switch_pm_text":
			s.SwitchPmText.Reset()
			if err := s.SwitchPmText.ReadJSON(i); err != nil {
				i.ReportError("Field SwitchPmText", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerPreCheckoutQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("pre_checkout_query_id")
	j.WriteString(s.PreCheckoutQueryID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes AnswerPreCheckoutQuery json value to io.Writer.
func (s AnswerPreCheckoutQuery) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AnswerPreCheckoutQuery json value from io.Reader.
func (s *AnswerPreCheckoutQuery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AnswerPreCheckoutQuery from json stream.
func (s *AnswerPreCheckoutQuery) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			s.ErrorMessage.Reset()
			if err := s.ErrorMessage.ReadJSON(i); err != nil {
				i.ReportError("Field ErrorMessage", err.Error())
				return false
			}
			return true
		case "ok":
			s.Ok = i.ReadBool()
			return i.Error == nil
		case "pre_checkout_query_id":
			s.PreCheckoutQueryID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s AnswerShippingQuery) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ErrorMessage.Set {
		more.More()
		j.WriteObjectField("error_message")
		s.ErrorMessage.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("ok")
	j.WriteBool(s.Ok)
	more.More()
	j.WriteObjectField("shipping_query_id")
	j.WriteString(s.ShippingQueryID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes AnswerShippingQuery json value to io.Writer.
func (s AnswerShippingQuery) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads AnswerShippingQuery json value from io.Reader.
func (s *AnswerShippingQuery) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads AnswerShippingQuery from json stream.
func (s *AnswerShippingQuery) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "error_message":
			s.ErrorMessage.Reset()
			if err := s.ErrorMessage.ReadJSON(i); err != nil {
				i.ReportError("Field ErrorMessage", err.Error())
				return false
			}
			return true
		case "ok":
			s.Ok = i.ReadBool()
			return i.Error == nil
		case "shipping_query_id":
			s.ShippingQueryID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s BanChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.RevokeMessages.Set {
		more.More()
		j.WriteObjectField("revoke_messages")
		s.RevokeMessages.WriteJSON(j)
	}
	if s.UntilDate.Set {
		more.More()
		j.WriteObjectField("until_date")
		s.UntilDate.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes BanChatMember json value to io.Writer.
func (s BanChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads BanChatMember json value from io.Reader.
func (s *BanChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads BanChatMember from json stream.
func (s *BanChatMember) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "revoke_messages":
			s.RevokeMessages.Reset()
			if err := s.RevokeMessages.ReadJSON(i); err != nil {
				i.ReportError("Field RevokeMessages", err.Error())
				return false
			}
			return true
		case "until_date":
			s.UntilDate.Reset()
			if err := s.UntilDate.ReadJSON(i); err != nil {
				i.ReportError("Field UntilDate", err.Error())
				return false
			}
			return true
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CopyMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes CopyMessage json value to io.Writer.
func (s CopyMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CopyMessage json value from io.Reader.
func (s *CopyMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CopyMessage from json stream.
func (s *CopyMessage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(i); err != nil {
				i.ReportError("Field Caption", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "message_id":
			s.MessageID = i.ReadInt()
			return i.Error == nil
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CreateChatInviteLink) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ExpireDate.Set {
		more.More()
		j.WriteObjectField("expire_date")
		s.ExpireDate.WriteJSON(j)
	}
	if s.MemberLimit.Set {
		more.More()
		j.WriteObjectField("member_limit")
		s.MemberLimit.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes CreateChatInviteLink json value to io.Writer.
func (s CreateChatInviteLink) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CreateChatInviteLink json value from io.Reader.
func (s *CreateChatInviteLink) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CreateChatInviteLink from json stream.
func (s *CreateChatInviteLink) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expire_date":
			s.ExpireDate.Reset()
			if err := s.ExpireDate.ReadJSON(i); err != nil {
				i.ReportError("Field ExpireDate", err.Error())
				return false
			}
			return true
		case "member_limit":
			s.MemberLimit.Reset()
			if err := s.MemberLimit.ReadJSON(i); err != nil {
				i.ReportError("Field MemberLimit", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s CreateNewStickerSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ContainsMasks.Set {
		more.More()
		j.WriteObjectField("contains_masks")
		s.ContainsMasks.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("emojis")
	j.WriteString(s.Emojis)
	if s.MaskPosition.Set {
		more.More()
		j.WriteObjectField("mask_position")
		s.MaskPosition.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	if s.TgsSticker.Set {
		more.More()
		j.WriteObjectField("tgs_sticker")
		s.TgsSticker.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes CreateNewStickerSet json value to io.Writer.
func (s CreateNewStickerSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads CreateNewStickerSet json value from io.Reader.
func (s *CreateNewStickerSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads CreateNewStickerSet from json stream.
func (s *CreateNewStickerSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "contains_masks":
			s.ContainsMasks.Reset()
			if err := s.ContainsMasks.ReadJSON(i); err != nil {
				i.ReportError("Field ContainsMasks", err.Error())
				return false
			}
			return true
		case "emojis":
			s.Emojis = i.ReadString()
			return i.Error == nil
		case "mask_position":
			s.MaskPosition.Reset()
			if err := s.MaskPosition.ReadJSON(i); err != nil {
				i.ReportError("Field MaskPosition", err.Error())
				return false
			}
			return true
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "tgs_sticker":
			s.TgsSticker.Reset()
			if err := s.TgsSticker.ReadJSON(i); err != nil {
				i.ReportError("Field TgsSticker", err.Error())
				return false
			}
			return true
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

func (DeleteChatPhoto) WriteJSON(j *json.Stream)        {}
func (DeleteChatPhoto) ReadJSON(i *json.Iterator) error { return nil }
func (DeleteChatPhoto) ReadJSONFrom(r io.Reader) error  { return nil }
func (DeleteChatPhoto) WriteJSONTo(w io.Writer) error   { return nil }

func (DeleteChatStickerSet) WriteJSON(j *json.Stream)        {}
func (DeleteChatStickerSet) ReadJSON(i *json.Iterator) error { return nil }
func (DeleteChatStickerSet) ReadJSONFrom(r io.Reader) error  { return nil }
func (DeleteChatStickerSet) WriteJSONTo(w io.Writer) error   { return nil }

// WriteJSON implements json.Marshaler.
func (s DeleteMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteMessage json value to io.Writer.
func (s DeleteMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteMessage json value from io.Reader.
func (s *DeleteMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteMessage from json stream.
func (s *DeleteMessage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message_id":
			s.MessageID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteMyCommands) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	if s.Scope != nil {
		more.More()
		j.WriteObjectField("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteMyCommands json value to io.Writer.
func (s DeleteMyCommands) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteMyCommands json value from io.Reader.
func (s *DeleteMyCommands) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteMyCommands from json stream.
func (s *DeleteMyCommands) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.ReadJSON(i); err != nil {
				i.ReportError("Field LanguageCode", err.Error())
				return false
			}
			return true
		case "scope":
			// Unsupported kind "pointer" for field "Scope".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteStickerFromSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteStickerFromSet json value to io.Writer.
func (s DeleteStickerFromSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteStickerFromSet json value from io.Reader.
func (s *DeleteStickerFromSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteStickerFromSet from json stream.
func (s *DeleteStickerFromSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sticker":
			s.Sticker = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s DeleteWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DropPendingUpdates.Set {
		more.More()
		j.WriteObjectField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes DeleteWebhook json value to io.Writer.
func (s DeleteWebhook) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads DeleteWebhook json value from io.Reader.
func (s *DeleteWebhook) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads DeleteWebhook from json stream.
func (s *DeleteWebhook) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "drop_pending_updates":
			s.DropPendingUpdates.Reset()
			if err := s.DropPendingUpdates.ReadJSON(i); err != nil {
				i.ReportError("Field DropPendingUpdates", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditChatInviteLink) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ExpireDate.Set {
		more.More()
		j.WriteObjectField("expire_date")
		s.ExpireDate.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("invite_link")
	j.WriteString(s.InviteLink)
	if s.MemberLimit.Set {
		more.More()
		j.WriteObjectField("member_limit")
		s.MemberLimit.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditChatInviteLink json value to io.Writer.
func (s EditChatInviteLink) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditChatInviteLink json value from io.Reader.
func (s *EditChatInviteLink) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditChatInviteLink from json stream.
func (s *EditChatInviteLink) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "expire_date":
			s.ExpireDate.Reset()
			if err := s.ExpireDate.ReadJSON(i); err != nil {
				i.ReportError("Field ExpireDate", err.Error())
				return false
			}
			return true
		case "invite_link":
			s.InviteLink = i.ReadString()
			return i.Error == nil
		case "member_limit":
			s.MemberLimit.Reset()
			if err := s.MemberLimit.ReadJSON(i); err != nil {
				i.ReportError("Field MemberLimit", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageCaption) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyMarkup != nil {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageCaption json value to io.Writer.
func (s EditMessageCaption) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageCaption json value from io.Reader.
func (s *EditMessageCaption) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageCaption from json stream.
func (s *EditMessageCaption) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(i); err != nil {
				i.ReportError("Field Caption", err.Error())
				return false
			}
			return true
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field InlineMessageID", err.Error())
				return false
			}
			return true
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(i); err != nil {
				i.ReportError("Field MessageID", err.Error())
				return false
			}
			return true
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "reply_markup":
			// Unsupported kind "pointer" for field "ReplyMarkup".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageLiveLocation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Heading.Set {
		more.More()
		j.WriteObjectField("heading")
		s.Heading.WriteJSON(j)
	}
	if s.HorizontalAccuracy.Set {
		more.More()
		j.WriteObjectField("horizontal_accuracy")
		s.HorizontalAccuracy.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("latitude")
	j.WriteFloat64(s.Latitude)
	more.More()
	j.WriteObjectField("longitude")
	j.WriteFloat64(s.Longitude)
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	if s.ProximityAlertRadius.Set {
		more.More()
		j.WriteObjectField("proximity_alert_radius")
		s.ProximityAlertRadius.WriteJSON(j)
	}
	if s.ReplyMarkup != nil {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageLiveLocation json value to io.Writer.
func (s EditMessageLiveLocation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageLiveLocation json value from io.Reader.
func (s *EditMessageLiveLocation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageLiveLocation from json stream.
func (s *EditMessageLiveLocation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "heading":
			s.Heading.Reset()
			if err := s.Heading.ReadJSON(i); err != nil {
				i.ReportError("Field Heading", err.Error())
				return false
			}
			return true
		case "horizontal_accuracy":
			s.HorizontalAccuracy.Reset()
			if err := s.HorizontalAccuracy.ReadJSON(i); err != nil {
				i.ReportError("Field HorizontalAccuracy", err.Error())
				return false
			}
			return true
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field InlineMessageID", err.Error())
				return false
			}
			return true
		case "latitude":
			s.Latitude = i.ReadFloat64()
			return i.Error == nil
		case "longitude":
			s.Longitude = i.ReadFloat64()
			return i.Error == nil
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(i); err != nil {
				i.ReportError("Field MessageID", err.Error())
				return false
			}
			return true
		case "proximity_alert_radius":
			s.ProximityAlertRadius.Reset()
			if err := s.ProximityAlertRadius.ReadJSON(i); err != nil {
				i.ReportError("Field ProximityAlertRadius", err.Error())
				return false
			}
			return true
		case "reply_markup":
			// Unsupported kind "pointer" for field "ReplyMarkup".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageMedia) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	// Unsupported kind "alias" for field "media".
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	if s.ReplyMarkup != nil {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageMedia json value to io.Writer.
func (s EditMessageMedia) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageMedia json value from io.Reader.
func (s *EditMessageMedia) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageMedia from json stream.
func (s *EditMessageMedia) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field InlineMessageID", err.Error())
				return false
			}
			return true
		case "media":
			// Unsupported kind "alias" for field "Media".
			i.Skip()
			return true
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(i); err != nil {
				i.ReportError("Field MessageID", err.Error())
				return false
			}
			return true
		case "reply_markup":
			// Unsupported kind "pointer" for field "ReplyMarkup".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageReplyMarkup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	if s.ReplyMarkup != nil {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageReplyMarkup json value to io.Writer.
func (s EditMessageReplyMarkup) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageReplyMarkup json value from io.Reader.
func (s *EditMessageReplyMarkup) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageReplyMarkup from json stream.
func (s *EditMessageReplyMarkup) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field InlineMessageID", err.Error())
				return false
			}
			return true
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(i); err != nil {
				i.ReportError("Field MessageID", err.Error())
				return false
			}
			return true
		case "reply_markup":
			// Unsupported kind "pointer" for field "ReplyMarkup".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s EditMessageText) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DisableWebPagePreview.Set {
		more.More()
		j.WriteObjectField("disable_web_page_preview")
		s.DisableWebPagePreview.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyMarkup != nil {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("text")
	j.WriteString(s.Text)
	j.WriteObjectEnd()
}

// WriteJSONTo writes EditMessageText json value to io.Writer.
func (s EditMessageText) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads EditMessageText json value from io.Reader.
func (s *EditMessageText) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads EditMessageText from json stream.
func (s *EditMessageText) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "disable_web_page_preview":
			s.DisableWebPagePreview.Reset()
			if err := s.DisableWebPagePreview.ReadJSON(i); err != nil {
				i.ReportError("Field DisableWebPagePreview", err.Error())
				return false
			}
			return true
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field InlineMessageID", err.Error())
				return false
			}
			return true
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(i); err != nil {
				i.ReportError("Field MessageID", err.Error())
				return false
			}
			return true
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "reply_markup":
			// Unsupported kind "pointer" for field "ReplyMarkup".
			i.Skip()
			return true
		case "text":
			s.Text = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

func (ExportChatInviteLink) WriteJSON(j *json.Stream)        {}
func (ExportChatInviteLink) ReadJSON(i *json.Iterator) error { return nil }
func (ExportChatInviteLink) ReadJSONFrom(r io.Reader) error  { return nil }
func (ExportChatInviteLink) WriteJSONTo(w io.Writer) error   { return nil }

// WriteJSON implements json.Marshaler.
func (s ForwardMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes ForwardMessage json value to io.Writer.
func (s ForwardMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads ForwardMessage json value from io.Reader.
func (s *ForwardMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads ForwardMessage from json stream.
func (s *ForwardMessage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "message_id":
			s.MessageID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

func (GetChat) WriteJSON(j *json.Stream)        {}
func (GetChat) ReadJSON(i *json.Iterator) error { return nil }
func (GetChat) ReadJSONFrom(r io.Reader) error  { return nil }
func (GetChat) WriteJSONTo(w io.Writer) error   { return nil }

func (GetChatAdministrators) WriteJSON(j *json.Stream)        {}
func (GetChatAdministrators) ReadJSON(i *json.Iterator) error { return nil }
func (GetChatAdministrators) ReadJSONFrom(r io.Reader) error  { return nil }
func (GetChatAdministrators) WriteJSONTo(w io.Writer) error   { return nil }

// WriteJSON implements json.Marshaler.
func (s GetChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetChatMember json value to io.Writer.
func (s GetChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetChatMember json value from io.Reader.
func (s *GetChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetChatMember from json stream.
func (s *GetChatMember) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

func (GetChatMemberCount) WriteJSON(j *json.Stream)        {}
func (GetChatMemberCount) ReadJSON(i *json.Iterator) error { return nil }
func (GetChatMemberCount) ReadJSONFrom(r io.Reader) error  { return nil }
func (GetChatMemberCount) WriteJSONTo(w io.Writer) error   { return nil }

// WriteJSON implements json.Marshaler.
func (s GetFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("file_id")
	j.WriteString(s.FileID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetFile json value to io.Writer.
func (s GetFile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetFile json value from io.Reader.
func (s *GetFile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetFile from json stream.
func (s *GetFile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "file_id":
			s.FileID = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetGameHighScores) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetGameHighScores json value to io.Writer.
func (s GetGameHighScores) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetGameHighScores json value from io.Reader.
func (s *GetGameHighScores) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetGameHighScores from json stream.
func (s *GetGameHighScores) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			s.ChatID.Reset()
			if err := s.ChatID.ReadJSON(i); err != nil {
				i.ReportError("Field ChatID", err.Error())
				return false
			}
			return true
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field InlineMessageID", err.Error())
				return false
			}
			return true
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(i); err != nil {
				i.ReportError("Field MessageID", err.Error())
				return false
			}
			return true
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetMyCommands) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	if s.Scope != nil {
		more.More()
		j.WriteObjectField("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetMyCommands json value to io.Writer.
func (s GetMyCommands) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetMyCommands json value from io.Reader.
func (s *GetMyCommands) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetMyCommands from json stream.
func (s *GetMyCommands) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.ReadJSON(i); err != nil {
				i.ReportError("Field LanguageCode", err.Error())
				return false
			}
			return true
		case "scope":
			// Unsupported kind "pointer" for field "Scope".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetStickerSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetStickerSet json value to io.Writer.
func (s GetStickerSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetStickerSet json value from io.Reader.
func (s *GetStickerSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetStickerSet from json stream.
func (s *GetStickerSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUpdates) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	if s.Timeout.Set {
		more.More()
		j.WriteObjectField("timeout")
		s.Timeout.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetUpdates json value to io.Writer.
func (s GetUpdates) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetUpdates json value from io.Reader.
func (s *GetUpdates) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetUpdates from json stream.
func (s *GetUpdates) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limit":
			s.Limit.Reset()
			if err := s.Limit.ReadJSON(i); err != nil {
				i.ReportError("Field Limit", err.Error())
				return false
			}
			return true
		case "offset":
			s.Offset.Reset()
			if err := s.Offset.ReadJSON(i); err != nil {
				i.ReportError("Field Offset", err.Error())
				return false
			}
			return true
		case "timeout":
			s.Timeout.Reset()
			if err := s.Timeout.ReadJSON(i); err != nil {
				i.ReportError("Field Timeout", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s GetUserProfilePhotos) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Limit.Set {
		more.More()
		j.WriteObjectField("limit")
		s.Limit.WriteJSON(j)
	}
	if s.Offset.Set {
		more.More()
		j.WriteObjectField("offset")
		s.Offset.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes GetUserProfilePhotos json value to io.Writer.
func (s GetUserProfilePhotos) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads GetUserProfilePhotos json value from io.Reader.
func (s *GetUserProfilePhotos) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads GetUserProfilePhotos from json stream.
func (s *GetUserProfilePhotos) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "limit":
			s.Limit.Reset()
			if err := s.Limit.ReadJSON(i); err != nil {
				i.ReportError("Field Limit", err.Error())
				return false
			}
			return true
		case "offset":
			s.Offset.Reset()
			if err := s.Offset.ReadJSON(i); err != nil {
				i.ReportError("Field Offset", err.Error())
				return false
			}
			return true
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

func (LeaveChat) WriteJSON(j *json.Stream)        {}
func (LeaveChat) ReadJSON(i *json.Iterator) error { return nil }
func (LeaveChat) ReadJSONFrom(r io.Reader) error  { return nil }
func (LeaveChat) WriteJSONTo(w io.Writer) error   { return nil }

// WriteJSON implements json.Marshaler.
func (s PinChatMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes PinChatMessage json value to io.Writer.
func (s PinChatMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PinChatMessage json value from io.Reader.
func (s *PinChatMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PinChatMessage from json stream.
func (s *PinChatMessage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "message_id":
			s.MessageID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s PromoteChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.CanChangeInfo.Set {
		more.More()
		j.WriteObjectField("can_change_info")
		s.CanChangeInfo.WriteJSON(j)
	}
	if s.CanDeleteMessages.Set {
		more.More()
		j.WriteObjectField("can_delete_messages")
		s.CanDeleteMessages.WriteJSON(j)
	}
	if s.CanEditMessages.Set {
		more.More()
		j.WriteObjectField("can_edit_messages")
		s.CanEditMessages.WriteJSON(j)
	}
	if s.CanInviteUsers.Set {
		more.More()
		j.WriteObjectField("can_invite_users")
		s.CanInviteUsers.WriteJSON(j)
	}
	if s.CanManageChat.Set {
		more.More()
		j.WriteObjectField("can_manage_chat")
		s.CanManageChat.WriteJSON(j)
	}
	if s.CanManageVoiceChats.Set {
		more.More()
		j.WriteObjectField("can_manage_voice_chats")
		s.CanManageVoiceChats.WriteJSON(j)
	}
	if s.CanPinMessages.Set {
		more.More()
		j.WriteObjectField("can_pin_messages")
		s.CanPinMessages.WriteJSON(j)
	}
	if s.CanPostMessages.Set {
		more.More()
		j.WriteObjectField("can_post_messages")
		s.CanPostMessages.WriteJSON(j)
	}
	if s.CanPromoteMembers.Set {
		more.More()
		j.WriteObjectField("can_promote_members")
		s.CanPromoteMembers.WriteJSON(j)
	}
	if s.CanRestrictMembers.Set {
		more.More()
		j.WriteObjectField("can_restrict_members")
		s.CanRestrictMembers.WriteJSON(j)
	}
	if s.IsAnonymous.Set {
		more.More()
		j.WriteObjectField("is_anonymous")
		s.IsAnonymous.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes PromoteChatMember json value to io.Writer.
func (s PromoteChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads PromoteChatMember json value from io.Reader.
func (s *PromoteChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads PromoteChatMember from json stream.
func (s *PromoteChatMember) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "can_change_info":
			s.CanChangeInfo.Reset()
			if err := s.CanChangeInfo.ReadJSON(i); err != nil {
				i.ReportError("Field CanChangeInfo", err.Error())
				return false
			}
			return true
		case "can_delete_messages":
			s.CanDeleteMessages.Reset()
			if err := s.CanDeleteMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanDeleteMessages", err.Error())
				return false
			}
			return true
		case "can_edit_messages":
			s.CanEditMessages.Reset()
			if err := s.CanEditMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanEditMessages", err.Error())
				return false
			}
			return true
		case "can_invite_users":
			s.CanInviteUsers.Reset()
			if err := s.CanInviteUsers.ReadJSON(i); err != nil {
				i.ReportError("Field CanInviteUsers", err.Error())
				return false
			}
			return true
		case "can_manage_chat":
			s.CanManageChat.Reset()
			if err := s.CanManageChat.ReadJSON(i); err != nil {
				i.ReportError("Field CanManageChat", err.Error())
				return false
			}
			return true
		case "can_manage_voice_chats":
			s.CanManageVoiceChats.Reset()
			if err := s.CanManageVoiceChats.ReadJSON(i); err != nil {
				i.ReportError("Field CanManageVoiceChats", err.Error())
				return false
			}
			return true
		case "can_pin_messages":
			s.CanPinMessages.Reset()
			if err := s.CanPinMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanPinMessages", err.Error())
				return false
			}
			return true
		case "can_post_messages":
			s.CanPostMessages.Reset()
			if err := s.CanPostMessages.ReadJSON(i); err != nil {
				i.ReportError("Field CanPostMessages", err.Error())
				return false
			}
			return true
		case "can_promote_members":
			s.CanPromoteMembers.Reset()
			if err := s.CanPromoteMembers.ReadJSON(i); err != nil {
				i.ReportError("Field CanPromoteMembers", err.Error())
				return false
			}
			return true
		case "can_restrict_members":
			s.CanRestrictMembers.Reset()
			if err := s.CanRestrictMembers.ReadJSON(i); err != nil {
				i.ReportError("Field CanRestrictMembers", err.Error())
				return false
			}
			return true
		case "is_anonymous":
			s.IsAnonymous.Reset()
			if err := s.IsAnonymous.ReadJSON(i); err != nil {
				i.ReportError("Field IsAnonymous", err.Error())
				return false
			}
			return true
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RestrictChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("permissions")
	s.Permissions.WriteJSON(j)
	if s.UntilDate.Set {
		more.More()
		j.WriteObjectField("until_date")
		s.UntilDate.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes RestrictChatMember json value to io.Writer.
func (s RestrictChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RestrictChatMember json value from io.Reader.
func (s *RestrictChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RestrictChatMember from json stream.
func (s *RestrictChatMember) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permissions":
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		case "until_date":
			s.UntilDate.Reset()
			if err := s.UntilDate.ReadJSON(i); err != nil {
				i.ReportError("Field UntilDate", err.Error())
				return false
			}
			return true
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s RevokeChatInviteLink) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("invite_link")
	j.WriteString(s.InviteLink)
	j.WriteObjectEnd()
}

// WriteJSONTo writes RevokeChatInviteLink json value to io.Writer.
func (s RevokeChatInviteLink) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads RevokeChatInviteLink json value from io.Reader.
func (s *RevokeChatInviteLink) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads RevokeChatInviteLink from json stream.
func (s *RevokeChatInviteLink) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "invite_link":
			s.InviteLink = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendAnimation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.Height.Set {
		more.More()
		j.WriteObjectField("height")
		s.Height.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.Width.Set {
		more.More()
		j.WriteObjectField("width")
		s.Width.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendAnimation json value to io.Writer.
func (s SendAnimation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendAnimation json value from io.Reader.
func (s *SendAnimation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendAnimation from json stream.
func (s *SendAnimation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(i); err != nil {
				i.ReportError("Field Caption", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(i); err != nil {
				i.ReportError("Field Duration", err.Error())
				return false
			}
			return true
		case "height":
			s.Height.Reset()
			if err := s.Height.ReadJSON(i); err != nil {
				i.ReportError("Field Height", err.Error())
				return false
			}
			return true
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		case "width":
			s.Width.Reset()
			if err := s.Width.ReadJSON(i); err != nil {
				i.ReportError("Field Width", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendAudio) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.Performer.Set {
		more.More()
		j.WriteObjectField("performer")
		s.Performer.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.Title.Set {
		more.More()
		j.WriteObjectField("title")
		s.Title.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendAudio json value to io.Writer.
func (s SendAudio) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendAudio json value from io.Reader.
func (s *SendAudio) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendAudio from json stream.
func (s *SendAudio) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(i); err != nil {
				i.ReportError("Field Caption", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(i); err != nil {
				i.ReportError("Field Duration", err.Error())
				return false
			}
			return true
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "performer":
			s.Performer.Reset()
			if err := s.Performer.ReadJSON(i); err != nil {
				i.ReportError("Field Performer", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		case "title":
			s.Title.Reset()
			if err := s.Title.ReadJSON(i); err != nil {
				i.ReportError("Field Title", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendChatAction) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("action")
	j.WriteString(s.Action)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendChatAction json value to io.Writer.
func (s SendChatAction) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendChatAction json value from io.Reader.
func (s *SendChatAction) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendChatAction from json stream.
func (s *SendChatAction) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "action":
			s.Action = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendContact) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("first_name")
	j.WriteString(s.FirstName)
	if s.LastName.Set {
		more.More()
		j.WriteObjectField("last_name")
		s.LastName.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("phone_number")
	j.WriteString(s.PhoneNumber)
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.Vcard.Set {
		more.More()
		j.WriteObjectField("vcard")
		s.Vcard.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendContact json value to io.Writer.
func (s SendContact) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendContact json value from io.Reader.
func (s *SendContact) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendContact from json stream.
func (s *SendContact) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "first_name":
			s.FirstName = i.ReadString()
			return i.Error == nil
		case "last_name":
			s.LastName.Reset()
			if err := s.LastName.ReadJSON(i); err != nil {
				i.ReportError("Field LastName", err.Error())
				return false
			}
			return true
		case "phone_number":
			s.PhoneNumber = i.ReadString()
			return i.Error == nil
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		case "vcard":
			s.Vcard.Reset()
			if err := s.Vcard.ReadJSON(i); err != nil {
				i.ReportError("Field Vcard", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendDice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Emoji.Set {
		more.More()
		j.WriteObjectField("emoji")
		s.Emoji.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendDice json value to io.Writer.
func (s SendDice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendDice json value from io.Reader.
func (s *SendDice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendDice from json stream.
func (s *SendDice) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "emoji":
			s.Emoji.Reset()
			if err := s.Emoji.ReadJSON(i); err != nil {
				i.ReportError("Field Emoji", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendDocument) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableContentTypeDetection.Set {
		more.More()
		j.WriteObjectField("disable_content_type_detection")
		s.DisableContentTypeDetection.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendDocument json value to io.Writer.
func (s SendDocument) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendDocument json value from io.Reader.
func (s *SendDocument) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendDocument from json stream.
func (s *SendDocument) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(i); err != nil {
				i.ReportError("Field Caption", err.Error())
				return false
			}
			return true
		case "disable_content_type_detection":
			s.DisableContentTypeDetection.Reset()
			if err := s.DisableContentTypeDetection.ReadJSON(i); err != nil {
				i.ReportError("Field DisableContentTypeDetection", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendGame) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("chat_id")
	j.WriteInt(s.ChatID)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("game_short_name")
	j.WriteString(s.GameShortName)
	if s.ReplyMarkup != nil {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendGame json value to io.Writer.
func (s SendGame) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendGame json value from io.Reader.
func (s *SendGame) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendGame from json stream.
func (s *SendGame) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "chat_id":
			s.ChatID = i.ReadInt()
			return i.Error == nil
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "game_short_name":
			s.GameShortName = i.ReadString()
			return i.Error == nil
		case "reply_markup":
			// Unsupported kind "pointer" for field "ReplyMarkup".
			i.Skip()
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendInvoice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("currency")
	j.WriteString(s.Currency)
	more.More()
	j.WriteObjectField("description")
	j.WriteString(s.Description)
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.IsFlexible.Set {
		more.More()
		j.WriteObjectField("is_flexible")
		s.IsFlexible.WriteJSON(j)
	}
	if s.MaxTipAmount.Set {
		more.More()
		j.WriteObjectField("max_tip_amount")
		s.MaxTipAmount.WriteJSON(j)
	}
	if s.NeedEmail.Set {
		more.More()
		j.WriteObjectField("need_email")
		s.NeedEmail.WriteJSON(j)
	}
	if s.NeedName.Set {
		more.More()
		j.WriteObjectField("need_name")
		s.NeedName.WriteJSON(j)
	}
	if s.NeedPhoneNumber.Set {
		more.More()
		j.WriteObjectField("need_phone_number")
		s.NeedPhoneNumber.WriteJSON(j)
	}
	if s.NeedShippingAddress.Set {
		more.More()
		j.WriteObjectField("need_shipping_address")
		s.NeedShippingAddress.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("payload")
	j.WriteString(s.Payload)
	if s.PhotoHeight.Set {
		more.More()
		j.WriteObjectField("photo_height")
		s.PhotoHeight.WriteJSON(j)
	}
	if s.PhotoSize.Set {
		more.More()
		j.WriteObjectField("photo_size")
		s.PhotoSize.WriteJSON(j)
	}
	if s.PhotoURL.Set {
		more.More()
		j.WriteObjectField("photo_url")
		s.PhotoURL.WriteJSON(j)
	}
	if s.PhotoWidth.Set {
		more.More()
		j.WriteObjectField("photo_width")
		s.PhotoWidth.WriteJSON(j)
	}
	if s.ProviderData.Set {
		more.More()
		j.WriteObjectField("provider_data")
		s.ProviderData.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("provider_token")
	j.WriteString(s.ProviderToken)
	if s.ReplyMarkup != nil {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.SendEmailToProvider.Set {
		more.More()
		j.WriteObjectField("send_email_to_provider")
		s.SendEmailToProvider.WriteJSON(j)
	}
	if s.SendPhoneNumberToProvider.Set {
		more.More()
		j.WriteObjectField("send_phone_number_to_provider")
		s.SendPhoneNumberToProvider.WriteJSON(j)
	}
	if s.StartParameter.Set {
		more.More()
		j.WriteObjectField("start_parameter")
		s.StartParameter.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendInvoice json value to io.Writer.
func (s SendInvoice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendInvoice json value from io.Reader.
func (s *SendInvoice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendInvoice from json stream.
func (s *SendInvoice) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "currency":
			s.Currency = i.ReadString()
			return i.Error == nil
		case "description":
			s.Description = i.ReadString()
			return i.Error == nil
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "is_flexible":
			s.IsFlexible.Reset()
			if err := s.IsFlexible.ReadJSON(i); err != nil {
				i.ReportError("Field IsFlexible", err.Error())
				return false
			}
			return true
		case "max_tip_amount":
			s.MaxTipAmount.Reset()
			if err := s.MaxTipAmount.ReadJSON(i); err != nil {
				i.ReportError("Field MaxTipAmount", err.Error())
				return false
			}
			return true
		case "need_email":
			s.NeedEmail.Reset()
			if err := s.NeedEmail.ReadJSON(i); err != nil {
				i.ReportError("Field NeedEmail", err.Error())
				return false
			}
			return true
		case "need_name":
			s.NeedName.Reset()
			if err := s.NeedName.ReadJSON(i); err != nil {
				i.ReportError("Field NeedName", err.Error())
				return false
			}
			return true
		case "need_phone_number":
			s.NeedPhoneNumber.Reset()
			if err := s.NeedPhoneNumber.ReadJSON(i); err != nil {
				i.ReportError("Field NeedPhoneNumber", err.Error())
				return false
			}
			return true
		case "need_shipping_address":
			s.NeedShippingAddress.Reset()
			if err := s.NeedShippingAddress.ReadJSON(i); err != nil {
				i.ReportError("Field NeedShippingAddress", err.Error())
				return false
			}
			return true
		case "payload":
			s.Payload = i.ReadString()
			return i.Error == nil
		case "photo_height":
			s.PhotoHeight.Reset()
			if err := s.PhotoHeight.ReadJSON(i); err != nil {
				i.ReportError("Field PhotoHeight", err.Error())
				return false
			}
			return true
		case "photo_size":
			s.PhotoSize.Reset()
			if err := s.PhotoSize.ReadJSON(i); err != nil {
				i.ReportError("Field PhotoSize", err.Error())
				return false
			}
			return true
		case "photo_url":
			s.PhotoURL.Reset()
			if err := s.PhotoURL.ReadJSON(i); err != nil {
				i.ReportError("Field PhotoURL", err.Error())
				return false
			}
			return true
		case "photo_width":
			s.PhotoWidth.Reset()
			if err := s.PhotoWidth.ReadJSON(i); err != nil {
				i.ReportError("Field PhotoWidth", err.Error())
				return false
			}
			return true
		case "provider_data":
			s.ProviderData.Reset()
			if err := s.ProviderData.ReadJSON(i); err != nil {
				i.ReportError("Field ProviderData", err.Error())
				return false
			}
			return true
		case "provider_token":
			s.ProviderToken = i.ReadString()
			return i.Error == nil
		case "reply_markup":
			// Unsupported kind "pointer" for field "ReplyMarkup".
			i.Skip()
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		case "send_email_to_provider":
			s.SendEmailToProvider.Reset()
			if err := s.SendEmailToProvider.ReadJSON(i); err != nil {
				i.ReportError("Field SendEmailToProvider", err.Error())
				return false
			}
			return true
		case "send_phone_number_to_provider":
			s.SendPhoneNumberToProvider.Reset()
			if err := s.SendPhoneNumberToProvider.ReadJSON(i); err != nil {
				i.ReportError("Field SendPhoneNumberToProvider", err.Error())
				return false
			}
			return true
		case "start_parameter":
			s.StartParameter.Reset()
			if err := s.StartParameter.ReadJSON(i); err != nil {
				i.ReportError("Field StartParameter", err.Error())
				return false
			}
			return true
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendLocation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Heading.Set {
		more.More()
		j.WriteObjectField("heading")
		s.Heading.WriteJSON(j)
	}
	if s.HorizontalAccuracy.Set {
		more.More()
		j.WriteObjectField("horizontal_accuracy")
		s.HorizontalAccuracy.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("latitude")
	j.WriteFloat64(s.Latitude)
	if s.LivePeriod.Set {
		more.More()
		j.WriteObjectField("live_period")
		s.LivePeriod.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("longitude")
	j.WriteFloat64(s.Longitude)
	if s.ProximityAlertRadius.Set {
		more.More()
		j.WriteObjectField("proximity_alert_radius")
		s.ProximityAlertRadius.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendLocation json value to io.Writer.
func (s SendLocation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendLocation json value from io.Reader.
func (s *SendLocation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendLocation from json stream.
func (s *SendLocation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "heading":
			s.Heading.Reset()
			if err := s.Heading.ReadJSON(i); err != nil {
				i.ReportError("Field Heading", err.Error())
				return false
			}
			return true
		case "horizontal_accuracy":
			s.HorizontalAccuracy.Reset()
			if err := s.HorizontalAccuracy.ReadJSON(i); err != nil {
				i.ReportError("Field HorizontalAccuracy", err.Error())
				return false
			}
			return true
		case "latitude":
			s.Latitude = i.ReadFloat64()
			return i.Error == nil
		case "live_period":
			s.LivePeriod.Reset()
			if err := s.LivePeriod.ReadJSON(i); err != nil {
				i.ReportError("Field LivePeriod", err.Error())
				return false
			}
			return true
		case "longitude":
			s.Longitude = i.ReadFloat64()
			return i.Error == nil
		case "proximity_alert_radius":
			s.ProximityAlertRadius.Reset()
			if err := s.ProximityAlertRadius.ReadJSON(i); err != nil {
				i.ReportError("Field ProximityAlertRadius", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendMediaGroup) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendMediaGroup json value to io.Writer.
func (s SendMediaGroup) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendMediaGroup json value from io.Reader.
func (s *SendMediaGroup) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendMediaGroup from json stream.
func (s *SendMediaGroup) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.DisableWebPagePreview.Set {
		more.More()
		j.WriteObjectField("disable_web_page_preview")
		s.DisableWebPagePreview.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("text")
	j.WriteString(s.Text)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendMessage json value to io.Writer.
func (s SendMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendMessage json value from io.Reader.
func (s *SendMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendMessage from json stream.
func (s *SendMessage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "disable_web_page_preview":
			s.DisableWebPagePreview.Reset()
			if err := s.DisableWebPagePreview.ReadJSON(i); err != nil {
				i.ReportError("Field DisableWebPagePreview", err.Error())
				return false
			}
			return true
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		case "text":
			s.Text = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendPhoto) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendPhoto json value to io.Writer.
func (s SendPhoto) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendPhoto json value from io.Reader.
func (s *SendPhoto) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendPhoto from json stream.
func (s *SendPhoto) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(i); err != nil {
				i.ReportError("Field Caption", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendPoll) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.AllowsMultipleAnswers.Set {
		more.More()
		j.WriteObjectField("allows_multiple_answers")
		s.AllowsMultipleAnswers.WriteJSON(j)
	}
	if s.CloseDate.Set {
		more.More()
		j.WriteObjectField("close_date")
		s.CloseDate.WriteJSON(j)
	}
	if s.CorrectOptionID.Set {
		more.More()
		j.WriteObjectField("correct_option_id")
		s.CorrectOptionID.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Explanation.Set {
		more.More()
		j.WriteObjectField("explanation")
		s.Explanation.WriteJSON(j)
	}
	if s.ExplanationParseMode.Set {
		more.More()
		j.WriteObjectField("explanation_parse_mode")
		s.ExplanationParseMode.WriteJSON(j)
	}
	if s.IsAnonymous.Set {
		more.More()
		j.WriteObjectField("is_anonymous")
		s.IsAnonymous.WriteJSON(j)
	}
	if s.IsClosed.Set {
		more.More()
		j.WriteObjectField("is_closed")
		s.IsClosed.WriteJSON(j)
	}
	if s.OpenPeriod.Set {
		more.More()
		j.WriteObjectField("open_period")
		s.OpenPeriod.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("question")
	j.WriteString(s.Question)
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.Type.Set {
		more.More()
		j.WriteObjectField("type")
		s.Type.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendPoll json value to io.Writer.
func (s SendPoll) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendPoll json value from io.Reader.
func (s *SendPoll) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendPoll from json stream.
func (s *SendPoll) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "allows_multiple_answers":
			s.AllowsMultipleAnswers.Reset()
			if err := s.AllowsMultipleAnswers.ReadJSON(i); err != nil {
				i.ReportError("Field AllowsMultipleAnswers", err.Error())
				return false
			}
			return true
		case "close_date":
			s.CloseDate.Reset()
			if err := s.CloseDate.ReadJSON(i); err != nil {
				i.ReportError("Field CloseDate", err.Error())
				return false
			}
			return true
		case "correct_option_id":
			s.CorrectOptionID.Reset()
			if err := s.CorrectOptionID.ReadJSON(i); err != nil {
				i.ReportError("Field CorrectOptionID", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "explanation":
			s.Explanation.Reset()
			if err := s.Explanation.ReadJSON(i); err != nil {
				i.ReportError("Field Explanation", err.Error())
				return false
			}
			return true
		case "explanation_parse_mode":
			s.ExplanationParseMode.Reset()
			if err := s.ExplanationParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ExplanationParseMode", err.Error())
				return false
			}
			return true
		case "is_anonymous":
			s.IsAnonymous.Reset()
			if err := s.IsAnonymous.ReadJSON(i); err != nil {
				i.ReportError("Field IsAnonymous", err.Error())
				return false
			}
			return true
		case "is_closed":
			s.IsClosed.Reset()
			if err := s.IsClosed.ReadJSON(i); err != nil {
				i.ReportError("Field IsClosed", err.Error())
				return false
			}
			return true
		case "open_period":
			s.OpenPeriod.Reset()
			if err := s.OpenPeriod.ReadJSON(i); err != nil {
				i.ReportError("Field OpenPeriod", err.Error())
				return false
			}
			return true
		case "question":
			s.Question = i.ReadString()
			return i.Error == nil
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		case "type":
			s.Type.Reset()
			if err := s.Type.ReadJSON(i); err != nil {
				i.ReportError("Field Type", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendSticker) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendSticker json value to io.Writer.
func (s SendSticker) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendSticker json value from io.Reader.
func (s *SendSticker) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendSticker from json stream.
func (s *SendSticker) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendVenue) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("address")
	j.WriteString(s.Address)
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.FoursquareID.Set {
		more.More()
		j.WriteObjectField("foursquare_id")
		s.FoursquareID.WriteJSON(j)
	}
	if s.FoursquareType.Set {
		more.More()
		j.WriteObjectField("foursquare_type")
		s.FoursquareType.WriteJSON(j)
	}
	if s.GooglePlaceID.Set {
		more.More()
		j.WriteObjectField("google_place_id")
		s.GooglePlaceID.WriteJSON(j)
	}
	if s.GooglePlaceType.Set {
		more.More()
		j.WriteObjectField("google_place_type")
		s.GooglePlaceType.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("latitude")
	j.WriteFloat64(s.Latitude)
	more.More()
	j.WriteObjectField("longitude")
	j.WriteFloat64(s.Longitude)
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendVenue json value to io.Writer.
func (s SendVenue) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendVenue json value from io.Reader.
func (s *SendVenue) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendVenue from json stream.
func (s *SendVenue) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "address":
			s.Address = i.ReadString()
			return i.Error == nil
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "foursquare_id":
			s.FoursquareID.Reset()
			if err := s.FoursquareID.ReadJSON(i); err != nil {
				i.ReportError("Field FoursquareID", err.Error())
				return false
			}
			return true
		case "foursquare_type":
			s.FoursquareType.Reset()
			if err := s.FoursquareType.ReadJSON(i); err != nil {
				i.ReportError("Field FoursquareType", err.Error())
				return false
			}
			return true
		case "google_place_id":
			s.GooglePlaceID.Reset()
			if err := s.GooglePlaceID.ReadJSON(i); err != nil {
				i.ReportError("Field GooglePlaceID", err.Error())
				return false
			}
			return true
		case "google_place_type":
			s.GooglePlaceType.Reset()
			if err := s.GooglePlaceType.ReadJSON(i); err != nil {
				i.ReportError("Field GooglePlaceType", err.Error())
				return false
			}
			return true
		case "latitude":
			s.Latitude = i.ReadFloat64()
			return i.Error == nil
		case "longitude":
			s.Longitude = i.ReadFloat64()
			return i.Error == nil
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendVideo) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.Height.Set {
		more.More()
		j.WriteObjectField("height")
		s.Height.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	if s.SupportsStreaming.Set {
		more.More()
		j.WriteObjectField("supports_streaming")
		s.SupportsStreaming.WriteJSON(j)
	}
	if s.Width.Set {
		more.More()
		j.WriteObjectField("width")
		s.Width.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendVideo json value to io.Writer.
func (s SendVideo) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendVideo json value from io.Reader.
func (s *SendVideo) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendVideo from json stream.
func (s *SendVideo) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(i); err != nil {
				i.ReportError("Field Caption", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(i); err != nil {
				i.ReportError("Field Duration", err.Error())
				return false
			}
			return true
		case "height":
			s.Height.Reset()
			if err := s.Height.ReadJSON(i); err != nil {
				i.ReportError("Field Height", err.Error())
				return false
			}
			return true
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		case "supports_streaming":
			s.SupportsStreaming.Reset()
			if err := s.SupportsStreaming.ReadJSON(i); err != nil {
				i.ReportError("Field SupportsStreaming", err.Error())
				return false
			}
			return true
		case "width":
			s.Width.Reset()
			if err := s.Width.ReadJSON(i); err != nil {
				i.ReportError("Field Width", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendVideoNote) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.Length.Set {
		more.More()
		j.WriteObjectField("length")
		s.Length.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendVideoNote json value to io.Writer.
func (s SendVideoNote) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendVideoNote json value from io.Reader.
func (s *SendVideoNote) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendVideoNote from json stream.
func (s *SendVideoNote) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(i); err != nil {
				i.ReportError("Field Duration", err.Error())
				return false
			}
			return true
		case "length":
			s.Length.Reset()
			if err := s.Length.ReadJSON(i); err != nil {
				i.ReportError("Field Length", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SendVoice) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.AllowSendingWithoutReply.Set {
		more.More()
		j.WriteObjectField("allow_sending_without_reply")
		s.AllowSendingWithoutReply.WriteJSON(j)
	}
	if s.Caption.Set {
		more.More()
		j.WriteObjectField("caption")
		s.Caption.WriteJSON(j)
	}
	if s.DisableNotification.Set {
		more.More()
		j.WriteObjectField("disable_notification")
		s.DisableNotification.WriteJSON(j)
	}
	if s.Duration.Set {
		more.More()
		j.WriteObjectField("duration")
		s.Duration.WriteJSON(j)
	}
	if s.ParseMode.Set {
		more.More()
		j.WriteObjectField("parse_mode")
		s.ParseMode.WriteJSON(j)
	}
	if s.ReplyToMessageID.Set {
		more.More()
		j.WriteObjectField("reply_to_message_id")
		s.ReplyToMessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SendVoice json value to io.Writer.
func (s SendVoice) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SendVoice json value from io.Reader.
func (s *SendVoice) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SendVoice from json stream.
func (s *SendVoice) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "allow_sending_without_reply":
			s.AllowSendingWithoutReply.Reset()
			if err := s.AllowSendingWithoutReply.ReadJSON(i); err != nil {
				i.ReportError("Field AllowSendingWithoutReply", err.Error())
				return false
			}
			return true
		case "caption":
			s.Caption.Reset()
			if err := s.Caption.ReadJSON(i); err != nil {
				i.ReportError("Field Caption", err.Error())
				return false
			}
			return true
		case "disable_notification":
			s.DisableNotification.Reset()
			if err := s.DisableNotification.ReadJSON(i); err != nil {
				i.ReportError("Field DisableNotification", err.Error())
				return false
			}
			return true
		case "duration":
			s.Duration.Reset()
			if err := s.Duration.ReadJSON(i); err != nil {
				i.ReportError("Field Duration", err.Error())
				return false
			}
			return true
		case "parse_mode":
			s.ParseMode.Reset()
			if err := s.ParseMode.ReadJSON(i); err != nil {
				i.ReportError("Field ParseMode", err.Error())
				return false
			}
			return true
		case "reply_to_message_id":
			s.ReplyToMessageID.Reset()
			if err := s.ReplyToMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field ReplyToMessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatAdministratorCustomTitle) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("custom_title")
	j.WriteString(s.CustomTitle)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatAdministratorCustomTitle json value to io.Writer.
func (s SetChatAdministratorCustomTitle) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatAdministratorCustomTitle json value from io.Reader.
func (s *SetChatAdministratorCustomTitle) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatAdministratorCustomTitle from json stream.
func (s *SetChatAdministratorCustomTitle) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "custom_title":
			s.CustomTitle = i.ReadString()
			return i.Error == nil
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatDescription) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Description.Set {
		more.More()
		j.WriteObjectField("description")
		s.Description.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatDescription json value to io.Writer.
func (s SetChatDescription) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatDescription json value from io.Reader.
func (s *SetChatDescription) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatDescription from json stream.
func (s *SetChatDescription) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "description":
			s.Description.Reset()
			if err := s.Description.ReadJSON(i); err != nil {
				i.ReportError("Field Description", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatPermissions) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("permissions")
	s.Permissions.WriteJSON(j)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatPermissions json value to io.Writer.
func (s SetChatPermissions) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatPermissions json value from io.Reader.
func (s *SetChatPermissions) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatPermissions from json stream.
func (s *SetChatPermissions) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "permissions":
			if err := s.Permissions.ReadJSON(i); err != nil {
				i.ReportError("Field Permissions", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatPhoto) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("photo")
	j.WriteString(s.Photo)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatPhoto json value to io.Writer.
func (s SetChatPhoto) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatPhoto json value from io.Reader.
func (s *SetChatPhoto) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatPhoto from json stream.
func (s *SetChatPhoto) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "photo":
			s.Photo = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatStickerSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("sticker_set_name")
	j.WriteString(s.StickerSetName)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatStickerSet json value to io.Writer.
func (s SetChatStickerSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatStickerSet json value from io.Reader.
func (s *SetChatStickerSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatStickerSet from json stream.
func (s *SetChatStickerSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "sticker_set_name":
			s.StickerSetName = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetChatTitle) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("title")
	j.WriteString(s.Title)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetChatTitle json value to io.Writer.
func (s SetChatTitle) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetChatTitle json value from io.Reader.
func (s *SetChatTitle) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetChatTitle from json stream.
func (s *SetChatTitle) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "title":
			s.Title = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetGameScore) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.ChatID.Set {
		more.More()
		j.WriteObjectField("chat_id")
		s.ChatID.WriteJSON(j)
	}
	if s.DisableEditMessage.Set {
		more.More()
		j.WriteObjectField("disable_edit_message")
		s.DisableEditMessage.WriteJSON(j)
	}
	if s.Force.Set {
		more.More()
		j.WriteObjectField("force")
		s.Force.WriteJSON(j)
	}
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("score")
	j.WriteInt(s.Score)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetGameScore json value to io.Writer.
func (s SetGameScore) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetGameScore json value from io.Reader.
func (s *SetGameScore) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetGameScore from json stream.
func (s *SetGameScore) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "chat_id":
			s.ChatID.Reset()
			if err := s.ChatID.ReadJSON(i); err != nil {
				i.ReportError("Field ChatID", err.Error())
				return false
			}
			return true
		case "disable_edit_message":
			s.DisableEditMessage.Reset()
			if err := s.DisableEditMessage.ReadJSON(i); err != nil {
				i.ReportError("Field DisableEditMessage", err.Error())
				return false
			}
			return true
		case "force":
			s.Force.Reset()
			if err := s.Force.ReadJSON(i); err != nil {
				i.ReportError("Field Force", err.Error())
				return false
			}
			return true
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field InlineMessageID", err.Error())
				return false
			}
			return true
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(i); err != nil {
				i.ReportError("Field MessageID", err.Error())
				return false
			}
			return true
		case "score":
			s.Score = i.ReadInt()
			return i.Error == nil
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetMyCommands) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.LanguageCode.Set {
		more.More()
		j.WriteObjectField("language_code")
		s.LanguageCode.WriteJSON(j)
	}
	if s.Scope != nil {
		more.More()
		j.WriteObjectField("scope")
		s.Scope.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetMyCommands json value to io.Writer.
func (s SetMyCommands) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetMyCommands json value from io.Reader.
func (s *SetMyCommands) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetMyCommands from json stream.
func (s *SetMyCommands) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "language_code":
			s.LanguageCode.Reset()
			if err := s.LanguageCode.ReadJSON(i); err != nil {
				i.ReportError("Field LanguageCode", err.Error())
				return false
			}
			return true
		case "scope":
			// Unsupported kind "pointer" for field "Scope".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetPassportDataErrors) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetPassportDataErrors json value to io.Writer.
func (s SetPassportDataErrors) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetPassportDataErrors json value from io.Reader.
func (s *SetPassportDataErrors) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetPassportDataErrors from json stream.
func (s *SetPassportDataErrors) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetStickerPositionInSet) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("position")
	j.WriteInt(s.Position)
	more.More()
	j.WriteObjectField("sticker")
	j.WriteString(s.Sticker)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetStickerPositionInSet json value to io.Writer.
func (s SetStickerPositionInSet) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetStickerPositionInSet json value from io.Reader.
func (s *SetStickerPositionInSet) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetStickerPositionInSet from json stream.
func (s *SetStickerPositionInSet) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "position":
			s.Position = i.ReadInt()
			return i.Error == nil
		case "sticker":
			s.Sticker = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetStickerSetThumb) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("name")
	j.WriteString(s.Name)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetStickerSetThumb json value to io.Writer.
func (s SetStickerSetThumb) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetStickerSetThumb json value from io.Reader.
func (s *SetStickerSetThumb) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetStickerSetThumb from json stream.
func (s *SetStickerSetThumb) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "name":
			s.Name = i.ReadString()
			return i.Error == nil
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s SetWebhook) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.Certificate.Set {
		more.More()
		j.WriteObjectField("certificate")
		s.Certificate.WriteJSON(j)
	}
	if s.DropPendingUpdates.Set {
		more.More()
		j.WriteObjectField("drop_pending_updates")
		s.DropPendingUpdates.WriteJSON(j)
	}
	if s.IPAddress.Set {
		more.More()
		j.WriteObjectField("ip_address")
		s.IPAddress.WriteJSON(j)
	}
	if s.MaxConnections.Set {
		more.More()
		j.WriteObjectField("max_connections")
		s.MaxConnections.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("url")
	j.WriteString(s.URL)
	j.WriteObjectEnd()
}

// WriteJSONTo writes SetWebhook json value to io.Writer.
func (s SetWebhook) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads SetWebhook json value from io.Reader.
func (s *SetWebhook) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads SetWebhook from json stream.
func (s *SetWebhook) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "certificate":
			s.Certificate.Reset()
			if err := s.Certificate.ReadJSON(i); err != nil {
				i.ReportError("Field Certificate", err.Error())
				return false
			}
			return true
		case "drop_pending_updates":
			s.DropPendingUpdates.Reset()
			if err := s.DropPendingUpdates.ReadJSON(i); err != nil {
				i.ReportError("Field DropPendingUpdates", err.Error())
				return false
			}
			return true
		case "ip_address":
			s.IPAddress.Reset()
			if err := s.IPAddress.ReadJSON(i); err != nil {
				i.ReportError("Field IPAddress", err.Error())
				return false
			}
			return true
		case "max_connections":
			s.MaxConnections.Reset()
			if err := s.MaxConnections.ReadJSON(i); err != nil {
				i.ReportError("Field MaxConnections", err.Error())
				return false
			}
			return true
		case "url":
			s.URL = i.ReadString()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s StopMessageLiveLocation) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.InlineMessageID.Set {
		more.More()
		j.WriteObjectField("inline_message_id")
		s.InlineMessageID.WriteJSON(j)
	}
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	if s.ReplyMarkup != nil {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes StopMessageLiveLocation json value to io.Writer.
func (s StopMessageLiveLocation) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads StopMessageLiveLocation json value from io.Reader.
func (s *StopMessageLiveLocation) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads StopMessageLiveLocation from json stream.
func (s *StopMessageLiveLocation) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "inline_message_id":
			s.InlineMessageID.Reset()
			if err := s.InlineMessageID.ReadJSON(i); err != nil {
				i.ReportError("Field InlineMessageID", err.Error())
				return false
			}
			return true
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(i); err != nil {
				i.ReportError("Field MessageID", err.Error())
				return false
			}
			return true
		case "reply_markup":
			// Unsupported kind "pointer" for field "ReplyMarkup".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s StopPoll) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("message_id")
	j.WriteInt(s.MessageID)
	if s.ReplyMarkup != nil {
		more.More()
		j.WriteObjectField("reply_markup")
		s.ReplyMarkup.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes StopPoll json value to io.Writer.
func (s StopPoll) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads StopPoll json value from io.Reader.
func (s *StopPoll) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads StopPoll from json stream.
func (s *StopPoll) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message_id":
			s.MessageID = i.ReadInt()
			return i.Error == nil
		case "reply_markup":
			// Unsupported kind "pointer" for field "ReplyMarkup".
			i.Skip()
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UnbanChatMember) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.OnlyIfBanned.Set {
		more.More()
		j.WriteObjectField("only_if_banned")
		s.OnlyIfBanned.WriteJSON(j)
	}
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes UnbanChatMember json value to io.Writer.
func (s UnbanChatMember) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UnbanChatMember json value from io.Reader.
func (s *UnbanChatMember) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UnbanChatMember from json stream.
func (s *UnbanChatMember) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "only_if_banned":
			s.OnlyIfBanned.Reset()
			if err := s.OnlyIfBanned.ReadJSON(i); err != nil {
				i.ReportError("Field OnlyIfBanned", err.Error())
				return false
			}
			return true
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

func (UnpinAllChatMessages) WriteJSON(j *json.Stream)        {}
func (UnpinAllChatMessages) ReadJSON(i *json.Iterator) error { return nil }
func (UnpinAllChatMessages) ReadJSONFrom(r io.Reader) error  { return nil }
func (UnpinAllChatMessages) WriteJSONTo(w io.Writer) error   { return nil }

// WriteJSON implements json.Marshaler.
func (s UnpinChatMessage) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	if s.MessageID.Set {
		more.More()
		j.WriteObjectField("message_id")
		s.MessageID.WriteJSON(j)
	}
	j.WriteObjectEnd()
}

// WriteJSONTo writes UnpinChatMessage json value to io.Writer.
func (s UnpinChatMessage) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UnpinChatMessage json value from io.Reader.
func (s *UnpinChatMessage) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UnpinChatMessage from json stream.
func (s *UnpinChatMessage) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "message_id":
			s.MessageID.Reset()
			if err := s.MessageID.ReadJSON(i); err != nil {
				i.ReportError("Field MessageID", err.Error())
				return false
			}
			return true
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}

// WriteJSON implements json.Marshaler.
func (s UploadStickerFile) WriteJSON(j *json.Stream) {
	j.WriteObjectStart()
	more := json.NewMore(j)
	defer more.Reset()
	more.More()
	j.WriteObjectField("png_sticker")
	j.WriteString(s.PNGSticker)
	more.More()
	j.WriteObjectField("user_id")
	j.WriteInt(s.UserID)
	j.WriteObjectEnd()
}

// WriteJSONTo writes UploadStickerFile json value to io.Writer.
func (s UploadStickerFile) WriteJSONTo(w io.Writer) error {
	j := json.GetStream(w)
	defer json.PutStream(j)
	s.WriteJSON(j)
	return j.Flush()
}

// ReadJSONFrom reads UploadStickerFile json value from io.Reader.
func (s *UploadStickerFile) ReadJSONFrom(r io.Reader) error {
	buf := json.GetBuffer()
	defer json.PutBuffer(buf)

	if _, err := buf.ReadFrom(r); err != nil {
		return err
	}
	i := json.GetIterator()
	i.ResetBytes(buf.Bytes())
	defer json.PutIterator(i)

	return s.ReadJSON(i)
}

// ReadJSON reads UploadStickerFile from json stream.
func (s *UploadStickerFile) ReadJSON(i *json.Iterator) error {
	i.ReadObjectCB(func(i *json.Iterator, k string) bool {
		switch k {
		case "png_sticker":
			s.PNGSticker = i.ReadString()
			return i.Error == nil
		case "user_id":
			s.UserID = i.ReadInt()
			return i.Error == nil
		default:
			i.Skip()
			return true
		}
	})
	return i.Error
}
