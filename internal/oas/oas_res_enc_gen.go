// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = chi.Context{}
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
)

func encodeAddStickerToSetResponse(response AddStickerToSetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/addStickerToSet: unexpected response type: %T", response)
	}
}

func encodeAnswerCallbackQueryResponse(response AnswerCallbackQueryRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/answerCallbackQuery: unexpected response type: %T", response)
	}
}

func encodeAnswerInlineQueryResponse(response AnswerInlineQueryRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/answerInlineQuery: unexpected response type: %T", response)
	}
}

func encodeAnswerPreCheckoutQueryResponse(response AnswerPreCheckoutQueryRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/answerPreCheckoutQuery: unexpected response type: %T", response)
	}
}

func encodeAnswerShippingQueryResponse(response AnswerShippingQueryRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/answerShippingQuery: unexpected response type: %T", response)
	}
}

func encodeBanChatMemberResponse(response BanChatMemberRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/banChatMember: unexpected response type: %T", response)
	}
}

func encodeCopyMessageResponse(response CopyMessageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/copyMessage: unexpected response type: %T", response)
	}
}

func encodeCreateChatInviteLinkResponse(response CreateChatInviteLinkRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/createChatInviteLink: unexpected response type: %T", response)
	}
}

func encodeCreateNewStickerSetResponse(response CreateNewStickerSetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/createNewStickerSet: unexpected response type: %T", response)
	}
}

func encodeDeleteChatPhotoResponse(response DeleteChatPhotoRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/deleteChatPhoto: unexpected response type: %T", response)
	}
}

func encodeDeleteChatStickerSetResponse(response DeleteChatStickerSetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/deleteChatStickerSet: unexpected response type: %T", response)
	}
}

func encodeDeleteMessageResponse(response DeleteMessageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/deleteMessage: unexpected response type: %T", response)
	}
}

func encodeDeleteMyCommandsResponse(response DeleteMyCommandsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/deleteMyCommands: unexpected response type: %T", response)
	}
}

func encodeDeleteStickerFromSetResponse(response DeleteStickerFromSetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/deleteStickerFromSet: unexpected response type: %T", response)
	}
}

func encodeDeleteWebhookResponse(response DeleteWebhookRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/deleteWebhook: unexpected response type: %T", response)
	}
}

func encodeEditChatInviteLinkResponse(response EditChatInviteLinkRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/editChatInviteLink: unexpected response type: %T", response)
	}
}

func encodeEditMessageCaptionResponse(response EditMessageCaptionRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/editMessageCaption: unexpected response type: %T", response)
	}
}

func encodeEditMessageLiveLocationResponse(response EditMessageLiveLocationRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/editMessageLiveLocation: unexpected response type: %T", response)
	}
}

func encodeEditMessageMediaResponse(response EditMessageMediaRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/editMessageMedia: unexpected response type: %T", response)
	}
}

func encodeEditMessageReplyMarkupResponse(response EditMessageReplyMarkupRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/editMessageReplyMarkup: unexpected response type: %T", response)
	}
}

func encodeEditMessageTextResponse(response EditMessageTextRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/editMessageText: unexpected response type: %T", response)
	}
}

func encodeExportChatInviteLinkResponse(response ExportChatInviteLinkRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/exportChatInviteLink: unexpected response type: %T", response)
	}
}

func encodeForwardMessageResponse(response ForwardMessageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/forwardMessage: unexpected response type: %T", response)
	}
}

func encodeGetChatResponse(response GetChatRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getChat: unexpected response type: %T", response)
	}
}

func encodeGetChatAdministratorsResponse(response GetChatAdministratorsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getChatAdministrators: unexpected response type: %T", response)
	}
}

func encodeGetChatMemberResponse(response GetChatMemberRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getChatMember: unexpected response type: %T", response)
	}
}

func encodeGetChatMemberCountResponse(response GetChatMemberCountRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getChatMemberCount: unexpected response type: %T", response)
	}
}

func encodeGetFileResponse(response GetFileRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getFile: unexpected response type: %T", response)
	}
}

func encodeGetGameHighScoresResponse(response GetGameHighScoresRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getGameHighScores: unexpected response type: %T", response)
	}
}

func encodeGetMeResponse(response GetMeRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultUsr:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getMe: unexpected response type: %T", response)
	}
}

func encodeGetMyCommandsResponse(response GetMyCommandsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getMyCommands: unexpected response type: %T", response)
	}
}

func encodeGetStickerSetResponse(response GetStickerSetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getStickerSet: unexpected response type: %T", response)
	}
}

func encodeGetUpdatesResponse(response GetUpdatesRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getUpdates: unexpected response type: %T", response)
	}
}

func encodeGetUserProfilePhotosResponse(response GetUserProfilePhotosRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/getUserProfilePhotos: unexpected response type: %T", response)
	}
}

func encodeLeaveChatResponse(response LeaveChatRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/leaveChat: unexpected response type: %T", response)
	}
}

func encodePinChatMessageResponse(response PinChatMessageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/pinChatMessage: unexpected response type: %T", response)
	}
}

func encodePromoteChatMemberResponse(response PromoteChatMemberRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/promoteChatMember: unexpected response type: %T", response)
	}
}

func encodeRestrictChatMemberResponse(response RestrictChatMemberRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/restrictChatMember: unexpected response type: %T", response)
	}
}

func encodeRevokeChatInviteLinkResponse(response RevokeChatInviteLinkRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/revokeChatInviteLink: unexpected response type: %T", response)
	}
}

func encodeSendAnimationResponse(response SendAnimationRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendAnimation: unexpected response type: %T", response)
	}
}

func encodeSendAudioResponse(response SendAudioRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendAudio: unexpected response type: %T", response)
	}
}

func encodeSendChatActionResponse(response SendChatActionRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendChatAction: unexpected response type: %T", response)
	}
}

func encodeSendContactResponse(response SendContactRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendContact: unexpected response type: %T", response)
	}
}

func encodeSendDiceResponse(response SendDiceRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendDice: unexpected response type: %T", response)
	}
}

func encodeSendDocumentResponse(response SendDocumentRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendDocument: unexpected response type: %T", response)
	}
}

func encodeSendGameResponse(response SendGameRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendGame: unexpected response type: %T", response)
	}
}

func encodeSendInvoiceResponse(response SendInvoiceRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendInvoice: unexpected response type: %T", response)
	}
}

func encodeSendLocationResponse(response SendLocationRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendLocation: unexpected response type: %T", response)
	}
}

func encodeSendMediaGroupResponse(response SendMediaGroupRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendMediaGroup: unexpected response type: %T", response)
	}
}

func encodeSendMessageResponse(response SendMessageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendMessage: unexpected response type: %T", response)
	}
}

func encodeSendPhotoResponse(response SendPhotoRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendPhoto: unexpected response type: %T", response)
	}
}

func encodeSendPollResponse(response SendPollRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendPoll: unexpected response type: %T", response)
	}
}

func encodeSendStickerResponse(response SendStickerRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendSticker: unexpected response type: %T", response)
	}
}

func encodeSendVenueResponse(response SendVenueRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendVenue: unexpected response type: %T", response)
	}
}

func encodeSendVideoResponse(response SendVideoRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendVideo: unexpected response type: %T", response)
	}
}

func encodeSendVideoNoteResponse(response SendVideoNoteRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendVideoNote: unexpected response type: %T", response)
	}
}

func encodeSendVoiceResponse(response SendVoiceRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *ResultMsg:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/sendVoice: unexpected response type: %T", response)
	}
}

func encodeSetChatAdministratorCustomTitleResponse(response SetChatAdministratorCustomTitleRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setChatAdministratorCustomTitle: unexpected response type: %T", response)
	}
}

func encodeSetChatDescriptionResponse(response SetChatDescriptionRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setChatDescription: unexpected response type: %T", response)
	}
}

func encodeSetChatPermissionsResponse(response SetChatPermissionsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setChatPermissions: unexpected response type: %T", response)
	}
}

func encodeSetChatPhotoResponse(response SetChatPhotoRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setChatPhoto: unexpected response type: %T", response)
	}
}

func encodeSetChatStickerSetResponse(response SetChatStickerSetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setChatStickerSet: unexpected response type: %T", response)
	}
}

func encodeSetChatTitleResponse(response SetChatTitleRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setChatTitle: unexpected response type: %T", response)
	}
}

func encodeSetGameScoreResponse(response SetGameScoreRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setGameScore: unexpected response type: %T", response)
	}
}

func encodeSetMyCommandsResponse(response SetMyCommandsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setMyCommands: unexpected response type: %T", response)
	}
}

func encodeSetPassportDataErrorsResponse(response SetPassportDataErrorsRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setPassportDataErrors: unexpected response type: %T", response)
	}
}

func encodeSetStickerPositionInSetResponse(response SetStickerPositionInSetRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setStickerPositionInSet: unexpected response type: %T", response)
	}
}

func encodeSetStickerSetThumbResponse(response SetStickerSetThumbRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setStickerSetThumb: unexpected response type: %T", response)
	}
}

func encodeSetWebhookResponse(response SetWebhookRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/setWebhook: unexpected response type: %T", response)
	}
}

func encodeStopMessageLiveLocationResponse(response StopMessageLiveLocationRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/stopMessageLiveLocation: unexpected response type: %T", response)
	}
}

func encodeStopPollResponse(response StopPollRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/stopPoll: unexpected response type: %T", response)
	}
}

func encodeUnbanChatMemberResponse(response UnbanChatMemberRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/unbanChatMember: unexpected response type: %T", response)
	}
}

func encodeUnpinAllChatMessagesResponse(response UnpinAllChatMessagesRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/unpinAllChatMessages: unexpected response type: %T", response)
	}
}

func encodeUnpinChatMessageResponse(response UnpinChatMessageRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/unpinChatMessage: unexpected response type: %T", response)
	}
}

func encodeUploadStickerFileResponse(response UploadStickerFileRes, w http.ResponseWriter) error {
	switch response := response.(type) {
	case *Result:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	case *ErrorStatusCode:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(response.StatusCode)
		j := json.NewStream(w)
		defer json.PutStream(j)
		more := json.NewMore(j)
		defer more.Reset()
		more.More()
		response.Response.WriteJSON(j)
		if err := j.Flush(); err != nil {
			return err
		}
		return nil
	default:
		return fmt.Errorf("/uploadStickerFile: unexpected response type: %T", response)
	}
}
