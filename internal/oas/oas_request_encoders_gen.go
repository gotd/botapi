// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"net/http"

	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

func encodeAddStickerToSetRequest(
	req AddStickerToSet,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeAnswerCallbackQueryRequest(
	req AnswerCallbackQuery,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeAnswerInlineQueryRequest(
	req AnswerInlineQuery,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeAnswerPreCheckoutQueryRequest(
	req AnswerPreCheckoutQuery,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeAnswerShippingQueryRequest(
	req AnswerShippingQuery,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeAnswerWebAppQueryRequest(
	req AnswerWebAppQuery,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeApproveChatJoinRequestRequest(
	req ApproveChatJoinRequest,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeBanChatMemberRequest(
	req BanChatMember,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeBanChatSenderChatRequest(
	req BanChatSenderChat,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeCopyMessageRequest(
	req CopyMessage,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeCreateChatInviteLinkRequest(
	req CreateChatInviteLink,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeCreateInvoiceLinkRequest(
	req CreateInvoiceLink,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeCreateNewStickerSetRequest(
	req CreateNewStickerSet,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeDeclineChatJoinRequestRequest(
	req DeclineChatJoinRequest,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeDeleteChatPhotoRequest(
	req DeleteChatPhoto,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeDeleteChatStickerSetRequest(
	req DeleteChatStickerSet,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeDeleteMessageRequest(
	req DeleteMessage,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeDeleteMyCommandsRequest(
	req OptDeleteMyCommands,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeDeleteStickerFromSetRequest(
	req DeleteStickerFromSet,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeDeleteWebhookRequest(
	req OptDeleteWebhook,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeEditChatInviteLinkRequest(
	req EditChatInviteLink,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeEditMessageCaptionRequest(
	req EditMessageCaption,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeEditMessageLiveLocationRequest(
	req EditMessageLiveLocation,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeEditMessageMediaRequest(
	req EditMessageMedia,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeEditMessageReplyMarkupRequest(
	req EditMessageReplyMarkup,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeEditMessageTextRequest(
	req EditMessageText,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeExportChatInviteLinkRequest(
	req ExportChatInviteLink,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeForwardMessageRequest(
	req ForwardMessage,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetChatRequest(
	req GetChat,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetChatAdministratorsRequest(
	req GetChatAdministrators,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetChatMemberRequest(
	req GetChatMember,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetChatMemberCountRequest(
	req GetChatMemberCount,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetChatMenuButtonRequest(
	req OptGetChatMenuButton,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetFileRequest(
	req GetFile,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetGameHighScoresRequest(
	req GetGameHighScores,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetMyCommandsRequest(
	req OptGetMyCommands,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetMyDefaultAdministratorRightsRequest(
	req OptGetMyDefaultAdministratorRights,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetStickerSetRequest(
	req GetStickerSet,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetUpdatesRequest(
	req OptGetUpdates,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeGetUserProfilePhotosRequest(
	req GetUserProfilePhotos,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeLeaveChatRequest(
	req LeaveChat,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePinChatMessageRequest(
	req PinChatMessage,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodePromoteChatMemberRequest(
	req PromoteChatMember,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeRestrictChatMemberRequest(
	req RestrictChatMember,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeRevokeChatInviteLinkRequest(
	req RevokeChatInviteLink,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendAnimationRequest(
	req SendAnimation,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendAudioRequest(
	req SendAudio,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendChatActionRequest(
	req SendChatAction,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendContactRequest(
	req SendContact,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendDiceRequest(
	req SendDice,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendDocumentRequest(
	req SendDocument,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendGameRequest(
	req SendGame,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendInvoiceRequest(
	req SendInvoice,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendLocationRequest(
	req SendLocation,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendMediaGroupRequest(
	req SendMediaGroup,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendMessageRequest(
	req SendMessage,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendPhotoRequest(
	req SendPhoto,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendPollRequest(
	req SendPoll,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendStickerRequest(
	req SendSticker,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendVenueRequest(
	req SendVenue,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendVideoRequest(
	req SendVideo,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendVideoNoteRequest(
	req SendVideoNote,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSendVoiceRequest(
	req SendVoice,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetChatAdministratorCustomTitleRequest(
	req SetChatAdministratorCustomTitle,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetChatDescriptionRequest(
	req SetChatDescription,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetChatMenuButtonRequest(
	req OptSetChatMenuButton,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetChatPermissionsRequest(
	req SetChatPermissions,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetChatPhotoRequest(
	req SetChatPhoto,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetChatStickerSetRequest(
	req SetChatStickerSet,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetChatTitleRequest(
	req SetChatTitle,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetGameScoreRequest(
	req SetGameScore,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetMyCommandsRequest(
	req SetMyCommands,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetMyDefaultAdministratorRightsRequest(
	req OptSetMyDefaultAdministratorRights,
	r *http.Request,
) error {
	if !req.Set {
		// Keep request with empty body if value is not set.
		return nil
	}
	e := jx.GetEncoder()
	{
		if req.Set {
			req.Encode(e)
		}
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetPassportDataErrorsRequest(
	req SetPassportDataErrors,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetStickerPositionInSetRequest(
	req SetStickerPositionInSet,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetStickerSetThumbRequest(
	req SetStickerSetThumb,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeSetWebhookRequest(
	req SetWebhook,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeStopMessageLiveLocationRequest(
	req StopMessageLiveLocation,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeStopPollRequest(
	req StopPoll,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeUnbanChatMemberRequest(
	req UnbanChatMember,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeUnbanChatSenderChatRequest(
	req UnbanChatSenderChat,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeUnpinAllChatMessagesRequest(
	req UnpinAllChatMessages,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeUnpinChatMessageRequest(
	req UnpinChatMessage,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
func encodeUploadStickerFileRequest(
	req UploadStickerFile,
	r *http.Request,
) error {
	e := jx.GetEncoder()
	{
		req.Encode(e)
	}
	encoded := e.Bytes()
	ht.SetBody(r, bytes.NewReader(encoded), "application/json")
	return nil
}
