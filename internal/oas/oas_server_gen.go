// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddStickerToSet implements addStickerToSet operation.
	//
	// Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up
	// to 200 stickers. Other sticker sets can have up to 120 stickers. Returns _True_ on success.
	//
	// POST /addStickerToSet
	AddStickerToSet(ctx context.Context, req *AddStickerToSet) (*Result, error)
	// AnswerCallbackQuery implements answerCallbackQuery operation.
	//
	// Use this method to send answers to callback queries sent from [inline keyboards](https://core.
	// telegram.org/bots/features#inline-keyboards). The answer will be displayed to the user as a
	// notification at the top of the chat screen or as an alert. On success, _True_ is returned.
	//
	// POST /answerCallbackQuery
	AnswerCallbackQuery(ctx context.Context, req *AnswerCallbackQuery) (*Result, error)
	// AnswerInlineQuery implements answerInlineQuery operation.
	//
	// Use this method to send answers to an inline query. On success, _True_ is returned.No more than
	// **50** results per query are allowed.
	//
	// POST /answerInlineQuery
	AnswerInlineQuery(ctx context.Context, req *AnswerInlineQuery) (*Result, error)
	// AnswerPreCheckoutQuery implements answerPreCheckoutQuery operation.
	//
	// Once the user has confirmed their payment and shipping details, the Bot API sends the final
	// confirmation in the form of an [Update](https://core.telegram.org/bots/api#update) with the field
	// _pre_checkout_query_. Use this method to respond to such pre-checkout queries. On success, _True_
	// is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout
	// query was sent.
	//
	// POST /answerPreCheckoutQuery
	AnswerPreCheckoutQuery(ctx context.Context, req *AnswerPreCheckoutQuery) (*Result, error)
	// AnswerShippingQuery implements answerShippingQuery operation.
	//
	// If you sent an invoice requesting a shipping address and the parameter _is_flexible_ was specified,
	//  the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a
	// _shipping_query_ field to the bot. Use this method to reply to shipping queries. On success,
	// _True_ is returned.
	//
	// POST /answerShippingQuery
	AnswerShippingQuery(ctx context.Context, req *AnswerShippingQuery) (*Result, error)
	// AnswerWebAppQuery implements answerWebAppQuery operation.
	//
	// Use this method to set the result of an interaction with a [Web App](https://core.telegram.
	// org/bots/webapps) and send a corresponding message on behalf of the user to the chat from which
	// the query originated. On success, a [SentWebAppMessage](https://core.telegram.
	// org/bots/api#sentwebappmessage) object is returned.
	//
	// POST /answerWebAppQuery
	AnswerWebAppQuery(ctx context.Context, req *AnswerWebAppQuery) (*Result, error)
	// ApproveChatJoinRequest implements approveChatJoinRequest operation.
	//
	// Use this method to approve a chat join request. The bot must be an administrator in the chat for
	// this to work and must have the _can_invite_users_ administrator right. Returns _True_ on success.
	//
	// POST /approveChatJoinRequest
	ApproveChatJoinRequest(ctx context.Context, req *ApproveChatJoinRequest) (*Result, error)
	// BanChatMember implements banChatMember operation.
	//
	// Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups
	// and channels, the user will not be able to return to the chat on their own using invite links, etc.
	// , unless [unbanned](https://core.telegram.org/bots/api#unbanchatmember) first. The bot must be an
	// administrator in the chat for this to work and must have the appropriate administrator rights.
	// Returns _True_ on success.
	//
	// POST /banChatMember
	BanChatMember(ctx context.Context, req *BanChatMember) (*Result, error)
	// BanChatSenderChat implements banChatSenderChat operation.
	//
	// Use this method to ban a channel chat in a supergroup or a channel. Until the chat is
	// [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat
	// won't be able to send messages on behalf of **any of their channels**. The bot must be an
	// administrator in the supergroup or channel for this to work and must have the appropriate
	// administrator rights. Returns _True_ on success.
	//
	// POST /banChatSenderChat
	BanChatSenderChat(ctx context.Context, req *BanChatSenderChat) (*Result, error)
	// Close implements close operation.
	//
	// Use this method to close the bot instance before moving it from one local server to another. You
	// need to delete the webhook before calling this method to ensure that the bot isn't launched again
	// after server restart. The method will return error 429 in the first 10 minutes after the bot is
	// launched. Returns _True_ on success. Requires no parameters.
	//
	// POST /close
	Close(ctx context.Context) (*Result, error)
	// CloseForumTopic implements closeForumTopic operation.
	//
	// Use this method to close an open topic in a forum supergroup chat. The bot must be an
	// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
	// rights, unless it is the creator of the topic. Returns _True_ on success.
	//
	// POST /closeForumTopic
	CloseForumTopic(ctx context.Context, req *CloseForumTopic) (*Result, error)
	// CloseGeneralForumTopic implements closeGeneralForumTopic operation.
	//
	// Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an
	// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
	// rights. Returns _True_ on success.
	//
	// POST /closeGeneralForumTopic
	CloseGeneralForumTopic(ctx context.Context, req *CloseGeneralForumTopic) (*Result, error)
	// CopyMessage implements copyMessage operation.
	//
	// Use this method to copy messages of any kind. Service messages, giveaway messages, giveaway
	// winners messages, and invoice messages can't be copied. A quiz [poll](https://core.telegram.
	// org/bots/api#poll) can be copied only if the value of the field _correct_option_id_ is known to
	// the bot. The method is analogous to the method [forwardMessage](https://core.telegram.
	// org/bots/api#forwardmessage), but the copied message doesn't have a link to the original message.
	// Returns the [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on
	// success.
	//
	// POST /copyMessage
	CopyMessage(ctx context.Context, req *CopyMessage) (*ResultMessageId, error)
	// CopyMessages implements copyMessages operation.
	//
	// Use this method to copy messages of any kind. If some of the specified messages can't be found or
	// copied, they are skipped. Service messages, giveaway messages, giveaway winners messages, and
	// invoice messages can't be copied. A quiz [poll](https://core.telegram.org/bots/api#poll) can be
	// copied only if the value of the field _correct_option_id_ is known to the bot. The method is
	// analogous to the method [forwardMessages](https://core.telegram.org/bots/api#forwardmessages), but
	// the copied messages don't have a link to the original message. Album grouping is kept for copied
	// messages. On success, an array of [MessageId](https://core.telegram.org/bots/api#messageid) of the
	// sent messages is returned.
	//
	// POST /copyMessages
	CopyMessages(ctx context.Context, req *CopyMessages) (*ResultArrayOfMessageId, error)
	// CreateChatInviteLink implements createChatInviteLink operation.
	//
	// Use this method to create an additional invite link for a chat. The bot must be an administrator
	// in the chat for this to work and must have the appropriate administrator rights. The link can be
	// revoked using the method [revokeChatInviteLink](https://core.telegram.
	// org/bots/api#revokechatinvitelink). Returns the new invite link as [ChatInviteLink](https://core.
	// telegram.org/bots/api#chatinvitelink) object.
	//
	// POST /createChatInviteLink
	CreateChatInviteLink(ctx context.Context, req *CreateChatInviteLink) (*ResultChatInviteLink, error)
	// CreateForumTopic implements createForumTopic operation.
	//
	// Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in
	// the chat for this to work and must have the _can_manage_topics_ administrator rights. Returns
	// information about the created topic as a [ForumTopic](https://core.telegram.
	// org/bots/api#forumtopic) object.
	//
	// POST /createForumTopic
	CreateForumTopic(ctx context.Context, req *CreateForumTopic) (*Result, error)
	// CreateInvoiceLink implements createInvoiceLink operation.
	//
	// Use this method to create a link for an invoice. Returns the created invoice link as _String_ on
	// success.
	//
	// POST /createInvoiceLink
	CreateInvoiceLink(ctx context.Context, req *CreateInvoiceLink) (*ResultString, error)
	// CreateNewStickerSet implements createNewStickerSet operation.
	//
	// Use this method to create a new sticker set owned by a user. The bot will be able to edit the
	// sticker set thus created. Returns _True_ on success.
	//
	// POST /createNewStickerSet
	CreateNewStickerSet(ctx context.Context, req *CreateNewStickerSet) (*Result, error)
	// DeclineChatJoinRequest implements declineChatJoinRequest operation.
	//
	// Use this method to decline a chat join request. The bot must be an administrator in the chat for
	// this to work and must have the _can_invite_users_ administrator right. Returns _True_ on success.
	//
	// POST /declineChatJoinRequest
	DeclineChatJoinRequest(ctx context.Context, req *DeclineChatJoinRequest) (*Result, error)
	// DeleteChatPhoto implements deleteChatPhoto operation.
	//
	// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be
	// an administrator in the chat for this to work and must have the appropriate administrator rights.
	// Returns _True_ on success.
	//
	// POST /deleteChatPhoto
	DeleteChatPhoto(ctx context.Context, req *DeleteChatPhoto) (*Result, error)
	// DeleteChatStickerSet implements deleteChatStickerSet operation.
	//
	// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator
	// in the chat for this to work and must have the appropriate administrator rights. Use the field
	// _can_set_sticker_set_ optionally returned in [getChat](https://core.telegram.org/bots/api#getchat)
	// requests to check if the bot can use this method. Returns _True_ on success.
	//
	// POST /deleteChatStickerSet
	DeleteChatStickerSet(ctx context.Context, req *DeleteChatStickerSet) (*Result, error)
	// DeleteForumTopic implements deleteForumTopic operation.
	//
	// Use this method to delete a forum topic along with all its messages in a forum supergroup chat.
	// The bot must be an administrator in the chat for this to work and must have the
	// _can_delete_messages_ administrator rights. Returns _True_ on success.
	//
	// POST /deleteForumTopic
	DeleteForumTopic(ctx context.Context, req *DeleteForumTopic) (*Result, error)
	// DeleteMessage implements deleteMessage operation.
	//
	// Use this method to delete a message, including service messages, with the following limitations:-
	// A message can only be deleted if it was sent less than 48 hours ago.- Service messages about a
	// supergroup, channel, or forum topic creation can't be deleted.- A dice message in a private chat
	// can only be deleted if it was sent more than 24 hours ago.- Bots can delete outgoing messages in
	// private chats, groups, and supergroups.- Bots can delete incoming messages in private chats.- Bots
	// granted _can_post_messages_ permissions can delete outgoing messages in channels.- If the bot is
	// an administrator of a group, it can delete any message there.- If the bot has
	// _can_delete_messages_ permission in a supergroup or a channel, it can delete any message there.
	// Returns _True_ on success.
	//
	// POST /deleteMessage
	DeleteMessage(ctx context.Context, req *DeleteMessage) (*Result, error)
	// DeleteMessages implements deleteMessages operation.
	//
	// Use this method to delete multiple messages simultaneously. If some of the specified messages
	// can't be found, they are skipped. Returns _True_ on success.
	//
	// POST /deleteMessages
	DeleteMessages(ctx context.Context, req *DeleteMessages) (*Result, error)
	// DeleteMyCommands implements deleteMyCommands operation.
	//
	// Use this method to delete the list of the bot's commands for the given scope and user language.
	// After deletion, [higher level commands](https://core.telegram.
	// org/bots/api#determining-list-of-commands) will be shown to affected users. Returns _True_ on
	// success.
	//
	// POST /deleteMyCommands
	DeleteMyCommands(ctx context.Context, req OptDeleteMyCommands) (*Result, error)
	// DeleteStickerFromSet implements deleteStickerFromSet operation.
	//
	// Use this method to delete a sticker from a set created by the bot. Returns _True_ on success.
	//
	// POST /deleteStickerFromSet
	DeleteStickerFromSet(ctx context.Context, req *DeleteStickerFromSet) (*Result, error)
	// DeleteStickerSet implements deleteStickerSet operation.
	//
	// Use this method to delete a sticker set that was created by the bot. Returns _True_ on success.
	//
	// POST /deleteStickerSet
	DeleteStickerSet(ctx context.Context, req *DeleteStickerSet) (*Result, error)
	// DeleteWebhook implements deleteWebhook operation.
	//
	// Use this method to remove webhook integration if you decide to switch back to
	// [getUpdates](https://core.telegram.org/bots/api#getupdates). Returns _True_ on success.
	//
	// POST /deleteWebhook
	DeleteWebhook(ctx context.Context, req OptDeleteWebhook) (*Result, error)
	// EditChatInviteLink implements editChatInviteLink operation.
	//
	// Use this method to edit a non-primary invite link created by the bot. The bot must be an
	// administrator in the chat for this to work and must have the appropriate administrator rights.
	// Returns the edited invite link as a [ChatInviteLink](https://core.telegram.
	// org/bots/api#chatinvitelink) object.
	//
	// POST /editChatInviteLink
	EditChatInviteLink(ctx context.Context, req *EditChatInviteLink) (*ResultChatInviteLink, error)
	// EditForumTopic implements editForumTopic operation.
	//
	// Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an
	// administrator in the chat for this to work and must have _can_manage_topics_ administrator rights,
	// unless it is the creator of the topic. Returns _True_ on success.
	//
	// POST /editForumTopic
	EditForumTopic(ctx context.Context, req *EditForumTopic) (*Result, error)
	// EditGeneralForumTopic implements editGeneralForumTopic operation.
	//
	// Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must
	// be an administrator in the chat for this to work and must have _can_manage_topics_ administrator
	// rights. Returns _True_ on success.
	//
	// POST /editGeneralForumTopic
	EditGeneralForumTopic(ctx context.Context, req *EditGeneralForumTopic) (*Result, error)
	// EditMessageCaption implements editMessageCaption operation.
	//
	// Use this method to edit captions of messages. On success, if the edited message is not an inline
	// message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise
	// _True_ is returned. Note that business messages that were not sent by the bot and do not contain
	// an inline keyboard can only be edited within **48 hours** from the time they were sent.
	//
	// POST /editMessageCaption
	EditMessageCaption(ctx context.Context, req *EditMessageCaption) (*ResultMessageOrBoolean, error)
	// EditMessageLiveLocation implements editMessageLiveLocation operation.
	//
	// Use this method to edit live location messages. A location can be edited until its _live_period_
	// expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.
	// telegram.org/bots/api#stopmessagelivelocation). On success, if the edited message is not an inline
	// message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise
	// _True_ is returned.
	//
	// POST /editMessageLiveLocation
	EditMessageLiveLocation(ctx context.Context, req *EditMessageLiveLocation) (*ResultMessageOrBoolean, error)
	// EditMessageMedia implements editMessageMedia operation.
	//
	// Use this method to edit animation, audio, document, photo, or video messages. If a message is part
	// of a message album, then it can be edited only to an audio for audio albums, only to a document
	// for document albums and to a photo or a video otherwise. When an inline message is edited, a new
	// file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On
	// success, if the edited message is not an inline message, the edited [Message](https://core.
	// telegram.org/bots/api#message) is returned, otherwise _True_ is returned. Note that business
	// messages that were not sent by the bot and do not contain an inline keyboard can only be edited
	// within **48 hours** from the time they were sent.
	//
	// POST /editMessageMedia
	EditMessageMedia(ctx context.Context, req *EditMessageMedia) (*ResultMessageOrBoolean, error)
	// EditMessageReplyMarkup implements editMessageReplyMarkup operation.
	//
	// Use this method to edit only the reply markup of messages. On success, if the edited message is
	// not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is
	// returned, otherwise _True_ is returned. Note that business messages that were not sent by the bot
	// and do not contain an inline keyboard can only be edited within **48 hours** from the time they
	// were sent.
	//
	// POST /editMessageReplyMarkup
	EditMessageReplyMarkup(ctx context.Context, req *EditMessageReplyMarkup) (*ResultMessageOrBoolean, error)
	// EditMessageText implements editMessageText operation.
	//
	// Use this method to edit text and [game](https://core.telegram.org/bots/api#games) messages. On
	// success, if the edited message is not an inline message, the edited [Message](https://core.
	// telegram.org/bots/api#message) is returned, otherwise _True_ is returned. Note that business
	// messages that were not sent by the bot and do not contain an inline keyboard can only be edited
	// within **48 hours** from the time they were sent.
	//
	// POST /editMessageText
	EditMessageText(ctx context.Context, req *EditMessageText) (*ResultMessageOrBoolean, error)
	// ExportChatInviteLink implements exportChatInviteLink operation.
	//
	// Use this method to generate a new primary invite link for a chat; any previously generated primary
	// link is revoked. The bot must be an administrator in the chat for this to work and must have the
	// appropriate administrator rights. Returns the new invite link as _String_ on success.
	//
	// POST /exportChatInviteLink
	ExportChatInviteLink(ctx context.Context, req *ExportChatInviteLink) (*ResultString, error)
	// ForwardMessage implements forwardMessage operation.
	//
	// Use this method to forward messages of any kind. Service messages and messages with protected
	// content can't be forwarded. On success, the sent [Message](https://core.telegram.
	// org/bots/api#message) is returned.
	//
	// POST /forwardMessage
	ForwardMessage(ctx context.Context, req *ForwardMessage) (*ResultMessage, error)
	// ForwardMessages implements forwardMessages operation.
	//
	// Use this method to forward multiple messages of any kind. If some of the specified messages can't
	// be found or forwarded, they are skipped. Service messages and messages with protected content
	// can't be forwarded. Album grouping is kept for forwarded messages. On success, an array of
	// [MessageId](https://core.telegram.org/bots/api#messageid) of the sent messages is returned.
	//
	// POST /forwardMessages
	ForwardMessages(ctx context.Context, req *ForwardMessages) (*ResultArrayOfMessageId, error)
	// GetBusinessConnection implements getBusinessConnection operation.
	//
	// Use this method to get information about the connection of the bot with a business account.
	// Returns a [BusinessConnection](https://core.telegram.org/bots/api#businessconnection) object on
	// success.
	//
	// POST /getBusinessConnection
	GetBusinessConnection(ctx context.Context, req *GetBusinessConnection) (*Result, error)
	// GetChat implements getChat operation.
	//
	// Use this method to get up-to-date information about the chat. Returns a
	// [ChatFullInfo](https://core.telegram.org/bots/api#chatfullinfo) object on success.
	//
	// POST /getChat
	GetChat(ctx context.Context, req *GetChat) (*Result, error)
	// GetChatAdministrators implements getChatAdministrators operation.
	//
	// Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of
	// [ChatMember](https://core.telegram.org/bots/api#chatmember) objects.
	//
	// POST /getChatAdministrators
	GetChatAdministrators(ctx context.Context, req *GetChatAdministrators) (*ResultArrayOfChatMember, error)
	// GetChatMember implements getChatMember operation.
	//
	// Use this method to get information about a member of a chat. The method is only guaranteed to work
	// for other users if the bot is an administrator in the chat. Returns a [ChatMember](https://core.
	// telegram.org/bots/api#chatmember) object on success.
	//
	// POST /getChatMember
	GetChatMember(ctx context.Context, req *GetChatMember) (*ResultChatMember, error)
	// GetChatMemberCount implements getChatMemberCount operation.
	//
	// Use this method to get the number of members in a chat. Returns _Int_ on success.
	//
	// POST /getChatMemberCount
	GetChatMemberCount(ctx context.Context, req *GetChatMemberCount) (*ResultInt, error)
	// GetChatMenuButton implements getChatMenuButton operation.
	//
	// Use this method to get the current value of the bot's menu button in a private chat, or the
	// default menu button. Returns [MenuButton](https://core.telegram.org/bots/api#menubutton) on
	// success.
	//
	// POST /getChatMenuButton
	GetChatMenuButton(ctx context.Context, req OptGetChatMenuButton) (*Result, error)
	// GetCustomEmojiStickers implements getCustomEmojiStickers operation.
	//
	// Use this method to get information about custom emoji stickers by their identifiers. Returns an
	// Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.
	//
	// POST /getCustomEmojiStickers
	GetCustomEmojiStickers(ctx context.Context, req *GetCustomEmojiStickers) (*ResultArrayOfSticker, error)
	// GetFile implements getFile operation.
	//
	// Use this method to get basic information about a file and prepare it for downloading. For the
	// moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.
	// org/bots/api#file) object is returned. The file can then be downloaded via the link `https://api.
	// telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is
	// guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can
	// be requested by calling [getFile](https://core.telegram.org/bots/api#getfile) again.
	//
	// POST /getFile
	GetFile(ctx context.Context, req *GetFile) (*ResultFile, error)
	// GetForumTopicIconStickers implements getForumTopicIconStickers operation.
	//
	// Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.
	// Requires no parameters. Returns an Array of [Sticker](https://core.telegram.org/bots/api#sticker)
	// objects.
	//
	// POST /getForumTopicIconStickers
	GetForumTopicIconStickers(ctx context.Context) (*ResultArrayOfSticker, error)
	// GetGameHighScores implements getGameHighScores operation.
	//
	// Use this method to get data for high score tables. Will return the score of the specified user and
	// several of their neighbors in a game. Returns an Array of [GameHighScore](https://core.telegram.
	// org/bots/api#gamehighscore) objects.
	//
	// POST /getGameHighScores
	GetGameHighScores(ctx context.Context, req *GetGameHighScores) (*ResultArrayOfGameHighScore, error)
	// GetMe implements getMe operation.
	//
	// A simple method for testing your bot's authentication token. Requires no parameters. Returns basic
	// information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.
	//
	// POST /getMe
	GetMe(ctx context.Context) (*ResultUser, error)
	// GetMyCommands implements getMyCommands operation.
	//
	// Use this method to get the current list of the bot's commands for the given scope and user
	// language. Returns an Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) objects.
	// If commands aren't set, an empty list is returned.
	//
	// POST /getMyCommands
	GetMyCommands(ctx context.Context, req OptGetMyCommands) (*ResultArrayOfBotCommand, error)
	// GetMyDefaultAdministratorRights implements getMyDefaultAdministratorRights operation.
	//
	// Use this method to get the current default administrator rights of the bot. Returns
	// [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success.
	//
	// POST /getMyDefaultAdministratorRights
	GetMyDefaultAdministratorRights(ctx context.Context, req OptGetMyDefaultAdministratorRights) (*Result, error)
	// GetMyDescription implements getMyDescription operation.
	//
	// Use this method to get the current bot description for the given user language. Returns
	// [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.
	//
	// POST /getMyDescription
	GetMyDescription(ctx context.Context, req OptGetMyDescription) (*Result, error)
	// GetMyName implements getMyName operation.
	//
	// Use this method to get the current bot name for the given user language. Returns
	// [BotName](https://core.telegram.org/bots/api#botname) on success.
	//
	// POST /getMyName
	GetMyName(ctx context.Context, req OptGetMyName) (*Result, error)
	// GetMyShortDescription implements getMyShortDescription operation.
	//
	// Use this method to get the current bot short description for the given user language. Returns
	// [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.
	//
	// POST /getMyShortDescription
	GetMyShortDescription(ctx context.Context, req OptGetMyShortDescription) (*Result, error)
	// GetStarTransactions implements getStarTransactions operation.
	//
	// Returns the bot's Telegram Star transactions in chronological order. On success, returns a
	// [StarTransactions](https://core.telegram.org/bots/api#startransactions) object.
	//
	// POST /getStarTransactions
	GetStarTransactions(ctx context.Context, req OptGetStarTransactions) (*Result, error)
	// GetStickerSet implements getStickerSet operation.
	//
	// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.
	// org/bots/api#stickerset) object is returned.
	//
	// POST /getStickerSet
	GetStickerSet(ctx context.Context, req *GetStickerSet) (*ResultStickerSet, error)
	// GetUpdates implements getUpdates operation.
	//
	// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.
	// org/wiki/Push_technology#Long_polling)). Returns an Array of [Update](https://core.telegram.
	// org/bots/api#update) objects.
	//
	// POST /getUpdates
	GetUpdates(ctx context.Context, req OptGetUpdates) (*ResultArrayOfUpdate, error)
	// GetUserChatBoosts implements getUserChatBoosts operation.
	//
	// Use this method to get the list of boosts added to a chat by a user. Requires administrator rights
	// in the chat. Returns a [UserChatBoosts](https://core.telegram.org/bots/api#userchatboosts) object.
	//
	// POST /getUserChatBoosts
	GetUserChatBoosts(ctx context.Context, req *GetUserChatBoosts) (*Result, error)
	// GetUserProfilePhotos implements getUserProfilePhotos operation.
	//
	// Use this method to get a list of profile pictures for a user. Returns a
	// [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.
	//
	// POST /getUserProfilePhotos
	GetUserProfilePhotos(ctx context.Context, req *GetUserProfilePhotos) (*ResultUserProfilePhotos, error)
	// GetWebhookInfo implements getWebhookInfo operation.
	//
	// Use this method to get current webhook status. Requires no parameters. On success, returns a
	// [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object. If the bot is using
	// [getUpdates](https://core.telegram.org/bots/api#getupdates), will return an object with the _url_
	// field empty.
	//
	// POST /getWebhookInfo
	GetWebhookInfo(ctx context.Context) (*ResultWebhookInfo, error)
	// HideGeneralForumTopic implements hideGeneralForumTopic operation.
	//
	// Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an
	// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
	// rights. The topic will be automatically closed if it was open. Returns _True_ on success.
	//
	// POST /hideGeneralForumTopic
	HideGeneralForumTopic(ctx context.Context, req *HideGeneralForumTopic) (*Result, error)
	// LeaveChat implements leaveChat operation.
	//
	// Use this method for your bot to leave a group, supergroup or channel. Returns _True_ on success.
	//
	// POST /leaveChat
	LeaveChat(ctx context.Context, req *LeaveChat) (*Result, error)
	// LogOut implements logOut operation.
	//
	// Use this method to log out from the cloud Bot API server before launching the bot locally. You
	// **must** log out the bot before running it locally, otherwise there is no guarantee that the bot
	// will receive updates. After a successful call, you can immediately log in on a local server, but
	// will not be able to log in back to the cloud Bot API server for 10 minutes. Returns _True_ on
	// success. Requires no parameters.
	//
	// POST /logOut
	LogOut(ctx context.Context) (*Result, error)
	// PinChatMessage implements pinChatMessage operation.
	//
	// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a
	// private chat, the bot must be an administrator in the chat for this to work and must have the
	// 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right
	// in a channel. Returns _True_ on success.
	//
	// POST /pinChatMessage
	PinChatMessage(ctx context.Context, req *PinChatMessage) (*Result, error)
	// PromoteChatMember implements promoteChatMember operation.
	//
	// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an
	// administrator in the chat for this to work and must have the appropriate administrator rights.
	// Pass _False_ for all boolean parameters to demote a user. Returns _True_ on success.
	//
	// POST /promoteChatMember
	PromoteChatMember(ctx context.Context, req *PromoteChatMember) (*Result, error)
	// RefundStarPayment implements refundStarPayment operation.
	//
	// Refunds a successful payment in [Telegram Stars](https://t.me/BotNews/90). Returns _True_ on
	// success.
	//
	// POST /refundStarPayment
	RefundStarPayment(ctx context.Context, req *RefundStarPayment) (*Result, error)
	// ReopenForumTopic implements reopenForumTopic operation.
	//
	// Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an
	// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
	// rights, unless it is the creator of the topic. Returns _True_ on success.
	//
	// POST /reopenForumTopic
	ReopenForumTopic(ctx context.Context, req *ReopenForumTopic) (*Result, error)
	// ReopenGeneralForumTopic implements reopenGeneralForumTopic operation.
	//
	// Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an
	// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
	// rights. The topic will be automatically unhidden if it was hidden. Returns _True_ on success.
	//
	// POST /reopenGeneralForumTopic
	ReopenGeneralForumTopic(ctx context.Context, req *ReopenGeneralForumTopic) (*Result, error)
	// ReplaceStickerInSet implements replaceStickerInSet operation.
	//
	// Use this method to replace an existing sticker in a sticker set with a new one. The method is
	// equivalent to calling [deleteStickerFromSet](https://core.telegram.
	// org/bots/api#deletestickerfromset), then [addStickerToSet](https://core.telegram.
	// org/bots/api#addstickertoset), then [setStickerPositionInSet](https://core.telegram.
	// org/bots/api#setstickerpositioninset). Returns _True_ on success.
	//
	// POST /replaceStickerInSet
	ReplaceStickerInSet(ctx context.Context, req *ReplaceStickerInSet) (*Result, error)
	// RestrictChatMember implements restrictChatMember operation.
	//
	// Use this method to restrict a user in a supergroup. The bot must be an administrator in the
	// supergroup for this to work and must have the appropriate administrator rights. Pass _True_ for
	// all permissions to lift restrictions from a user. Returns _True_ on success.
	//
	// POST /restrictChatMember
	RestrictChatMember(ctx context.Context, req *RestrictChatMember) (*Result, error)
	// RevokeChatInviteLink implements revokeChatInviteLink operation.
	//
	// Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new
	// link is automatically generated. The bot must be an administrator in the chat for this to work and
	// must have the appropriate administrator rights. Returns the revoked invite link as
	// [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object.
	//
	// POST /revokeChatInviteLink
	RevokeChatInviteLink(ctx context.Context, req *RevokeChatInviteLink) (*ResultChatInviteLink, error)
	// SendAnimation implements sendAnimation operation.
	//
	// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success,
	// the sent [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently
	// send animation files of up to 50 MB in size, this limit may be changed in the future.
	//
	// POST /sendAnimation
	SendAnimation(ctx context.Context, req *SendAnimation) (*ResultMessage, error)
	// SendAudio implements sendAudio operation.
	//
	// For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api#sendvoice)
	// method instead.
	//
	// POST /sendAudio
	SendAudio(ctx context.Context, req *SendAudio) (*ResultMessage, error)
	// SendChatAction implements sendChatAction operation.
	//
	// We only recommend using this method when a response from the bot will take a **noticeable** amount
	// of time to arrive.
	//
	// POST /sendChatAction
	SendChatAction(ctx context.Context, req *SendChatAction) (*Result, error)
	// SendContact implements sendContact operation.
	//
	// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.
	// org/bots/api#message) is returned.
	//
	// POST /sendContact
	SendContact(ctx context.Context, req *SendContact) (*ResultMessage, error)
	// SendDice implements sendDice operation.
	//
	// Use this method to send an animated emoji that will display a random value. On success, the sent
	// [Message](https://core.telegram.org/bots/api#message) is returned.
	//
	// POST /sendDice
	SendDice(ctx context.Context, req *SendDice) (*ResultMessage, error)
	// SendDocument implements sendDocument operation.
	//
	// Use this method to send general files. On success, the sent [Message](https://core.telegram.
	// org/bots/api#message) is returned. Bots can currently send files of any type of up to 50 MB in
	// size, this limit may be changed in the future.
	//
	// POST /sendDocument
	SendDocument(ctx context.Context, req *SendDocument) (*ResultMessage, error)
	// SendGame implements sendGame operation.
	//
	// Use this method to send a game. On success, the sent [Message](https://core.telegram.
	// org/bots/api#message) is returned.
	//
	// POST /sendGame
	SendGame(ctx context.Context, req *SendGame) (*ResultMessage, error)
	// SendInvoice implements sendInvoice operation.
	//
	// Use this method to send invoices. On success, the sent [Message](https://core.telegram.
	// org/bots/api#message) is returned.
	//
	// POST /sendInvoice
	SendInvoice(ctx context.Context, req *SendInvoice) (*ResultMessage, error)
	// SendLocation implements sendLocation operation.
	//
	// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.
	// org/bots/api#message) is returned.
	//
	// POST /sendLocation
	SendLocation(ctx context.Context, req *SendLocation) (*ResultMessage, error)
	// SendMediaGroup implements sendMediaGroup operation.
	//
	// Use this method to send a group of photos, videos, documents or audios as an album. Documents and
	// audio files can be only grouped in an album with messages of the same type. On success, an array
	// of [Messages](https://core.telegram.org/bots/api#message) that were sent is returned.
	//
	// POST /sendMediaGroup
	SendMediaGroup(ctx context.Context, req *SendMediaGroup) (*ResultArrayOfMessage, error)
	// SendMessage implements sendMessage operation.
	//
	// Use this method to send text messages. On success, the sent [Message](https://core.telegram.
	// org/bots/api#message) is returned.
	//
	// POST /sendMessage
	SendMessage(ctx context.Context, req *SendMessage) (*ResultMessage, error)
	// SendPhoto implements sendPhoto operation.
	//
	// Use this method to send photos. On success, the sent [Message](https://core.telegram.
	// org/bots/api#message) is returned.
	//
	// POST /sendPhoto
	SendPhoto(ctx context.Context, req *SendPhoto) (*ResultMessage, error)
	// SendPoll implements sendPoll operation.
	//
	// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.
	// org/bots/api#message) is returned.
	//
	// POST /sendPoll
	SendPoll(ctx context.Context, req *SendPoll) (*ResultMessage, error)
	// SendSticker implements sendSticker operation.
	//
	// Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,
	//  or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers. On success,
	// the sent [Message](https://core.telegram.org/bots/api#message) is returned.
	//
	// POST /sendSticker
	SendSticker(ctx context.Context, req *SendSticker) (*ResultMessage, error)
	// SendVenue implements sendVenue operation.
	//
	// Use this method to send information about a venue. On success, the sent [Message](https://core.
	// telegram.org/bots/api#message) is returned.
	//
	// POST /sendVenue
	SendVenue(ctx context.Context, req *SendVenue) (*ResultMessage, error)
	// SendVideo implements sendVideo operation.
	//
	// Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be
	// sent as [Document](https://core.telegram.org/bots/api#document)). On success, the sent
	// [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently send video
	// files of up to 50 MB in size, this limit may be changed in the future.
	//
	// POST /sendVideo
	SendVideo(ctx context.Context, req *SendVideo) (*ResultMessage, error)
	// SendVideoNote implements sendVideoNote operation.
	//
	// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support
	// rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On
	// success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.
	//
	// POST /sendVideoNote
	SendVideoNote(ctx context.Context, req *SendVideoNote) (*ResultMessage, error)
	// SendVoice implements sendVoice operation.
	//
	// Use this method to send audio files, if you want Telegram clients to display the file as a
	// playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or
	// in .MP3 format, or in .M4A format (other formats may be sent as [Audio](https://core.telegram.
	// org/bots/api#audio) or [Document](https://core.telegram.org/bots/api#document)). On success, the
	// sent [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently send
	// voice messages of up to 50 MB in size, this limit may be changed in the future.
	//
	// POST /sendVoice
	SendVoice(ctx context.Context, req *SendVoice) (*ResultMessage, error)
	// SetChatAdministratorCustomTitle implements setChatAdministratorCustomTitle operation.
	//
	// Use this method to set a custom title for an administrator in a supergroup promoted by the bot.
	// Returns _True_ on success.
	//
	// POST /setChatAdministratorCustomTitle
	SetChatAdministratorCustomTitle(ctx context.Context, req *SetChatAdministratorCustomTitle) (*Result, error)
	// SetChatDescription implements setChatDescription operation.
	//
	// Use this method to change the description of a group, a supergroup or a channel. The bot must be
	// an administrator in the chat for this to work and must have the appropriate administrator rights.
	// Returns _True_ on success.
	//
	// POST /setChatDescription
	SetChatDescription(ctx context.Context, req *SetChatDescription) (*Result, error)
	// SetChatMenuButton implements setChatMenuButton operation.
	//
	// Use this method to change the bot's menu button in a private chat, or the default menu button.
	// Returns _True_ on success.
	//
	// POST /setChatMenuButton
	SetChatMenuButton(ctx context.Context, req OptSetChatMenuButton) (*Result, error)
	// SetChatPermissions implements setChatPermissions operation.
	//
	// Use this method to set default chat permissions for all members. The bot must be an administrator
	// in the group or a supergroup for this to work and must have the _can_restrict_members_
	// administrator rights. Returns _True_ on success.
	//
	// POST /setChatPermissions
	SetChatPermissions(ctx context.Context, req *SetChatPermissions) (*Result, error)
	// SetChatPhoto implements setChatPhoto operation.
	//
	// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats.
	//  The bot must be an administrator in the chat for this to work and must have the appropriate
	// administrator rights. Returns _True_ on success.
	//
	// POST /setChatPhoto
	SetChatPhoto(ctx context.Context, req *SetChatPhoto) (*Result, error)
	// SetChatStickerSet implements setChatStickerSet operation.
	//
	// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator
	// in the chat for this to work and must have the appropriate administrator rights. Use the field
	// _can_set_sticker_set_ optionally returned in [getChat](https://core.telegram.org/bots/api#getchat)
	// requests to check if the bot can use this method. Returns _True_ on success.
	//
	// POST /setChatStickerSet
	SetChatStickerSet(ctx context.Context, req *SetChatStickerSet) (*Result, error)
	// SetChatTitle implements setChatTitle operation.
	//
	// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot
	// must be an administrator in the chat for this to work and must have the appropriate administrator
	// rights. Returns _True_ on success.
	//
	// POST /setChatTitle
	SetChatTitle(ctx context.Context, req *SetChatTitle) (*Result, error)
	// SetCustomEmojiStickerSetThumbnail implements setCustomEmojiStickerSetThumbnail operation.
	//
	// Use this method to set the thumbnail of a custom emoji sticker set. Returns _True_ on success.
	//
	// POST /setCustomEmojiStickerSetThumbnail
	SetCustomEmojiStickerSetThumbnail(ctx context.Context, req *SetCustomEmojiStickerSetThumbnail) (*Result, error)
	// SetGameScore implements setGameScore operation.
	//
	// Use this method to set the score of the specified user in a game message. On success, if the
	// message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is
	// returned, otherwise _True_ is returned. Returns an error, if the new score is not greater than the
	// user's current score in the chat and _force_ is _False_.
	//
	// POST /setGameScore
	SetGameScore(ctx context.Context, req *SetGameScore) (*Result, error)
	// SetMessageReaction implements setMessageReaction operation.
	//
	// Use this method to change the chosen reactions on a message. Service messages can't be reacted to.
	// Automatically forwarded messages from a channel to its discussion group have the same available
	// reactions as messages in the channel. Returns _True_ on success.
	//
	// POST /setMessageReaction
	SetMessageReaction(ctx context.Context, req *SetMessageReaction) (*Result, error)
	// SetMyCommands implements setMyCommands operation.
	//
	// Use this method to change the list of the bot's commands. See [this manual](https://core.telegram.
	// org/bots/features#commands) for more details about bot commands. Returns _True_ on success.
	//
	// POST /setMyCommands
	SetMyCommands(ctx context.Context, req *SetMyCommands) (*Result, error)
	// SetMyDefaultAdministratorRights implements setMyDefaultAdministratorRights operation.
	//
	// Use this method to change the default administrator rights requested by the bot when it's added as
	// an administrator to groups or channels. These rights will be suggested to users, but they are free
	// to modify the list before adding the bot. Returns _True_ on success.
	//
	// POST /setMyDefaultAdministratorRights
	SetMyDefaultAdministratorRights(ctx context.Context, req OptSetMyDefaultAdministratorRights) (*Result, error)
	// SetMyDescription implements setMyDescription operation.
	//
	// Use this method to change the bot's description, which is shown in the chat with the bot if the
	// chat is empty. Returns _True_ on success.
	//
	// POST /setMyDescription
	SetMyDescription(ctx context.Context, req OptSetMyDescription) (*Result, error)
	// SetMyName implements setMyName operation.
	//
	// Use this method to change the bot's name. Returns _True_ on success.
	//
	// POST /setMyName
	SetMyName(ctx context.Context, req OptSetMyName) (*Result, error)
	// SetMyShortDescription implements setMyShortDescription operation.
	//
	// Use this method to change the bot's short description, which is shown on the bot's profile page
	// and is sent together with the link when users share the bot. Returns _True_ on success.
	//
	// POST /setMyShortDescription
	SetMyShortDescription(ctx context.Context, req OptSetMyShortDescription) (*Result, error)
	// SetPassportDataErrors implements setPassportDataErrors operation.
	//
	// Use this if the data submitted by the user doesn't satisfy the standards your service requires for
	// any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan
	// shows evidence of tampering, etc. Supply some details in the error message to make sure the user
	// knows how to correct the issues.
	//
	// POST /setPassportDataErrors
	SetPassportDataErrors(ctx context.Context, req *SetPassportDataErrors) (*Result, error)
	// SetStickerEmojiList implements setStickerEmojiList operation.
	//
	// Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The
	// sticker must belong to a sticker set created by the bot. Returns _True_ on success.
	//
	// POST /setStickerEmojiList
	SetStickerEmojiList(ctx context.Context, req *SetStickerEmojiList) (*Result, error)
	// SetStickerKeywords implements setStickerKeywords operation.
	//
	// Use this method to change search keywords assigned to a regular or custom emoji sticker. The
	// sticker must belong to a sticker set created by the bot. Returns _True_ on success.
	//
	// POST /setStickerKeywords
	SetStickerKeywords(ctx context.Context, req *SetStickerKeywords) (*Result, error)
	// SetStickerMaskPosition implements setStickerMaskPosition operation.
	//
	// Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of
	// a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns
	// _True_ on success.
	//
	// POST /setStickerMaskPosition
	SetStickerMaskPosition(ctx context.Context, req *SetStickerMaskPosition) (*Result, error)
	// SetStickerPositionInSet implements setStickerPositionInSet operation.
	//
	// Use this method to move a sticker in a set created by the bot to a specific position. Returns
	// _True_ on success.
	//
	// POST /setStickerPositionInSet
	SetStickerPositionInSet(ctx context.Context, req *SetStickerPositionInSet) (*Result, error)
	// SetStickerSetThumbnail implements setStickerSetThumbnail operation.
	//
	// Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail
	// file must match the format of the stickers in the set. Returns _True_ on success.
	//
	// POST /setStickerSetThumbnail
	SetStickerSetThumbnail(ctx context.Context, req *SetStickerSetThumbnail) (*Result, error)
	// SetStickerSetTitle implements setStickerSetTitle operation.
	//
	// Use this method to set the title of a created sticker set. Returns _True_ on success.
	//
	// POST /setStickerSetTitle
	SetStickerSetTitle(ctx context.Context, req *SetStickerSetTitle) (*Result, error)
	// SetWebhook implements setWebhook operation.
	//
	// If you'd like to make sure that the webhook was set by you, you can specify secret data in the
	// parameter _secret_token_. If specified, the request will contain a header
	// `X-Telegram-Bot-Api-Secret-Token` with the secret token as content.
	//
	// POST /setWebhook
	SetWebhook(ctx context.Context, req *SetWebhook) (*Result, error)
	// StopMessageLiveLocation implements stopMessageLiveLocation operation.
	//
	// Use this method to stop updating a live location message before _live_period_ expires. On success,
	// if the message is not an inline message, the edited [Message](https://core.telegram.
	// org/bots/api#message) is returned, otherwise _True_ is returned.
	//
	// POST /stopMessageLiveLocation
	StopMessageLiveLocation(ctx context.Context, req *StopMessageLiveLocation) (*ResultMessageOrBoolean, error)
	// StopPoll implements stopPoll operation.
	//
	// Use this method to stop a poll which was sent by the bot. On success, the stopped
	// [Poll](https://core.telegram.org/bots/api#poll) is returned.
	//
	// POST /stopPoll
	StopPoll(ctx context.Context, req *StopPoll) (*ResultPoll, error)
	// UnbanChatMember implements unbanChatMember operation.
	//
	// Use this method to unban a previously banned user in a supergroup or channel. The user will
	// **not** return to the group or channel automatically, but will be able to join via link, etc. The
	// bot must be an administrator for this to work. By default, this method guarantees that after the
	// call the user is not a member of the chat, but will be able to join it. So if the user is a member
	// of the chat they will also be **removed** from the chat. If you don't want this, use the parameter
	// _only_if_banned_. Returns _True_ on success.
	//
	// POST /unbanChatMember
	UnbanChatMember(ctx context.Context, req *UnbanChatMember) (*Result, error)
	// UnbanChatSenderChat implements unbanChatSenderChat operation.
	//
	// Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must
	// be an administrator for this to work and must have the appropriate administrator rights. Returns
	// _True_ on success.
	//
	// POST /unbanChatSenderChat
	UnbanChatSenderChat(ctx context.Context, req *UnbanChatSenderChat) (*Result, error)
	// UnhideGeneralForumTopic implements unhideGeneralForumTopic operation.
	//
	// Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an
	// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
	// rights. Returns _True_ on success.
	//
	// POST /unhideGeneralForumTopic
	UnhideGeneralForumTopic(ctx context.Context, req *UnhideGeneralForumTopic) (*Result, error)
	// UnpinAllChatMessages implements unpinAllChatMessages operation.
	//
	// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat,
	// the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages'
	// administrator right in a supergroup or 'can_edit_messages' administrator right in a channel.
	// Returns _True_ on success.
	//
	// POST /unpinAllChatMessages
	UnpinAllChatMessages(ctx context.Context, req *UnpinAllChatMessages) (*Result, error)
	// UnpinAllForumTopicMessages implements unpinAllForumTopicMessages operation.
	//
	// Use this method to clear the list of pinned messages in a forum topic. The bot must be an
	// administrator in the chat for this to work and must have the _can_pin_messages_ administrator
	// right in the supergroup. Returns _True_ on success.
	//
	// POST /unpinAllForumTopicMessages
	UnpinAllForumTopicMessages(ctx context.Context, req *UnpinAllForumTopicMessages) (*Result, error)
	// UnpinAllGeneralForumTopicMessages implements unpinAllGeneralForumTopicMessages operation.
	//
	// Use this method to clear the list of pinned messages in a General forum topic. The bot must be an
	// administrator in the chat for this to work and must have the _can_pin_messages_ administrator
	// right in the supergroup. Returns _True_ on success.
	//
	// POST /unpinAllGeneralForumTopicMessages
	UnpinAllGeneralForumTopicMessages(ctx context.Context, req *UnpinAllGeneralForumTopicMessages) (*Result, error)
	// UnpinChatMessage implements unpinChatMessage operation.
	//
	// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not
	// a private chat, the bot must be an administrator in the chat for this to work and must have the
	// 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right
	// in a channel. Returns _True_ on success.
	//
	// POST /unpinChatMessage
	UnpinChatMessage(ctx context.Context, req *UnpinChatMessage) (*Result, error)
	// UploadStickerFile implements uploadStickerFile operation.
	//
	// Use this method to upload a file with a sticker for later use in the
	// [createNewStickerSet](https://core.telegram.org/bots/api#createnewstickerset),
	// [addStickerToSet](https://core.telegram.org/bots/api#addstickertoset), or
	// [replaceStickerInSet](https://core.telegram.org/bots/api#replacestickerinset) methods (the file
	// can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api#file)
	// on success.
	//
	// POST /uploadStickerFile
	UploadStickerFile(ctx context.Context, req *UploadStickerFile) (*ResultFile, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
