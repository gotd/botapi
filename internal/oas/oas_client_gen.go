// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/metric/instrument/syncint64"
	"go.opentelemetry.io/otel/trace"

	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	cfg       config
	requests  syncint64.Counter
	errors    syncint64.Counter
	duration  syncint64.Histogram
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...Option) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	c := &Client{
		cfg:       newConfig(opts...),
		serverURL: u,
	}
	if c.requests, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientRequestCount); err != nil {
		return nil, err
	}
	if c.errors, err = c.cfg.Meter.SyncInt64().Counter(otelogen.ClientErrorsCount); err != nil {
		return nil, err
	}
	if c.duration, err = c.cfg.Meter.SyncInt64().Histogram(otelogen.ClientDuration); err != nil {
		return nil, err
	}
	return c, nil
}

// AddStickerToSet invokes addStickerToSet operation.
//
// POST /addStickerToSet
func (c *Client) AddStickerToSet(ctx context.Context, request AddStickerToSet) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("addStickerToSet"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "AddStickerToSet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeAddStickerToSetRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/addStickerToSet"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAddStickerToSetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AnswerCallbackQuery invokes answerCallbackQuery operation.
//
// POST /answerCallbackQuery
func (c *Client) AnswerCallbackQuery(ctx context.Context, request AnswerCallbackQuery) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("answerCallbackQuery"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "AnswerCallbackQuery",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeAnswerCallbackQueryRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/answerCallbackQuery"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAnswerCallbackQueryResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AnswerInlineQuery invokes answerInlineQuery operation.
//
// POST /answerInlineQuery
func (c *Client) AnswerInlineQuery(ctx context.Context, request AnswerInlineQuery) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("answerInlineQuery"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "AnswerInlineQuery",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeAnswerInlineQueryRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/answerInlineQuery"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAnswerInlineQueryResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AnswerPreCheckoutQuery invokes answerPreCheckoutQuery operation.
//
// POST /answerPreCheckoutQuery
func (c *Client) AnswerPreCheckoutQuery(ctx context.Context, request AnswerPreCheckoutQuery) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("answerPreCheckoutQuery"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "AnswerPreCheckoutQuery",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeAnswerPreCheckoutQueryRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/answerPreCheckoutQuery"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAnswerPreCheckoutQueryResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AnswerShippingQuery invokes answerShippingQuery operation.
//
// POST /answerShippingQuery
func (c *Client) AnswerShippingQuery(ctx context.Context, request AnswerShippingQuery) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("answerShippingQuery"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "AnswerShippingQuery",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeAnswerShippingQueryRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/answerShippingQuery"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAnswerShippingQueryResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// AnswerWebAppQuery invokes answerWebAppQuery operation.
//
// POST /answerWebAppQuery
func (c *Client) AnswerWebAppQuery(ctx context.Context, request AnswerWebAppQuery) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("answerWebAppQuery"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "AnswerWebAppQuery",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeAnswerWebAppQueryRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/answerWebAppQuery"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeAnswerWebAppQueryResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ApproveChatJoinRequest invokes approveChatJoinRequest operation.
//
// POST /approveChatJoinRequest
func (c *Client) ApproveChatJoinRequest(ctx context.Context, request ApproveChatJoinRequest) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("approveChatJoinRequest"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "ApproveChatJoinRequest",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeApproveChatJoinRequestRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/approveChatJoinRequest"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeApproveChatJoinRequestResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// BanChatMember invokes banChatMember operation.
//
// POST /banChatMember
func (c *Client) BanChatMember(ctx context.Context, request BanChatMember) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("banChatMember"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "BanChatMember",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeBanChatMemberRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/banChatMember"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeBanChatMemberResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// BanChatSenderChat invokes banChatSenderChat operation.
//
// POST /banChatSenderChat
func (c *Client) BanChatSenderChat(ctx context.Context, request BanChatSenderChat) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("banChatSenderChat"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "BanChatSenderChat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeBanChatSenderChatRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/banChatSenderChat"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeBanChatSenderChatResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// Close invokes close operation.
//
// POST /close
func (c *Client) Close(ctx context.Context) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("close"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "Close",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/close"

	r := ht.NewRequest(ctx, "POST", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCloseResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CopyMessage invokes copyMessage operation.
//
// POST /copyMessage
func (c *Client) CopyMessage(ctx context.Context, request CopyMessage) (res ResultMessageId, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("copyMessage"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "CopyMessage",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeCopyMessageRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/copyMessage"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCopyMessageResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateChatInviteLink invokes createChatInviteLink operation.
//
// POST /createChatInviteLink
func (c *Client) CreateChatInviteLink(ctx context.Context, request CreateChatInviteLink) (res ResultChatInviteLink, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("createChatInviteLink"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "CreateChatInviteLink",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeCreateChatInviteLinkRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/createChatInviteLink"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateChatInviteLinkResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateNewStickerSet invokes createNewStickerSet operation.
//
// POST /createNewStickerSet
func (c *Client) CreateNewStickerSet(ctx context.Context, request CreateNewStickerSet) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("createNewStickerSet"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "CreateNewStickerSet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeCreateNewStickerSetRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/createNewStickerSet"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateNewStickerSetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeclineChatJoinRequest invokes declineChatJoinRequest operation.
//
// POST /declineChatJoinRequest
func (c *Client) DeclineChatJoinRequest(ctx context.Context, request DeclineChatJoinRequest) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("declineChatJoinRequest"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "DeclineChatJoinRequest",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeDeclineChatJoinRequestRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/declineChatJoinRequest"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeclineChatJoinRequestResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteChatPhoto invokes deleteChatPhoto operation.
//
// POST /deleteChatPhoto
func (c *Client) DeleteChatPhoto(ctx context.Context, request DeleteChatPhoto) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("deleteChatPhoto"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteChatPhoto",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeDeleteChatPhotoRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/deleteChatPhoto"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteChatPhotoResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteChatStickerSet invokes deleteChatStickerSet operation.
//
// POST /deleteChatStickerSet
func (c *Client) DeleteChatStickerSet(ctx context.Context, request DeleteChatStickerSet) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("deleteChatStickerSet"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteChatStickerSet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeDeleteChatStickerSetRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/deleteChatStickerSet"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteChatStickerSetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteMessage invokes deleteMessage operation.
//
// POST /deleteMessage
func (c *Client) DeleteMessage(ctx context.Context, request DeleteMessage) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("deleteMessage"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteMessage",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeDeleteMessageRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/deleteMessage"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteMessageResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteMyCommands invokes deleteMyCommands operation.
//
// POST /deleteMyCommands
func (c *Client) DeleteMyCommands(ctx context.Context, request OptDeleteMyCommands) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("deleteMyCommands"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteMyCommands",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeDeleteMyCommandsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/deleteMyCommands"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteMyCommandsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteStickerFromSet invokes deleteStickerFromSet operation.
//
// POST /deleteStickerFromSet
func (c *Client) DeleteStickerFromSet(ctx context.Context, request DeleteStickerFromSet) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("deleteStickerFromSet"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteStickerFromSet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeDeleteStickerFromSetRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/deleteStickerFromSet"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteStickerFromSetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteWebhook invokes deleteWebhook operation.
//
// POST /deleteWebhook
func (c *Client) DeleteWebhook(ctx context.Context, request OptDeleteWebhook) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("deleteWebhook"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteWebhook",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeDeleteWebhookRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/deleteWebhook"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteWebhookResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// EditChatInviteLink invokes editChatInviteLink operation.
//
// POST /editChatInviteLink
func (c *Client) EditChatInviteLink(ctx context.Context, request EditChatInviteLink) (res ResultChatInviteLink, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("editChatInviteLink"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "EditChatInviteLink",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeEditChatInviteLinkRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/editChatInviteLink"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeEditChatInviteLinkResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// EditMessageCaption invokes editMessageCaption operation.
//
// POST /editMessageCaption
func (c *Client) EditMessageCaption(ctx context.Context, request EditMessageCaption) (res ResultMessageOrBoolean, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("editMessageCaption"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "EditMessageCaption",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeEditMessageCaptionRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/editMessageCaption"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeEditMessageCaptionResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// EditMessageLiveLocation invokes editMessageLiveLocation operation.
//
// POST /editMessageLiveLocation
func (c *Client) EditMessageLiveLocation(ctx context.Context, request EditMessageLiveLocation) (res ResultMessageOrBoolean, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("editMessageLiveLocation"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "EditMessageLiveLocation",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeEditMessageLiveLocationRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/editMessageLiveLocation"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeEditMessageLiveLocationResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// EditMessageMedia invokes editMessageMedia operation.
//
// POST /editMessageMedia
func (c *Client) EditMessageMedia(ctx context.Context, request EditMessageMedia) (res ResultMessageOrBoolean, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("editMessageMedia"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "EditMessageMedia",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeEditMessageMediaRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/editMessageMedia"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeEditMessageMediaResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// EditMessageReplyMarkup invokes editMessageReplyMarkup operation.
//
// POST /editMessageReplyMarkup
func (c *Client) EditMessageReplyMarkup(ctx context.Context, request EditMessageReplyMarkup) (res ResultMessageOrBoolean, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("editMessageReplyMarkup"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "EditMessageReplyMarkup",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeEditMessageReplyMarkupRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/editMessageReplyMarkup"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeEditMessageReplyMarkupResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// EditMessageText invokes editMessageText operation.
//
// POST /editMessageText
func (c *Client) EditMessageText(ctx context.Context, request EditMessageText) (res ResultMessageOrBoolean, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("editMessageText"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "EditMessageText",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeEditMessageTextRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/editMessageText"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeEditMessageTextResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ExportChatInviteLink invokes exportChatInviteLink operation.
//
// POST /exportChatInviteLink
func (c *Client) ExportChatInviteLink(ctx context.Context, request ExportChatInviteLink) (res ResultString, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("exportChatInviteLink"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "ExportChatInviteLink",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeExportChatInviteLinkRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/exportChatInviteLink"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeExportChatInviteLinkResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ForwardMessage invokes forwardMessage operation.
//
// POST /forwardMessage
func (c *Client) ForwardMessage(ctx context.Context, request ForwardMessage) (res ResultMessage, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("forwardMessage"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "ForwardMessage",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeForwardMessageRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/forwardMessage"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeForwardMessageResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetChat invokes getChat operation.
//
// POST /getChat
func (c *Client) GetChat(ctx context.Context, request GetChat) (res ResultChat, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getChat"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetChat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetChatRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getChat"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetChatResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetChatAdministrators invokes getChatAdministrators operation.
//
// POST /getChatAdministrators
func (c *Client) GetChatAdministrators(ctx context.Context, request GetChatAdministrators) (res ResultArrayOfChatMember, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getChatAdministrators"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetChatAdministrators",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetChatAdministratorsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getChatAdministrators"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetChatAdministratorsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetChatMember invokes getChatMember operation.
//
// POST /getChatMember
func (c *Client) GetChatMember(ctx context.Context, request GetChatMember) (res ResultChatMember, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getChatMember"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetChatMember",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetChatMemberRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getChatMember"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetChatMemberResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetChatMemberCount invokes getChatMemberCount operation.
//
// POST /getChatMemberCount
func (c *Client) GetChatMemberCount(ctx context.Context, request GetChatMemberCount) (res ResultInt, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getChatMemberCount"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetChatMemberCount",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetChatMemberCountRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getChatMemberCount"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetChatMemberCountResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetChatMenuButton invokes getChatMenuButton operation.
//
// POST /getChatMenuButton
func (c *Client) GetChatMenuButton(ctx context.Context, request OptGetChatMenuButton) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getChatMenuButton"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetChatMenuButton",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetChatMenuButtonRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getChatMenuButton"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetChatMenuButtonResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetFile invokes getFile operation.
//
// POST /getFile
func (c *Client) GetFile(ctx context.Context, request GetFile) (res ResultFile, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getFile"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetFile",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetFileRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getFile"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetFileResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetGameHighScores invokes getGameHighScores operation.
//
// POST /getGameHighScores
func (c *Client) GetGameHighScores(ctx context.Context, request GetGameHighScores) (res ResultArrayOfGameHighScore, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getGameHighScores"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetGameHighScores",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetGameHighScoresRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getGameHighScores"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetGameHighScoresResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetMe invokes getMe operation.
//
// POST /getMe
func (c *Client) GetMe(ctx context.Context) (res ResultUser, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getMe"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetMe",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/getMe"

	r := ht.NewRequest(ctx, "POST", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetMeResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetMyCommands invokes getMyCommands operation.
//
// POST /getMyCommands
func (c *Client) GetMyCommands(ctx context.Context, request OptGetMyCommands) (res ResultArrayOfBotCommand, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getMyCommands"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetMyCommands",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetMyCommandsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getMyCommands"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetMyCommandsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetMyDefaultAdministratorRights invokes getMyDefaultAdministratorRights operation.
//
// POST /getMyDefaultAdministratorRights
func (c *Client) GetMyDefaultAdministratorRights(ctx context.Context, request OptGetMyDefaultAdministratorRights) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getMyDefaultAdministratorRights"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetMyDefaultAdministratorRights",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetMyDefaultAdministratorRightsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getMyDefaultAdministratorRights"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetMyDefaultAdministratorRightsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetStickerSet invokes getStickerSet operation.
//
// POST /getStickerSet
func (c *Client) GetStickerSet(ctx context.Context, request GetStickerSet) (res ResultStickerSet, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getStickerSet"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetStickerSet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetStickerSetRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getStickerSet"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetStickerSetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetUpdates invokes getUpdates operation.
//
// POST /getUpdates
func (c *Client) GetUpdates(ctx context.Context, request OptGetUpdates) (res ResultArrayOfUpdate, err error) {
	if err := func() error {
		if request.Set {
			if err := func() error {
				if err := request.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getUpdates"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetUpdates",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetUpdatesRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getUpdates"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetUpdatesResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetUserProfilePhotos invokes getUserProfilePhotos operation.
//
// POST /getUserProfilePhotos
func (c *Client) GetUserProfilePhotos(ctx context.Context, request GetUserProfilePhotos) (res ResultUserProfilePhotos, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getUserProfilePhotos"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetUserProfilePhotos",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeGetUserProfilePhotosRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/getUserProfilePhotos"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetUserProfilePhotosResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetWebhookInfo invokes getWebhookInfo operation.
//
// POST /getWebhookInfo
func (c *Client) GetWebhookInfo(ctx context.Context) (res ResultWebhookInfo, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("getWebhookInfo"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "GetWebhookInfo",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/getWebhookInfo"

	r := ht.NewRequest(ctx, "POST", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetWebhookInfoResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// LeaveChat invokes leaveChat operation.
//
// POST /leaveChat
func (c *Client) LeaveChat(ctx context.Context, request LeaveChat) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("leaveChat"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "LeaveChat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeLeaveChatRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/leaveChat"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeLeaveChatResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// LogOut invokes logOut operation.
//
// POST /logOut
func (c *Client) LogOut(ctx context.Context) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("logOut"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "LogOut",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	u := uri.Clone(c.serverURL)
	u.Path += "/logOut"

	r := ht.NewRequest(ctx, "POST", u, nil)
	defer ht.PutRequest(r)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeLogOutResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PinChatMessage invokes pinChatMessage operation.
//
// POST /pinChatMessage
func (c *Client) PinChatMessage(ctx context.Context, request PinChatMessage) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("pinChatMessage"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "PinChatMessage",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodePinChatMessageRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/pinChatMessage"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePinChatMessageResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PromoteChatMember invokes promoteChatMember operation.
//
// POST /promoteChatMember
func (c *Client) PromoteChatMember(ctx context.Context, request PromoteChatMember) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("promoteChatMember"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "PromoteChatMember",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodePromoteChatMemberRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/promoteChatMember"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodePromoteChatMemberResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RestrictChatMember invokes restrictChatMember operation.
//
// POST /restrictChatMember
func (c *Client) RestrictChatMember(ctx context.Context, request RestrictChatMember) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("restrictChatMember"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "RestrictChatMember",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeRestrictChatMemberRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/restrictChatMember"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRestrictChatMemberResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// RevokeChatInviteLink invokes revokeChatInviteLink operation.
//
// POST /revokeChatInviteLink
func (c *Client) RevokeChatInviteLink(ctx context.Context, request RevokeChatInviteLink) (res ResultChatInviteLink, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("revokeChatInviteLink"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "RevokeChatInviteLink",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeRevokeChatInviteLinkRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/revokeChatInviteLink"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeRevokeChatInviteLinkResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendAnimation invokes sendAnimation operation.
//
// POST /sendAnimation
func (c *Client) SendAnimation(ctx context.Context, request SendAnimation) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendAnimation"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendAnimation",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendAnimationRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendAnimation"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendAnimationResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendAudio invokes sendAudio operation.
//
// POST /sendAudio
func (c *Client) SendAudio(ctx context.Context, request SendAudio) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendAudio"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendAudio",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendAudioRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendAudio"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendAudioResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendChatAction invokes sendChatAction operation.
//
// POST /sendChatAction
func (c *Client) SendChatAction(ctx context.Context, request SendChatAction) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendChatAction"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendChatAction",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendChatActionRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendChatAction"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendChatActionResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendContact invokes sendContact operation.
//
// POST /sendContact
func (c *Client) SendContact(ctx context.Context, request SendContact) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendContact"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendContact",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendContactRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendContact"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendContactResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendDice invokes sendDice operation.
//
// POST /sendDice
func (c *Client) SendDice(ctx context.Context, request SendDice) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendDice"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendDice",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendDiceRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendDice"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendDiceResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendDocument invokes sendDocument operation.
//
// POST /sendDocument
func (c *Client) SendDocument(ctx context.Context, request SendDocument) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendDocument"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendDocument",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendDocumentRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendDocument"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendDocumentResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendGame invokes sendGame operation.
//
// POST /sendGame
func (c *Client) SendGame(ctx context.Context, request SendGame) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendGame"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendGame",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendGameRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendGame"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendGameResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendInvoice invokes sendInvoice operation.
//
// POST /sendInvoice
func (c *Client) SendInvoice(ctx context.Context, request SendInvoice) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendInvoice"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendInvoice",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendInvoiceRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendInvoice"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendInvoiceResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendLocation invokes sendLocation operation.
//
// POST /sendLocation
func (c *Client) SendLocation(ctx context.Context, request SendLocation) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendLocation"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendLocation",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendLocationRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendLocation"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendLocationResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendMediaGroup invokes sendMediaGroup operation.
//
// POST /sendMediaGroup
func (c *Client) SendMediaGroup(ctx context.Context, request SendMediaGroup) (res ResultArrayOfMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendMediaGroup"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendMediaGroup",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendMediaGroupRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendMediaGroup"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendMediaGroupResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendMessage invokes sendMessage operation.
//
// POST /sendMessage
func (c *Client) SendMessage(ctx context.Context, request SendMessage) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendMessage"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendMessage",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendMessageRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendMessage"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendMessageResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendPhoto invokes sendPhoto operation.
//
// POST /sendPhoto
func (c *Client) SendPhoto(ctx context.Context, request SendPhoto) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendPhoto"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendPhoto",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendPhotoRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendPhoto"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendPhotoResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendPoll invokes sendPoll operation.
//
// POST /sendPoll
func (c *Client) SendPoll(ctx context.Context, request SendPoll) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendPoll"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendPoll",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendPollRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendPoll"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendPollResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendSticker invokes sendSticker operation.
//
// POST /sendSticker
func (c *Client) SendSticker(ctx context.Context, request SendSticker) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendSticker"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendSticker",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendStickerRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendSticker"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendStickerResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendVenue invokes sendVenue operation.
//
// POST /sendVenue
func (c *Client) SendVenue(ctx context.Context, request SendVenue) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendVenue"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendVenue",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendVenueRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendVenue"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendVenueResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendVideo invokes sendVideo operation.
//
// POST /sendVideo
func (c *Client) SendVideo(ctx context.Context, request SendVideo) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendVideo"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendVideo",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendVideoRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendVideo"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendVideoResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendVideoNote invokes sendVideoNote operation.
//
// POST /sendVideoNote
func (c *Client) SendVideoNote(ctx context.Context, request SendVideoNote) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendVideoNote"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendVideoNote",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendVideoNoteRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendVideoNote"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendVideoNoteResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SendVoice invokes sendVoice operation.
//
// POST /sendVoice
func (c *Client) SendVoice(ctx context.Context, request SendVoice) (res ResultMessage, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("sendVoice"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SendVoice",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSendVoiceRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/sendVoice"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSendVoiceResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetChatAdministratorCustomTitle invokes setChatAdministratorCustomTitle operation.
//
// POST /setChatAdministratorCustomTitle
func (c *Client) SetChatAdministratorCustomTitle(ctx context.Context, request SetChatAdministratorCustomTitle) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setChatAdministratorCustomTitle"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetChatAdministratorCustomTitle",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetChatAdministratorCustomTitleRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setChatAdministratorCustomTitle"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetChatAdministratorCustomTitleResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetChatDescription invokes setChatDescription operation.
//
// POST /setChatDescription
func (c *Client) SetChatDescription(ctx context.Context, request SetChatDescription) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setChatDescription"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetChatDescription",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetChatDescriptionRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setChatDescription"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetChatDescriptionResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetChatMenuButton invokes setChatMenuButton operation.
//
// POST /setChatMenuButton
func (c *Client) SetChatMenuButton(ctx context.Context, request OptSetChatMenuButton) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setChatMenuButton"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetChatMenuButton",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetChatMenuButtonRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setChatMenuButton"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetChatMenuButtonResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetChatPermissions invokes setChatPermissions operation.
//
// POST /setChatPermissions
func (c *Client) SetChatPermissions(ctx context.Context, request SetChatPermissions) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setChatPermissions"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetChatPermissions",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetChatPermissionsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setChatPermissions"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetChatPermissionsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetChatPhoto invokes setChatPhoto operation.
//
// POST /setChatPhoto
func (c *Client) SetChatPhoto(ctx context.Context, request SetChatPhoto) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setChatPhoto"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetChatPhoto",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetChatPhotoRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setChatPhoto"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetChatPhotoResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetChatStickerSet invokes setChatStickerSet operation.
//
// POST /setChatStickerSet
func (c *Client) SetChatStickerSet(ctx context.Context, request SetChatStickerSet) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setChatStickerSet"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetChatStickerSet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetChatStickerSetRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setChatStickerSet"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetChatStickerSetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetChatTitle invokes setChatTitle operation.
//
// POST /setChatTitle
func (c *Client) SetChatTitle(ctx context.Context, request SetChatTitle) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setChatTitle"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetChatTitle",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetChatTitleRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setChatTitle"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetChatTitleResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetGameScore invokes setGameScore operation.
//
// POST /setGameScore
func (c *Client) SetGameScore(ctx context.Context, request SetGameScore) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setGameScore"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetGameScore",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetGameScoreRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setGameScore"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetGameScoreResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetMyCommands invokes setMyCommands operation.
//
// POST /setMyCommands
func (c *Client) SetMyCommands(ctx context.Context, request SetMyCommands) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setMyCommands"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetMyCommands",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetMyCommandsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setMyCommands"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetMyCommandsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetMyDefaultAdministratorRights invokes setMyDefaultAdministratorRights operation.
//
// POST /setMyDefaultAdministratorRights
func (c *Client) SetMyDefaultAdministratorRights(ctx context.Context, request OptSetMyDefaultAdministratorRights) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setMyDefaultAdministratorRights"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetMyDefaultAdministratorRights",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetMyDefaultAdministratorRightsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setMyDefaultAdministratorRights"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetMyDefaultAdministratorRightsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetPassportDataErrors invokes setPassportDataErrors operation.
//
// POST /setPassportDataErrors
func (c *Client) SetPassportDataErrors(ctx context.Context, request SetPassportDataErrors) (res Result, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setPassportDataErrors"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetPassportDataErrors",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetPassportDataErrorsRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setPassportDataErrors"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetPassportDataErrorsResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetStickerPositionInSet invokes setStickerPositionInSet operation.
//
// POST /setStickerPositionInSet
func (c *Client) SetStickerPositionInSet(ctx context.Context, request SetStickerPositionInSet) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setStickerPositionInSet"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetStickerPositionInSet",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetStickerPositionInSetRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setStickerPositionInSet"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetStickerPositionInSetResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetStickerSetThumb invokes setStickerSetThumb operation.
//
// POST /setStickerSetThumb
func (c *Client) SetStickerSetThumb(ctx context.Context, request SetStickerSetThumb) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setStickerSetThumb"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetStickerSetThumb",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetStickerSetThumbRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setStickerSetThumb"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetStickerSetThumbResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetWebhook invokes setWebhook operation.
//
// POST /setWebhook
func (c *Client) SetWebhook(ctx context.Context, request SetWebhook) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("setWebhook"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "SetWebhook",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeSetWebhookRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/setWebhook"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetWebhookResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// StopMessageLiveLocation invokes stopMessageLiveLocation operation.
//
// POST /stopMessageLiveLocation
func (c *Client) StopMessageLiveLocation(ctx context.Context, request StopMessageLiveLocation) (res ResultMessageOrBoolean, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("stopMessageLiveLocation"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "StopMessageLiveLocation",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeStopMessageLiveLocationRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/stopMessageLiveLocation"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeStopMessageLiveLocationResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// StopPoll invokes stopPoll operation.
//
// POST /stopPoll
func (c *Client) StopPoll(ctx context.Context, request StopPoll) (res ResultPoll, err error) {
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("stopPoll"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "StopPoll",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeStopPollRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/stopPoll"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeStopPollResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UnbanChatMember invokes unbanChatMember operation.
//
// POST /unbanChatMember
func (c *Client) UnbanChatMember(ctx context.Context, request UnbanChatMember) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("unbanChatMember"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "UnbanChatMember",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeUnbanChatMemberRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/unbanChatMember"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUnbanChatMemberResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UnbanChatSenderChat invokes unbanChatSenderChat operation.
//
// POST /unbanChatSenderChat
func (c *Client) UnbanChatSenderChat(ctx context.Context, request UnbanChatSenderChat) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("unbanChatSenderChat"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "UnbanChatSenderChat",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeUnbanChatSenderChatRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/unbanChatSenderChat"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUnbanChatSenderChatResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UnpinAllChatMessages invokes unpinAllChatMessages operation.
//
// POST /unpinAllChatMessages
func (c *Client) UnpinAllChatMessages(ctx context.Context, request UnpinAllChatMessages) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("unpinAllChatMessages"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "UnpinAllChatMessages",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeUnpinAllChatMessagesRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/unpinAllChatMessages"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUnpinAllChatMessagesResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UnpinChatMessage invokes unpinChatMessage operation.
//
// POST /unpinChatMessage
func (c *Client) UnpinChatMessage(ctx context.Context, request UnpinChatMessage) (res Result, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("unpinChatMessage"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "UnpinChatMessage",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeUnpinChatMessageRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/unpinChatMessage"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUnpinChatMessageResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UploadStickerFile invokes uploadStickerFile operation.
//
// POST /uploadStickerFile
func (c *Client) UploadStickerFile(ctx context.Context, request UploadStickerFile) (res ResultFile, err error) {
	startTime := time.Now()
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("uploadStickerFile"),
	}
	ctx, span := c.cfg.Tracer.Start(ctx, "UploadStickerFile",
		trace.WithAttributes(otelAttrs...),
		trace.WithSpanKind(trace.SpanKindClient),
	)
	defer func() {
		if err != nil {
			span.RecordError(err)
			c.errors.Add(ctx, 1, otelAttrs...)
		} else {
			elapsedDuration := time.Since(startTime)
			c.duration.Record(ctx, elapsedDuration.Microseconds(), otelAttrs...)
		}
		span.End()
	}()
	c.requests.Add(ctx, 1, otelAttrs...)
	var (
		contentType string
		reqBody     func() (io.ReadCloser, error)
	)
	contentType = "application/json"
	fn, err := encodeUploadStickerFileRequestJSON(request, span)
	if err != nil {
		return res, err
	}
	reqBody = fn

	u := uri.Clone(c.serverURL)
	u.Path += "/uploadStickerFile"

	body, err := reqBody()
	if err != nil {
		return res, errors.Wrap(err, "request body")
	}
	defer body.Close()

	r := ht.NewRequest(ctx, "POST", u, body)
	defer ht.PutRequest(r)
	r.GetBody = reqBody

	r.Header.Set("Content-Type", contentType)

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUploadStickerFileResponse(resp, span)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
