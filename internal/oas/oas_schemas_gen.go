// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/addStickerToSet
type AddStickerToSet struct {
	UserID       int             `json:"user_id"`
	Name         string          `json:"name"`
	PNGSticker   OptString       `json:"png_sticker"`
	TgsSticker   OptString       `json:"tgs_sticker"`
	Emojis       string          `json:"emojis"`
	MaskPosition OptMaskPosition `json:"mask_position"`
}

// Ref: #/components/schemas/Animation
type Animation struct {
	FileID       string       `json:"file_id"`
	FileUniqueID string       `json:"file_unique_id"`
	Width        int          `json:"width"`
	Height       int          `json:"height"`
	Duration     int          `json:"duration"`
	Thumb        OptPhotoSize `json:"thumb"`
	FileName     OptString    `json:"file_name"`
	MimeType     OptString    `json:"mime_type"`
	FileSize     OptInt       `json:"file_size"`
}

// Ref: #/components/schemas/answerCallbackQuery
type AnswerCallbackQuery struct {
	CallbackQueryID string    `json:"callback_query_id"`
	Text            OptString `json:"text"`
	ShowAlert       OptBool   `json:"show_alert"`
	URL             OptURL    `json:"url"`
	CacheTime       OptInt    `json:"cache_time"`
}

// Ref: #/components/schemas/answerInlineQuery
type AnswerInlineQuery struct {
	InlineQueryID     string              `json:"inline_query_id"`
	Results           []InlineQueryResult `json:"results"`
	CacheTime         OptInt              `json:"cache_time"`
	IsPersonal        OptBool             `json:"is_personal"`
	NextOffset        OptString           `json:"next_offset"`
	SwitchPmText      OptString           `json:"switch_pm_text"`
	SwitchPmParameter OptString           `json:"switch_pm_parameter"`
}

// Ref: #/components/schemas/answerPreCheckoutQuery
type AnswerPreCheckoutQuery struct {
	PreCheckoutQueryID string    `json:"pre_checkout_query_id"`
	Ok                 bool      `json:"ok"`
	ErrorMessage       OptString `json:"error_message"`
}

// Ref: #/components/schemas/answerShippingQuery
type AnswerShippingQuery struct {
	ShippingQueryID string           `json:"shipping_query_id"`
	Ok              bool             `json:"ok"`
	ShippingOptions []ShippingOption `json:"shipping_options"`
	ErrorMessage    OptString        `json:"error_message"`
}

// Ref: #/components/schemas/approveChatJoinRequest
type ApproveChatJoinRequest struct {
	ChatID ID  `json:"chat_id"`
	UserID int `json:"user_id"`
}

// Ref: #/components/schemas/Audio
type Audio struct {
	FileID       string       `json:"file_id"`
	FileUniqueID string       `json:"file_unique_id"`
	Duration     int          `json:"duration"`
	Performer    OptString    `json:"performer"`
	Title        OptString    `json:"title"`
	FileName     OptString    `json:"file_name"`
	MimeType     OptString    `json:"mime_type"`
	FileSize     OptInt       `json:"file_size"`
	Thumb        OptPhotoSize `json:"thumb"`
}

// Ref: #/components/schemas/banChatMember
type BanChatMember struct {
	ChatID         ID      `json:"chat_id"`
	UserID         int     `json:"user_id"`
	UntilDate      OptInt  `json:"until_date"`
	RevokeMessages OptBool `json:"revoke_messages"`
}

// Ref: #/components/schemas/banChatSenderChat
type BanChatSenderChat struct {
	ChatID       ID     `json:"chat_id"`
	SenderChatID int    `json:"sender_chat_id"`
	UntilDate    OptInt `json:"until_date"`
}

// Ref: #/components/schemas/BotCommand
type BotCommand struct {
	Command     string `json:"command"`
	Description string `json:"description"`
}

// Ref: #/components/schemas/BotCommandScope
// BotCommandScope represents sum type.
type BotCommandScope struct {
	Type                                 BotCommandScopeType // switch on this field
	BotCommandScopeDefault               BotCommandScopeDefault
	BotCommandScopeAllPrivateChats       BotCommandScopeAllPrivateChats
	BotCommandScopeAllGroupChats         BotCommandScopeAllGroupChats
	BotCommandScopeAllChatAdministrators BotCommandScopeAllChatAdministrators
	BotCommandScopeChat                  BotCommandScopeChat
	BotCommandScopeChatAdministrators    BotCommandScopeChatAdministrators
	BotCommandScopeChatMember            BotCommandScopeChatMember
}

// BotCommandScopeType is oneOf type of BotCommandScope.
type BotCommandScopeType string

// Possible values for BotCommandScopeType.
const (
	BotCommandScopeDefaultBotCommandScope               BotCommandScopeType = "BotCommandScopeDefault"
	BotCommandScopeAllPrivateChatsBotCommandScope       BotCommandScopeType = "BotCommandScopeAllPrivateChats"
	BotCommandScopeAllGroupChatsBotCommandScope         BotCommandScopeType = "BotCommandScopeAllGroupChats"
	BotCommandScopeAllChatAdministratorsBotCommandScope BotCommandScopeType = "BotCommandScopeAllChatAdministrators"
	BotCommandScopeChatBotCommandScope                  BotCommandScopeType = "BotCommandScopeChat"
	BotCommandScopeChatAdministratorsBotCommandScope    BotCommandScopeType = "BotCommandScopeChatAdministrators"
	BotCommandScopeChatMemberBotCommandScope            BotCommandScopeType = "BotCommandScopeChatMember"
)

// IsBotCommandScopeDefault reports whether BotCommandScope is BotCommandScopeDefault.
func (s BotCommandScope) IsBotCommandScopeDefault() bool {
	return s.Type == BotCommandScopeDefaultBotCommandScope
}

// IsBotCommandScopeAllPrivateChats reports whether BotCommandScope is BotCommandScopeAllPrivateChats.
func (s BotCommandScope) IsBotCommandScopeAllPrivateChats() bool {
	return s.Type == BotCommandScopeAllPrivateChatsBotCommandScope
}

// IsBotCommandScopeAllGroupChats reports whether BotCommandScope is BotCommandScopeAllGroupChats.
func (s BotCommandScope) IsBotCommandScopeAllGroupChats() bool {
	return s.Type == BotCommandScopeAllGroupChatsBotCommandScope
}

// IsBotCommandScopeAllChatAdministrators reports whether BotCommandScope is BotCommandScopeAllChatAdministrators.
func (s BotCommandScope) IsBotCommandScopeAllChatAdministrators() bool {
	return s.Type == BotCommandScopeAllChatAdministratorsBotCommandScope
}

// IsBotCommandScopeChat reports whether BotCommandScope is BotCommandScopeChat.
func (s BotCommandScope) IsBotCommandScopeChat() bool {
	return s.Type == BotCommandScopeChatBotCommandScope
}

// IsBotCommandScopeChatAdministrators reports whether BotCommandScope is BotCommandScopeChatAdministrators.
func (s BotCommandScope) IsBotCommandScopeChatAdministrators() bool {
	return s.Type == BotCommandScopeChatAdministratorsBotCommandScope
}

// IsBotCommandScopeChatMember reports whether BotCommandScope is BotCommandScopeChatMember.
func (s BotCommandScope) IsBotCommandScopeChatMember() bool {
	return s.Type == BotCommandScopeChatMemberBotCommandScope
}

// SetBotCommandScopeDefault sets BotCommandScope to BotCommandScopeDefault.
func (s *BotCommandScope) SetBotCommandScopeDefault(v BotCommandScopeDefault) {
	s.Type = BotCommandScopeDefaultBotCommandScope
	s.BotCommandScopeDefault = v
}

// GetBotCommandScopeDefault returns BotCommandScopeDefault and true boolean if BotCommandScope is BotCommandScopeDefault.
func (s BotCommandScope) GetBotCommandScopeDefault() (v BotCommandScopeDefault, ok bool) {
	if !s.IsBotCommandScopeDefault() {
		return v, false
	}
	return s.BotCommandScopeDefault, true
}

// NewBotCommandScopeDefaultBotCommandScope returns new BotCommandScope from BotCommandScopeDefault.
func NewBotCommandScopeDefaultBotCommandScope(v BotCommandScopeDefault) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeDefault(v)
	return s
}

// SetBotCommandScopeAllPrivateChats sets BotCommandScope to BotCommandScopeAllPrivateChats.
func (s *BotCommandScope) SetBotCommandScopeAllPrivateChats(v BotCommandScopeAllPrivateChats) {
	s.Type = BotCommandScopeAllPrivateChatsBotCommandScope
	s.BotCommandScopeAllPrivateChats = v
}

// GetBotCommandScopeAllPrivateChats returns BotCommandScopeAllPrivateChats and true boolean if BotCommandScope is BotCommandScopeAllPrivateChats.
func (s BotCommandScope) GetBotCommandScopeAllPrivateChats() (v BotCommandScopeAllPrivateChats, ok bool) {
	if !s.IsBotCommandScopeAllPrivateChats() {
		return v, false
	}
	return s.BotCommandScopeAllPrivateChats, true
}

// NewBotCommandScopeAllPrivateChatsBotCommandScope returns new BotCommandScope from BotCommandScopeAllPrivateChats.
func NewBotCommandScopeAllPrivateChatsBotCommandScope(v BotCommandScopeAllPrivateChats) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeAllPrivateChats(v)
	return s
}

// SetBotCommandScopeAllGroupChats sets BotCommandScope to BotCommandScopeAllGroupChats.
func (s *BotCommandScope) SetBotCommandScopeAllGroupChats(v BotCommandScopeAllGroupChats) {
	s.Type = BotCommandScopeAllGroupChatsBotCommandScope
	s.BotCommandScopeAllGroupChats = v
}

// GetBotCommandScopeAllGroupChats returns BotCommandScopeAllGroupChats and true boolean if BotCommandScope is BotCommandScopeAllGroupChats.
func (s BotCommandScope) GetBotCommandScopeAllGroupChats() (v BotCommandScopeAllGroupChats, ok bool) {
	if !s.IsBotCommandScopeAllGroupChats() {
		return v, false
	}
	return s.BotCommandScopeAllGroupChats, true
}

// NewBotCommandScopeAllGroupChatsBotCommandScope returns new BotCommandScope from BotCommandScopeAllGroupChats.
func NewBotCommandScopeAllGroupChatsBotCommandScope(v BotCommandScopeAllGroupChats) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeAllGroupChats(v)
	return s
}

// SetBotCommandScopeAllChatAdministrators sets BotCommandScope to BotCommandScopeAllChatAdministrators.
func (s *BotCommandScope) SetBotCommandScopeAllChatAdministrators(v BotCommandScopeAllChatAdministrators) {
	s.Type = BotCommandScopeAllChatAdministratorsBotCommandScope
	s.BotCommandScopeAllChatAdministrators = v
}

// GetBotCommandScopeAllChatAdministrators returns BotCommandScopeAllChatAdministrators and true boolean if BotCommandScope is BotCommandScopeAllChatAdministrators.
func (s BotCommandScope) GetBotCommandScopeAllChatAdministrators() (v BotCommandScopeAllChatAdministrators, ok bool) {
	if !s.IsBotCommandScopeAllChatAdministrators() {
		return v, false
	}
	return s.BotCommandScopeAllChatAdministrators, true
}

// NewBotCommandScopeAllChatAdministratorsBotCommandScope returns new BotCommandScope from BotCommandScopeAllChatAdministrators.
func NewBotCommandScopeAllChatAdministratorsBotCommandScope(v BotCommandScopeAllChatAdministrators) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeAllChatAdministrators(v)
	return s
}

// SetBotCommandScopeChat sets BotCommandScope to BotCommandScopeChat.
func (s *BotCommandScope) SetBotCommandScopeChat(v BotCommandScopeChat) {
	s.Type = BotCommandScopeChatBotCommandScope
	s.BotCommandScopeChat = v
}

// GetBotCommandScopeChat returns BotCommandScopeChat and true boolean if BotCommandScope is BotCommandScopeChat.
func (s BotCommandScope) GetBotCommandScopeChat() (v BotCommandScopeChat, ok bool) {
	if !s.IsBotCommandScopeChat() {
		return v, false
	}
	return s.BotCommandScopeChat, true
}

// NewBotCommandScopeChatBotCommandScope returns new BotCommandScope from BotCommandScopeChat.
func NewBotCommandScopeChatBotCommandScope(v BotCommandScopeChat) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeChat(v)
	return s
}

// SetBotCommandScopeChatAdministrators sets BotCommandScope to BotCommandScopeChatAdministrators.
func (s *BotCommandScope) SetBotCommandScopeChatAdministrators(v BotCommandScopeChatAdministrators) {
	s.Type = BotCommandScopeChatAdministratorsBotCommandScope
	s.BotCommandScopeChatAdministrators = v
}

// GetBotCommandScopeChatAdministrators returns BotCommandScopeChatAdministrators and true boolean if BotCommandScope is BotCommandScopeChatAdministrators.
func (s BotCommandScope) GetBotCommandScopeChatAdministrators() (v BotCommandScopeChatAdministrators, ok bool) {
	if !s.IsBotCommandScopeChatAdministrators() {
		return v, false
	}
	return s.BotCommandScopeChatAdministrators, true
}

// NewBotCommandScopeChatAdministratorsBotCommandScope returns new BotCommandScope from BotCommandScopeChatAdministrators.
func NewBotCommandScopeChatAdministratorsBotCommandScope(v BotCommandScopeChatAdministrators) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeChatAdministrators(v)
	return s
}

// SetBotCommandScopeChatMember sets BotCommandScope to BotCommandScopeChatMember.
func (s *BotCommandScope) SetBotCommandScopeChatMember(v BotCommandScopeChatMember) {
	s.Type = BotCommandScopeChatMemberBotCommandScope
	s.BotCommandScopeChatMember = v
}

// GetBotCommandScopeChatMember returns BotCommandScopeChatMember and true boolean if BotCommandScope is BotCommandScopeChatMember.
func (s BotCommandScope) GetBotCommandScopeChatMember() (v BotCommandScopeChatMember, ok bool) {
	if !s.IsBotCommandScopeChatMember() {
		return v, false
	}
	return s.BotCommandScopeChatMember, true
}

// NewBotCommandScopeChatMemberBotCommandScope returns new BotCommandScope from BotCommandScopeChatMember.
func NewBotCommandScopeChatMemberBotCommandScope(v BotCommandScopeChatMember) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeChatMember(v)
	return s
}

// Ref: #/components/schemas/BotCommandScopeAllChatAdministrators
type BotCommandScopeAllChatAdministrators struct {
	Type string `json:"type"`
}

// Ref: #/components/schemas/BotCommandScopeAllGroupChats
type BotCommandScopeAllGroupChats struct {
	Type string `json:"type"`
}

// Ref: #/components/schemas/BotCommandScopeAllPrivateChats
type BotCommandScopeAllPrivateChats struct {
	Type string `json:"type"`
}

// Ref: #/components/schemas/BotCommandScopeChat
type BotCommandScopeChat struct {
	Type   string `json:"type"`
	ChatID ID     `json:"chat_id"`
}

// Ref: #/components/schemas/BotCommandScopeChatAdministrators
type BotCommandScopeChatAdministrators struct {
	Type   string `json:"type"`
	ChatID ID     `json:"chat_id"`
}

// Ref: #/components/schemas/BotCommandScopeChatMember
type BotCommandScopeChatMember struct {
	Type   string `json:"type"`
	ChatID ID     `json:"chat_id"`
	UserID int    `json:"user_id"`
}

// Ref: #/components/schemas/BotCommandScopeDefault
type BotCommandScopeDefault struct {
	Type string `json:"type"`
}

// Ref: #/components/schemas/CallbackGame
type CallbackGame struct{}

// Ref: #/components/schemas/CallbackQuery
type CallbackQuery struct {
	ID              string     `json:"id"`
	From            User       `json:"from"`
	Message         OptMessage `json:"message"`
	InlineMessageID OptString  `json:"inline_message_id"`
	ChatInstance    string     `json:"chat_instance"`
	Data            OptString  `json:"data"`
	GameShortName   OptString  `json:"game_short_name"`
}

// Ref: #/components/schemas/Chat
type Chat struct {
	ID                    int                `json:"id"`
	Type                  string             `json:"type"`
	Title                 OptString          `json:"title"`
	Username              OptString          `json:"username"`
	FirstName             OptString          `json:"first_name"`
	LastName              OptString          `json:"last_name"`
	Photo                 OptChatPhoto       `json:"photo"`
	Bio                   OptString          `json:"bio"`
	HasPrivateForwards    OptBool            `json:"has_private_forwards"`
	Description           OptString          `json:"description"`
	InviteLink            OptString          `json:"invite_link"`
	PinnedMessage         *Message           `json:"pinned_message"`
	Permissions           OptChatPermissions `json:"permissions"`
	SlowModeDelay         OptInt             `json:"slow_mode_delay"`
	MessageAutoDeleteTime OptInt             `json:"message_auto_delete_time"`
	HasProtectedContent   OptBool            `json:"has_protected_content"`
	StickerSetName        OptString          `json:"sticker_set_name"`
	CanSetStickerSet      OptBool            `json:"can_set_sticker_set"`
	LinkedChatID          OptInt             `json:"linked_chat_id"`
	Location              OptChatLocation    `json:"location"`
}

// Ref: #/components/schemas/ChatInviteLink
type ChatInviteLink struct {
	InviteLink              string    `json:"invite_link"`
	Creator                 User      `json:"creator"`
	CreatesJoinRequest      bool      `json:"creates_join_request"`
	IsPrimary               bool      `json:"is_primary"`
	IsRevoked               bool      `json:"is_revoked"`
	Name                    OptString `json:"name"`
	ExpireDate              OptInt    `json:"expire_date"`
	MemberLimit             OptInt    `json:"member_limit"`
	PendingJoinRequestCount OptInt    `json:"pending_join_request_count"`
}

// Ref: #/components/schemas/ChatJoinRequest
type ChatJoinRequest struct {
	Chat       Chat              `json:"chat"`
	From       User              `json:"from"`
	Date       int               `json:"date"`
	Bio        OptString         `json:"bio"`
	InviteLink OptChatInviteLink `json:"invite_link"`
}

// Ref: #/components/schemas/ChatLocation
type ChatLocation struct {
	Location Location `json:"location"`
	Address  string   `json:"address"`
}

// Ref: #/components/schemas/ChatMember
// ChatMember represents sum type.
type ChatMember struct {
	Type                    ChatMemberType // switch on this field
	ChatMemberOwner         ChatMemberOwner
	ChatMemberAdministrator ChatMemberAdministrator
	ChatMemberMember        ChatMemberMember
	ChatMemberRestricted    ChatMemberRestricted
	ChatMemberLeft          ChatMemberLeft
	ChatMemberBanned        ChatMemberBanned
}

// ChatMemberType is oneOf type of ChatMember.
type ChatMemberType string

// Possible values for ChatMemberType.
const (
	ChatMemberOwnerChatMember         ChatMemberType = "ChatMemberOwner"
	ChatMemberAdministratorChatMember ChatMemberType = "ChatMemberAdministrator"
	ChatMemberMemberChatMember        ChatMemberType = "ChatMemberMember"
	ChatMemberRestrictedChatMember    ChatMemberType = "ChatMemberRestricted"
	ChatMemberLeftChatMember          ChatMemberType = "ChatMemberLeft"
	ChatMemberBannedChatMember        ChatMemberType = "ChatMemberBanned"
)

// IsChatMemberOwner reports whether ChatMember is ChatMemberOwner.
func (s ChatMember) IsChatMemberOwner() bool { return s.Type == ChatMemberOwnerChatMember }

// IsChatMemberAdministrator reports whether ChatMember is ChatMemberAdministrator.
func (s ChatMember) IsChatMemberAdministrator() bool {
	return s.Type == ChatMemberAdministratorChatMember
}

// IsChatMemberMember reports whether ChatMember is ChatMemberMember.
func (s ChatMember) IsChatMemberMember() bool { return s.Type == ChatMemberMemberChatMember }

// IsChatMemberRestricted reports whether ChatMember is ChatMemberRestricted.
func (s ChatMember) IsChatMemberRestricted() bool { return s.Type == ChatMemberRestrictedChatMember }

// IsChatMemberLeft reports whether ChatMember is ChatMemberLeft.
func (s ChatMember) IsChatMemberLeft() bool { return s.Type == ChatMemberLeftChatMember }

// IsChatMemberBanned reports whether ChatMember is ChatMemberBanned.
func (s ChatMember) IsChatMemberBanned() bool { return s.Type == ChatMemberBannedChatMember }

// SetChatMemberOwner sets ChatMember to ChatMemberOwner.
func (s *ChatMember) SetChatMemberOwner(v ChatMemberOwner) {
	s.Type = ChatMemberOwnerChatMember
	s.ChatMemberOwner = v
}

// GetChatMemberOwner returns ChatMemberOwner and true boolean if ChatMember is ChatMemberOwner.
func (s ChatMember) GetChatMemberOwner() (v ChatMemberOwner, ok bool) {
	if !s.IsChatMemberOwner() {
		return v, false
	}
	return s.ChatMemberOwner, true
}

// NewChatMemberOwnerChatMember returns new ChatMember from ChatMemberOwner.
func NewChatMemberOwnerChatMember(v ChatMemberOwner) ChatMember {
	var s ChatMember
	s.SetChatMemberOwner(v)
	return s
}

// SetChatMemberAdministrator sets ChatMember to ChatMemberAdministrator.
func (s *ChatMember) SetChatMemberAdministrator(v ChatMemberAdministrator) {
	s.Type = ChatMemberAdministratorChatMember
	s.ChatMemberAdministrator = v
}

// GetChatMemberAdministrator returns ChatMemberAdministrator and true boolean if ChatMember is ChatMemberAdministrator.
func (s ChatMember) GetChatMemberAdministrator() (v ChatMemberAdministrator, ok bool) {
	if !s.IsChatMemberAdministrator() {
		return v, false
	}
	return s.ChatMemberAdministrator, true
}

// NewChatMemberAdministratorChatMember returns new ChatMember from ChatMemberAdministrator.
func NewChatMemberAdministratorChatMember(v ChatMemberAdministrator) ChatMember {
	var s ChatMember
	s.SetChatMemberAdministrator(v)
	return s
}

// SetChatMemberMember sets ChatMember to ChatMemberMember.
func (s *ChatMember) SetChatMemberMember(v ChatMemberMember) {
	s.Type = ChatMemberMemberChatMember
	s.ChatMemberMember = v
}

// GetChatMemberMember returns ChatMemberMember and true boolean if ChatMember is ChatMemberMember.
func (s ChatMember) GetChatMemberMember() (v ChatMemberMember, ok bool) {
	if !s.IsChatMemberMember() {
		return v, false
	}
	return s.ChatMemberMember, true
}

// NewChatMemberMemberChatMember returns new ChatMember from ChatMemberMember.
func NewChatMemberMemberChatMember(v ChatMemberMember) ChatMember {
	var s ChatMember
	s.SetChatMemberMember(v)
	return s
}

// SetChatMemberRestricted sets ChatMember to ChatMemberRestricted.
func (s *ChatMember) SetChatMemberRestricted(v ChatMemberRestricted) {
	s.Type = ChatMemberRestrictedChatMember
	s.ChatMemberRestricted = v
}

// GetChatMemberRestricted returns ChatMemberRestricted and true boolean if ChatMember is ChatMemberRestricted.
func (s ChatMember) GetChatMemberRestricted() (v ChatMemberRestricted, ok bool) {
	if !s.IsChatMemberRestricted() {
		return v, false
	}
	return s.ChatMemberRestricted, true
}

// NewChatMemberRestrictedChatMember returns new ChatMember from ChatMemberRestricted.
func NewChatMemberRestrictedChatMember(v ChatMemberRestricted) ChatMember {
	var s ChatMember
	s.SetChatMemberRestricted(v)
	return s
}

// SetChatMemberLeft sets ChatMember to ChatMemberLeft.
func (s *ChatMember) SetChatMemberLeft(v ChatMemberLeft) {
	s.Type = ChatMemberLeftChatMember
	s.ChatMemberLeft = v
}

// GetChatMemberLeft returns ChatMemberLeft and true boolean if ChatMember is ChatMemberLeft.
func (s ChatMember) GetChatMemberLeft() (v ChatMemberLeft, ok bool) {
	if !s.IsChatMemberLeft() {
		return v, false
	}
	return s.ChatMemberLeft, true
}

// NewChatMemberLeftChatMember returns new ChatMember from ChatMemberLeft.
func NewChatMemberLeftChatMember(v ChatMemberLeft) ChatMember {
	var s ChatMember
	s.SetChatMemberLeft(v)
	return s
}

// SetChatMemberBanned sets ChatMember to ChatMemberBanned.
func (s *ChatMember) SetChatMemberBanned(v ChatMemberBanned) {
	s.Type = ChatMemberBannedChatMember
	s.ChatMemberBanned = v
}

// GetChatMemberBanned returns ChatMemberBanned and true boolean if ChatMember is ChatMemberBanned.
func (s ChatMember) GetChatMemberBanned() (v ChatMemberBanned, ok bool) {
	if !s.IsChatMemberBanned() {
		return v, false
	}
	return s.ChatMemberBanned, true
}

// NewChatMemberBannedChatMember returns new ChatMember from ChatMemberBanned.
func NewChatMemberBannedChatMember(v ChatMemberBanned) ChatMember {
	var s ChatMember
	s.SetChatMemberBanned(v)
	return s
}

// Ref: #/components/schemas/ChatMemberAdministrator
type ChatMemberAdministrator struct {
	Status              string    `json:"status"`
	User                User      `json:"user"`
	CanBeEdited         bool      `json:"can_be_edited"`
	IsAnonymous         bool      `json:"is_anonymous"`
	CanManageChat       bool      `json:"can_manage_chat"`
	CanDeleteMessages   bool      `json:"can_delete_messages"`
	CanManageVoiceChats bool      `json:"can_manage_voice_chats"`
	CanRestrictMembers  bool      `json:"can_restrict_members"`
	CanPromoteMembers   bool      `json:"can_promote_members"`
	CanChangeInfo       bool      `json:"can_change_info"`
	CanInviteUsers      bool      `json:"can_invite_users"`
	CanPostMessages     OptBool   `json:"can_post_messages"`
	CanEditMessages     OptBool   `json:"can_edit_messages"`
	CanPinMessages      OptBool   `json:"can_pin_messages"`
	CustomTitle         OptString `json:"custom_title"`
}

// Ref: #/components/schemas/ChatMemberBanned
type ChatMemberBanned struct {
	Status    string `json:"status"`
	User      User   `json:"user"`
	UntilDate int    `json:"until_date"`
}

// Ref: #/components/schemas/ChatMemberLeft
type ChatMemberLeft struct {
	Status string `json:"status"`
	User   User   `json:"user"`
}

// Ref: #/components/schemas/ChatMemberMember
type ChatMemberMember struct {
	Status string `json:"status"`
	User   User   `json:"user"`
}

// Ref: #/components/schemas/ChatMemberOwner
type ChatMemberOwner struct {
	Status      string    `json:"status"`
	User        User      `json:"user"`
	IsAnonymous bool      `json:"is_anonymous"`
	CustomTitle OptString `json:"custom_title"`
}

// Ref: #/components/schemas/ChatMemberRestricted
type ChatMemberRestricted struct {
	Status                string `json:"status"`
	User                  User   `json:"user"`
	IsMember              bool   `json:"is_member"`
	CanChangeInfo         bool   `json:"can_change_info"`
	CanInviteUsers        bool   `json:"can_invite_users"`
	CanPinMessages        bool   `json:"can_pin_messages"`
	CanSendMessages       bool   `json:"can_send_messages"`
	CanSendMediaMessages  bool   `json:"can_send_media_messages"`
	CanSendPolls          bool   `json:"can_send_polls"`
	CanSendOtherMessages  bool   `json:"can_send_other_messages"`
	CanAddWebPagePreviews bool   `json:"can_add_web_page_previews"`
	UntilDate             int    `json:"until_date"`
}

// Ref: #/components/schemas/ChatMemberUpdated
type ChatMemberUpdated struct {
	Chat          Chat              `json:"chat"`
	From          User              `json:"from"`
	Date          int               `json:"date"`
	OldChatMember ChatMember        `json:"old_chat_member"`
	NewChatMember ChatMember        `json:"new_chat_member"`
	InviteLink    OptChatInviteLink `json:"invite_link"`
}

// Ref: #/components/schemas/ChatPermissions
type ChatPermissions struct {
	CanSendMessages       OptBool `json:"can_send_messages"`
	CanSendMediaMessages  OptBool `json:"can_send_media_messages"`
	CanSendPolls          OptBool `json:"can_send_polls"`
	CanSendOtherMessages  OptBool `json:"can_send_other_messages"`
	CanAddWebPagePreviews OptBool `json:"can_add_web_page_previews"`
	CanChangeInfo         OptBool `json:"can_change_info"`
	CanInviteUsers        OptBool `json:"can_invite_users"`
	CanPinMessages        OptBool `json:"can_pin_messages"`
}

// Ref: #/components/schemas/ChatPhoto
type ChatPhoto struct {
	SmallFileID       string `json:"small_file_id"`
	SmallFileUniqueID string `json:"small_file_unique_id"`
	BigFileID         string `json:"big_file_id"`
	BigFileUniqueID   string `json:"big_file_unique_id"`
}

// Ref: #/components/schemas/ChosenInlineResult
type ChosenInlineResult struct {
	ResultID        string      `json:"result_id"`
	From            User        `json:"from"`
	Location        OptLocation `json:"location"`
	InlineMessageID OptString   `json:"inline_message_id"`
	Query           string      `json:"query"`
}

// Ref: #/components/schemas/Contact
type Contact struct {
	PhoneNumber string    `json:"phone_number"`
	FirstName   string    `json:"first_name"`
	LastName    OptString `json:"last_name"`
	UserID      OptInt    `json:"user_id"`
	Vcard       OptString `json:"vcard"`
}

// Ref: #/components/schemas/copyMessage
type CopyMessage struct {
	ChatID                   ID                      `json:"chat_id"`
	FromChatID               ID                      `json:"from_chat_id"`
	MessageID                int                     `json:"message_id"`
	Caption                  OptString               `json:"caption"`
	ParseMode                OptString               `json:"parse_mode"`
	CaptionEntities          []MessageEntity         `json:"caption_entities"`
	DisableNotification      OptBool                 `json:"disable_notification"`
	ReplyToMessageID         OptInt                  `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool                 `json:"allow_sending_without_reply"`
	ReplyMarkup              *CopyMessageReplyMarkup `json:"reply_markup"`
}

// CopyMessageReplyMarkup represents sum type.
type CopyMessageReplyMarkup struct {
	Type                 CopyMessageReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// CopyMessageReplyMarkupType is oneOf type of CopyMessageReplyMarkup.
type CopyMessageReplyMarkupType string

// Possible values for CopyMessageReplyMarkupType.
const (
	InlineKeyboardMarkupCopyMessageReplyMarkup CopyMessageReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupCopyMessageReplyMarkup  CopyMessageReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveCopyMessageReplyMarkup  CopyMessageReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplyCopyMessageReplyMarkup           CopyMessageReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether CopyMessageReplyMarkup is InlineKeyboardMarkup.
func (s CopyMessageReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupCopyMessageReplyMarkup
}

// IsReplyKeyboardMarkup reports whether CopyMessageReplyMarkup is ReplyKeyboardMarkup.
func (s CopyMessageReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupCopyMessageReplyMarkup
}

// IsReplyKeyboardRemove reports whether CopyMessageReplyMarkup is ReplyKeyboardRemove.
func (s CopyMessageReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveCopyMessageReplyMarkup
}

// IsForceReply reports whether CopyMessageReplyMarkup is ForceReply.
func (s CopyMessageReplyMarkup) IsForceReply() bool {
	return s.Type == ForceReplyCopyMessageReplyMarkup
}

// SetInlineKeyboardMarkup sets CopyMessageReplyMarkup to InlineKeyboardMarkup.
func (s *CopyMessageReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupCopyMessageReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if CopyMessageReplyMarkup is InlineKeyboardMarkup.
func (s CopyMessageReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupCopyMessageReplyMarkup returns new CopyMessageReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupCopyMessageReplyMarkup(v InlineKeyboardMarkup) CopyMessageReplyMarkup {
	var s CopyMessageReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets CopyMessageReplyMarkup to ReplyKeyboardMarkup.
func (s *CopyMessageReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupCopyMessageReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if CopyMessageReplyMarkup is ReplyKeyboardMarkup.
func (s CopyMessageReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupCopyMessageReplyMarkup returns new CopyMessageReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupCopyMessageReplyMarkup(v ReplyKeyboardMarkup) CopyMessageReplyMarkup {
	var s CopyMessageReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets CopyMessageReplyMarkup to ReplyKeyboardRemove.
func (s *CopyMessageReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveCopyMessageReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if CopyMessageReplyMarkup is ReplyKeyboardRemove.
func (s CopyMessageReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveCopyMessageReplyMarkup returns new CopyMessageReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveCopyMessageReplyMarkup(v ReplyKeyboardRemove) CopyMessageReplyMarkup {
	var s CopyMessageReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets CopyMessageReplyMarkup to ForceReply.
func (s *CopyMessageReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplyCopyMessageReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if CopyMessageReplyMarkup is ForceReply.
func (s CopyMessageReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplyCopyMessageReplyMarkup returns new CopyMessageReplyMarkup from ForceReply.
func NewForceReplyCopyMessageReplyMarkup(v ForceReply) CopyMessageReplyMarkup {
	var s CopyMessageReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/createChatInviteLink
type CreateChatInviteLink struct {
	ChatID             ID        `json:"chat_id"`
	Name               OptString `json:"name"`
	ExpireDate         OptInt    `json:"expire_date"`
	MemberLimit        OptInt    `json:"member_limit"`
	CreatesJoinRequest OptBool   `json:"creates_join_request"`
}

// Ref: #/components/schemas/createNewStickerSet
type CreateNewStickerSet struct {
	UserID        int             `json:"user_id"`
	Name          string          `json:"name"`
	Title         string          `json:"title"`
	PNGSticker    OptString       `json:"png_sticker"`
	TgsSticker    OptString       `json:"tgs_sticker"`
	Emojis        string          `json:"emojis"`
	ContainsMasks OptBool         `json:"contains_masks"`
	MaskPosition  OptMaskPosition `json:"mask_position"`
}

// Ref: #/components/schemas/declineChatJoinRequest
type DeclineChatJoinRequest struct {
	ChatID ID  `json:"chat_id"`
	UserID int `json:"user_id"`
}

// Ref: #/components/schemas/deleteChatPhoto
type DeleteChatPhoto struct {
	ChatID ID `json:"chat_id"`
}

// Ref: #/components/schemas/deleteChatStickerSet
type DeleteChatStickerSet struct {
	ChatID ID `json:"chat_id"`
}

// Ref: #/components/schemas/deleteMessage
type DeleteMessage struct {
	ChatID    ID  `json:"chat_id"`
	MessageID int `json:"message_id"`
}

// Ref: #/components/schemas/deleteMyCommands
type DeleteMyCommands struct {
	Scope        *BotCommandScope `json:"scope"`
	LanguageCode OptString        `json:"language_code"`
}

// Ref: #/components/schemas/deleteStickerFromSet
type DeleteStickerFromSet struct {
	Sticker string `json:"sticker"`
}

// Ref: #/components/schemas/deleteWebhook
type DeleteWebhook struct {
	DropPendingUpdates OptBool `json:"drop_pending_updates"`
}

// Ref: #/components/schemas/Dice
type Dice struct {
	Emoji string `json:"emoji"`
	Value int    `json:"value"`
}

// Ref: #/components/schemas/Document
type Document struct {
	FileID       string       `json:"file_id"`
	FileUniqueID string       `json:"file_unique_id"`
	Thumb        OptPhotoSize `json:"thumb"`
	FileName     OptString    `json:"file_name"`
	MimeType     OptString    `json:"mime_type"`
	FileSize     OptInt       `json:"file_size"`
}

// Ref: #/components/schemas/editChatInviteLink
type EditChatInviteLink struct {
	ChatID             ID        `json:"chat_id"`
	InviteLink         string    `json:"invite_link"`
	Name               OptString `json:"name"`
	ExpireDate         OptInt    `json:"expire_date"`
	MemberLimit        OptInt    `json:"member_limit"`
	CreatesJoinRequest OptBool   `json:"creates_join_request"`
}

// Ref: #/components/schemas/editMessageCaption
type EditMessageCaption struct {
	ChatID          *ID                     `json:"chat_id"`
	MessageID       OptInt                  `json:"message_id"`
	InlineMessageID OptString               `json:"inline_message_id"`
	Caption         OptString               `json:"caption"`
	ParseMode       OptString               `json:"parse_mode"`
	CaptionEntities []MessageEntity         `json:"caption_entities"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/editMessageLiveLocation
type EditMessageLiveLocation struct {
	ChatID               *ID                     `json:"chat_id"`
	MessageID            OptInt                  `json:"message_id"`
	InlineMessageID      OptString               `json:"inline_message_id"`
	Latitude             float64                 `json:"latitude"`
	Longitude            float64                 `json:"longitude"`
	HorizontalAccuracy   OptFloat64              `json:"horizontal_accuracy"`
	Heading              OptInt                  `json:"heading"`
	ProximityAlertRadius OptInt                  `json:"proximity_alert_radius"`
	ReplyMarkup          OptInlineKeyboardMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/editMessageMedia
type EditMessageMedia struct {
	ChatID          *ID                     `json:"chat_id"`
	MessageID       OptInt                  `json:"message_id"`
	InlineMessageID OptString               `json:"inline_message_id"`
	Media           InputMedia              `json:"media"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/editMessageReplyMarkup
type EditMessageReplyMarkup struct {
	ChatID          *ID                     `json:"chat_id"`
	MessageID       OptInt                  `json:"message_id"`
	InlineMessageID OptString               `json:"inline_message_id"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/editMessageText
type EditMessageText struct {
	ChatID                *ID                     `json:"chat_id"`
	MessageID             OptInt                  `json:"message_id"`
	InlineMessageID       OptString               `json:"inline_message_id"`
	Text                  string                  `json:"text"`
	ParseMode             OptString               `json:"parse_mode"`
	Entities              []MessageEntity         `json:"entities"`
	DisableWebPagePreview OptBool                 `json:"disable_web_page_preview"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/EncryptedCredentials
type EncryptedCredentials struct {
	Data   string `json:"data"`
	Hash   string `json:"hash"`
	Secret string `json:"secret"`
}

// Ref: #/components/schemas/EncryptedPassportElement
type EncryptedPassportElement struct {
	Type        string          `json:"type"`
	Data        OptString       `json:"data"`
	PhoneNumber OptString       `json:"phone_number"`
	Email       OptString       `json:"email"`
	Files       []PassportFile  `json:"files"`
	FrontSide   OptPassportFile `json:"front_side"`
	ReverseSide OptPassportFile `json:"reverse_side"`
	Selfie      OptPassportFile `json:"selfie"`
	Translation []PassportFile  `json:"translation"`
	Hash        string          `json:"hash"`
}

// Ref: #/components/schemas/Error
type Error struct {
	Ok          bool        `json:"ok"`
	ErrorCode   int         `json:"error_code"`
	Description string      `json:"description"`
	Parameters  OptResponse `json:"parameters"`
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// Ref: #/components/schemas/exportChatInviteLink
type ExportChatInviteLink struct {
	ChatID ID `json:"chat_id"`
}

// Ref: #/components/schemas/ForceReply
type ForceReply struct {
	ForceReply            bool      `json:"force_reply"`
	InputFieldPlaceholder OptString `json:"input_field_placeholder"`
	Selective             OptBool   `json:"selective"`
}

// Ref: #/components/schemas/forwardMessage
type ForwardMessage struct {
	ChatID              ID      `json:"chat_id"`
	FromChatID          ID      `json:"from_chat_id"`
	DisableNotification OptBool `json:"disable_notification"`
	MessageID           int     `json:"message_id"`
}

// Ref: #/components/schemas/Game
type Game struct {
	Title        string          `json:"title"`
	Description  string          `json:"description"`
	Photo        []PhotoSize     `json:"photo"`
	Text         OptString       `json:"text"`
	TextEntities []MessageEntity `json:"text_entities"`
	Animation    OptAnimation    `json:"animation"`
}

// Ref: #/components/schemas/getChat
type GetChat struct {
	ChatID ID `json:"chat_id"`
}

// Ref: #/components/schemas/getChatAdministrators
type GetChatAdministrators struct {
	ChatID ID `json:"chat_id"`
}

// Ref: #/components/schemas/getChatMember
type GetChatMember struct {
	ChatID ID  `json:"chat_id"`
	UserID int `json:"user_id"`
}

// Ref: #/components/schemas/getChatMemberCount
type GetChatMemberCount struct {
	ChatID ID `json:"chat_id"`
}

// Ref: #/components/schemas/getFile
type GetFile struct {
	FileID string `json:"file_id"`
}

// Ref: #/components/schemas/getGameHighScores
type GetGameHighScores struct {
	UserID          int       `json:"user_id"`
	ChatID          OptInt    `json:"chat_id"`
	MessageID       OptInt    `json:"message_id"`
	InlineMessageID OptString `json:"inline_message_id"`
}

// Ref: #/components/schemas/getMyCommands
type GetMyCommands struct {
	Scope        *BotCommandScope `json:"scope"`
	LanguageCode OptString        `json:"language_code"`
}

// Ref: #/components/schemas/getStickerSet
type GetStickerSet struct {
	Name string `json:"name"`
}

// Ref: #/components/schemas/getUpdates
type GetUpdates struct {
	Offset         OptInt   `json:"offset"`
	Limit          OptInt   `json:"limit"`
	Timeout        OptInt   `json:"timeout"`
	AllowedUpdates []string `json:"allowed_updates"`
}

// Ref: #/components/schemas/getUserProfilePhotos
type GetUserProfilePhotos struct {
	UserID int    `json:"user_id"`
	Offset OptInt `json:"offset"`
	Limit  OptInt `json:"limit"`
}

// Ref: #/components/schemas/ID
// ID represents sum type.
type ID struct {
	Type   IDType // switch on this field
	String string
	Int    int
}

// IDType is oneOf type of ID.
type IDType string

// Possible values for IDType.
const (
	StringID IDType = "string"
	IntID    IDType = "int"
)

// IsString reports whether ID is string.
func (s ID) IsString() bool { return s.Type == StringID }

// IsInt reports whether ID is int.
func (s ID) IsInt() bool { return s.Type == IntID }

// SetString sets ID to string.
func (s *ID) SetString(v string) {
	s.Type = StringID
	s.String = v
}

// GetString returns string and true boolean if ID is string.
func (s ID) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringID returns new ID from string.
func NewStringID(v string) ID {
	var s ID
	s.SetString(v)
	return s
}

// SetInt sets ID to int.
func (s *ID) SetInt(v int) {
	s.Type = IntID
	s.Int = v
}

// GetInt returns int and true boolean if ID is int.
func (s ID) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntID returns new ID from int.
func NewIntID(v int) ID {
	var s ID
	s.SetInt(v)
	return s
}

// Ref: #/components/schemas/InlineKeyboardButton
type InlineKeyboardButton struct {
	Text                         string        `json:"text"`
	URL                          OptURL        `json:"url"`
	LoginURL                     OptLoginUrl   `json:"login_url"`
	CallbackData                 OptString     `json:"callback_data"`
	SwitchInlineQuery            OptString     `json:"switch_inline_query"`
	SwitchInlineQueryCurrentChat OptString     `json:"switch_inline_query_current_chat"`
	CallbackGame                 *CallbackGame `json:"callback_game"`
	Pay                          OptBool       `json:"pay"`
}

// Ref: #/components/schemas/InlineKeyboardMarkup
type InlineKeyboardMarkup struct {
	InlineKeyboard [][]InlineKeyboardButton `json:"inline_keyboard"`
}

// Ref: #/components/schemas/InlineQuery
type InlineQuery struct {
	ID       string      `json:"id"`
	From     User        `json:"from"`
	Query    string      `json:"query"`
	Offset   string      `json:"offset"`
	ChatType OptString   `json:"chat_type"`
	Location OptLocation `json:"location"`
}

type InlineQueryResult string

// Ref: #/components/schemas/InputMedia
// InputMedia represents sum type.
type InputMedia struct {
	Type                InputMediaType // switch on this field
	InputMediaAnimation InputMediaAnimation
	InputMediaDocument  InputMediaDocument
	InputMediaAudio     InputMediaAudio
	InputMediaPhoto     InputMediaPhoto
	InputMediaVideo     InputMediaVideo
}

// InputMediaType is oneOf type of InputMedia.
type InputMediaType string

// Possible values for InputMediaType.
const (
	InputMediaAnimationInputMedia InputMediaType = "InputMediaAnimation"
	InputMediaDocumentInputMedia  InputMediaType = "InputMediaDocument"
	InputMediaAudioInputMedia     InputMediaType = "InputMediaAudio"
	InputMediaPhotoInputMedia     InputMediaType = "InputMediaPhoto"
	InputMediaVideoInputMedia     InputMediaType = "InputMediaVideo"
)

// IsInputMediaAnimation reports whether InputMedia is InputMediaAnimation.
func (s InputMedia) IsInputMediaAnimation() bool { return s.Type == InputMediaAnimationInputMedia }

// IsInputMediaDocument reports whether InputMedia is InputMediaDocument.
func (s InputMedia) IsInputMediaDocument() bool { return s.Type == InputMediaDocumentInputMedia }

// IsInputMediaAudio reports whether InputMedia is InputMediaAudio.
func (s InputMedia) IsInputMediaAudio() bool { return s.Type == InputMediaAudioInputMedia }

// IsInputMediaPhoto reports whether InputMedia is InputMediaPhoto.
func (s InputMedia) IsInputMediaPhoto() bool { return s.Type == InputMediaPhotoInputMedia }

// IsInputMediaVideo reports whether InputMedia is InputMediaVideo.
func (s InputMedia) IsInputMediaVideo() bool { return s.Type == InputMediaVideoInputMedia }

// SetInputMediaAnimation sets InputMedia to InputMediaAnimation.
func (s *InputMedia) SetInputMediaAnimation(v InputMediaAnimation) {
	s.Type = InputMediaAnimationInputMedia
	s.InputMediaAnimation = v
}

// GetInputMediaAnimation returns InputMediaAnimation and true boolean if InputMedia is InputMediaAnimation.
func (s InputMedia) GetInputMediaAnimation() (v InputMediaAnimation, ok bool) {
	if !s.IsInputMediaAnimation() {
		return v, false
	}
	return s.InputMediaAnimation, true
}

// NewInputMediaAnimationInputMedia returns new InputMedia from InputMediaAnimation.
func NewInputMediaAnimationInputMedia(v InputMediaAnimation) InputMedia {
	var s InputMedia
	s.SetInputMediaAnimation(v)
	return s
}

// SetInputMediaDocument sets InputMedia to InputMediaDocument.
func (s *InputMedia) SetInputMediaDocument(v InputMediaDocument) {
	s.Type = InputMediaDocumentInputMedia
	s.InputMediaDocument = v
}

// GetInputMediaDocument returns InputMediaDocument and true boolean if InputMedia is InputMediaDocument.
func (s InputMedia) GetInputMediaDocument() (v InputMediaDocument, ok bool) {
	if !s.IsInputMediaDocument() {
		return v, false
	}
	return s.InputMediaDocument, true
}

// NewInputMediaDocumentInputMedia returns new InputMedia from InputMediaDocument.
func NewInputMediaDocumentInputMedia(v InputMediaDocument) InputMedia {
	var s InputMedia
	s.SetInputMediaDocument(v)
	return s
}

// SetInputMediaAudio sets InputMedia to InputMediaAudio.
func (s *InputMedia) SetInputMediaAudio(v InputMediaAudio) {
	s.Type = InputMediaAudioInputMedia
	s.InputMediaAudio = v
}

// GetInputMediaAudio returns InputMediaAudio and true boolean if InputMedia is InputMediaAudio.
func (s InputMedia) GetInputMediaAudio() (v InputMediaAudio, ok bool) {
	if !s.IsInputMediaAudio() {
		return v, false
	}
	return s.InputMediaAudio, true
}

// NewInputMediaAudioInputMedia returns new InputMedia from InputMediaAudio.
func NewInputMediaAudioInputMedia(v InputMediaAudio) InputMedia {
	var s InputMedia
	s.SetInputMediaAudio(v)
	return s
}

// SetInputMediaPhoto sets InputMedia to InputMediaPhoto.
func (s *InputMedia) SetInputMediaPhoto(v InputMediaPhoto) {
	s.Type = InputMediaPhotoInputMedia
	s.InputMediaPhoto = v
}

// GetInputMediaPhoto returns InputMediaPhoto and true boolean if InputMedia is InputMediaPhoto.
func (s InputMedia) GetInputMediaPhoto() (v InputMediaPhoto, ok bool) {
	if !s.IsInputMediaPhoto() {
		return v, false
	}
	return s.InputMediaPhoto, true
}

// NewInputMediaPhotoInputMedia returns new InputMedia from InputMediaPhoto.
func NewInputMediaPhotoInputMedia(v InputMediaPhoto) InputMedia {
	var s InputMedia
	s.SetInputMediaPhoto(v)
	return s
}

// SetInputMediaVideo sets InputMedia to InputMediaVideo.
func (s *InputMedia) SetInputMediaVideo(v InputMediaVideo) {
	s.Type = InputMediaVideoInputMedia
	s.InputMediaVideo = v
}

// GetInputMediaVideo returns InputMediaVideo and true boolean if InputMedia is InputMediaVideo.
func (s InputMedia) GetInputMediaVideo() (v InputMediaVideo, ok bool) {
	if !s.IsInputMediaVideo() {
		return v, false
	}
	return s.InputMediaVideo, true
}

// NewInputMediaVideoInputMedia returns new InputMedia from InputMediaVideo.
func NewInputMediaVideoInputMedia(v InputMediaVideo) InputMedia {
	var s InputMedia
	s.SetInputMediaVideo(v)
	return s
}

// Ref: #/components/schemas/InputMediaAnimation
type InputMediaAnimation struct {
	Type            string          `json:"type"`
	Media           string          `json:"media"`
	Thumb           OptString       `json:"thumb"`
	Caption         OptString       `json:"caption"`
	ParseMode       OptString       `json:"parse_mode"`
	CaptionEntities []MessageEntity `json:"caption_entities"`
	Width           OptInt          `json:"width"`
	Height          OptInt          `json:"height"`
	Duration        OptInt          `json:"duration"`
}

// Ref: #/components/schemas/InputMediaAudio
type InputMediaAudio struct {
	Type            string          `json:"type"`
	Media           string          `json:"media"`
	Thumb           OptString       `json:"thumb"`
	Caption         OptString       `json:"caption"`
	ParseMode       OptString       `json:"parse_mode"`
	CaptionEntities []MessageEntity `json:"caption_entities"`
	Duration        OptInt          `json:"duration"`
	Performer       OptString       `json:"performer"`
	Title           OptString       `json:"title"`
}

// Ref: #/components/schemas/InputMediaDocument
type InputMediaDocument struct {
	Type                        string          `json:"type"`
	Media                       string          `json:"media"`
	Thumb                       OptString       `json:"thumb"`
	Caption                     OptString       `json:"caption"`
	ParseMode                   OptString       `json:"parse_mode"`
	CaptionEntities             []MessageEntity `json:"caption_entities"`
	DisableContentTypeDetection OptBool         `json:"disable_content_type_detection"`
}

// Ref: #/components/schemas/InputMediaPhoto
type InputMediaPhoto struct {
	Type            string          `json:"type"`
	Media           string          `json:"media"`
	Caption         OptString       `json:"caption"`
	ParseMode       OptString       `json:"parse_mode"`
	CaptionEntities []MessageEntity `json:"caption_entities"`
}

// Ref: #/components/schemas/InputMediaVideo
type InputMediaVideo struct {
	Type              string          `json:"type"`
	Media             string          `json:"media"`
	Thumb             OptString       `json:"thumb"`
	Caption           OptString       `json:"caption"`
	ParseMode         OptString       `json:"parse_mode"`
	CaptionEntities   []MessageEntity `json:"caption_entities"`
	Width             OptInt          `json:"width"`
	Height            OptInt          `json:"height"`
	Duration          OptInt          `json:"duration"`
	SupportsStreaming OptBool         `json:"supports_streaming"`
}

// Ref: #/components/schemas/Invoice
type Invoice struct {
	Title          string `json:"title"`
	Description    string `json:"description"`
	StartParameter string `json:"start_parameter"`
	Currency       string `json:"currency"`
	TotalAmount    int    `json:"total_amount"`
}

// Ref: #/components/schemas/KeyboardButton
type KeyboardButton struct {
	Text            string                    `json:"text"`
	RequestContact  OptBool                   `json:"request_contact"`
	RequestLocation OptBool                   `json:"request_location"`
	RequestPoll     OptKeyboardButtonPollType `json:"request_poll"`
}

// Ref: #/components/schemas/KeyboardButtonPollType
type KeyboardButtonPollType struct {
	Type OptString `json:"type"`
}

// Ref: #/components/schemas/LabeledPrice
type LabeledPrice struct {
	Label  string `json:"label"`
	Amount int    `json:"amount"`
}

// Ref: #/components/schemas/leaveChat
type LeaveChat struct {
	ChatID ID `json:"chat_id"`
}

// Ref: #/components/schemas/Location
type Location struct {
	Longitude            float64    `json:"longitude"`
	Latitude             float64    `json:"latitude"`
	HorizontalAccuracy   OptFloat64 `json:"horizontal_accuracy"`
	LivePeriod           OptInt     `json:"live_period"`
	Heading              OptInt     `json:"heading"`
	ProximityAlertRadius OptInt     `json:"proximity_alert_radius"`
}

// Ref: #/components/schemas/LoginUrl
type LoginUrl struct {
	URL                url.URL   `json:"url"`
	ForwardText        OptString `json:"forward_text"`
	BotUsername        OptString `json:"bot_username"`
	RequestWriteAccess OptBool   `json:"request_write_access"`
}

// Ref: #/components/schemas/MaskPosition
type MaskPosition struct {
	Point  string  `json:"point"`
	XShift float64 `json:"x_shift"`
	YShift float64 `json:"y_shift"`
	Scale  float64 `json:"scale"`
}

// Ref: #/components/schemas/Message
type Message struct {
	MessageID                     int                              `json:"message_id"`
	From                          OptUser                          `json:"from"`
	SenderChat                    OptChat                          `json:"sender_chat"`
	Date                          int                              `json:"date"`
	Chat                          Chat                             `json:"chat"`
	ForwardFrom                   OptUser                          `json:"forward_from"`
	ForwardFromChat               OptChat                          `json:"forward_from_chat"`
	ForwardFromMessageID          OptInt                           `json:"forward_from_message_id"`
	ForwardSignature              OptString                        `json:"forward_signature"`
	ForwardSenderName             OptString                        `json:"forward_sender_name"`
	ForwardDate                   OptInt                           `json:"forward_date"`
	IsAutomaticForward            OptBool                          `json:"is_automatic_forward"`
	ReplyToMessage                *Message                         `json:"reply_to_message"`
	ViaBot                        OptUser                          `json:"via_bot"`
	EditDate                      OptInt                           `json:"edit_date"`
	HasProtectedContent           OptBool                          `json:"has_protected_content"`
	MediaGroupID                  OptString                        `json:"media_group_id"`
	AuthorSignature               OptString                        `json:"author_signature"`
	Text                          OptString                        `json:"text"`
	Entities                      []MessageEntity                  `json:"entities"`
	Animation                     OptAnimation                     `json:"animation"`
	Audio                         OptAudio                         `json:"audio"`
	Document                      OptDocument                      `json:"document"`
	Photo                         []PhotoSize                      `json:"photo"`
	Sticker                       OptSticker                       `json:"sticker"`
	Video                         OptVideo                         `json:"video"`
	VideoNote                     OptVideoNote                     `json:"video_note"`
	Voice                         OptVoice                         `json:"voice"`
	Caption                       OptString                        `json:"caption"`
	CaptionEntities               []MessageEntity                  `json:"caption_entities"`
	Contact                       OptContact                       `json:"contact"`
	Dice                          OptDice                          `json:"dice"`
	Game                          OptGame                          `json:"game"`
	Poll                          OptPoll                          `json:"poll"`
	Venue                         OptVenue                         `json:"venue"`
	Location                      OptLocation                      `json:"location"`
	NewChatMembers                []User                           `json:"new_chat_members"`
	LeftChatMember                OptUser                          `json:"left_chat_member"`
	NewChatTitle                  OptString                        `json:"new_chat_title"`
	NewChatPhoto                  []PhotoSize                      `json:"new_chat_photo"`
	DeleteChatPhoto               OptBool                          `json:"delete_chat_photo"`
	GroupChatCreated              OptBool                          `json:"group_chat_created"`
	SupergroupChatCreated         OptBool                          `json:"supergroup_chat_created"`
	ChannelChatCreated            OptBool                          `json:"channel_chat_created"`
	MessageAutoDeleteTimerChanged OptMessageAutoDeleteTimerChanged `json:"message_auto_delete_timer_changed"`
	MigrateToChatID               OptInt                           `json:"migrate_to_chat_id"`
	MigrateFromChatID             OptInt                           `json:"migrate_from_chat_id"`
	PinnedMessage                 *Message                         `json:"pinned_message"`
	Invoice                       OptInvoice                       `json:"invoice"`
	SuccessfulPayment             OptSuccessfulPayment             `json:"successful_payment"`
	ConnectedWebsite              OptString                        `json:"connected_website"`
	PassportData                  OptPassportData                  `json:"passport_data"`
	ProximityAlertTriggered       OptProximityAlertTriggered       `json:"proximity_alert_triggered"`
	VoiceChatScheduled            OptVoiceChatScheduled            `json:"voice_chat_scheduled"`
	VoiceChatStarted              *VoiceChatStarted                `json:"voice_chat_started"`
	VoiceChatEnded                OptVoiceChatEnded                `json:"voice_chat_ended"`
	VoiceChatParticipantsInvited  OptVoiceChatParticipantsInvited  `json:"voice_chat_participants_invited"`
	ReplyMarkup                   OptInlineKeyboardMarkup          `json:"reply_markup"`
}

// Ref: #/components/schemas/MessageAutoDeleteTimerChanged
type MessageAutoDeleteTimerChanged struct {
	MessageAutoDeleteTime int `json:"message_auto_delete_time"`
}

// Ref: #/components/schemas/MessageEntity
type MessageEntity struct {
	Type     string    `json:"type"`
	Offset   int       `json:"offset"`
	Length   int       `json:"length"`
	URL      OptURL    `json:"url"`
	User     OptUser   `json:"user"`
	Language OptString `json:"language"`
}

// NewOptAnimation returns new OptAnimation with value set to v.
func NewOptAnimation(v Animation) OptAnimation {
	return OptAnimation{
		Value: v,
		Set:   true,
	}
}

// OptAnimation is optional Animation.
type OptAnimation struct {
	Value Animation
	Set   bool
}

// IsSet returns true if OptAnimation was set.
func (o OptAnimation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnimation) Reset() {
	var v Animation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnimation) SetTo(v Animation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnimation) Get() (v Animation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptAudio returns new OptAudio with value set to v.
func NewOptAudio(v Audio) OptAudio {
	return OptAudio{
		Value: v,
		Set:   true,
	}
}

// OptAudio is optional Audio.
type OptAudio struct {
	Value Audio
	Set   bool
}

// IsSet returns true if OptAudio was set.
func (o OptAudio) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAudio) Reset() {
	var v Audio
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAudio) SetTo(v Audio) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAudio) Get() (v Audio, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptCallbackQuery returns new OptCallbackQuery with value set to v.
func NewOptCallbackQuery(v CallbackQuery) OptCallbackQuery {
	return OptCallbackQuery{
		Value: v,
		Set:   true,
	}
}

// OptCallbackQuery is optional CallbackQuery.
type OptCallbackQuery struct {
	Value CallbackQuery
	Set   bool
}

// IsSet returns true if OptCallbackQuery was set.
func (o OptCallbackQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallbackQuery) Reset() {
	var v CallbackQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallbackQuery) SetTo(v CallbackQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallbackQuery) Get() (v CallbackQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptChat returns new OptChat with value set to v.
func NewOptChat(v Chat) OptChat {
	return OptChat{
		Value: v,
		Set:   true,
	}
}

// OptChat is optional Chat.
type OptChat struct {
	Value Chat
	Set   bool
}

// IsSet returns true if OptChat was set.
func (o OptChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChat) Reset() {
	var v Chat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChat) SetTo(v Chat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChat) Get() (v Chat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptChatInviteLink returns new OptChatInviteLink with value set to v.
func NewOptChatInviteLink(v ChatInviteLink) OptChatInviteLink {
	return OptChatInviteLink{
		Value: v,
		Set:   true,
	}
}

// OptChatInviteLink is optional ChatInviteLink.
type OptChatInviteLink struct {
	Value ChatInviteLink
	Set   bool
}

// IsSet returns true if OptChatInviteLink was set.
func (o OptChatInviteLink) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatInviteLink) Reset() {
	var v ChatInviteLink
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatInviteLink) SetTo(v ChatInviteLink) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatInviteLink) Get() (v ChatInviteLink, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptChatJoinRequest returns new OptChatJoinRequest with value set to v.
func NewOptChatJoinRequest(v ChatJoinRequest) OptChatJoinRequest {
	return OptChatJoinRequest{
		Value: v,
		Set:   true,
	}
}

// OptChatJoinRequest is optional ChatJoinRequest.
type OptChatJoinRequest struct {
	Value ChatJoinRequest
	Set   bool
}

// IsSet returns true if OptChatJoinRequest was set.
func (o OptChatJoinRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatJoinRequest) Reset() {
	var v ChatJoinRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatJoinRequest) SetTo(v ChatJoinRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatJoinRequest) Get() (v ChatJoinRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptChatLocation returns new OptChatLocation with value set to v.
func NewOptChatLocation(v ChatLocation) OptChatLocation {
	return OptChatLocation{
		Value: v,
		Set:   true,
	}
}

// OptChatLocation is optional ChatLocation.
type OptChatLocation struct {
	Value ChatLocation
	Set   bool
}

// IsSet returns true if OptChatLocation was set.
func (o OptChatLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatLocation) Reset() {
	var v ChatLocation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatLocation) SetTo(v ChatLocation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatLocation) Get() (v ChatLocation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptChatMemberUpdated returns new OptChatMemberUpdated with value set to v.
func NewOptChatMemberUpdated(v ChatMemberUpdated) OptChatMemberUpdated {
	return OptChatMemberUpdated{
		Value: v,
		Set:   true,
	}
}

// OptChatMemberUpdated is optional ChatMemberUpdated.
type OptChatMemberUpdated struct {
	Value ChatMemberUpdated
	Set   bool
}

// IsSet returns true if OptChatMemberUpdated was set.
func (o OptChatMemberUpdated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatMemberUpdated) Reset() {
	var v ChatMemberUpdated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatMemberUpdated) SetTo(v ChatMemberUpdated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatMemberUpdated) Get() (v ChatMemberUpdated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptChatPermissions returns new OptChatPermissions with value set to v.
func NewOptChatPermissions(v ChatPermissions) OptChatPermissions {
	return OptChatPermissions{
		Value: v,
		Set:   true,
	}
}

// OptChatPermissions is optional ChatPermissions.
type OptChatPermissions struct {
	Value ChatPermissions
	Set   bool
}

// IsSet returns true if OptChatPermissions was set.
func (o OptChatPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatPermissions) Reset() {
	var v ChatPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatPermissions) SetTo(v ChatPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatPermissions) Get() (v ChatPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptChatPhoto returns new OptChatPhoto with value set to v.
func NewOptChatPhoto(v ChatPhoto) OptChatPhoto {
	return OptChatPhoto{
		Value: v,
		Set:   true,
	}
}

// OptChatPhoto is optional ChatPhoto.
type OptChatPhoto struct {
	Value ChatPhoto
	Set   bool
}

// IsSet returns true if OptChatPhoto was set.
func (o OptChatPhoto) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatPhoto) Reset() {
	var v ChatPhoto
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatPhoto) SetTo(v ChatPhoto) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatPhoto) Get() (v ChatPhoto, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptChosenInlineResult returns new OptChosenInlineResult with value set to v.
func NewOptChosenInlineResult(v ChosenInlineResult) OptChosenInlineResult {
	return OptChosenInlineResult{
		Value: v,
		Set:   true,
	}
}

// OptChosenInlineResult is optional ChosenInlineResult.
type OptChosenInlineResult struct {
	Value ChosenInlineResult
	Set   bool
}

// IsSet returns true if OptChosenInlineResult was set.
func (o OptChosenInlineResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChosenInlineResult) Reset() {
	var v ChosenInlineResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChosenInlineResult) SetTo(v ChosenInlineResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChosenInlineResult) Get() (v ChosenInlineResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptContact returns new OptContact with value set to v.
func NewOptContact(v Contact) OptContact {
	return OptContact{
		Value: v,
		Set:   true,
	}
}

// OptContact is optional Contact.
type OptContact struct {
	Value Contact
	Set   bool
}

// IsSet returns true if OptContact was set.
func (o OptContact) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContact) Reset() {
	var v Contact
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContact) SetTo(v Contact) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContact) Get() (v Contact, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptDice returns new OptDice with value set to v.
func NewOptDice(v Dice) OptDice {
	return OptDice{
		Value: v,
		Set:   true,
	}
}

// OptDice is optional Dice.
type OptDice struct {
	Value Dice
	Set   bool
}

// IsSet returns true if OptDice was set.
func (o OptDice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDice) Reset() {
	var v Dice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDice) SetTo(v Dice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDice) Get() (v Dice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptDocument returns new OptDocument with value set to v.
func NewOptDocument(v Document) OptDocument {
	return OptDocument{
		Value: v,
		Set:   true,
	}
}

// OptDocument is optional Document.
type OptDocument struct {
	Value Document
	Set   bool
}

// IsSet returns true if OptDocument was set.
func (o OptDocument) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocument) Reset() {
	var v Document
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocument) SetTo(v Document) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocument) Get() (v Document, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptGame returns new OptGame with value set to v.
func NewOptGame(v Game) OptGame {
	return OptGame{
		Value: v,
		Set:   true,
	}
}

// OptGame is optional Game.
type OptGame struct {
	Value Game
	Set   bool
}

// IsSet returns true if OptGame was set.
func (o OptGame) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGame) Reset() {
	var v Game
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGame) SetTo(v Game) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGame) Get() (v Game, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptInlineKeyboardMarkup returns new OptInlineKeyboardMarkup with value set to v.
func NewOptInlineKeyboardMarkup(v InlineKeyboardMarkup) OptInlineKeyboardMarkup {
	return OptInlineKeyboardMarkup{
		Value: v,
		Set:   true,
	}
}

// OptInlineKeyboardMarkup is optional InlineKeyboardMarkup.
type OptInlineKeyboardMarkup struct {
	Value InlineKeyboardMarkup
	Set   bool
}

// IsSet returns true if OptInlineKeyboardMarkup was set.
func (o OptInlineKeyboardMarkup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineKeyboardMarkup) Reset() {
	var v InlineKeyboardMarkup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineKeyboardMarkup) SetTo(v InlineKeyboardMarkup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineKeyboardMarkup) Get() (v InlineKeyboardMarkup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptInlineQuery returns new OptInlineQuery with value set to v.
func NewOptInlineQuery(v InlineQuery) OptInlineQuery {
	return OptInlineQuery{
		Value: v,
		Set:   true,
	}
}

// OptInlineQuery is optional InlineQuery.
type OptInlineQuery struct {
	Value InlineQuery
	Set   bool
}

// IsSet returns true if OptInlineQuery was set.
func (o OptInlineQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineQuery) Reset() {
	var v InlineQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineQuery) SetTo(v InlineQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineQuery) Get() (v InlineQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptInvoice returns new OptInvoice with value set to v.
func NewOptInvoice(v Invoice) OptInvoice {
	return OptInvoice{
		Value: v,
		Set:   true,
	}
}

// OptInvoice is optional Invoice.
type OptInvoice struct {
	Value Invoice
	Set   bool
}

// IsSet returns true if OptInvoice was set.
func (o OptInvoice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInvoice) Reset() {
	var v Invoice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInvoice) SetTo(v Invoice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInvoice) Get() (v Invoice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptKeyboardButtonPollType returns new OptKeyboardButtonPollType with value set to v.
func NewOptKeyboardButtonPollType(v KeyboardButtonPollType) OptKeyboardButtonPollType {
	return OptKeyboardButtonPollType{
		Value: v,
		Set:   true,
	}
}

// OptKeyboardButtonPollType is optional KeyboardButtonPollType.
type OptKeyboardButtonPollType struct {
	Value KeyboardButtonPollType
	Set   bool
}

// IsSet returns true if OptKeyboardButtonPollType was set.
func (o OptKeyboardButtonPollType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKeyboardButtonPollType) Reset() {
	var v KeyboardButtonPollType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKeyboardButtonPollType) SetTo(v KeyboardButtonPollType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKeyboardButtonPollType) Get() (v KeyboardButtonPollType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptLocation returns new OptLocation with value set to v.
func NewOptLocation(v Location) OptLocation {
	return OptLocation{
		Value: v,
		Set:   true,
	}
}

// OptLocation is optional Location.
type OptLocation struct {
	Value Location
	Set   bool
}

// IsSet returns true if OptLocation was set.
func (o OptLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLocation) Reset() {
	var v Location
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLocation) SetTo(v Location) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLocation) Get() (v Location, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptLoginUrl returns new OptLoginUrl with value set to v.
func NewOptLoginUrl(v LoginUrl) OptLoginUrl {
	return OptLoginUrl{
		Value: v,
		Set:   true,
	}
}

// OptLoginUrl is optional LoginUrl.
type OptLoginUrl struct {
	Value LoginUrl
	Set   bool
}

// IsSet returns true if OptLoginUrl was set.
func (o OptLoginUrl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoginUrl) Reset() {
	var v LoginUrl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoginUrl) SetTo(v LoginUrl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoginUrl) Get() (v LoginUrl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptMaskPosition returns new OptMaskPosition with value set to v.
func NewOptMaskPosition(v MaskPosition) OptMaskPosition {
	return OptMaskPosition{
		Value: v,
		Set:   true,
	}
}

// OptMaskPosition is optional MaskPosition.
type OptMaskPosition struct {
	Value MaskPosition
	Set   bool
}

// IsSet returns true if OptMaskPosition was set.
func (o OptMaskPosition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMaskPosition) Reset() {
	var v MaskPosition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMaskPosition) SetTo(v MaskPosition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMaskPosition) Get() (v MaskPosition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptMessage returns new OptMessage with value set to v.
func NewOptMessage(v Message) OptMessage {
	return OptMessage{
		Value: v,
		Set:   true,
	}
}

// OptMessage is optional Message.
type OptMessage struct {
	Value Message
	Set   bool
}

// IsSet returns true if OptMessage was set.
func (o OptMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessage) Reset() {
	var v Message
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessage) SetTo(v Message) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessage) Get() (v Message, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptMessageAutoDeleteTimerChanged returns new OptMessageAutoDeleteTimerChanged with value set to v.
func NewOptMessageAutoDeleteTimerChanged(v MessageAutoDeleteTimerChanged) OptMessageAutoDeleteTimerChanged {
	return OptMessageAutoDeleteTimerChanged{
		Value: v,
		Set:   true,
	}
}

// OptMessageAutoDeleteTimerChanged is optional MessageAutoDeleteTimerChanged.
type OptMessageAutoDeleteTimerChanged struct {
	Value MessageAutoDeleteTimerChanged
	Set   bool
}

// IsSet returns true if OptMessageAutoDeleteTimerChanged was set.
func (o OptMessageAutoDeleteTimerChanged) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageAutoDeleteTimerChanged) Reset() {
	var v MessageAutoDeleteTimerChanged
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageAutoDeleteTimerChanged) SetTo(v MessageAutoDeleteTimerChanged) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageAutoDeleteTimerChanged) Get() (v MessageAutoDeleteTimerChanged, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptOrderInfo returns new OptOrderInfo with value set to v.
func NewOptOrderInfo(v OrderInfo) OptOrderInfo {
	return OptOrderInfo{
		Value: v,
		Set:   true,
	}
}

// OptOrderInfo is optional OrderInfo.
type OptOrderInfo struct {
	Value OrderInfo
	Set   bool
}

// IsSet returns true if OptOrderInfo was set.
func (o OptOrderInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderInfo) Reset() {
	var v OrderInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderInfo) SetTo(v OrderInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderInfo) Get() (v OrderInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptPassportData returns new OptPassportData with value set to v.
func NewOptPassportData(v PassportData) OptPassportData {
	return OptPassportData{
		Value: v,
		Set:   true,
	}
}

// OptPassportData is optional PassportData.
type OptPassportData struct {
	Value PassportData
	Set   bool
}

// IsSet returns true if OptPassportData was set.
func (o OptPassportData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPassportData) Reset() {
	var v PassportData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPassportData) SetTo(v PassportData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPassportData) Get() (v PassportData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptPassportFile returns new OptPassportFile with value set to v.
func NewOptPassportFile(v PassportFile) OptPassportFile {
	return OptPassportFile{
		Value: v,
		Set:   true,
	}
}

// OptPassportFile is optional PassportFile.
type OptPassportFile struct {
	Value PassportFile
	Set   bool
}

// IsSet returns true if OptPassportFile was set.
func (o OptPassportFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPassportFile) Reset() {
	var v PassportFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPassportFile) SetTo(v PassportFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPassportFile) Get() (v PassportFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptPhotoSize returns new OptPhotoSize with value set to v.
func NewOptPhotoSize(v PhotoSize) OptPhotoSize {
	return OptPhotoSize{
		Value: v,
		Set:   true,
	}
}

// OptPhotoSize is optional PhotoSize.
type OptPhotoSize struct {
	Value PhotoSize
	Set   bool
}

// IsSet returns true if OptPhotoSize was set.
func (o OptPhotoSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhotoSize) Reset() {
	var v PhotoSize
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhotoSize) SetTo(v PhotoSize) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhotoSize) Get() (v PhotoSize, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptPoll returns new OptPoll with value set to v.
func NewOptPoll(v Poll) OptPoll {
	return OptPoll{
		Value: v,
		Set:   true,
	}
}

// OptPoll is optional Poll.
type OptPoll struct {
	Value Poll
	Set   bool
}

// IsSet returns true if OptPoll was set.
func (o OptPoll) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoll) Reset() {
	var v Poll
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoll) SetTo(v Poll) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoll) Get() (v Poll, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptPollAnswer returns new OptPollAnswer with value set to v.
func NewOptPollAnswer(v PollAnswer) OptPollAnswer {
	return OptPollAnswer{
		Value: v,
		Set:   true,
	}
}

// OptPollAnswer is optional PollAnswer.
type OptPollAnswer struct {
	Value PollAnswer
	Set   bool
}

// IsSet returns true if OptPollAnswer was set.
func (o OptPollAnswer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPollAnswer) Reset() {
	var v PollAnswer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPollAnswer) SetTo(v PollAnswer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPollAnswer) Get() (v PollAnswer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptPreCheckoutQuery returns new OptPreCheckoutQuery with value set to v.
func NewOptPreCheckoutQuery(v PreCheckoutQuery) OptPreCheckoutQuery {
	return OptPreCheckoutQuery{
		Value: v,
		Set:   true,
	}
}

// OptPreCheckoutQuery is optional PreCheckoutQuery.
type OptPreCheckoutQuery struct {
	Value PreCheckoutQuery
	Set   bool
}

// IsSet returns true if OptPreCheckoutQuery was set.
func (o OptPreCheckoutQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPreCheckoutQuery) Reset() {
	var v PreCheckoutQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPreCheckoutQuery) SetTo(v PreCheckoutQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPreCheckoutQuery) Get() (v PreCheckoutQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptProximityAlertTriggered returns new OptProximityAlertTriggered with value set to v.
func NewOptProximityAlertTriggered(v ProximityAlertTriggered) OptProximityAlertTriggered {
	return OptProximityAlertTriggered{
		Value: v,
		Set:   true,
	}
}

// OptProximityAlertTriggered is optional ProximityAlertTriggered.
type OptProximityAlertTriggered struct {
	Value ProximityAlertTriggered
	Set   bool
}

// IsSet returns true if OptProximityAlertTriggered was set.
func (o OptProximityAlertTriggered) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProximityAlertTriggered) Reset() {
	var v ProximityAlertTriggered
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProximityAlertTriggered) SetTo(v ProximityAlertTriggered) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProximityAlertTriggered) Get() (v ProximityAlertTriggered, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptResponse returns new OptResponse with value set to v.
func NewOptResponse(v Response) OptResponse {
	return OptResponse{
		Value: v,
		Set:   true,
	}
}

// OptResponse is optional Response.
type OptResponse struct {
	Value Response
	Set   bool
}

// IsSet returns true if OptResponse was set.
func (o OptResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponse) Reset() {
	var v Response
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponse) SetTo(v Response) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponse) Get() (v Response, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptShippingAddress returns new OptShippingAddress with value set to v.
func NewOptShippingAddress(v ShippingAddress) OptShippingAddress {
	return OptShippingAddress{
		Value: v,
		Set:   true,
	}
}

// OptShippingAddress is optional ShippingAddress.
type OptShippingAddress struct {
	Value ShippingAddress
	Set   bool
}

// IsSet returns true if OptShippingAddress was set.
func (o OptShippingAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShippingAddress) Reset() {
	var v ShippingAddress
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShippingAddress) SetTo(v ShippingAddress) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShippingAddress) Get() (v ShippingAddress, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptShippingQuery returns new OptShippingQuery with value set to v.
func NewOptShippingQuery(v ShippingQuery) OptShippingQuery {
	return OptShippingQuery{
		Value: v,
		Set:   true,
	}
}

// OptShippingQuery is optional ShippingQuery.
type OptShippingQuery struct {
	Value ShippingQuery
	Set   bool
}

// IsSet returns true if OptShippingQuery was set.
func (o OptShippingQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShippingQuery) Reset() {
	var v ShippingQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShippingQuery) SetTo(v ShippingQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShippingQuery) Get() (v ShippingQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptSticker returns new OptSticker with value set to v.
func NewOptSticker(v Sticker) OptSticker {
	return OptSticker{
		Value: v,
		Set:   true,
	}
}

// OptSticker is optional Sticker.
type OptSticker struct {
	Value Sticker
	Set   bool
}

// IsSet returns true if OptSticker was set.
func (o OptSticker) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSticker) Reset() {
	var v Sticker
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSticker) SetTo(v Sticker) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSticker) Get() (v Sticker, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptSuccessfulPayment returns new OptSuccessfulPayment with value set to v.
func NewOptSuccessfulPayment(v SuccessfulPayment) OptSuccessfulPayment {
	return OptSuccessfulPayment{
		Value: v,
		Set:   true,
	}
}

// OptSuccessfulPayment is optional SuccessfulPayment.
type OptSuccessfulPayment struct {
	Value SuccessfulPayment
	Set   bool
}

// IsSet returns true if OptSuccessfulPayment was set.
func (o OptSuccessfulPayment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSuccessfulPayment) Reset() {
	var v SuccessfulPayment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSuccessfulPayment) SetTo(v SuccessfulPayment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSuccessfulPayment) Get() (v SuccessfulPayment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptURL returns new OptURL with value set to v.
func NewOptURL(v url.URL) OptURL {
	return OptURL{
		Value: v,
		Set:   true,
	}
}

// OptURL is optional url.URL.
type OptURL struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURL was set.
func (o OptURL) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURL) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURL) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURL) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptUpdate returns new OptUpdate with value set to v.
func NewOptUpdate(v Update) OptUpdate {
	return OptUpdate{
		Value: v,
		Set:   true,
	}
}

// OptUpdate is optional Update.
type OptUpdate struct {
	Value Update
	Set   bool
}

// IsSet returns true if OptUpdate was set.
func (o OptUpdate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdate) Reset() {
	var v Update
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdate) SetTo(v Update) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdate) Get() (v Update, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptUser returns new OptUser with value set to v.
func NewOptUser(v User) OptUser {
	return OptUser{
		Value: v,
		Set:   true,
	}
}

// OptUser is optional User.
type OptUser struct {
	Value User
	Set   bool
}

// IsSet returns true if OptUser was set.
func (o OptUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUser) Reset() {
	var v User
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUser) SetTo(v User) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUser) Get() (v User, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptVenue returns new OptVenue with value set to v.
func NewOptVenue(v Venue) OptVenue {
	return OptVenue{
		Value: v,
		Set:   true,
	}
}

// OptVenue is optional Venue.
type OptVenue struct {
	Value Venue
	Set   bool
}

// IsSet returns true if OptVenue was set.
func (o OptVenue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVenue) Reset() {
	var v Venue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVenue) SetTo(v Venue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVenue) Get() (v Venue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptVideo returns new OptVideo with value set to v.
func NewOptVideo(v Video) OptVideo {
	return OptVideo{
		Value: v,
		Set:   true,
	}
}

// OptVideo is optional Video.
type OptVideo struct {
	Value Video
	Set   bool
}

// IsSet returns true if OptVideo was set.
func (o OptVideo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideo) Reset() {
	var v Video
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideo) SetTo(v Video) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideo) Get() (v Video, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptVideoNote returns new OptVideoNote with value set to v.
func NewOptVideoNote(v VideoNote) OptVideoNote {
	return OptVideoNote{
		Value: v,
		Set:   true,
	}
}

// OptVideoNote is optional VideoNote.
type OptVideoNote struct {
	Value VideoNote
	Set   bool
}

// IsSet returns true if OptVideoNote was set.
func (o OptVideoNote) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoNote) Reset() {
	var v VideoNote
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoNote) SetTo(v VideoNote) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoNote) Get() (v VideoNote, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptVoice returns new OptVoice with value set to v.
func NewOptVoice(v Voice) OptVoice {
	return OptVoice{
		Value: v,
		Set:   true,
	}
}

// OptVoice is optional Voice.
type OptVoice struct {
	Value Voice
	Set   bool
}

// IsSet returns true if OptVoice was set.
func (o OptVoice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVoice) Reset() {
	var v Voice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVoice) SetTo(v Voice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVoice) Get() (v Voice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptVoiceChatEnded returns new OptVoiceChatEnded with value set to v.
func NewOptVoiceChatEnded(v VoiceChatEnded) OptVoiceChatEnded {
	return OptVoiceChatEnded{
		Value: v,
		Set:   true,
	}
}

// OptVoiceChatEnded is optional VoiceChatEnded.
type OptVoiceChatEnded struct {
	Value VoiceChatEnded
	Set   bool
}

// IsSet returns true if OptVoiceChatEnded was set.
func (o OptVoiceChatEnded) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVoiceChatEnded) Reset() {
	var v VoiceChatEnded
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVoiceChatEnded) SetTo(v VoiceChatEnded) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVoiceChatEnded) Get() (v VoiceChatEnded, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptVoiceChatParticipantsInvited returns new OptVoiceChatParticipantsInvited with value set to v.
func NewOptVoiceChatParticipantsInvited(v VoiceChatParticipantsInvited) OptVoiceChatParticipantsInvited {
	return OptVoiceChatParticipantsInvited{
		Value: v,
		Set:   true,
	}
}

// OptVoiceChatParticipantsInvited is optional VoiceChatParticipantsInvited.
type OptVoiceChatParticipantsInvited struct {
	Value VoiceChatParticipantsInvited
	Set   bool
}

// IsSet returns true if OptVoiceChatParticipantsInvited was set.
func (o OptVoiceChatParticipantsInvited) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVoiceChatParticipantsInvited) Reset() {
	var v VoiceChatParticipantsInvited
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVoiceChatParticipantsInvited) SetTo(v VoiceChatParticipantsInvited) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVoiceChatParticipantsInvited) Get() (v VoiceChatParticipantsInvited, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// NewOptVoiceChatScheduled returns new OptVoiceChatScheduled with value set to v.
func NewOptVoiceChatScheduled(v VoiceChatScheduled) OptVoiceChatScheduled {
	return OptVoiceChatScheduled{
		Value: v,
		Set:   true,
	}
}

// OptVoiceChatScheduled is optional VoiceChatScheduled.
type OptVoiceChatScheduled struct {
	Value VoiceChatScheduled
	Set   bool
}

// IsSet returns true if OptVoiceChatScheduled was set.
func (o OptVoiceChatScheduled) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVoiceChatScheduled) Reset() {
	var v VoiceChatScheduled
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVoiceChatScheduled) SetTo(v VoiceChatScheduled) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVoiceChatScheduled) Get() (v VoiceChatScheduled, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Ref: #/components/schemas/OrderInfo
type OrderInfo struct {
	Name            OptString          `json:"name"`
	PhoneNumber     OptString          `json:"phone_number"`
	Email           OptString          `json:"email"`
	ShippingAddress OptShippingAddress `json:"shipping_address"`
}

// Ref: #/components/schemas/PassportData
type PassportData struct {
	Data        []EncryptedPassportElement `json:"data"`
	Credentials EncryptedCredentials       `json:"credentials"`
}

// Ref: #/components/schemas/PassportElementError
// PassportElementError represents sum type.
type PassportElementError struct {
	Type                                 PassportElementErrorType // switch on this field
	PassportElementErrorDataField        PassportElementErrorDataField
	PassportElementErrorFrontSide        PassportElementErrorFrontSide
	PassportElementErrorReverseSide      PassportElementErrorReverseSide
	PassportElementErrorSelfie           PassportElementErrorSelfie
	PassportElementErrorFile             PassportElementErrorFile
	PassportElementErrorFiles            PassportElementErrorFiles
	PassportElementErrorTranslationFile  PassportElementErrorTranslationFile
	PassportElementErrorTranslationFiles PassportElementErrorTranslationFiles
	PassportElementErrorUnspecified      PassportElementErrorUnspecified
}

// PassportElementErrorType is oneOf type of PassportElementError.
type PassportElementErrorType string

// Possible values for PassportElementErrorType.
const (
	PassportElementErrorDataFieldPassportElementError        PassportElementErrorType = "PassportElementErrorDataField"
	PassportElementErrorFrontSidePassportElementError        PassportElementErrorType = "PassportElementErrorFrontSide"
	PassportElementErrorReverseSidePassportElementError      PassportElementErrorType = "PassportElementErrorReverseSide"
	PassportElementErrorSelfiePassportElementError           PassportElementErrorType = "PassportElementErrorSelfie"
	PassportElementErrorFilePassportElementError             PassportElementErrorType = "PassportElementErrorFile"
	PassportElementErrorFilesPassportElementError            PassportElementErrorType = "PassportElementErrorFiles"
	PassportElementErrorTranslationFilePassportElementError  PassportElementErrorType = "PassportElementErrorTranslationFile"
	PassportElementErrorTranslationFilesPassportElementError PassportElementErrorType = "PassportElementErrorTranslationFiles"
	PassportElementErrorUnspecifiedPassportElementError      PassportElementErrorType = "PassportElementErrorUnspecified"
)

// IsPassportElementErrorDataField reports whether PassportElementError is PassportElementErrorDataField.
func (s PassportElementError) IsPassportElementErrorDataField() bool {
	return s.Type == PassportElementErrorDataFieldPassportElementError
}

// IsPassportElementErrorFrontSide reports whether PassportElementError is PassportElementErrorFrontSide.
func (s PassportElementError) IsPassportElementErrorFrontSide() bool {
	return s.Type == PassportElementErrorFrontSidePassportElementError
}

// IsPassportElementErrorReverseSide reports whether PassportElementError is PassportElementErrorReverseSide.
func (s PassportElementError) IsPassportElementErrorReverseSide() bool {
	return s.Type == PassportElementErrorReverseSidePassportElementError
}

// IsPassportElementErrorSelfie reports whether PassportElementError is PassportElementErrorSelfie.
func (s PassportElementError) IsPassportElementErrorSelfie() bool {
	return s.Type == PassportElementErrorSelfiePassportElementError
}

// IsPassportElementErrorFile reports whether PassportElementError is PassportElementErrorFile.
func (s PassportElementError) IsPassportElementErrorFile() bool {
	return s.Type == PassportElementErrorFilePassportElementError
}

// IsPassportElementErrorFiles reports whether PassportElementError is PassportElementErrorFiles.
func (s PassportElementError) IsPassportElementErrorFiles() bool {
	return s.Type == PassportElementErrorFilesPassportElementError
}

// IsPassportElementErrorTranslationFile reports whether PassportElementError is PassportElementErrorTranslationFile.
func (s PassportElementError) IsPassportElementErrorTranslationFile() bool {
	return s.Type == PassportElementErrorTranslationFilePassportElementError
}

// IsPassportElementErrorTranslationFiles reports whether PassportElementError is PassportElementErrorTranslationFiles.
func (s PassportElementError) IsPassportElementErrorTranslationFiles() bool {
	return s.Type == PassportElementErrorTranslationFilesPassportElementError
}

// IsPassportElementErrorUnspecified reports whether PassportElementError is PassportElementErrorUnspecified.
func (s PassportElementError) IsPassportElementErrorUnspecified() bool {
	return s.Type == PassportElementErrorUnspecifiedPassportElementError
}

// SetPassportElementErrorDataField sets PassportElementError to PassportElementErrorDataField.
func (s *PassportElementError) SetPassportElementErrorDataField(v PassportElementErrorDataField) {
	s.Type = PassportElementErrorDataFieldPassportElementError
	s.PassportElementErrorDataField = v
}

// GetPassportElementErrorDataField returns PassportElementErrorDataField and true boolean if PassportElementError is PassportElementErrorDataField.
func (s PassportElementError) GetPassportElementErrorDataField() (v PassportElementErrorDataField, ok bool) {
	if !s.IsPassportElementErrorDataField() {
		return v, false
	}
	return s.PassportElementErrorDataField, true
}

// NewPassportElementErrorDataFieldPassportElementError returns new PassportElementError from PassportElementErrorDataField.
func NewPassportElementErrorDataFieldPassportElementError(v PassportElementErrorDataField) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorDataField(v)
	return s
}

// SetPassportElementErrorFrontSide sets PassportElementError to PassportElementErrorFrontSide.
func (s *PassportElementError) SetPassportElementErrorFrontSide(v PassportElementErrorFrontSide) {
	s.Type = PassportElementErrorFrontSidePassportElementError
	s.PassportElementErrorFrontSide = v
}

// GetPassportElementErrorFrontSide returns PassportElementErrorFrontSide and true boolean if PassportElementError is PassportElementErrorFrontSide.
func (s PassportElementError) GetPassportElementErrorFrontSide() (v PassportElementErrorFrontSide, ok bool) {
	if !s.IsPassportElementErrorFrontSide() {
		return v, false
	}
	return s.PassportElementErrorFrontSide, true
}

// NewPassportElementErrorFrontSidePassportElementError returns new PassportElementError from PassportElementErrorFrontSide.
func NewPassportElementErrorFrontSidePassportElementError(v PassportElementErrorFrontSide) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorFrontSide(v)
	return s
}

// SetPassportElementErrorReverseSide sets PassportElementError to PassportElementErrorReverseSide.
func (s *PassportElementError) SetPassportElementErrorReverseSide(v PassportElementErrorReverseSide) {
	s.Type = PassportElementErrorReverseSidePassportElementError
	s.PassportElementErrorReverseSide = v
}

// GetPassportElementErrorReverseSide returns PassportElementErrorReverseSide and true boolean if PassportElementError is PassportElementErrorReverseSide.
func (s PassportElementError) GetPassportElementErrorReverseSide() (v PassportElementErrorReverseSide, ok bool) {
	if !s.IsPassportElementErrorReverseSide() {
		return v, false
	}
	return s.PassportElementErrorReverseSide, true
}

// NewPassportElementErrorReverseSidePassportElementError returns new PassportElementError from PassportElementErrorReverseSide.
func NewPassportElementErrorReverseSidePassportElementError(v PassportElementErrorReverseSide) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorReverseSide(v)
	return s
}

// SetPassportElementErrorSelfie sets PassportElementError to PassportElementErrorSelfie.
func (s *PassportElementError) SetPassportElementErrorSelfie(v PassportElementErrorSelfie) {
	s.Type = PassportElementErrorSelfiePassportElementError
	s.PassportElementErrorSelfie = v
}

// GetPassportElementErrorSelfie returns PassportElementErrorSelfie and true boolean if PassportElementError is PassportElementErrorSelfie.
func (s PassportElementError) GetPassportElementErrorSelfie() (v PassportElementErrorSelfie, ok bool) {
	if !s.IsPassportElementErrorSelfie() {
		return v, false
	}
	return s.PassportElementErrorSelfie, true
}

// NewPassportElementErrorSelfiePassportElementError returns new PassportElementError from PassportElementErrorSelfie.
func NewPassportElementErrorSelfiePassportElementError(v PassportElementErrorSelfie) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorSelfie(v)
	return s
}

// SetPassportElementErrorFile sets PassportElementError to PassportElementErrorFile.
func (s *PassportElementError) SetPassportElementErrorFile(v PassportElementErrorFile) {
	s.Type = PassportElementErrorFilePassportElementError
	s.PassportElementErrorFile = v
}

// GetPassportElementErrorFile returns PassportElementErrorFile and true boolean if PassportElementError is PassportElementErrorFile.
func (s PassportElementError) GetPassportElementErrorFile() (v PassportElementErrorFile, ok bool) {
	if !s.IsPassportElementErrorFile() {
		return v, false
	}
	return s.PassportElementErrorFile, true
}

// NewPassportElementErrorFilePassportElementError returns new PassportElementError from PassportElementErrorFile.
func NewPassportElementErrorFilePassportElementError(v PassportElementErrorFile) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorFile(v)
	return s
}

// SetPassportElementErrorFiles sets PassportElementError to PassportElementErrorFiles.
func (s *PassportElementError) SetPassportElementErrorFiles(v PassportElementErrorFiles) {
	s.Type = PassportElementErrorFilesPassportElementError
	s.PassportElementErrorFiles = v
}

// GetPassportElementErrorFiles returns PassportElementErrorFiles and true boolean if PassportElementError is PassportElementErrorFiles.
func (s PassportElementError) GetPassportElementErrorFiles() (v PassportElementErrorFiles, ok bool) {
	if !s.IsPassportElementErrorFiles() {
		return v, false
	}
	return s.PassportElementErrorFiles, true
}

// NewPassportElementErrorFilesPassportElementError returns new PassportElementError from PassportElementErrorFiles.
func NewPassportElementErrorFilesPassportElementError(v PassportElementErrorFiles) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorFiles(v)
	return s
}

// SetPassportElementErrorTranslationFile sets PassportElementError to PassportElementErrorTranslationFile.
func (s *PassportElementError) SetPassportElementErrorTranslationFile(v PassportElementErrorTranslationFile) {
	s.Type = PassportElementErrorTranslationFilePassportElementError
	s.PassportElementErrorTranslationFile = v
}

// GetPassportElementErrorTranslationFile returns PassportElementErrorTranslationFile and true boolean if PassportElementError is PassportElementErrorTranslationFile.
func (s PassportElementError) GetPassportElementErrorTranslationFile() (v PassportElementErrorTranslationFile, ok bool) {
	if !s.IsPassportElementErrorTranslationFile() {
		return v, false
	}
	return s.PassportElementErrorTranslationFile, true
}

// NewPassportElementErrorTranslationFilePassportElementError returns new PassportElementError from PassportElementErrorTranslationFile.
func NewPassportElementErrorTranslationFilePassportElementError(v PassportElementErrorTranslationFile) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorTranslationFile(v)
	return s
}

// SetPassportElementErrorTranslationFiles sets PassportElementError to PassportElementErrorTranslationFiles.
func (s *PassportElementError) SetPassportElementErrorTranslationFiles(v PassportElementErrorTranslationFiles) {
	s.Type = PassportElementErrorTranslationFilesPassportElementError
	s.PassportElementErrorTranslationFiles = v
}

// GetPassportElementErrorTranslationFiles returns PassportElementErrorTranslationFiles and true boolean if PassportElementError is PassportElementErrorTranslationFiles.
func (s PassportElementError) GetPassportElementErrorTranslationFiles() (v PassportElementErrorTranslationFiles, ok bool) {
	if !s.IsPassportElementErrorTranslationFiles() {
		return v, false
	}
	return s.PassportElementErrorTranslationFiles, true
}

// NewPassportElementErrorTranslationFilesPassportElementError returns new PassportElementError from PassportElementErrorTranslationFiles.
func NewPassportElementErrorTranslationFilesPassportElementError(v PassportElementErrorTranslationFiles) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorTranslationFiles(v)
	return s
}

// SetPassportElementErrorUnspecified sets PassportElementError to PassportElementErrorUnspecified.
func (s *PassportElementError) SetPassportElementErrorUnspecified(v PassportElementErrorUnspecified) {
	s.Type = PassportElementErrorUnspecifiedPassportElementError
	s.PassportElementErrorUnspecified = v
}

// GetPassportElementErrorUnspecified returns PassportElementErrorUnspecified and true boolean if PassportElementError is PassportElementErrorUnspecified.
func (s PassportElementError) GetPassportElementErrorUnspecified() (v PassportElementErrorUnspecified, ok bool) {
	if !s.IsPassportElementErrorUnspecified() {
		return v, false
	}
	return s.PassportElementErrorUnspecified, true
}

// NewPassportElementErrorUnspecifiedPassportElementError returns new PassportElementError from PassportElementErrorUnspecified.
func NewPassportElementErrorUnspecifiedPassportElementError(v PassportElementErrorUnspecified) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorUnspecified(v)
	return s
}

// Ref: #/components/schemas/PassportElementErrorDataField
type PassportElementErrorDataField struct {
	Source    string `json:"source"`
	Type      string `json:"type"`
	FieldName string `json:"field_name"`
	DataHash  string `json:"data_hash"`
	Message   string `json:"message"`
}

// Ref: #/components/schemas/PassportElementErrorFile
type PassportElementErrorFile struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Ref: #/components/schemas/PassportElementErrorFiles
type PassportElementErrorFiles struct {
	Source     string   `json:"source"`
	Type       string   `json:"type"`
	FileHashes []string `json:"file_hashes"`
	Message    string   `json:"message"`
}

// Ref: #/components/schemas/PassportElementErrorFrontSide
type PassportElementErrorFrontSide struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Ref: #/components/schemas/PassportElementErrorReverseSide
type PassportElementErrorReverseSide struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Ref: #/components/schemas/PassportElementErrorSelfie
type PassportElementErrorSelfie struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Ref: #/components/schemas/PassportElementErrorTranslationFile
type PassportElementErrorTranslationFile struct {
	Source   string `json:"source"`
	Type     string `json:"type"`
	FileHash string `json:"file_hash"`
	Message  string `json:"message"`
}

// Ref: #/components/schemas/PassportElementErrorTranslationFiles
type PassportElementErrorTranslationFiles struct {
	Source     string   `json:"source"`
	Type       string   `json:"type"`
	FileHashes []string `json:"file_hashes"`
	Message    string   `json:"message"`
}

// Ref: #/components/schemas/PassportElementErrorUnspecified
type PassportElementErrorUnspecified struct {
	Source      string `json:"source"`
	Type        string `json:"type"`
	ElementHash string `json:"element_hash"`
	Message     string `json:"message"`
}

// Ref: #/components/schemas/PassportFile
type PassportFile struct {
	FileID       string `json:"file_id"`
	FileUniqueID string `json:"file_unique_id"`
	FileSize     int    `json:"file_size"`
	FileDate     int    `json:"file_date"`
}

// Ref: #/components/schemas/PhotoSize
type PhotoSize struct {
	FileID       string `json:"file_id"`
	FileUniqueID string `json:"file_unique_id"`
	Width        int    `json:"width"`
	Height       int    `json:"height"`
	FileSize     OptInt `json:"file_size"`
}

// Ref: #/components/schemas/pinChatMessage
type PinChatMessage struct {
	ChatID              ID      `json:"chat_id"`
	MessageID           int     `json:"message_id"`
	DisableNotification OptBool `json:"disable_notification"`
}

// Ref: #/components/schemas/Poll
type Poll struct {
	ID                    string          `json:"id"`
	Question              string          `json:"question"`
	Options               []PollOption    `json:"options"`
	TotalVoterCount       int             `json:"total_voter_count"`
	IsClosed              bool            `json:"is_closed"`
	IsAnonymous           bool            `json:"is_anonymous"`
	Type                  string          `json:"type"`
	AllowsMultipleAnswers bool            `json:"allows_multiple_answers"`
	CorrectOptionID       OptInt          `json:"correct_option_id"`
	Explanation           OptString       `json:"explanation"`
	ExplanationEntities   []MessageEntity `json:"explanation_entities"`
	OpenPeriod            OptInt          `json:"open_period"`
	CloseDate             OptInt          `json:"close_date"`
}

// Ref: #/components/schemas/PollAnswer
type PollAnswer struct {
	PollID    string `json:"poll_id"`
	User      User   `json:"user"`
	OptionIds []int  `json:"option_ids"`
}

// Ref: #/components/schemas/PollOption
type PollOption struct {
	Text       string `json:"text"`
	VoterCount int    `json:"voter_count"`
}

// Ref: #/components/schemas/PreCheckoutQuery
type PreCheckoutQuery struct {
	ID               string       `json:"id"`
	From             User         `json:"from"`
	Currency         string       `json:"currency"`
	TotalAmount      int          `json:"total_amount"`
	InvoicePayload   string       `json:"invoice_payload"`
	ShippingOptionID OptString    `json:"shipping_option_id"`
	OrderInfo        OptOrderInfo `json:"order_info"`
}

// Ref: #/components/schemas/promoteChatMember
type PromoteChatMember struct {
	ChatID              ID      `json:"chat_id"`
	UserID              int     `json:"user_id"`
	IsAnonymous         OptBool `json:"is_anonymous"`
	CanManageChat       OptBool `json:"can_manage_chat"`
	CanPostMessages     OptBool `json:"can_post_messages"`
	CanEditMessages     OptBool `json:"can_edit_messages"`
	CanDeleteMessages   OptBool `json:"can_delete_messages"`
	CanManageVoiceChats OptBool `json:"can_manage_voice_chats"`
	CanRestrictMembers  OptBool `json:"can_restrict_members"`
	CanPromoteMembers   OptBool `json:"can_promote_members"`
	CanChangeInfo       OptBool `json:"can_change_info"`
	CanInviteUsers      OptBool `json:"can_invite_users"`
	CanPinMessages      OptBool `json:"can_pin_messages"`
}

// Ref: #/components/schemas/ProximityAlertTriggered
type ProximityAlertTriggered struct {
	Traveler User `json:"traveler"`
	Watcher  User `json:"watcher"`
	Distance int  `json:"distance"`
}

// Ref: #/components/schemas/ReplyKeyboardMarkup
type ReplyKeyboardMarkup struct {
	Keyboard              [][]KeyboardButton `json:"keyboard"`
	ResizeKeyboard        OptBool            `json:"resize_keyboard"`
	OneTimeKeyboard       OptBool            `json:"one_time_keyboard"`
	InputFieldPlaceholder OptString          `json:"input_field_placeholder"`
	Selective             OptBool            `json:"selective"`
}

// Ref: #/components/schemas/ReplyKeyboardRemove
type ReplyKeyboardRemove struct {
	RemoveKeyboard bool    `json:"remove_keyboard"`
	Selective      OptBool `json:"selective"`
}

// Ref: #/components/schemas/Response
type Response struct {
	MigrateToChatID OptInt64 `json:"migrate_to_chat_id"`
	RetryAfter      OptInt   `json:"retry_after"`
}

// Ref: #/components/schemas/restrictChatMember
type RestrictChatMember struct {
	ChatID      ID              `json:"chat_id"`
	UserID      int             `json:"user_id"`
	Permissions ChatPermissions `json:"permissions"`
	UntilDate   OptInt          `json:"until_date"`
}

// Ref: #/components/schemas/Result
type Result struct {
	Result OptBool `json:"result"`
	Ok     bool    `json:"ok"`
}

type ResultArrayOfUpdate []ResultUpdate

// Ref: #/components/schemas/ResultMessage
type ResultMessage struct {
	Result OptMessage `json:"result"`
	Ok     bool       `json:"ok"`
}

// Ref: #/components/schemas/ResultUpdate
type ResultUpdate struct {
	Result OptUpdate `json:"result"`
	Ok     bool      `json:"ok"`
}

// Ref: #/components/schemas/ResultUser
type ResultUser struct {
	Result OptUser `json:"result"`
	Ok     bool    `json:"ok"`
}

// Ref: #/components/schemas/revokeChatInviteLink
type RevokeChatInviteLink struct {
	ChatID     ID     `json:"chat_id"`
	InviteLink string `json:"invite_link"`
}

// Ref: #/components/schemas/sendAnimation
type SendAnimation struct {
	ChatID                   ID                        `json:"chat_id"`
	Animation                string                    `json:"animation"`
	Duration                 OptInt                    `json:"duration"`
	Width                    OptInt                    `json:"width"`
	Height                   OptInt                    `json:"height"`
	Thumb                    OptString                 `json:"thumb"`
	Caption                  OptString                 `json:"caption"`
	ParseMode                OptString                 `json:"parse_mode"`
	CaptionEntities          []MessageEntity           `json:"caption_entities"`
	DisableNotification      OptBool                   `json:"disable_notification"`
	ReplyToMessageID         OptInt                    `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool                   `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendAnimationReplyMarkup `json:"reply_markup"`
}

// SendAnimationReplyMarkup represents sum type.
type SendAnimationReplyMarkup struct {
	Type                 SendAnimationReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendAnimationReplyMarkupType is oneOf type of SendAnimationReplyMarkup.
type SendAnimationReplyMarkupType string

// Possible values for SendAnimationReplyMarkupType.
const (
	InlineKeyboardMarkupSendAnimationReplyMarkup SendAnimationReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendAnimationReplyMarkup  SendAnimationReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendAnimationReplyMarkup  SendAnimationReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendAnimationReplyMarkup           SendAnimationReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendAnimationReplyMarkup is InlineKeyboardMarkup.
func (s SendAnimationReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendAnimationReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendAnimationReplyMarkup is ReplyKeyboardMarkup.
func (s SendAnimationReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendAnimationReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendAnimationReplyMarkup is ReplyKeyboardRemove.
func (s SendAnimationReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendAnimationReplyMarkup
}

// IsForceReply reports whether SendAnimationReplyMarkup is ForceReply.
func (s SendAnimationReplyMarkup) IsForceReply() bool {
	return s.Type == ForceReplySendAnimationReplyMarkup
}

// SetInlineKeyboardMarkup sets SendAnimationReplyMarkup to InlineKeyboardMarkup.
func (s *SendAnimationReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendAnimationReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendAnimationReplyMarkup is InlineKeyboardMarkup.
func (s SendAnimationReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendAnimationReplyMarkup returns new SendAnimationReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendAnimationReplyMarkup(v InlineKeyboardMarkup) SendAnimationReplyMarkup {
	var s SendAnimationReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendAnimationReplyMarkup to ReplyKeyboardMarkup.
func (s *SendAnimationReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendAnimationReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendAnimationReplyMarkup is ReplyKeyboardMarkup.
func (s SendAnimationReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendAnimationReplyMarkup returns new SendAnimationReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendAnimationReplyMarkup(v ReplyKeyboardMarkup) SendAnimationReplyMarkup {
	var s SendAnimationReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendAnimationReplyMarkup to ReplyKeyboardRemove.
func (s *SendAnimationReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendAnimationReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendAnimationReplyMarkup is ReplyKeyboardRemove.
func (s SendAnimationReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendAnimationReplyMarkup returns new SendAnimationReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendAnimationReplyMarkup(v ReplyKeyboardRemove) SendAnimationReplyMarkup {
	var s SendAnimationReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendAnimationReplyMarkup to ForceReply.
func (s *SendAnimationReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendAnimationReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendAnimationReplyMarkup is ForceReply.
func (s SendAnimationReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendAnimationReplyMarkup returns new SendAnimationReplyMarkup from ForceReply.
func NewForceReplySendAnimationReplyMarkup(v ForceReply) SendAnimationReplyMarkup {
	var s SendAnimationReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendAudio
type SendAudio struct {
	ChatID                   ID                    `json:"chat_id"`
	Audio                    string                `json:"audio"`
	Caption                  OptString             `json:"caption"`
	ParseMode                OptString             `json:"parse_mode"`
	CaptionEntities          []MessageEntity       `json:"caption_entities"`
	Duration                 OptInt                `json:"duration"`
	Performer                OptString             `json:"performer"`
	Title                    OptString             `json:"title"`
	Thumb                    OptString             `json:"thumb"`
	DisableNotification      OptBool               `json:"disable_notification"`
	ReplyToMessageID         OptInt                `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool               `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendAudioReplyMarkup `json:"reply_markup"`
}

// SendAudioReplyMarkup represents sum type.
type SendAudioReplyMarkup struct {
	Type                 SendAudioReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendAudioReplyMarkupType is oneOf type of SendAudioReplyMarkup.
type SendAudioReplyMarkupType string

// Possible values for SendAudioReplyMarkupType.
const (
	InlineKeyboardMarkupSendAudioReplyMarkup SendAudioReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendAudioReplyMarkup  SendAudioReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendAudioReplyMarkup  SendAudioReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendAudioReplyMarkup           SendAudioReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendAudioReplyMarkup is InlineKeyboardMarkup.
func (s SendAudioReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendAudioReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendAudioReplyMarkup is ReplyKeyboardMarkup.
func (s SendAudioReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendAudioReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendAudioReplyMarkup is ReplyKeyboardRemove.
func (s SendAudioReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendAudioReplyMarkup
}

// IsForceReply reports whether SendAudioReplyMarkup is ForceReply.
func (s SendAudioReplyMarkup) IsForceReply() bool { return s.Type == ForceReplySendAudioReplyMarkup }

// SetInlineKeyboardMarkup sets SendAudioReplyMarkup to InlineKeyboardMarkup.
func (s *SendAudioReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendAudioReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendAudioReplyMarkup is InlineKeyboardMarkup.
func (s SendAudioReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendAudioReplyMarkup returns new SendAudioReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendAudioReplyMarkup(v InlineKeyboardMarkup) SendAudioReplyMarkup {
	var s SendAudioReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendAudioReplyMarkup to ReplyKeyboardMarkup.
func (s *SendAudioReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendAudioReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendAudioReplyMarkup is ReplyKeyboardMarkup.
func (s SendAudioReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendAudioReplyMarkup returns new SendAudioReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendAudioReplyMarkup(v ReplyKeyboardMarkup) SendAudioReplyMarkup {
	var s SendAudioReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendAudioReplyMarkup to ReplyKeyboardRemove.
func (s *SendAudioReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendAudioReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendAudioReplyMarkup is ReplyKeyboardRemove.
func (s SendAudioReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendAudioReplyMarkup returns new SendAudioReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendAudioReplyMarkup(v ReplyKeyboardRemove) SendAudioReplyMarkup {
	var s SendAudioReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendAudioReplyMarkup to ForceReply.
func (s *SendAudioReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendAudioReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendAudioReplyMarkup is ForceReply.
func (s SendAudioReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendAudioReplyMarkup returns new SendAudioReplyMarkup from ForceReply.
func NewForceReplySendAudioReplyMarkup(v ForceReply) SendAudioReplyMarkup {
	var s SendAudioReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendChatAction
type SendChatAction struct {
	ChatID ID     `json:"chat_id"`
	Action string `json:"action"`
}

// Ref: #/components/schemas/sendContact
type SendContact struct {
	ChatID                   ID                      `json:"chat_id"`
	PhoneNumber              string                  `json:"phone_number"`
	FirstName                string                  `json:"first_name"`
	LastName                 OptString               `json:"last_name"`
	Vcard                    OptString               `json:"vcard"`
	DisableNotification      OptBool                 `json:"disable_notification"`
	ReplyToMessageID         OptInt                  `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool                 `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendContactReplyMarkup `json:"reply_markup"`
}

// SendContactReplyMarkup represents sum type.
type SendContactReplyMarkup struct {
	Type                 SendContactReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendContactReplyMarkupType is oneOf type of SendContactReplyMarkup.
type SendContactReplyMarkupType string

// Possible values for SendContactReplyMarkupType.
const (
	InlineKeyboardMarkupSendContactReplyMarkup SendContactReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendContactReplyMarkup  SendContactReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendContactReplyMarkup  SendContactReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendContactReplyMarkup           SendContactReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendContactReplyMarkup is InlineKeyboardMarkup.
func (s SendContactReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendContactReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendContactReplyMarkup is ReplyKeyboardMarkup.
func (s SendContactReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendContactReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendContactReplyMarkup is ReplyKeyboardRemove.
func (s SendContactReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendContactReplyMarkup
}

// IsForceReply reports whether SendContactReplyMarkup is ForceReply.
func (s SendContactReplyMarkup) IsForceReply() bool {
	return s.Type == ForceReplySendContactReplyMarkup
}

// SetInlineKeyboardMarkup sets SendContactReplyMarkup to InlineKeyboardMarkup.
func (s *SendContactReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendContactReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendContactReplyMarkup is InlineKeyboardMarkup.
func (s SendContactReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendContactReplyMarkup returns new SendContactReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendContactReplyMarkup(v InlineKeyboardMarkup) SendContactReplyMarkup {
	var s SendContactReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendContactReplyMarkup to ReplyKeyboardMarkup.
func (s *SendContactReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendContactReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendContactReplyMarkup is ReplyKeyboardMarkup.
func (s SendContactReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendContactReplyMarkup returns new SendContactReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendContactReplyMarkup(v ReplyKeyboardMarkup) SendContactReplyMarkup {
	var s SendContactReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendContactReplyMarkup to ReplyKeyboardRemove.
func (s *SendContactReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendContactReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendContactReplyMarkup is ReplyKeyboardRemove.
func (s SendContactReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendContactReplyMarkup returns new SendContactReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendContactReplyMarkup(v ReplyKeyboardRemove) SendContactReplyMarkup {
	var s SendContactReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendContactReplyMarkup to ForceReply.
func (s *SendContactReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendContactReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendContactReplyMarkup is ForceReply.
func (s SendContactReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendContactReplyMarkup returns new SendContactReplyMarkup from ForceReply.
func NewForceReplySendContactReplyMarkup(v ForceReply) SendContactReplyMarkup {
	var s SendContactReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendDice
type SendDice struct {
	ChatID                   ID                   `json:"chat_id"`
	Emoji                    OptString            `json:"emoji"`
	DisableNotification      OptBool              `json:"disable_notification"`
	ReplyToMessageID         OptInt               `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool              `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendDiceReplyMarkup `json:"reply_markup"`
}

// SendDiceReplyMarkup represents sum type.
type SendDiceReplyMarkup struct {
	Type                 SendDiceReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendDiceReplyMarkupType is oneOf type of SendDiceReplyMarkup.
type SendDiceReplyMarkupType string

// Possible values for SendDiceReplyMarkupType.
const (
	InlineKeyboardMarkupSendDiceReplyMarkup SendDiceReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendDiceReplyMarkup  SendDiceReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendDiceReplyMarkup  SendDiceReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendDiceReplyMarkup           SendDiceReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendDiceReplyMarkup is InlineKeyboardMarkup.
func (s SendDiceReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendDiceReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendDiceReplyMarkup is ReplyKeyboardMarkup.
func (s SendDiceReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendDiceReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendDiceReplyMarkup is ReplyKeyboardRemove.
func (s SendDiceReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendDiceReplyMarkup
}

// IsForceReply reports whether SendDiceReplyMarkup is ForceReply.
func (s SendDiceReplyMarkup) IsForceReply() bool { return s.Type == ForceReplySendDiceReplyMarkup }

// SetInlineKeyboardMarkup sets SendDiceReplyMarkup to InlineKeyboardMarkup.
func (s *SendDiceReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendDiceReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendDiceReplyMarkup is InlineKeyboardMarkup.
func (s SendDiceReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendDiceReplyMarkup returns new SendDiceReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendDiceReplyMarkup(v InlineKeyboardMarkup) SendDiceReplyMarkup {
	var s SendDiceReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendDiceReplyMarkup to ReplyKeyboardMarkup.
func (s *SendDiceReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendDiceReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendDiceReplyMarkup is ReplyKeyboardMarkup.
func (s SendDiceReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendDiceReplyMarkup returns new SendDiceReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendDiceReplyMarkup(v ReplyKeyboardMarkup) SendDiceReplyMarkup {
	var s SendDiceReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendDiceReplyMarkup to ReplyKeyboardRemove.
func (s *SendDiceReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendDiceReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendDiceReplyMarkup is ReplyKeyboardRemove.
func (s SendDiceReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendDiceReplyMarkup returns new SendDiceReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendDiceReplyMarkup(v ReplyKeyboardRemove) SendDiceReplyMarkup {
	var s SendDiceReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendDiceReplyMarkup to ForceReply.
func (s *SendDiceReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendDiceReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendDiceReplyMarkup is ForceReply.
func (s SendDiceReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendDiceReplyMarkup returns new SendDiceReplyMarkup from ForceReply.
func NewForceReplySendDiceReplyMarkup(v ForceReply) SendDiceReplyMarkup {
	var s SendDiceReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendDocument
type SendDocument struct {
	ChatID                      ID                       `json:"chat_id"`
	Document                    string                   `json:"document"`
	Thumb                       OptString                `json:"thumb"`
	Caption                     OptString                `json:"caption"`
	ParseMode                   OptString                `json:"parse_mode"`
	CaptionEntities             []MessageEntity          `json:"caption_entities"`
	DisableContentTypeDetection OptBool                  `json:"disable_content_type_detection"`
	DisableNotification         OptBool                  `json:"disable_notification"`
	ReplyToMessageID            OptInt                   `json:"reply_to_message_id"`
	AllowSendingWithoutReply    OptBool                  `json:"allow_sending_without_reply"`
	ReplyMarkup                 *SendDocumentReplyMarkup `json:"reply_markup"`
}

// SendDocumentReplyMarkup represents sum type.
type SendDocumentReplyMarkup struct {
	Type                 SendDocumentReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendDocumentReplyMarkupType is oneOf type of SendDocumentReplyMarkup.
type SendDocumentReplyMarkupType string

// Possible values for SendDocumentReplyMarkupType.
const (
	InlineKeyboardMarkupSendDocumentReplyMarkup SendDocumentReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendDocumentReplyMarkup  SendDocumentReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendDocumentReplyMarkup  SendDocumentReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendDocumentReplyMarkup           SendDocumentReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendDocumentReplyMarkup is InlineKeyboardMarkup.
func (s SendDocumentReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendDocumentReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendDocumentReplyMarkup is ReplyKeyboardMarkup.
func (s SendDocumentReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendDocumentReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendDocumentReplyMarkup is ReplyKeyboardRemove.
func (s SendDocumentReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendDocumentReplyMarkup
}

// IsForceReply reports whether SendDocumentReplyMarkup is ForceReply.
func (s SendDocumentReplyMarkup) IsForceReply() bool {
	return s.Type == ForceReplySendDocumentReplyMarkup
}

// SetInlineKeyboardMarkup sets SendDocumentReplyMarkup to InlineKeyboardMarkup.
func (s *SendDocumentReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendDocumentReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendDocumentReplyMarkup is InlineKeyboardMarkup.
func (s SendDocumentReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendDocumentReplyMarkup returns new SendDocumentReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendDocumentReplyMarkup(v InlineKeyboardMarkup) SendDocumentReplyMarkup {
	var s SendDocumentReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendDocumentReplyMarkup to ReplyKeyboardMarkup.
func (s *SendDocumentReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendDocumentReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendDocumentReplyMarkup is ReplyKeyboardMarkup.
func (s SendDocumentReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendDocumentReplyMarkup returns new SendDocumentReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendDocumentReplyMarkup(v ReplyKeyboardMarkup) SendDocumentReplyMarkup {
	var s SendDocumentReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendDocumentReplyMarkup to ReplyKeyboardRemove.
func (s *SendDocumentReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendDocumentReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendDocumentReplyMarkup is ReplyKeyboardRemove.
func (s SendDocumentReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendDocumentReplyMarkup returns new SendDocumentReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendDocumentReplyMarkup(v ReplyKeyboardRemove) SendDocumentReplyMarkup {
	var s SendDocumentReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendDocumentReplyMarkup to ForceReply.
func (s *SendDocumentReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendDocumentReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendDocumentReplyMarkup is ForceReply.
func (s SendDocumentReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendDocumentReplyMarkup returns new SendDocumentReplyMarkup from ForceReply.
func NewForceReplySendDocumentReplyMarkup(v ForceReply) SendDocumentReplyMarkup {
	var s SendDocumentReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendGame
type SendGame struct {
	ChatID                   int                     `json:"chat_id"`
	GameShortName            string                  `json:"game_short_name"`
	DisableNotification      OptBool                 `json:"disable_notification"`
	ReplyToMessageID         OptInt                  `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool                 `json:"allow_sending_without_reply"`
	ReplyMarkup              OptInlineKeyboardMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/sendInvoice
type SendInvoice struct {
	ChatID                    ID                      `json:"chat_id"`
	Title                     string                  `json:"title"`
	Description               string                  `json:"description"`
	Payload                   string                  `json:"payload"`
	ProviderToken             string                  `json:"provider_token"`
	Currency                  string                  `json:"currency"`
	Prices                    []LabeledPrice          `json:"prices"`
	MaxTipAmount              OptInt                  `json:"max_tip_amount"`
	SuggestedTipAmounts       []int                   `json:"suggested_tip_amounts"`
	StartParameter            OptString               `json:"start_parameter"`
	ProviderData              OptString               `json:"provider_data"`
	PhotoURL                  OptURL                  `json:"photo_url"`
	PhotoSize                 OptInt                  `json:"photo_size"`
	PhotoWidth                OptInt                  `json:"photo_width"`
	PhotoHeight               OptInt                  `json:"photo_height"`
	NeedName                  OptBool                 `json:"need_name"`
	NeedPhoneNumber           OptBool                 `json:"need_phone_number"`
	NeedEmail                 OptBool                 `json:"need_email"`
	NeedShippingAddress       OptBool                 `json:"need_shipping_address"`
	SendPhoneNumberToProvider OptBool                 `json:"send_phone_number_to_provider"`
	SendEmailToProvider       OptBool                 `json:"send_email_to_provider"`
	IsFlexible                OptBool                 `json:"is_flexible"`
	DisableNotification       OptBool                 `json:"disable_notification"`
	ReplyToMessageID          OptInt                  `json:"reply_to_message_id"`
	AllowSendingWithoutReply  OptBool                 `json:"allow_sending_without_reply"`
	ReplyMarkup               OptInlineKeyboardMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/sendLocation
type SendLocation struct {
	ChatID                   ID                       `json:"chat_id"`
	Latitude                 float64                  `json:"latitude"`
	Longitude                float64                  `json:"longitude"`
	HorizontalAccuracy       OptFloat64               `json:"horizontal_accuracy"`
	LivePeriod               OptInt                   `json:"live_period"`
	Heading                  OptInt                   `json:"heading"`
	ProximityAlertRadius     OptInt                   `json:"proximity_alert_radius"`
	DisableNotification      OptBool                  `json:"disable_notification"`
	ReplyToMessageID         OptInt                   `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool                  `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendLocationReplyMarkup `json:"reply_markup"`
}

// SendLocationReplyMarkup represents sum type.
type SendLocationReplyMarkup struct {
	Type                 SendLocationReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendLocationReplyMarkupType is oneOf type of SendLocationReplyMarkup.
type SendLocationReplyMarkupType string

// Possible values for SendLocationReplyMarkupType.
const (
	InlineKeyboardMarkupSendLocationReplyMarkup SendLocationReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendLocationReplyMarkup  SendLocationReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendLocationReplyMarkup  SendLocationReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendLocationReplyMarkup           SendLocationReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendLocationReplyMarkup is InlineKeyboardMarkup.
func (s SendLocationReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendLocationReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendLocationReplyMarkup is ReplyKeyboardMarkup.
func (s SendLocationReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendLocationReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendLocationReplyMarkup is ReplyKeyboardRemove.
func (s SendLocationReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendLocationReplyMarkup
}

// IsForceReply reports whether SendLocationReplyMarkup is ForceReply.
func (s SendLocationReplyMarkup) IsForceReply() bool {
	return s.Type == ForceReplySendLocationReplyMarkup
}

// SetInlineKeyboardMarkup sets SendLocationReplyMarkup to InlineKeyboardMarkup.
func (s *SendLocationReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendLocationReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendLocationReplyMarkup is InlineKeyboardMarkup.
func (s SendLocationReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendLocationReplyMarkup returns new SendLocationReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendLocationReplyMarkup(v InlineKeyboardMarkup) SendLocationReplyMarkup {
	var s SendLocationReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendLocationReplyMarkup to ReplyKeyboardMarkup.
func (s *SendLocationReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendLocationReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendLocationReplyMarkup is ReplyKeyboardMarkup.
func (s SendLocationReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendLocationReplyMarkup returns new SendLocationReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendLocationReplyMarkup(v ReplyKeyboardMarkup) SendLocationReplyMarkup {
	var s SendLocationReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendLocationReplyMarkup to ReplyKeyboardRemove.
func (s *SendLocationReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendLocationReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendLocationReplyMarkup is ReplyKeyboardRemove.
func (s SendLocationReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendLocationReplyMarkup returns new SendLocationReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendLocationReplyMarkup(v ReplyKeyboardRemove) SendLocationReplyMarkup {
	var s SendLocationReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendLocationReplyMarkup to ForceReply.
func (s *SendLocationReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendLocationReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendLocationReplyMarkup is ForceReply.
func (s SendLocationReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendLocationReplyMarkup returns new SendLocationReplyMarkup from ForceReply.
func NewForceReplySendLocationReplyMarkup(v ForceReply) SendLocationReplyMarkup {
	var s SendLocationReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendMediaGroup
type SendMediaGroup struct {
	ChatID                   ID                        `json:"chat_id"`
	Media                    []SendMediaGroupMediaItem `json:"media"`
	DisableNotification      OptBool                   `json:"disable_notification"`
	ReplyToMessageID         OptInt                    `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool                   `json:"allow_sending_without_reply"`
}

// SendMediaGroupMediaItem represents sum type.
type SendMediaGroupMediaItem struct {
	Type               SendMediaGroupMediaItemType // switch on this field
	InputMediaAudio    InputMediaAudio
	InputMediaDocument InputMediaDocument
	InputMediaPhoto    InputMediaPhoto
	InputMediaVideo    InputMediaVideo
}

// SendMediaGroupMediaItemType is oneOf type of SendMediaGroupMediaItem.
type SendMediaGroupMediaItemType string

// Possible values for SendMediaGroupMediaItemType.
const (
	InputMediaAudioSendMediaGroupMediaItem    SendMediaGroupMediaItemType = "InputMediaAudio"
	InputMediaDocumentSendMediaGroupMediaItem SendMediaGroupMediaItemType = "InputMediaDocument"
	InputMediaPhotoSendMediaGroupMediaItem    SendMediaGroupMediaItemType = "InputMediaPhoto"
	InputMediaVideoSendMediaGroupMediaItem    SendMediaGroupMediaItemType = "InputMediaVideo"
)

// IsInputMediaAudio reports whether SendMediaGroupMediaItem is InputMediaAudio.
func (s SendMediaGroupMediaItem) IsInputMediaAudio() bool {
	return s.Type == InputMediaAudioSendMediaGroupMediaItem
}

// IsInputMediaDocument reports whether SendMediaGroupMediaItem is InputMediaDocument.
func (s SendMediaGroupMediaItem) IsInputMediaDocument() bool {
	return s.Type == InputMediaDocumentSendMediaGroupMediaItem
}

// IsInputMediaPhoto reports whether SendMediaGroupMediaItem is InputMediaPhoto.
func (s SendMediaGroupMediaItem) IsInputMediaPhoto() bool {
	return s.Type == InputMediaPhotoSendMediaGroupMediaItem
}

// IsInputMediaVideo reports whether SendMediaGroupMediaItem is InputMediaVideo.
func (s SendMediaGroupMediaItem) IsInputMediaVideo() bool {
	return s.Type == InputMediaVideoSendMediaGroupMediaItem
}

// SetInputMediaAudio sets SendMediaGroupMediaItem to InputMediaAudio.
func (s *SendMediaGroupMediaItem) SetInputMediaAudio(v InputMediaAudio) {
	s.Type = InputMediaAudioSendMediaGroupMediaItem
	s.InputMediaAudio = v
}

// GetInputMediaAudio returns InputMediaAudio and true boolean if SendMediaGroupMediaItem is InputMediaAudio.
func (s SendMediaGroupMediaItem) GetInputMediaAudio() (v InputMediaAudio, ok bool) {
	if !s.IsInputMediaAudio() {
		return v, false
	}
	return s.InputMediaAudio, true
}

// NewInputMediaAudioSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaAudio.
func NewInputMediaAudioSendMediaGroupMediaItem(v InputMediaAudio) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaAudio(v)
	return s
}

// SetInputMediaDocument sets SendMediaGroupMediaItem to InputMediaDocument.
func (s *SendMediaGroupMediaItem) SetInputMediaDocument(v InputMediaDocument) {
	s.Type = InputMediaDocumentSendMediaGroupMediaItem
	s.InputMediaDocument = v
}

// GetInputMediaDocument returns InputMediaDocument and true boolean if SendMediaGroupMediaItem is InputMediaDocument.
func (s SendMediaGroupMediaItem) GetInputMediaDocument() (v InputMediaDocument, ok bool) {
	if !s.IsInputMediaDocument() {
		return v, false
	}
	return s.InputMediaDocument, true
}

// NewInputMediaDocumentSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaDocument.
func NewInputMediaDocumentSendMediaGroupMediaItem(v InputMediaDocument) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaDocument(v)
	return s
}

// SetInputMediaPhoto sets SendMediaGroupMediaItem to InputMediaPhoto.
func (s *SendMediaGroupMediaItem) SetInputMediaPhoto(v InputMediaPhoto) {
	s.Type = InputMediaPhotoSendMediaGroupMediaItem
	s.InputMediaPhoto = v
}

// GetInputMediaPhoto returns InputMediaPhoto and true boolean if SendMediaGroupMediaItem is InputMediaPhoto.
func (s SendMediaGroupMediaItem) GetInputMediaPhoto() (v InputMediaPhoto, ok bool) {
	if !s.IsInputMediaPhoto() {
		return v, false
	}
	return s.InputMediaPhoto, true
}

// NewInputMediaPhotoSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaPhoto.
func NewInputMediaPhotoSendMediaGroupMediaItem(v InputMediaPhoto) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaPhoto(v)
	return s
}

// SetInputMediaVideo sets SendMediaGroupMediaItem to InputMediaVideo.
func (s *SendMediaGroupMediaItem) SetInputMediaVideo(v InputMediaVideo) {
	s.Type = InputMediaVideoSendMediaGroupMediaItem
	s.InputMediaVideo = v
}

// GetInputMediaVideo returns InputMediaVideo and true boolean if SendMediaGroupMediaItem is InputMediaVideo.
func (s SendMediaGroupMediaItem) GetInputMediaVideo() (v InputMediaVideo, ok bool) {
	if !s.IsInputMediaVideo() {
		return v, false
	}
	return s.InputMediaVideo, true
}

// NewInputMediaVideoSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaVideo.
func NewInputMediaVideoSendMediaGroupMediaItem(v InputMediaVideo) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaVideo(v)
	return s
}

// Ref: #/components/schemas/sendMessage
type SendMessage struct {
	ChatID                   ID                      `json:"chat_id"`
	Text                     string                  `json:"text"`
	ParseMode                OptString               `json:"parse_mode"`
	Entities                 []MessageEntity         `json:"entities"`
	DisableWebPagePreview    OptBool                 `json:"disable_web_page_preview"`
	DisableNotification      OptBool                 `json:"disable_notification"`
	ReplyToMessageID         OptInt                  `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool                 `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendMessageReplyMarkup `json:"reply_markup"`
}

// SendMessageReplyMarkup represents sum type.
type SendMessageReplyMarkup struct {
	Type                 SendMessageReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendMessageReplyMarkupType is oneOf type of SendMessageReplyMarkup.
type SendMessageReplyMarkupType string

// Possible values for SendMessageReplyMarkupType.
const (
	InlineKeyboardMarkupSendMessageReplyMarkup SendMessageReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendMessageReplyMarkup  SendMessageReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendMessageReplyMarkup  SendMessageReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendMessageReplyMarkup           SendMessageReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendMessageReplyMarkup is InlineKeyboardMarkup.
func (s SendMessageReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendMessageReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendMessageReplyMarkup is ReplyKeyboardMarkup.
func (s SendMessageReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendMessageReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendMessageReplyMarkup is ReplyKeyboardRemove.
func (s SendMessageReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendMessageReplyMarkup
}

// IsForceReply reports whether SendMessageReplyMarkup is ForceReply.
func (s SendMessageReplyMarkup) IsForceReply() bool {
	return s.Type == ForceReplySendMessageReplyMarkup
}

// SetInlineKeyboardMarkup sets SendMessageReplyMarkup to InlineKeyboardMarkup.
func (s *SendMessageReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendMessageReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendMessageReplyMarkup is InlineKeyboardMarkup.
func (s SendMessageReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendMessageReplyMarkup returns new SendMessageReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendMessageReplyMarkup(v InlineKeyboardMarkup) SendMessageReplyMarkup {
	var s SendMessageReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendMessageReplyMarkup to ReplyKeyboardMarkup.
func (s *SendMessageReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendMessageReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendMessageReplyMarkup is ReplyKeyboardMarkup.
func (s SendMessageReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendMessageReplyMarkup returns new SendMessageReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendMessageReplyMarkup(v ReplyKeyboardMarkup) SendMessageReplyMarkup {
	var s SendMessageReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendMessageReplyMarkup to ReplyKeyboardRemove.
func (s *SendMessageReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendMessageReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendMessageReplyMarkup is ReplyKeyboardRemove.
func (s SendMessageReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendMessageReplyMarkup returns new SendMessageReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendMessageReplyMarkup(v ReplyKeyboardRemove) SendMessageReplyMarkup {
	var s SendMessageReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendMessageReplyMarkup to ForceReply.
func (s *SendMessageReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendMessageReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendMessageReplyMarkup is ForceReply.
func (s SendMessageReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendMessageReplyMarkup returns new SendMessageReplyMarkup from ForceReply.
func NewForceReplySendMessageReplyMarkup(v ForceReply) SendMessageReplyMarkup {
	var s SendMessageReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendPhoto
type SendPhoto struct {
	ChatID                   ID                    `json:"chat_id"`
	Photo                    string                `json:"photo"`
	Caption                  OptString             `json:"caption"`
	ParseMode                OptString             `json:"parse_mode"`
	CaptionEntities          []MessageEntity       `json:"caption_entities"`
	DisableNotification      OptBool               `json:"disable_notification"`
	ReplyToMessageID         OptInt                `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool               `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendPhotoReplyMarkup `json:"reply_markup"`
}

// SendPhotoReplyMarkup represents sum type.
type SendPhotoReplyMarkup struct {
	Type                 SendPhotoReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendPhotoReplyMarkupType is oneOf type of SendPhotoReplyMarkup.
type SendPhotoReplyMarkupType string

// Possible values for SendPhotoReplyMarkupType.
const (
	InlineKeyboardMarkupSendPhotoReplyMarkup SendPhotoReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendPhotoReplyMarkup  SendPhotoReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendPhotoReplyMarkup  SendPhotoReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendPhotoReplyMarkup           SendPhotoReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendPhotoReplyMarkup is InlineKeyboardMarkup.
func (s SendPhotoReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendPhotoReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendPhotoReplyMarkup is ReplyKeyboardMarkup.
func (s SendPhotoReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendPhotoReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendPhotoReplyMarkup is ReplyKeyboardRemove.
func (s SendPhotoReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendPhotoReplyMarkup
}

// IsForceReply reports whether SendPhotoReplyMarkup is ForceReply.
func (s SendPhotoReplyMarkup) IsForceReply() bool { return s.Type == ForceReplySendPhotoReplyMarkup }

// SetInlineKeyboardMarkup sets SendPhotoReplyMarkup to InlineKeyboardMarkup.
func (s *SendPhotoReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendPhotoReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendPhotoReplyMarkup is InlineKeyboardMarkup.
func (s SendPhotoReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendPhotoReplyMarkup returns new SendPhotoReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendPhotoReplyMarkup(v InlineKeyboardMarkup) SendPhotoReplyMarkup {
	var s SendPhotoReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendPhotoReplyMarkup to ReplyKeyboardMarkup.
func (s *SendPhotoReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendPhotoReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendPhotoReplyMarkup is ReplyKeyboardMarkup.
func (s SendPhotoReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendPhotoReplyMarkup returns new SendPhotoReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendPhotoReplyMarkup(v ReplyKeyboardMarkup) SendPhotoReplyMarkup {
	var s SendPhotoReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendPhotoReplyMarkup to ReplyKeyboardRemove.
func (s *SendPhotoReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendPhotoReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendPhotoReplyMarkup is ReplyKeyboardRemove.
func (s SendPhotoReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendPhotoReplyMarkup returns new SendPhotoReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendPhotoReplyMarkup(v ReplyKeyboardRemove) SendPhotoReplyMarkup {
	var s SendPhotoReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendPhotoReplyMarkup to ForceReply.
func (s *SendPhotoReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendPhotoReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendPhotoReplyMarkup is ForceReply.
func (s SendPhotoReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendPhotoReplyMarkup returns new SendPhotoReplyMarkup from ForceReply.
func NewForceReplySendPhotoReplyMarkup(v ForceReply) SendPhotoReplyMarkup {
	var s SendPhotoReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendPoll
type SendPoll struct {
	ChatID                   ID                   `json:"chat_id"`
	Question                 string               `json:"question"`
	Options                  []string             `json:"options"`
	IsAnonymous              OptBool              `json:"is_anonymous"`
	Type                     OptString            `json:"type"`
	AllowsMultipleAnswers    OptBool              `json:"allows_multiple_answers"`
	CorrectOptionID          OptInt               `json:"correct_option_id"`
	Explanation              OptString            `json:"explanation"`
	ExplanationParseMode     OptString            `json:"explanation_parse_mode"`
	ExplanationEntities      []MessageEntity      `json:"explanation_entities"`
	OpenPeriod               OptInt               `json:"open_period"`
	CloseDate                OptInt               `json:"close_date"`
	IsClosed                 OptBool              `json:"is_closed"`
	DisableNotification      OptBool              `json:"disable_notification"`
	ReplyToMessageID         OptInt               `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool              `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendPollReplyMarkup `json:"reply_markup"`
}

// SendPollReplyMarkup represents sum type.
type SendPollReplyMarkup struct {
	Type                 SendPollReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendPollReplyMarkupType is oneOf type of SendPollReplyMarkup.
type SendPollReplyMarkupType string

// Possible values for SendPollReplyMarkupType.
const (
	InlineKeyboardMarkupSendPollReplyMarkup SendPollReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendPollReplyMarkup  SendPollReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendPollReplyMarkup  SendPollReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendPollReplyMarkup           SendPollReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendPollReplyMarkup is InlineKeyboardMarkup.
func (s SendPollReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendPollReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendPollReplyMarkup is ReplyKeyboardMarkup.
func (s SendPollReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendPollReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendPollReplyMarkup is ReplyKeyboardRemove.
func (s SendPollReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendPollReplyMarkup
}

// IsForceReply reports whether SendPollReplyMarkup is ForceReply.
func (s SendPollReplyMarkup) IsForceReply() bool { return s.Type == ForceReplySendPollReplyMarkup }

// SetInlineKeyboardMarkup sets SendPollReplyMarkup to InlineKeyboardMarkup.
func (s *SendPollReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendPollReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendPollReplyMarkup is InlineKeyboardMarkup.
func (s SendPollReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendPollReplyMarkup returns new SendPollReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendPollReplyMarkup(v InlineKeyboardMarkup) SendPollReplyMarkup {
	var s SendPollReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendPollReplyMarkup to ReplyKeyboardMarkup.
func (s *SendPollReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendPollReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendPollReplyMarkup is ReplyKeyboardMarkup.
func (s SendPollReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendPollReplyMarkup returns new SendPollReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendPollReplyMarkup(v ReplyKeyboardMarkup) SendPollReplyMarkup {
	var s SendPollReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendPollReplyMarkup to ReplyKeyboardRemove.
func (s *SendPollReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendPollReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendPollReplyMarkup is ReplyKeyboardRemove.
func (s SendPollReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendPollReplyMarkup returns new SendPollReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendPollReplyMarkup(v ReplyKeyboardRemove) SendPollReplyMarkup {
	var s SendPollReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendPollReplyMarkup to ForceReply.
func (s *SendPollReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendPollReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendPollReplyMarkup is ForceReply.
func (s SendPollReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendPollReplyMarkup returns new SendPollReplyMarkup from ForceReply.
func NewForceReplySendPollReplyMarkup(v ForceReply) SendPollReplyMarkup {
	var s SendPollReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendSticker
type SendSticker struct {
	ChatID                   ID                      `json:"chat_id"`
	Sticker                  string                  `json:"sticker"`
	DisableNotification      OptBool                 `json:"disable_notification"`
	ReplyToMessageID         OptInt                  `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool                 `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendStickerReplyMarkup `json:"reply_markup"`
}

// SendStickerReplyMarkup represents sum type.
type SendStickerReplyMarkup struct {
	Type                 SendStickerReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendStickerReplyMarkupType is oneOf type of SendStickerReplyMarkup.
type SendStickerReplyMarkupType string

// Possible values for SendStickerReplyMarkupType.
const (
	InlineKeyboardMarkupSendStickerReplyMarkup SendStickerReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendStickerReplyMarkup  SendStickerReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendStickerReplyMarkup  SendStickerReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendStickerReplyMarkup           SendStickerReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendStickerReplyMarkup is InlineKeyboardMarkup.
func (s SendStickerReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendStickerReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendStickerReplyMarkup is ReplyKeyboardMarkup.
func (s SendStickerReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendStickerReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendStickerReplyMarkup is ReplyKeyboardRemove.
func (s SendStickerReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendStickerReplyMarkup
}

// IsForceReply reports whether SendStickerReplyMarkup is ForceReply.
func (s SendStickerReplyMarkup) IsForceReply() bool {
	return s.Type == ForceReplySendStickerReplyMarkup
}

// SetInlineKeyboardMarkup sets SendStickerReplyMarkup to InlineKeyboardMarkup.
func (s *SendStickerReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendStickerReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendStickerReplyMarkup is InlineKeyboardMarkup.
func (s SendStickerReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendStickerReplyMarkup returns new SendStickerReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendStickerReplyMarkup(v InlineKeyboardMarkup) SendStickerReplyMarkup {
	var s SendStickerReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendStickerReplyMarkup to ReplyKeyboardMarkup.
func (s *SendStickerReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendStickerReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendStickerReplyMarkup is ReplyKeyboardMarkup.
func (s SendStickerReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendStickerReplyMarkup returns new SendStickerReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendStickerReplyMarkup(v ReplyKeyboardMarkup) SendStickerReplyMarkup {
	var s SendStickerReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendStickerReplyMarkup to ReplyKeyboardRemove.
func (s *SendStickerReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendStickerReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendStickerReplyMarkup is ReplyKeyboardRemove.
func (s SendStickerReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendStickerReplyMarkup returns new SendStickerReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendStickerReplyMarkup(v ReplyKeyboardRemove) SendStickerReplyMarkup {
	var s SendStickerReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendStickerReplyMarkup to ForceReply.
func (s *SendStickerReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendStickerReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendStickerReplyMarkup is ForceReply.
func (s SendStickerReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendStickerReplyMarkup returns new SendStickerReplyMarkup from ForceReply.
func NewForceReplySendStickerReplyMarkup(v ForceReply) SendStickerReplyMarkup {
	var s SendStickerReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendVenue
type SendVenue struct {
	ChatID                   ID                    `json:"chat_id"`
	Latitude                 float64               `json:"latitude"`
	Longitude                float64               `json:"longitude"`
	Title                    string                `json:"title"`
	Address                  string                `json:"address"`
	FoursquareID             OptString             `json:"foursquare_id"`
	FoursquareType           OptString             `json:"foursquare_type"`
	GooglePlaceID            OptString             `json:"google_place_id"`
	GooglePlaceType          OptString             `json:"google_place_type"`
	DisableNotification      OptBool               `json:"disable_notification"`
	ReplyToMessageID         OptInt                `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool               `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendVenueReplyMarkup `json:"reply_markup"`
}

// SendVenueReplyMarkup represents sum type.
type SendVenueReplyMarkup struct {
	Type                 SendVenueReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendVenueReplyMarkupType is oneOf type of SendVenueReplyMarkup.
type SendVenueReplyMarkupType string

// Possible values for SendVenueReplyMarkupType.
const (
	InlineKeyboardMarkupSendVenueReplyMarkup SendVenueReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendVenueReplyMarkup  SendVenueReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendVenueReplyMarkup  SendVenueReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendVenueReplyMarkup           SendVenueReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendVenueReplyMarkup is InlineKeyboardMarkup.
func (s SendVenueReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendVenueReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendVenueReplyMarkup is ReplyKeyboardMarkup.
func (s SendVenueReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendVenueReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendVenueReplyMarkup is ReplyKeyboardRemove.
func (s SendVenueReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendVenueReplyMarkup
}

// IsForceReply reports whether SendVenueReplyMarkup is ForceReply.
func (s SendVenueReplyMarkup) IsForceReply() bool { return s.Type == ForceReplySendVenueReplyMarkup }

// SetInlineKeyboardMarkup sets SendVenueReplyMarkup to InlineKeyboardMarkup.
func (s *SendVenueReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendVenueReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendVenueReplyMarkup is InlineKeyboardMarkup.
func (s SendVenueReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendVenueReplyMarkup returns new SendVenueReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendVenueReplyMarkup(v InlineKeyboardMarkup) SendVenueReplyMarkup {
	var s SendVenueReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendVenueReplyMarkup to ReplyKeyboardMarkup.
func (s *SendVenueReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendVenueReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendVenueReplyMarkup is ReplyKeyboardMarkup.
func (s SendVenueReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendVenueReplyMarkup returns new SendVenueReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendVenueReplyMarkup(v ReplyKeyboardMarkup) SendVenueReplyMarkup {
	var s SendVenueReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendVenueReplyMarkup to ReplyKeyboardRemove.
func (s *SendVenueReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendVenueReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendVenueReplyMarkup is ReplyKeyboardRemove.
func (s SendVenueReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendVenueReplyMarkup returns new SendVenueReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendVenueReplyMarkup(v ReplyKeyboardRemove) SendVenueReplyMarkup {
	var s SendVenueReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendVenueReplyMarkup to ForceReply.
func (s *SendVenueReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendVenueReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendVenueReplyMarkup is ForceReply.
func (s SendVenueReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendVenueReplyMarkup returns new SendVenueReplyMarkup from ForceReply.
func NewForceReplySendVenueReplyMarkup(v ForceReply) SendVenueReplyMarkup {
	var s SendVenueReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendVideo
type SendVideo struct {
	ChatID                   ID                    `json:"chat_id"`
	Video                    string                `json:"video"`
	Duration                 OptInt                `json:"duration"`
	Width                    OptInt                `json:"width"`
	Height                   OptInt                `json:"height"`
	Thumb                    OptString             `json:"thumb"`
	Caption                  OptString             `json:"caption"`
	ParseMode                OptString             `json:"parse_mode"`
	CaptionEntities          []MessageEntity       `json:"caption_entities"`
	SupportsStreaming        OptBool               `json:"supports_streaming"`
	DisableNotification      OptBool               `json:"disable_notification"`
	ReplyToMessageID         OptInt                `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool               `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendVideoReplyMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/sendVideoNote
type SendVideoNote struct {
	ChatID                   ID                        `json:"chat_id"`
	VideoNote                string                    `json:"video_note"`
	Duration                 OptInt                    `json:"duration"`
	Length                   OptInt                    `json:"length"`
	Thumb                    OptString                 `json:"thumb"`
	DisableNotification      OptBool                   `json:"disable_notification"`
	ReplyToMessageID         OptInt                    `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool                   `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendVideoNoteReplyMarkup `json:"reply_markup"`
}

// SendVideoNoteReplyMarkup represents sum type.
type SendVideoNoteReplyMarkup struct {
	Type                 SendVideoNoteReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendVideoNoteReplyMarkupType is oneOf type of SendVideoNoteReplyMarkup.
type SendVideoNoteReplyMarkupType string

// Possible values for SendVideoNoteReplyMarkupType.
const (
	InlineKeyboardMarkupSendVideoNoteReplyMarkup SendVideoNoteReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendVideoNoteReplyMarkup  SendVideoNoteReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendVideoNoteReplyMarkup  SendVideoNoteReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendVideoNoteReplyMarkup           SendVideoNoteReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendVideoNoteReplyMarkup is InlineKeyboardMarkup.
func (s SendVideoNoteReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendVideoNoteReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendVideoNoteReplyMarkup is ReplyKeyboardMarkup.
func (s SendVideoNoteReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendVideoNoteReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendVideoNoteReplyMarkup is ReplyKeyboardRemove.
func (s SendVideoNoteReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendVideoNoteReplyMarkup
}

// IsForceReply reports whether SendVideoNoteReplyMarkup is ForceReply.
func (s SendVideoNoteReplyMarkup) IsForceReply() bool {
	return s.Type == ForceReplySendVideoNoteReplyMarkup
}

// SetInlineKeyboardMarkup sets SendVideoNoteReplyMarkup to InlineKeyboardMarkup.
func (s *SendVideoNoteReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendVideoNoteReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendVideoNoteReplyMarkup is InlineKeyboardMarkup.
func (s SendVideoNoteReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendVideoNoteReplyMarkup returns new SendVideoNoteReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendVideoNoteReplyMarkup(v InlineKeyboardMarkup) SendVideoNoteReplyMarkup {
	var s SendVideoNoteReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendVideoNoteReplyMarkup to ReplyKeyboardMarkup.
func (s *SendVideoNoteReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendVideoNoteReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendVideoNoteReplyMarkup is ReplyKeyboardMarkup.
func (s SendVideoNoteReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendVideoNoteReplyMarkup returns new SendVideoNoteReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendVideoNoteReplyMarkup(v ReplyKeyboardMarkup) SendVideoNoteReplyMarkup {
	var s SendVideoNoteReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendVideoNoteReplyMarkup to ReplyKeyboardRemove.
func (s *SendVideoNoteReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendVideoNoteReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendVideoNoteReplyMarkup is ReplyKeyboardRemove.
func (s SendVideoNoteReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendVideoNoteReplyMarkup returns new SendVideoNoteReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendVideoNoteReplyMarkup(v ReplyKeyboardRemove) SendVideoNoteReplyMarkup {
	var s SendVideoNoteReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendVideoNoteReplyMarkup to ForceReply.
func (s *SendVideoNoteReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendVideoNoteReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendVideoNoteReplyMarkup is ForceReply.
func (s SendVideoNoteReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendVideoNoteReplyMarkup returns new SendVideoNoteReplyMarkup from ForceReply.
func NewForceReplySendVideoNoteReplyMarkup(v ForceReply) SendVideoNoteReplyMarkup {
	var s SendVideoNoteReplyMarkup
	s.SetForceReply(v)
	return s
}

// SendVideoReplyMarkup represents sum type.
type SendVideoReplyMarkup struct {
	Type                 SendVideoReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendVideoReplyMarkupType is oneOf type of SendVideoReplyMarkup.
type SendVideoReplyMarkupType string

// Possible values for SendVideoReplyMarkupType.
const (
	InlineKeyboardMarkupSendVideoReplyMarkup SendVideoReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendVideoReplyMarkup  SendVideoReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendVideoReplyMarkup  SendVideoReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendVideoReplyMarkup           SendVideoReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendVideoReplyMarkup is InlineKeyboardMarkup.
func (s SendVideoReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendVideoReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendVideoReplyMarkup is ReplyKeyboardMarkup.
func (s SendVideoReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendVideoReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendVideoReplyMarkup is ReplyKeyboardRemove.
func (s SendVideoReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendVideoReplyMarkup
}

// IsForceReply reports whether SendVideoReplyMarkup is ForceReply.
func (s SendVideoReplyMarkup) IsForceReply() bool { return s.Type == ForceReplySendVideoReplyMarkup }

// SetInlineKeyboardMarkup sets SendVideoReplyMarkup to InlineKeyboardMarkup.
func (s *SendVideoReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendVideoReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendVideoReplyMarkup is InlineKeyboardMarkup.
func (s SendVideoReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendVideoReplyMarkup returns new SendVideoReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendVideoReplyMarkup(v InlineKeyboardMarkup) SendVideoReplyMarkup {
	var s SendVideoReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendVideoReplyMarkup to ReplyKeyboardMarkup.
func (s *SendVideoReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendVideoReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendVideoReplyMarkup is ReplyKeyboardMarkup.
func (s SendVideoReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendVideoReplyMarkup returns new SendVideoReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendVideoReplyMarkup(v ReplyKeyboardMarkup) SendVideoReplyMarkup {
	var s SendVideoReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendVideoReplyMarkup to ReplyKeyboardRemove.
func (s *SendVideoReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendVideoReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendVideoReplyMarkup is ReplyKeyboardRemove.
func (s SendVideoReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendVideoReplyMarkup returns new SendVideoReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendVideoReplyMarkup(v ReplyKeyboardRemove) SendVideoReplyMarkup {
	var s SendVideoReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendVideoReplyMarkup to ForceReply.
func (s *SendVideoReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendVideoReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendVideoReplyMarkup is ForceReply.
func (s SendVideoReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendVideoReplyMarkup returns new SendVideoReplyMarkup from ForceReply.
func NewForceReplySendVideoReplyMarkup(v ForceReply) SendVideoReplyMarkup {
	var s SendVideoReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/sendVoice
type SendVoice struct {
	ChatID                   ID                    `json:"chat_id"`
	Voice                    string                `json:"voice"`
	Caption                  OptString             `json:"caption"`
	ParseMode                OptString             `json:"parse_mode"`
	CaptionEntities          []MessageEntity       `json:"caption_entities"`
	Duration                 OptInt                `json:"duration"`
	DisableNotification      OptBool               `json:"disable_notification"`
	ReplyToMessageID         OptInt                `json:"reply_to_message_id"`
	AllowSendingWithoutReply OptBool               `json:"allow_sending_without_reply"`
	ReplyMarkup              *SendVoiceReplyMarkup `json:"reply_markup"`
}

// SendVoiceReplyMarkup represents sum type.
type SendVoiceReplyMarkup struct {
	Type                 SendVoiceReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendVoiceReplyMarkupType is oneOf type of SendVoiceReplyMarkup.
type SendVoiceReplyMarkupType string

// Possible values for SendVoiceReplyMarkupType.
const (
	InlineKeyboardMarkupSendVoiceReplyMarkup SendVoiceReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendVoiceReplyMarkup  SendVoiceReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendVoiceReplyMarkup  SendVoiceReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendVoiceReplyMarkup           SendVoiceReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendVoiceReplyMarkup is InlineKeyboardMarkup.
func (s SendVoiceReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendVoiceReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendVoiceReplyMarkup is ReplyKeyboardMarkup.
func (s SendVoiceReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendVoiceReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendVoiceReplyMarkup is ReplyKeyboardRemove.
func (s SendVoiceReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendVoiceReplyMarkup
}

// IsForceReply reports whether SendVoiceReplyMarkup is ForceReply.
func (s SendVoiceReplyMarkup) IsForceReply() bool { return s.Type == ForceReplySendVoiceReplyMarkup }

// SetInlineKeyboardMarkup sets SendVoiceReplyMarkup to InlineKeyboardMarkup.
func (s *SendVoiceReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendVoiceReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendVoiceReplyMarkup is InlineKeyboardMarkup.
func (s SendVoiceReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendVoiceReplyMarkup returns new SendVoiceReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendVoiceReplyMarkup(v InlineKeyboardMarkup) SendVoiceReplyMarkup {
	var s SendVoiceReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendVoiceReplyMarkup to ReplyKeyboardMarkup.
func (s *SendVoiceReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendVoiceReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendVoiceReplyMarkup is ReplyKeyboardMarkup.
func (s SendVoiceReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendVoiceReplyMarkup returns new SendVoiceReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendVoiceReplyMarkup(v ReplyKeyboardMarkup) SendVoiceReplyMarkup {
	var s SendVoiceReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendVoiceReplyMarkup to ReplyKeyboardRemove.
func (s *SendVoiceReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendVoiceReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendVoiceReplyMarkup is ReplyKeyboardRemove.
func (s SendVoiceReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendVoiceReplyMarkup returns new SendVoiceReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendVoiceReplyMarkup(v ReplyKeyboardRemove) SendVoiceReplyMarkup {
	var s SendVoiceReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendVoiceReplyMarkup to ForceReply.
func (s *SendVoiceReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendVoiceReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendVoiceReplyMarkup is ForceReply.
func (s SendVoiceReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendVoiceReplyMarkup returns new SendVoiceReplyMarkup from ForceReply.
func NewForceReplySendVoiceReplyMarkup(v ForceReply) SendVoiceReplyMarkup {
	var s SendVoiceReplyMarkup
	s.SetForceReply(v)
	return s
}

// Ref: #/components/schemas/setChatAdministratorCustomTitle
type SetChatAdministratorCustomTitle struct {
	ChatID      ID     `json:"chat_id"`
	UserID      int    `json:"user_id"`
	CustomTitle string `json:"custom_title"`
}

// Ref: #/components/schemas/setChatDescription
type SetChatDescription struct {
	ChatID      ID        `json:"chat_id"`
	Description OptString `json:"description"`
}

// Ref: #/components/schemas/setChatPermissions
type SetChatPermissions struct {
	ChatID      ID              `json:"chat_id"`
	Permissions ChatPermissions `json:"permissions"`
}

// Ref: #/components/schemas/setChatPhoto
type SetChatPhoto struct {
	ChatID ID     `json:"chat_id"`
	Photo  string `json:"photo"`
}

// Ref: #/components/schemas/setChatStickerSet
type SetChatStickerSet struct {
	ChatID         ID     `json:"chat_id"`
	StickerSetName string `json:"sticker_set_name"`
}

// Ref: #/components/schemas/setChatTitle
type SetChatTitle struct {
	ChatID ID     `json:"chat_id"`
	Title  string `json:"title"`
}

// Ref: #/components/schemas/setGameScore
type SetGameScore struct {
	UserID             int       `json:"user_id"`
	Score              int       `json:"score"`
	Force              OptBool   `json:"force"`
	DisableEditMessage OptBool   `json:"disable_edit_message"`
	ChatID             OptInt    `json:"chat_id"`
	MessageID          OptInt    `json:"message_id"`
	InlineMessageID    OptString `json:"inline_message_id"`
}

// Ref: #/components/schemas/setMyCommands
type SetMyCommands struct {
	Commands     []BotCommand     `json:"commands"`
	Scope        *BotCommandScope `json:"scope"`
	LanguageCode OptString        `json:"language_code"`
}

// Ref: #/components/schemas/setPassportDataErrors
type SetPassportDataErrors struct {
	UserID int                    `json:"user_id"`
	Errors []PassportElementError `json:"errors"`
}

// Ref: #/components/schemas/setStickerPositionInSet
type SetStickerPositionInSet struct {
	Sticker  string `json:"sticker"`
	Position int    `json:"position"`
}

// Ref: #/components/schemas/setStickerSetThumb
type SetStickerSetThumb struct {
	Name   string    `json:"name"`
	UserID int       `json:"user_id"`
	Thumb  OptString `json:"thumb"`
}

// Ref: #/components/schemas/setWebhook
type SetWebhook struct {
	URL                url.URL   `json:"url"`
	Certificate        OptString `json:"certificate"`
	IPAddress          OptString `json:"ip_address"`
	MaxConnections     OptInt    `json:"max_connections"`
	AllowedUpdates     []string  `json:"allowed_updates"`
	DropPendingUpdates OptBool   `json:"drop_pending_updates"`
}

// Ref: #/components/schemas/ShippingAddress
type ShippingAddress struct {
	CountryCode string `json:"country_code"`
	State       string `json:"state"`
	City        string `json:"city"`
	StreetLine1 string `json:"street_line1"`
	StreetLine2 string `json:"street_line2"`
	PostCode    string `json:"post_code"`
}

// Ref: #/components/schemas/ShippingOption
type ShippingOption struct {
	ID     string         `json:"id"`
	Title  string         `json:"title"`
	Prices []LabeledPrice `json:"prices"`
}

// Ref: #/components/schemas/ShippingQuery
type ShippingQuery struct {
	ID              string          `json:"id"`
	From            User            `json:"from"`
	InvoicePayload  string          `json:"invoice_payload"`
	ShippingAddress ShippingAddress `json:"shipping_address"`
}

// Ref: #/components/schemas/Sticker
type Sticker struct {
	FileID       string          `json:"file_id"`
	FileUniqueID string          `json:"file_unique_id"`
	Width        int             `json:"width"`
	Height       int             `json:"height"`
	IsAnimated   bool            `json:"is_animated"`
	Thumb        OptPhotoSize    `json:"thumb"`
	Emoji        OptString       `json:"emoji"`
	SetName      OptString       `json:"set_name"`
	MaskPosition OptMaskPosition `json:"mask_position"`
	FileSize     OptInt          `json:"file_size"`
}

// Ref: #/components/schemas/stopMessageLiveLocation
type StopMessageLiveLocation struct {
	ChatID          *ID                     `json:"chat_id"`
	MessageID       OptInt                  `json:"message_id"`
	InlineMessageID OptString               `json:"inline_message_id"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/stopPoll
type StopPoll struct {
	ChatID      ID                      `json:"chat_id"`
	MessageID   int                     `json:"message_id"`
	ReplyMarkup OptInlineKeyboardMarkup `json:"reply_markup"`
}

// Ref: #/components/schemas/SuccessfulPayment
type SuccessfulPayment struct {
	Currency                string       `json:"currency"`
	TotalAmount             int          `json:"total_amount"`
	InvoicePayload          string       `json:"invoice_payload"`
	ShippingOptionID        OptString    `json:"shipping_option_id"`
	OrderInfo               OptOrderInfo `json:"order_info"`
	TelegramPaymentChargeID string       `json:"telegram_payment_charge_id"`
	ProviderPaymentChargeID string       `json:"provider_payment_charge_id"`
}

// Ref: #/components/schemas/unbanChatMember
type UnbanChatMember struct {
	ChatID       ID      `json:"chat_id"`
	UserID       int     `json:"user_id"`
	OnlyIfBanned OptBool `json:"only_if_banned"`
}

// Ref: #/components/schemas/unbanChatSenderChat
type UnbanChatSenderChat struct {
	ChatID       ID  `json:"chat_id"`
	SenderChatID int `json:"sender_chat_id"`
}

// Ref: #/components/schemas/unpinAllChatMessages
type UnpinAllChatMessages struct {
	ChatID ID `json:"chat_id"`
}

// Ref: #/components/schemas/unpinChatMessage
type UnpinChatMessage struct {
	ChatID    ID     `json:"chat_id"`
	MessageID OptInt `json:"message_id"`
}

// Ref: #/components/schemas/Update
type Update struct {
	UpdateID           int                   `json:"update_id"`
	Message            OptMessage            `json:"message"`
	EditedMessage      OptMessage            `json:"edited_message"`
	ChannelPost        OptMessage            `json:"channel_post"`
	EditedChannelPost  OptMessage            `json:"edited_channel_post"`
	InlineQuery        OptInlineQuery        `json:"inline_query"`
	ChosenInlineResult OptChosenInlineResult `json:"chosen_inline_result"`
	CallbackQuery      OptCallbackQuery      `json:"callback_query"`
	ShippingQuery      OptShippingQuery      `json:"shipping_query"`
	PreCheckoutQuery   OptPreCheckoutQuery   `json:"pre_checkout_query"`
	Poll               OptPoll               `json:"poll"`
	PollAnswer         OptPollAnswer         `json:"poll_answer"`
	MyChatMember       OptChatMemberUpdated  `json:"my_chat_member"`
	ChatMember         OptChatMemberUpdated  `json:"chat_member"`
	ChatJoinRequest    OptChatJoinRequest    `json:"chat_join_request"`
}

// Ref: #/components/schemas/uploadStickerFile
type UploadStickerFile struct {
	UserID     int    `json:"user_id"`
	PNGSticker string `json:"png_sticker"`
}

// Ref: #/components/schemas/User
type User struct {
	ID                      int       `json:"id"`
	IsBot                   bool      `json:"is_bot"`
	FirstName               string    `json:"first_name"`
	LastName                OptString `json:"last_name"`
	Username                OptString `json:"username"`
	LanguageCode            OptString `json:"language_code"`
	CanJoinGroups           OptBool   `json:"can_join_groups"`
	CanReadAllGroupMessages OptBool   `json:"can_read_all_group_messages"`
	SupportsInlineQueries   OptBool   `json:"supports_inline_queries"`
}

// Ref: #/components/schemas/Venue
type Venue struct {
	Location        Location  `json:"location"`
	Title           string    `json:"title"`
	Address         string    `json:"address"`
	FoursquareID    OptString `json:"foursquare_id"`
	FoursquareType  OptString `json:"foursquare_type"`
	GooglePlaceID   OptString `json:"google_place_id"`
	GooglePlaceType OptString `json:"google_place_type"`
}

// Ref: #/components/schemas/Video
type Video struct {
	FileID       string       `json:"file_id"`
	FileUniqueID string       `json:"file_unique_id"`
	Width        int          `json:"width"`
	Height       int          `json:"height"`
	Duration     int          `json:"duration"`
	Thumb        OptPhotoSize `json:"thumb"`
	FileName     OptString    `json:"file_name"`
	MimeType     OptString    `json:"mime_type"`
	FileSize     OptInt       `json:"file_size"`
}

// Ref: #/components/schemas/VideoNote
type VideoNote struct {
	FileID       string       `json:"file_id"`
	FileUniqueID string       `json:"file_unique_id"`
	Length       int          `json:"length"`
	Duration     int          `json:"duration"`
	Thumb        OptPhotoSize `json:"thumb"`
	FileSize     OptInt       `json:"file_size"`
}

// Ref: #/components/schemas/Voice
type Voice struct {
	FileID       string    `json:"file_id"`
	FileUniqueID string    `json:"file_unique_id"`
	Duration     int       `json:"duration"`
	MimeType     OptString `json:"mime_type"`
	FileSize     OptInt    `json:"file_size"`
}

// Ref: #/components/schemas/VoiceChatEnded
type VoiceChatEnded struct {
	Duration int `json:"duration"`
}

// Ref: #/components/schemas/VoiceChatParticipantsInvited
type VoiceChatParticipantsInvited struct {
	Users []User `json:"users"`
}

// Ref: #/components/schemas/VoiceChatScheduled
type VoiceChatScheduled struct {
	StartDate int `json:"start_date"`
}

// Ref: #/components/schemas/VoiceChatStarted
type VoiceChatStarted struct{}
