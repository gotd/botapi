// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Input for addStickerToSet.
// Ref: #/components/schemas/addStickerToSet
type AddStickerToSet struct {
	// User identifier of sticker set owner.
	UserID int64 `json:"user_id"`
	// Sticker set name.
	Name    string       `json:"name"`
	Sticker InputSticker `json:"sticker"`
}

// GetUserID returns the value of UserID.
func (s *AddStickerToSet) GetUserID() int64 {
	return s.UserID
}

// GetName returns the value of Name.
func (s *AddStickerToSet) GetName() string {
	return s.Name
}

// GetSticker returns the value of Sticker.
func (s *AddStickerToSet) GetSticker() InputSticker {
	return s.Sticker
}

// SetUserID sets the value of UserID.
func (s *AddStickerToSet) SetUserID(val int64) {
	s.UserID = val
}

// SetName sets the value of Name.
func (s *AddStickerToSet) SetName(val string) {
	s.Name = val
}

// SetSticker sets the value of Sticker.
func (s *AddStickerToSet) SetSticker(val InputSticker) {
	s.Sticker = val
}

// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
// Ref: #/components/schemas/Animation
type Animation struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Video width as defined by sender.
	Width int `json:"width"`
	// Video height as defined by sender.
	Height int `json:"height"`
	// Duration of the video in seconds as defined by sender.
	Duration  int          `json:"duration"`
	Thumbnail OptPhotoSize `json:"thumbnail"`
	// _Optional_. Original animation filename as defined by sender.
	FileName OptString `json:"file_name"`
	// _Optional_. MIME type of the file as defined by sender.
	MimeType OptString `json:"mime_type"`
	// _Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have
	// difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed
	// 64-bit integer or double-precision float type are safe for storing this value.
	FileSize OptInt `json:"file_size"`
}

// GetFileID returns the value of FileID.
func (s *Animation) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *Animation) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetWidth returns the value of Width.
func (s *Animation) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *Animation) GetHeight() int {
	return s.Height
}

// GetDuration returns the value of Duration.
func (s *Animation) GetDuration() int {
	return s.Duration
}

// GetThumbnail returns the value of Thumbnail.
func (s *Animation) GetThumbnail() OptPhotoSize {
	return s.Thumbnail
}

// GetFileName returns the value of FileName.
func (s *Animation) GetFileName() OptString {
	return s.FileName
}

// GetMimeType returns the value of MimeType.
func (s *Animation) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s *Animation) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Animation) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Animation) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetWidth sets the value of Width.
func (s *Animation) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *Animation) SetHeight(val int) {
	s.Height = val
}

// SetDuration sets the value of Duration.
func (s *Animation) SetDuration(val int) {
	s.Duration = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *Animation) SetThumbnail(val OptPhotoSize) {
	s.Thumbnail = val
}

// SetFileName sets the value of FileName.
func (s *Animation) SetFileName(val OptString) {
	s.FileName = val
}

// SetMimeType sets the value of MimeType.
func (s *Animation) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Animation) SetFileSize(val OptInt) {
	s.FileSize = val
}

// Input for answerCallbackQuery.
// Ref: #/components/schemas/answerCallbackQuery
type AnswerCallbackQuery struct {
	// Unique identifier for the query to be answered.
	CallbackQueryID string `json:"callback_query_id"`
	// Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters.
	Text OptString `json:"text"`
	// If _True_, an alert will be shown by the client instead of a notification at the top of the chat
	// screen. Defaults to _false_.
	ShowAlert OptBool `json:"show_alert"`
	// URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.
	// org/bots/api#game) and accepted the conditions via [@BotFather](https://t.me/botfather), specify
	// the URL that opens your game - note that this will only work if the query comes from a
	// [_callback_game_](https://core.telegram.org/bots/api#inlinekeyboardbutton) button.Otherwise, you
	// may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
	URL OptString `json:"url"`
	// The maximum amount of time in seconds that the result of the callback query may be cached
	// client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
	CacheTime OptInt `json:"cache_time"`
}

// GetCallbackQueryID returns the value of CallbackQueryID.
func (s *AnswerCallbackQuery) GetCallbackQueryID() string {
	return s.CallbackQueryID
}

// GetText returns the value of Text.
func (s *AnswerCallbackQuery) GetText() OptString {
	return s.Text
}

// GetShowAlert returns the value of ShowAlert.
func (s *AnswerCallbackQuery) GetShowAlert() OptBool {
	return s.ShowAlert
}

// GetURL returns the value of URL.
func (s *AnswerCallbackQuery) GetURL() OptString {
	return s.URL
}

// GetCacheTime returns the value of CacheTime.
func (s *AnswerCallbackQuery) GetCacheTime() OptInt {
	return s.CacheTime
}

// SetCallbackQueryID sets the value of CallbackQueryID.
func (s *AnswerCallbackQuery) SetCallbackQueryID(val string) {
	s.CallbackQueryID = val
}

// SetText sets the value of Text.
func (s *AnswerCallbackQuery) SetText(val OptString) {
	s.Text = val
}

// SetShowAlert sets the value of ShowAlert.
func (s *AnswerCallbackQuery) SetShowAlert(val OptBool) {
	s.ShowAlert = val
}

// SetURL sets the value of URL.
func (s *AnswerCallbackQuery) SetURL(val OptString) {
	s.URL = val
}

// SetCacheTime sets the value of CacheTime.
func (s *AnswerCallbackQuery) SetCacheTime(val OptInt) {
	s.CacheTime = val
}

// Input for answerInlineQuery.
// Ref: #/components/schemas/answerInlineQuery
type AnswerInlineQuery struct {
	// Unique identifier for the answered query.
	InlineQueryID string `json:"inline_query_id"`
	// A JSON-serialized array of results for the inline query.
	Results []InlineQueryResult `json:"results"`
	// The maximum amount of time in seconds that the result of the inline query may be cached on the
	// server. Defaults to 300.
	CacheTime OptInt `json:"cache_time"`
	// Pass _True_ if results may be cached on the server side only for the user that sent the query. By
	// default, results may be returned to any user who sends the same query.
	IsPersonal OptBool `json:"is_personal"`
	// Pass the offset that a client should send in the next query with the same text to receive more
	// results. Pass an empty string if there are no more results or if you don't support pagination.
	// Offset length can't exceed 64 bytes.
	NextOffset OptString                   `json:"next_offset"`
	Button     OptInlineQueryResultsButton `json:"button"`
}

// GetInlineQueryID returns the value of InlineQueryID.
func (s *AnswerInlineQuery) GetInlineQueryID() string {
	return s.InlineQueryID
}

// GetResults returns the value of Results.
func (s *AnswerInlineQuery) GetResults() []InlineQueryResult {
	return s.Results
}

// GetCacheTime returns the value of CacheTime.
func (s *AnswerInlineQuery) GetCacheTime() OptInt {
	return s.CacheTime
}

// GetIsPersonal returns the value of IsPersonal.
func (s *AnswerInlineQuery) GetIsPersonal() OptBool {
	return s.IsPersonal
}

// GetNextOffset returns the value of NextOffset.
func (s *AnswerInlineQuery) GetNextOffset() OptString {
	return s.NextOffset
}

// GetButton returns the value of Button.
func (s *AnswerInlineQuery) GetButton() OptInlineQueryResultsButton {
	return s.Button
}

// SetInlineQueryID sets the value of InlineQueryID.
func (s *AnswerInlineQuery) SetInlineQueryID(val string) {
	s.InlineQueryID = val
}

// SetResults sets the value of Results.
func (s *AnswerInlineQuery) SetResults(val []InlineQueryResult) {
	s.Results = val
}

// SetCacheTime sets the value of CacheTime.
func (s *AnswerInlineQuery) SetCacheTime(val OptInt) {
	s.CacheTime = val
}

// SetIsPersonal sets the value of IsPersonal.
func (s *AnswerInlineQuery) SetIsPersonal(val OptBool) {
	s.IsPersonal = val
}

// SetNextOffset sets the value of NextOffset.
func (s *AnswerInlineQuery) SetNextOffset(val OptString) {
	s.NextOffset = val
}

// SetButton sets the value of Button.
func (s *AnswerInlineQuery) SetButton(val OptInlineQueryResultsButton) {
	s.Button = val
}

// Input for answerPreCheckoutQuery.
// Ref: #/components/schemas/answerPreCheckoutQuery
type AnswerPreCheckoutQuery struct {
	// Unique identifier for the query to be answered.
	PreCheckoutQueryID string `json:"pre_checkout_query_id"`
	// Specify _True_ if everything is alright (goods are available, etc.) and the bot is ready to
	// proceed with the order. Use _False_ if there are any problems.
	Ok bool `json:"ok"`
	// Required if _ok_ is _False_. Error message in human readable form that explains the reason for
	// failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing
	// black T-shirts while you were busy filling out your payment details. Please choose a different
	// color or garment!"). Telegram will display this message to the user.
	ErrorMessage OptString `json:"error_message"`
}

// GetPreCheckoutQueryID returns the value of PreCheckoutQueryID.
func (s *AnswerPreCheckoutQuery) GetPreCheckoutQueryID() string {
	return s.PreCheckoutQueryID
}

// GetOk returns the value of Ok.
func (s *AnswerPreCheckoutQuery) GetOk() bool {
	return s.Ok
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *AnswerPreCheckoutQuery) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// SetPreCheckoutQueryID sets the value of PreCheckoutQueryID.
func (s *AnswerPreCheckoutQuery) SetPreCheckoutQueryID(val string) {
	s.PreCheckoutQueryID = val
}

// SetOk sets the value of Ok.
func (s *AnswerPreCheckoutQuery) SetOk(val bool) {
	s.Ok = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *AnswerPreCheckoutQuery) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

// Input for answerShippingQuery.
// Ref: #/components/schemas/answerShippingQuery
type AnswerShippingQuery struct {
	// Unique identifier for the query to be answered.
	ShippingQueryID string `json:"shipping_query_id"`
	// Pass _True_ if delivery to the specified address is possible and _False_ if there are any problems
	// (for example, if delivery to the specified address is not possible).
	Ok bool `json:"ok"`
	// Required if _ok_ is _True_. A JSON-serialized array of available shipping options.
	ShippingOptions []ShippingOption `json:"shipping_options"`
	// Required if _ok_ is _False_. Error message in human readable form that explains why it is
	// impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable').
	// Telegram will display this message to the user.
	ErrorMessage OptString `json:"error_message"`
}

// GetShippingQueryID returns the value of ShippingQueryID.
func (s *AnswerShippingQuery) GetShippingQueryID() string {
	return s.ShippingQueryID
}

// GetOk returns the value of Ok.
func (s *AnswerShippingQuery) GetOk() bool {
	return s.Ok
}

// GetShippingOptions returns the value of ShippingOptions.
func (s *AnswerShippingQuery) GetShippingOptions() []ShippingOption {
	return s.ShippingOptions
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *AnswerShippingQuery) GetErrorMessage() OptString {
	return s.ErrorMessage
}

// SetShippingQueryID sets the value of ShippingQueryID.
func (s *AnswerShippingQuery) SetShippingQueryID(val string) {
	s.ShippingQueryID = val
}

// SetOk sets the value of Ok.
func (s *AnswerShippingQuery) SetOk(val bool) {
	s.Ok = val
}

// SetShippingOptions sets the value of ShippingOptions.
func (s *AnswerShippingQuery) SetShippingOptions(val []ShippingOption) {
	s.ShippingOptions = val
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *AnswerShippingQuery) SetErrorMessage(val OptString) {
	s.ErrorMessage = val
}

// Input for answerWebAppQuery.
// Ref: #/components/schemas/answerWebAppQuery
type AnswerWebAppQuery struct {
	// Unique identifier for the query to be answered.
	WebAppQueryID string            `json:"web_app_query_id"`
	Result        InlineQueryResult `json:"result"`
}

// GetWebAppQueryID returns the value of WebAppQueryID.
func (s *AnswerWebAppQuery) GetWebAppQueryID() string {
	return s.WebAppQueryID
}

// GetResult returns the value of Result.
func (s *AnswerWebAppQuery) GetResult() InlineQueryResult {
	return s.Result
}

// SetWebAppQueryID sets the value of WebAppQueryID.
func (s *AnswerWebAppQuery) SetWebAppQueryID(val string) {
	s.WebAppQueryID = val
}

// SetResult sets the value of Result.
func (s *AnswerWebAppQuery) SetResult(val InlineQueryResult) {
	s.Result = val
}

// Input for approveChatJoinRequest.
// Ref: #/components/schemas/approveChatJoinRequest
type ApproveChatJoinRequest struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
}

// GetChatID returns the value of ChatID.
func (s *ApproveChatJoinRequest) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *ApproveChatJoinRequest) GetUserID() int64 {
	return s.UserID
}

// SetChatID sets the value of ChatID.
func (s *ApproveChatJoinRequest) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *ApproveChatJoinRequest) SetUserID(val int64) {
	s.UserID = val
}

// This object represents an audio file to be treated as music by the Telegram clients.
// Ref: #/components/schemas/Audio
type Audio struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Duration of the audio in seconds as defined by sender.
	Duration int `json:"duration"`
	// _Optional_. Performer of the audio as defined by sender or by audio tags.
	Performer OptString `json:"performer"`
	// _Optional_. Title of the audio as defined by sender or by audio tags.
	Title OptString `json:"title"`
	// _Optional_. Original filename as defined by sender.
	FileName OptString `json:"file_name"`
	// _Optional_. MIME type of the file as defined by sender.
	MimeType OptString `json:"mime_type"`
	// _Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have
	// difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed
	// 64-bit integer or double-precision float type are safe for storing this value.
	FileSize  OptInt       `json:"file_size"`
	Thumbnail OptPhotoSize `json:"thumbnail"`
}

// GetFileID returns the value of FileID.
func (s *Audio) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *Audio) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetDuration returns the value of Duration.
func (s *Audio) GetDuration() int {
	return s.Duration
}

// GetPerformer returns the value of Performer.
func (s *Audio) GetPerformer() OptString {
	return s.Performer
}

// GetTitle returns the value of Title.
func (s *Audio) GetTitle() OptString {
	return s.Title
}

// GetFileName returns the value of FileName.
func (s *Audio) GetFileName() OptString {
	return s.FileName
}

// GetMimeType returns the value of MimeType.
func (s *Audio) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s *Audio) GetFileSize() OptInt {
	return s.FileSize
}

// GetThumbnail returns the value of Thumbnail.
func (s *Audio) GetThumbnail() OptPhotoSize {
	return s.Thumbnail
}

// SetFileID sets the value of FileID.
func (s *Audio) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Audio) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetDuration sets the value of Duration.
func (s *Audio) SetDuration(val int) {
	s.Duration = val
}

// SetPerformer sets the value of Performer.
func (s *Audio) SetPerformer(val OptString) {
	s.Performer = val
}

// SetTitle sets the value of Title.
func (s *Audio) SetTitle(val OptString) {
	s.Title = val
}

// SetFileName sets the value of FileName.
func (s *Audio) SetFileName(val OptString) {
	s.FileName = val
}

// SetMimeType sets the value of MimeType.
func (s *Audio) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Audio) SetFileSize(val OptInt) {
	s.FileSize = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *Audio) SetThumbnail(val OptPhotoSize) {
	s.Thumbnail = val
}

// This object describes the way a background is filled based on the selected colors. Currently, it
// can be one of.
// Ref: #/components/schemas/BackgroundFill
// BackgroundFill represents sum type.
type BackgroundFill struct {
	Type                           BackgroundFillType // switch on this field
	BackgroundFillSolid            BackgroundFillSolid
	BackgroundFillGradient         BackgroundFillGradient
	BackgroundFillFreeformGradient BackgroundFillFreeformGradient
}

// BackgroundFillType is oneOf type of BackgroundFill.
type BackgroundFillType string

// Possible values for BackgroundFillType.
const (
	BackgroundFillSolidBackgroundFill            BackgroundFillType = "BackgroundFillSolid"
	BackgroundFillGradientBackgroundFill         BackgroundFillType = "BackgroundFillGradient"
	BackgroundFillFreeformGradientBackgroundFill BackgroundFillType = "BackgroundFillFreeformGradient"
)

// IsBackgroundFillSolid reports whether BackgroundFill is BackgroundFillSolid.
func (s BackgroundFill) IsBackgroundFillSolid() bool {
	return s.Type == BackgroundFillSolidBackgroundFill
}

// IsBackgroundFillGradient reports whether BackgroundFill is BackgroundFillGradient.
func (s BackgroundFill) IsBackgroundFillGradient() bool {
	return s.Type == BackgroundFillGradientBackgroundFill
}

// IsBackgroundFillFreeformGradient reports whether BackgroundFill is BackgroundFillFreeformGradient.
func (s BackgroundFill) IsBackgroundFillFreeformGradient() bool {
	return s.Type == BackgroundFillFreeformGradientBackgroundFill
}

// SetBackgroundFillSolid sets BackgroundFill to BackgroundFillSolid.
func (s *BackgroundFill) SetBackgroundFillSolid(v BackgroundFillSolid) {
	s.Type = BackgroundFillSolidBackgroundFill
	s.BackgroundFillSolid = v
}

// GetBackgroundFillSolid returns BackgroundFillSolid and true boolean if BackgroundFill is BackgroundFillSolid.
func (s BackgroundFill) GetBackgroundFillSolid() (v BackgroundFillSolid, ok bool) {
	if !s.IsBackgroundFillSolid() {
		return v, false
	}
	return s.BackgroundFillSolid, true
}

// NewBackgroundFillSolidBackgroundFill returns new BackgroundFill from BackgroundFillSolid.
func NewBackgroundFillSolidBackgroundFill(v BackgroundFillSolid) BackgroundFill {
	var s BackgroundFill
	s.SetBackgroundFillSolid(v)
	return s
}

// SetBackgroundFillGradient sets BackgroundFill to BackgroundFillGradient.
func (s *BackgroundFill) SetBackgroundFillGradient(v BackgroundFillGradient) {
	s.Type = BackgroundFillGradientBackgroundFill
	s.BackgroundFillGradient = v
}

// GetBackgroundFillGradient returns BackgroundFillGradient and true boolean if BackgroundFill is BackgroundFillGradient.
func (s BackgroundFill) GetBackgroundFillGradient() (v BackgroundFillGradient, ok bool) {
	if !s.IsBackgroundFillGradient() {
		return v, false
	}
	return s.BackgroundFillGradient, true
}

// NewBackgroundFillGradientBackgroundFill returns new BackgroundFill from BackgroundFillGradient.
func NewBackgroundFillGradientBackgroundFill(v BackgroundFillGradient) BackgroundFill {
	var s BackgroundFill
	s.SetBackgroundFillGradient(v)
	return s
}

// SetBackgroundFillFreeformGradient sets BackgroundFill to BackgroundFillFreeformGradient.
func (s *BackgroundFill) SetBackgroundFillFreeformGradient(v BackgroundFillFreeformGradient) {
	s.Type = BackgroundFillFreeformGradientBackgroundFill
	s.BackgroundFillFreeformGradient = v
}

// GetBackgroundFillFreeformGradient returns BackgroundFillFreeformGradient and true boolean if BackgroundFill is BackgroundFillFreeformGradient.
func (s BackgroundFill) GetBackgroundFillFreeformGradient() (v BackgroundFillFreeformGradient, ok bool) {
	if !s.IsBackgroundFillFreeformGradient() {
		return v, false
	}
	return s.BackgroundFillFreeformGradient, true
}

// NewBackgroundFillFreeformGradientBackgroundFill returns new BackgroundFill from BackgroundFillFreeformGradient.
func NewBackgroundFillFreeformGradientBackgroundFill(v BackgroundFillFreeformGradient) BackgroundFill {
	var s BackgroundFill
	s.SetBackgroundFillFreeformGradient(v)
	return s
}

// The background is a freeform gradient that rotates after every message in the chat.
// Ref: #/components/schemas/BackgroundFillFreeformGradient
type BackgroundFillFreeformGradient struct {
	// Type of the background fill, always `freeform_gradient`.
	Type string `json:"type"`
	// A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24
	// format.
	Colors []int `json:"colors"`
}

// GetType returns the value of Type.
func (s *BackgroundFillFreeformGradient) GetType() string {
	return s.Type
}

// GetColors returns the value of Colors.
func (s *BackgroundFillFreeformGradient) GetColors() []int {
	return s.Colors
}

// SetType sets the value of Type.
func (s *BackgroundFillFreeformGradient) SetType(val string) {
	s.Type = val
}

// SetColors sets the value of Colors.
func (s *BackgroundFillFreeformGradient) SetColors(val []int) {
	s.Colors = val
}

// The background is a gradient fill.
// Ref: #/components/schemas/BackgroundFillGradient
type BackgroundFillGradient struct {
	// Type of the background fill, always `gradient`.
	Type string `json:"type"`
	// Top color of the gradient in the RGB24 format.
	TopColor int `json:"top_color"`
	// Bottom color of the gradient in the RGB24 format.
	BottomColor int `json:"bottom_color"`
	// Clockwise rotation angle of the background fill in degrees; 0-359.
	RotationAngle int `json:"rotation_angle"`
}

// GetType returns the value of Type.
func (s *BackgroundFillGradient) GetType() string {
	return s.Type
}

// GetTopColor returns the value of TopColor.
func (s *BackgroundFillGradient) GetTopColor() int {
	return s.TopColor
}

// GetBottomColor returns the value of BottomColor.
func (s *BackgroundFillGradient) GetBottomColor() int {
	return s.BottomColor
}

// GetRotationAngle returns the value of RotationAngle.
func (s *BackgroundFillGradient) GetRotationAngle() int {
	return s.RotationAngle
}

// SetType sets the value of Type.
func (s *BackgroundFillGradient) SetType(val string) {
	s.Type = val
}

// SetTopColor sets the value of TopColor.
func (s *BackgroundFillGradient) SetTopColor(val int) {
	s.TopColor = val
}

// SetBottomColor sets the value of BottomColor.
func (s *BackgroundFillGradient) SetBottomColor(val int) {
	s.BottomColor = val
}

// SetRotationAngle sets the value of RotationAngle.
func (s *BackgroundFillGradient) SetRotationAngle(val int) {
	s.RotationAngle = val
}

// The background is filled using the selected color.
// Ref: #/components/schemas/BackgroundFillSolid
type BackgroundFillSolid struct {
	// Type of the background fill, always `solid`.
	Type string `json:"type"`
	// The color of the background fill in the RGB24 format.
	Color int `json:"color"`
}

// GetType returns the value of Type.
func (s *BackgroundFillSolid) GetType() string {
	return s.Type
}

// GetColor returns the value of Color.
func (s *BackgroundFillSolid) GetColor() int {
	return s.Color
}

// SetType sets the value of Type.
func (s *BackgroundFillSolid) SetType(val string) {
	s.Type = val
}

// SetColor sets the value of Color.
func (s *BackgroundFillSolid) SetColor(val int) {
	s.Color = val
}

// This object describes the type of a background. Currently, it can be one of.
// Ref: #/components/schemas/BackgroundType
// BackgroundType represents sum type.
type BackgroundType struct {
	Type                    BackgroundTypeType // switch on this field
	BackgroundTypeFill      BackgroundTypeFill
	BackgroundTypeWallpaper BackgroundTypeWallpaper
	BackgroundTypePattern   BackgroundTypePattern
	BackgroundTypeChatTheme BackgroundTypeChatTheme
}

// BackgroundTypeType is oneOf type of BackgroundType.
type BackgroundTypeType string

// Possible values for BackgroundTypeType.
const (
	BackgroundTypeFillBackgroundType      BackgroundTypeType = "BackgroundTypeFill"
	BackgroundTypeWallpaperBackgroundType BackgroundTypeType = "BackgroundTypeWallpaper"
	BackgroundTypePatternBackgroundType   BackgroundTypeType = "BackgroundTypePattern"
	BackgroundTypeChatThemeBackgroundType BackgroundTypeType = "BackgroundTypeChatTheme"
)

// IsBackgroundTypeFill reports whether BackgroundType is BackgroundTypeFill.
func (s BackgroundType) IsBackgroundTypeFill() bool {
	return s.Type == BackgroundTypeFillBackgroundType
}

// IsBackgroundTypeWallpaper reports whether BackgroundType is BackgroundTypeWallpaper.
func (s BackgroundType) IsBackgroundTypeWallpaper() bool {
	return s.Type == BackgroundTypeWallpaperBackgroundType
}

// IsBackgroundTypePattern reports whether BackgroundType is BackgroundTypePattern.
func (s BackgroundType) IsBackgroundTypePattern() bool {
	return s.Type == BackgroundTypePatternBackgroundType
}

// IsBackgroundTypeChatTheme reports whether BackgroundType is BackgroundTypeChatTheme.
func (s BackgroundType) IsBackgroundTypeChatTheme() bool {
	return s.Type == BackgroundTypeChatThemeBackgroundType
}

// SetBackgroundTypeFill sets BackgroundType to BackgroundTypeFill.
func (s *BackgroundType) SetBackgroundTypeFill(v BackgroundTypeFill) {
	s.Type = BackgroundTypeFillBackgroundType
	s.BackgroundTypeFill = v
}

// GetBackgroundTypeFill returns BackgroundTypeFill and true boolean if BackgroundType is BackgroundTypeFill.
func (s BackgroundType) GetBackgroundTypeFill() (v BackgroundTypeFill, ok bool) {
	if !s.IsBackgroundTypeFill() {
		return v, false
	}
	return s.BackgroundTypeFill, true
}

// NewBackgroundTypeFillBackgroundType returns new BackgroundType from BackgroundTypeFill.
func NewBackgroundTypeFillBackgroundType(v BackgroundTypeFill) BackgroundType {
	var s BackgroundType
	s.SetBackgroundTypeFill(v)
	return s
}

// SetBackgroundTypeWallpaper sets BackgroundType to BackgroundTypeWallpaper.
func (s *BackgroundType) SetBackgroundTypeWallpaper(v BackgroundTypeWallpaper) {
	s.Type = BackgroundTypeWallpaperBackgroundType
	s.BackgroundTypeWallpaper = v
}

// GetBackgroundTypeWallpaper returns BackgroundTypeWallpaper and true boolean if BackgroundType is BackgroundTypeWallpaper.
func (s BackgroundType) GetBackgroundTypeWallpaper() (v BackgroundTypeWallpaper, ok bool) {
	if !s.IsBackgroundTypeWallpaper() {
		return v, false
	}
	return s.BackgroundTypeWallpaper, true
}

// NewBackgroundTypeWallpaperBackgroundType returns new BackgroundType from BackgroundTypeWallpaper.
func NewBackgroundTypeWallpaperBackgroundType(v BackgroundTypeWallpaper) BackgroundType {
	var s BackgroundType
	s.SetBackgroundTypeWallpaper(v)
	return s
}

// SetBackgroundTypePattern sets BackgroundType to BackgroundTypePattern.
func (s *BackgroundType) SetBackgroundTypePattern(v BackgroundTypePattern) {
	s.Type = BackgroundTypePatternBackgroundType
	s.BackgroundTypePattern = v
}

// GetBackgroundTypePattern returns BackgroundTypePattern and true boolean if BackgroundType is BackgroundTypePattern.
func (s BackgroundType) GetBackgroundTypePattern() (v BackgroundTypePattern, ok bool) {
	if !s.IsBackgroundTypePattern() {
		return v, false
	}
	return s.BackgroundTypePattern, true
}

// NewBackgroundTypePatternBackgroundType returns new BackgroundType from BackgroundTypePattern.
func NewBackgroundTypePatternBackgroundType(v BackgroundTypePattern) BackgroundType {
	var s BackgroundType
	s.SetBackgroundTypePattern(v)
	return s
}

// SetBackgroundTypeChatTheme sets BackgroundType to BackgroundTypeChatTheme.
func (s *BackgroundType) SetBackgroundTypeChatTheme(v BackgroundTypeChatTheme) {
	s.Type = BackgroundTypeChatThemeBackgroundType
	s.BackgroundTypeChatTheme = v
}

// GetBackgroundTypeChatTheme returns BackgroundTypeChatTheme and true boolean if BackgroundType is BackgroundTypeChatTheme.
func (s BackgroundType) GetBackgroundTypeChatTheme() (v BackgroundTypeChatTheme, ok bool) {
	if !s.IsBackgroundTypeChatTheme() {
		return v, false
	}
	return s.BackgroundTypeChatTheme, true
}

// NewBackgroundTypeChatThemeBackgroundType returns new BackgroundType from BackgroundTypeChatTheme.
func NewBackgroundTypeChatThemeBackgroundType(v BackgroundTypeChatTheme) BackgroundType {
	var s BackgroundType
	s.SetBackgroundTypeChatTheme(v)
	return s
}

// The background is taken directly from a built-in chat theme.
// Ref: #/components/schemas/BackgroundTypeChatTheme
type BackgroundTypeChatTheme struct {
	// Type of the background, always `chat_theme`.
	Type string `json:"type"`
	// Name of the chat theme, which is usually an emoji.
	ThemeName string `json:"theme_name"`
}

// GetType returns the value of Type.
func (s *BackgroundTypeChatTheme) GetType() string {
	return s.Type
}

// GetThemeName returns the value of ThemeName.
func (s *BackgroundTypeChatTheme) GetThemeName() string {
	return s.ThemeName
}

// SetType sets the value of Type.
func (s *BackgroundTypeChatTheme) SetType(val string) {
	s.Type = val
}

// SetThemeName sets the value of ThemeName.
func (s *BackgroundTypeChatTheme) SetThemeName(val string) {
	s.ThemeName = val
}

// The background is automatically filled based on the selected colors.
// Ref: #/components/schemas/BackgroundTypeFill
type BackgroundTypeFill struct {
	// Type of the background, always `fill`.
	Type string         `json:"type"`
	Fill BackgroundFill `json:"fill"`
	// Dimming of the background in dark themes, as a percentage; 0-100.
	DarkThemeDimming int `json:"dark_theme_dimming"`
}

// GetType returns the value of Type.
func (s *BackgroundTypeFill) GetType() string {
	return s.Type
}

// GetFill returns the value of Fill.
func (s *BackgroundTypeFill) GetFill() BackgroundFill {
	return s.Fill
}

// GetDarkThemeDimming returns the value of DarkThemeDimming.
func (s *BackgroundTypeFill) GetDarkThemeDimming() int {
	return s.DarkThemeDimming
}

// SetType sets the value of Type.
func (s *BackgroundTypeFill) SetType(val string) {
	s.Type = val
}

// SetFill sets the value of Fill.
func (s *BackgroundTypeFill) SetFill(val BackgroundFill) {
	s.Fill = val
}

// SetDarkThemeDimming sets the value of DarkThemeDimming.
func (s *BackgroundTypeFill) SetDarkThemeDimming(val int) {
	s.DarkThemeDimming = val
}

// The background is a PNG or TGV (gzipped subset of SVG with MIME type
// `application/x-tgwallpattern`) pattern to be combined with the background fill chosen by the user.
// Ref: #/components/schemas/BackgroundTypePattern
type BackgroundTypePattern struct {
	// Type of the background, always `pattern`.
	Type     string         `json:"type"`
	Document Document       `json:"document"`
	Fill     BackgroundFill `json:"fill"`
	// Intensity of the pattern when it is shown above the filled background; 0-100.
	Intensity int `json:"intensity"`
	// _Optional_. _True_, if the background fill must be applied only to the pattern itself. All other
	// pixels are black in this case. For dark themes only.
	IsInverted OptBool `json:"is_inverted"`
	// _Optional_. _True_, if the background moves slightly when the device is tilted.
	IsMoving OptBool `json:"is_moving"`
}

// GetType returns the value of Type.
func (s *BackgroundTypePattern) GetType() string {
	return s.Type
}

// GetDocument returns the value of Document.
func (s *BackgroundTypePattern) GetDocument() Document {
	return s.Document
}

// GetFill returns the value of Fill.
func (s *BackgroundTypePattern) GetFill() BackgroundFill {
	return s.Fill
}

// GetIntensity returns the value of Intensity.
func (s *BackgroundTypePattern) GetIntensity() int {
	return s.Intensity
}

// GetIsInverted returns the value of IsInverted.
func (s *BackgroundTypePattern) GetIsInverted() OptBool {
	return s.IsInverted
}

// GetIsMoving returns the value of IsMoving.
func (s *BackgroundTypePattern) GetIsMoving() OptBool {
	return s.IsMoving
}

// SetType sets the value of Type.
func (s *BackgroundTypePattern) SetType(val string) {
	s.Type = val
}

// SetDocument sets the value of Document.
func (s *BackgroundTypePattern) SetDocument(val Document) {
	s.Document = val
}

// SetFill sets the value of Fill.
func (s *BackgroundTypePattern) SetFill(val BackgroundFill) {
	s.Fill = val
}

// SetIntensity sets the value of Intensity.
func (s *BackgroundTypePattern) SetIntensity(val int) {
	s.Intensity = val
}

// SetIsInverted sets the value of IsInverted.
func (s *BackgroundTypePattern) SetIsInverted(val OptBool) {
	s.IsInverted = val
}

// SetIsMoving sets the value of IsMoving.
func (s *BackgroundTypePattern) SetIsMoving(val OptBool) {
	s.IsMoving = val
}

// The background is a wallpaper in the JPEG format.
// Ref: #/components/schemas/BackgroundTypeWallpaper
type BackgroundTypeWallpaper struct {
	// Type of the background, always `wallpaper`.
	Type     string   `json:"type"`
	Document Document `json:"document"`
	// Dimming of the background in dark themes, as a percentage; 0-100.
	DarkThemeDimming int `json:"dark_theme_dimming"`
	// _Optional_. _True_, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred
	// with radius 12.
	IsBlurred OptBool `json:"is_blurred"`
	// _Optional_. _True_, if the background moves slightly when the device is tilted.
	IsMoving OptBool `json:"is_moving"`
}

// GetType returns the value of Type.
func (s *BackgroundTypeWallpaper) GetType() string {
	return s.Type
}

// GetDocument returns the value of Document.
func (s *BackgroundTypeWallpaper) GetDocument() Document {
	return s.Document
}

// GetDarkThemeDimming returns the value of DarkThemeDimming.
func (s *BackgroundTypeWallpaper) GetDarkThemeDimming() int {
	return s.DarkThemeDimming
}

// GetIsBlurred returns the value of IsBlurred.
func (s *BackgroundTypeWallpaper) GetIsBlurred() OptBool {
	return s.IsBlurred
}

// GetIsMoving returns the value of IsMoving.
func (s *BackgroundTypeWallpaper) GetIsMoving() OptBool {
	return s.IsMoving
}

// SetType sets the value of Type.
func (s *BackgroundTypeWallpaper) SetType(val string) {
	s.Type = val
}

// SetDocument sets the value of Document.
func (s *BackgroundTypeWallpaper) SetDocument(val Document) {
	s.Document = val
}

// SetDarkThemeDimming sets the value of DarkThemeDimming.
func (s *BackgroundTypeWallpaper) SetDarkThemeDimming(val int) {
	s.DarkThemeDimming = val
}

// SetIsBlurred sets the value of IsBlurred.
func (s *BackgroundTypeWallpaper) SetIsBlurred(val OptBool) {
	s.IsBlurred = val
}

// SetIsMoving sets the value of IsMoving.
func (s *BackgroundTypeWallpaper) SetIsMoving(val OptBool) {
	s.IsMoving = val
}

// Input for banChatMember.
// Ref: #/components/schemas/banChatMember
type BanChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// Date when the user will be unbanned; Unix time. If user is banned for more than 366 days or less
	// than 30 seconds from the current time they are considered to be banned forever. Applied for
	// supergroups and channels only.
	UntilDate OptInt `json:"until_date"`
	// Pass _True_ to delete all messages from the chat for the user that is being removed. If _False_,
	// the user will be able to see messages in the group that were sent before the user was removed.
	// Always _True_ for supergroups and channels.
	RevokeMessages OptBool `json:"revoke_messages"`
}

// GetChatID returns the value of ChatID.
func (s *BanChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *BanChatMember) GetUserID() int64 {
	return s.UserID
}

// GetUntilDate returns the value of UntilDate.
func (s *BanChatMember) GetUntilDate() OptInt {
	return s.UntilDate
}

// GetRevokeMessages returns the value of RevokeMessages.
func (s *BanChatMember) GetRevokeMessages() OptBool {
	return s.RevokeMessages
}

// SetChatID sets the value of ChatID.
func (s *BanChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *BanChatMember) SetUserID(val int64) {
	s.UserID = val
}

// SetUntilDate sets the value of UntilDate.
func (s *BanChatMember) SetUntilDate(val OptInt) {
	s.UntilDate = val
}

// SetRevokeMessages sets the value of RevokeMessages.
func (s *BanChatMember) SetRevokeMessages(val OptBool) {
	s.RevokeMessages = val
}

// Input for banChatSenderChat.
// Ref: #/components/schemas/banChatSenderChat
type BanChatSenderChat struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target sender chat.
	SenderChatID int64 `json:"sender_chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *BanChatSenderChat) GetChatID() ID {
	return s.ChatID
}

// GetSenderChatID returns the value of SenderChatID.
func (s *BanChatSenderChat) GetSenderChatID() int64 {
	return s.SenderChatID
}

// SetChatID sets the value of ChatID.
func (s *BanChatSenderChat) SetChatID(val ID) {
	s.ChatID = val
}

// SetSenderChatID sets the value of SenderChatID.
func (s *BanChatSenderChat) SetSenderChatID(val int64) {
	s.SenderChatID = val
}

// This object represents a bot command.
// Ref: #/components/schemas/BotCommand
type BotCommand struct {
	// Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and
	// underscores.
	Command string `json:"command"`
	// Description of the command; 1-256 characters.
	Description string `json:"description"`
}

// GetCommand returns the value of Command.
func (s *BotCommand) GetCommand() string {
	return s.Command
}

// GetDescription returns the value of Description.
func (s *BotCommand) GetDescription() string {
	return s.Description
}

// SetCommand sets the value of Command.
func (s *BotCommand) SetCommand(val string) {
	s.Command = val
}

// SetDescription sets the value of Description.
func (s *BotCommand) SetDescription(val string) {
	s.Description = val
}

// This object represents the scope to which bot commands are applied. Currently, the following 7
// scopes are supported:.
// Ref: #/components/schemas/BotCommandScope
// BotCommandScope represents sum type.
type BotCommandScope struct {
	Type                                 BotCommandScopeType // switch on this field
	BotCommandScopeDefault               BotCommandScopeDefault
	BotCommandScopeAllPrivateChats       BotCommandScopeAllPrivateChats
	BotCommandScopeAllGroupChats         BotCommandScopeAllGroupChats
	BotCommandScopeAllChatAdministrators BotCommandScopeAllChatAdministrators
	BotCommandScopeChat                  BotCommandScopeChat
	BotCommandScopeChatAdministrators    BotCommandScopeChatAdministrators
	BotCommandScopeChatMember            BotCommandScopeChatMember
}

// BotCommandScopeType is oneOf type of BotCommandScope.
type BotCommandScopeType string

// Possible values for BotCommandScopeType.
const (
	BotCommandScopeDefaultBotCommandScope               BotCommandScopeType = "default"
	BotCommandScopeAllPrivateChatsBotCommandScope       BotCommandScopeType = "all_private_chats"
	BotCommandScopeAllGroupChatsBotCommandScope         BotCommandScopeType = "all_group_chats"
	BotCommandScopeAllChatAdministratorsBotCommandScope BotCommandScopeType = "all_chat_administrators"
	BotCommandScopeChatBotCommandScope                  BotCommandScopeType = "chat"
	BotCommandScopeChatAdministratorsBotCommandScope    BotCommandScopeType = "chat_administrators"
	BotCommandScopeChatMemberBotCommandScope            BotCommandScopeType = "chat_member"
)

// IsBotCommandScopeDefault reports whether BotCommandScope is BotCommandScopeDefault.
func (s BotCommandScope) IsBotCommandScopeDefault() bool {
	return s.Type == BotCommandScopeDefaultBotCommandScope
}

// IsBotCommandScopeAllPrivateChats reports whether BotCommandScope is BotCommandScopeAllPrivateChats.
func (s BotCommandScope) IsBotCommandScopeAllPrivateChats() bool {
	return s.Type == BotCommandScopeAllPrivateChatsBotCommandScope
}

// IsBotCommandScopeAllGroupChats reports whether BotCommandScope is BotCommandScopeAllGroupChats.
func (s BotCommandScope) IsBotCommandScopeAllGroupChats() bool {
	return s.Type == BotCommandScopeAllGroupChatsBotCommandScope
}

// IsBotCommandScopeAllChatAdministrators reports whether BotCommandScope is BotCommandScopeAllChatAdministrators.
func (s BotCommandScope) IsBotCommandScopeAllChatAdministrators() bool {
	return s.Type == BotCommandScopeAllChatAdministratorsBotCommandScope
}

// IsBotCommandScopeChat reports whether BotCommandScope is BotCommandScopeChat.
func (s BotCommandScope) IsBotCommandScopeChat() bool {
	return s.Type == BotCommandScopeChatBotCommandScope
}

// IsBotCommandScopeChatAdministrators reports whether BotCommandScope is BotCommandScopeChatAdministrators.
func (s BotCommandScope) IsBotCommandScopeChatAdministrators() bool {
	return s.Type == BotCommandScopeChatAdministratorsBotCommandScope
}

// IsBotCommandScopeChatMember reports whether BotCommandScope is BotCommandScopeChatMember.
func (s BotCommandScope) IsBotCommandScopeChatMember() bool {
	return s.Type == BotCommandScopeChatMemberBotCommandScope
}

// SetBotCommandScopeDefault sets BotCommandScope to BotCommandScopeDefault.
func (s *BotCommandScope) SetBotCommandScopeDefault(v BotCommandScopeDefault) {
	s.Type = BotCommandScopeDefaultBotCommandScope
	s.BotCommandScopeDefault = v
}

// GetBotCommandScopeDefault returns BotCommandScopeDefault and true boolean if BotCommandScope is BotCommandScopeDefault.
func (s BotCommandScope) GetBotCommandScopeDefault() (v BotCommandScopeDefault, ok bool) {
	if !s.IsBotCommandScopeDefault() {
		return v, false
	}
	return s.BotCommandScopeDefault, true
}

// NewBotCommandScopeDefaultBotCommandScope returns new BotCommandScope from BotCommandScopeDefault.
func NewBotCommandScopeDefaultBotCommandScope(v BotCommandScopeDefault) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeDefault(v)
	return s
}

// SetBotCommandScopeAllPrivateChats sets BotCommandScope to BotCommandScopeAllPrivateChats.
func (s *BotCommandScope) SetBotCommandScopeAllPrivateChats(v BotCommandScopeAllPrivateChats) {
	s.Type = BotCommandScopeAllPrivateChatsBotCommandScope
	s.BotCommandScopeAllPrivateChats = v
}

// GetBotCommandScopeAllPrivateChats returns BotCommandScopeAllPrivateChats and true boolean if BotCommandScope is BotCommandScopeAllPrivateChats.
func (s BotCommandScope) GetBotCommandScopeAllPrivateChats() (v BotCommandScopeAllPrivateChats, ok bool) {
	if !s.IsBotCommandScopeAllPrivateChats() {
		return v, false
	}
	return s.BotCommandScopeAllPrivateChats, true
}

// NewBotCommandScopeAllPrivateChatsBotCommandScope returns new BotCommandScope from BotCommandScopeAllPrivateChats.
func NewBotCommandScopeAllPrivateChatsBotCommandScope(v BotCommandScopeAllPrivateChats) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeAllPrivateChats(v)
	return s
}

// SetBotCommandScopeAllGroupChats sets BotCommandScope to BotCommandScopeAllGroupChats.
func (s *BotCommandScope) SetBotCommandScopeAllGroupChats(v BotCommandScopeAllGroupChats) {
	s.Type = BotCommandScopeAllGroupChatsBotCommandScope
	s.BotCommandScopeAllGroupChats = v
}

// GetBotCommandScopeAllGroupChats returns BotCommandScopeAllGroupChats and true boolean if BotCommandScope is BotCommandScopeAllGroupChats.
func (s BotCommandScope) GetBotCommandScopeAllGroupChats() (v BotCommandScopeAllGroupChats, ok bool) {
	if !s.IsBotCommandScopeAllGroupChats() {
		return v, false
	}
	return s.BotCommandScopeAllGroupChats, true
}

// NewBotCommandScopeAllGroupChatsBotCommandScope returns new BotCommandScope from BotCommandScopeAllGroupChats.
func NewBotCommandScopeAllGroupChatsBotCommandScope(v BotCommandScopeAllGroupChats) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeAllGroupChats(v)
	return s
}

// SetBotCommandScopeAllChatAdministrators sets BotCommandScope to BotCommandScopeAllChatAdministrators.
func (s *BotCommandScope) SetBotCommandScopeAllChatAdministrators(v BotCommandScopeAllChatAdministrators) {
	s.Type = BotCommandScopeAllChatAdministratorsBotCommandScope
	s.BotCommandScopeAllChatAdministrators = v
}

// GetBotCommandScopeAllChatAdministrators returns BotCommandScopeAllChatAdministrators and true boolean if BotCommandScope is BotCommandScopeAllChatAdministrators.
func (s BotCommandScope) GetBotCommandScopeAllChatAdministrators() (v BotCommandScopeAllChatAdministrators, ok bool) {
	if !s.IsBotCommandScopeAllChatAdministrators() {
		return v, false
	}
	return s.BotCommandScopeAllChatAdministrators, true
}

// NewBotCommandScopeAllChatAdministratorsBotCommandScope returns new BotCommandScope from BotCommandScopeAllChatAdministrators.
func NewBotCommandScopeAllChatAdministratorsBotCommandScope(v BotCommandScopeAllChatAdministrators) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeAllChatAdministrators(v)
	return s
}

// SetBotCommandScopeChat sets BotCommandScope to BotCommandScopeChat.
func (s *BotCommandScope) SetBotCommandScopeChat(v BotCommandScopeChat) {
	s.Type = BotCommandScopeChatBotCommandScope
	s.BotCommandScopeChat = v
}

// GetBotCommandScopeChat returns BotCommandScopeChat and true boolean if BotCommandScope is BotCommandScopeChat.
func (s BotCommandScope) GetBotCommandScopeChat() (v BotCommandScopeChat, ok bool) {
	if !s.IsBotCommandScopeChat() {
		return v, false
	}
	return s.BotCommandScopeChat, true
}

// NewBotCommandScopeChatBotCommandScope returns new BotCommandScope from BotCommandScopeChat.
func NewBotCommandScopeChatBotCommandScope(v BotCommandScopeChat) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeChat(v)
	return s
}

// SetBotCommandScopeChatAdministrators sets BotCommandScope to BotCommandScopeChatAdministrators.
func (s *BotCommandScope) SetBotCommandScopeChatAdministrators(v BotCommandScopeChatAdministrators) {
	s.Type = BotCommandScopeChatAdministratorsBotCommandScope
	s.BotCommandScopeChatAdministrators = v
}

// GetBotCommandScopeChatAdministrators returns BotCommandScopeChatAdministrators and true boolean if BotCommandScope is BotCommandScopeChatAdministrators.
func (s BotCommandScope) GetBotCommandScopeChatAdministrators() (v BotCommandScopeChatAdministrators, ok bool) {
	if !s.IsBotCommandScopeChatAdministrators() {
		return v, false
	}
	return s.BotCommandScopeChatAdministrators, true
}

// NewBotCommandScopeChatAdministratorsBotCommandScope returns new BotCommandScope from BotCommandScopeChatAdministrators.
func NewBotCommandScopeChatAdministratorsBotCommandScope(v BotCommandScopeChatAdministrators) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeChatAdministrators(v)
	return s
}

// SetBotCommandScopeChatMember sets BotCommandScope to BotCommandScopeChatMember.
func (s *BotCommandScope) SetBotCommandScopeChatMember(v BotCommandScopeChatMember) {
	s.Type = BotCommandScopeChatMemberBotCommandScope
	s.BotCommandScopeChatMember = v
}

// GetBotCommandScopeChatMember returns BotCommandScopeChatMember and true boolean if BotCommandScope is BotCommandScopeChatMember.
func (s BotCommandScope) GetBotCommandScopeChatMember() (v BotCommandScopeChatMember, ok bool) {
	if !s.IsBotCommandScopeChatMember() {
		return v, false
	}
	return s.BotCommandScopeChatMember, true
}

// NewBotCommandScopeChatMemberBotCommandScope returns new BotCommandScope from BotCommandScopeChatMember.
func NewBotCommandScopeChatMemberBotCommandScope(v BotCommandScopeChatMember) BotCommandScope {
	var s BotCommandScope
	s.SetBotCommandScopeChatMember(v)
	return s
}

// Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands,
// covering all group and supergroup chat administrators.
// Ref: #/components/schemas/BotCommandScopeAllChatAdministrators
type BotCommandScopeAllChatAdministrators struct {
	// Scope type, must be _all_chat_administrators_.
	Type string `json:"type"`
}

// GetType returns the value of Type.
func (s *BotCommandScopeAllChatAdministrators) GetType() string {
	return s.Type
}

// SetType sets the value of Type.
func (s *BotCommandScopeAllChatAdministrators) SetType(val string) {
	s.Type = val
}

// Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands,
// covering all group and supergroup chats.
// Ref: #/components/schemas/BotCommandScopeAllGroupChats
type BotCommandScopeAllGroupChats struct {
	// Scope type, must be _all_group_chats_.
	Type string `json:"type"`
}

// GetType returns the value of Type.
func (s *BotCommandScopeAllGroupChats) GetType() string {
	return s.Type
}

// SetType sets the value of Type.
func (s *BotCommandScopeAllGroupChats) SetType(val string) {
	s.Type = val
}

// Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands,
// covering all private chats.
// Ref: #/components/schemas/BotCommandScopeAllPrivateChats
type BotCommandScopeAllPrivateChats struct {
	// Scope type, must be _all_private_chats_.
	Type string `json:"type"`
}

// GetType returns the value of Type.
func (s *BotCommandScopeAllPrivateChats) GetType() string {
	return s.Type
}

// SetType sets the value of Type.
func (s *BotCommandScopeAllPrivateChats) SetType(val string) {
	s.Type = val
}

// Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands,
// covering a specific chat.
// Ref: #/components/schemas/BotCommandScopeChat
type BotCommandScopeChat struct {
	// Scope type, must be _chat_.
	Type   string `json:"type"`
	ChatID ID     `json:"chat_id"`
}

// GetType returns the value of Type.
func (s *BotCommandScopeChat) GetType() string {
	return s.Type
}

// GetChatID returns the value of ChatID.
func (s *BotCommandScopeChat) GetChatID() ID {
	return s.ChatID
}

// SetType sets the value of Type.
func (s *BotCommandScopeChat) SetType(val string) {
	s.Type = val
}

// SetChatID sets the value of ChatID.
func (s *BotCommandScopeChat) SetChatID(val ID) {
	s.ChatID = val
}

// Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands,
// covering all administrators of a specific group or supergroup chat.
// Ref: #/components/schemas/BotCommandScopeChatAdministrators
type BotCommandScopeChatAdministrators struct {
	// Scope type, must be _chat_administrators_.
	Type   string `json:"type"`
	ChatID ID     `json:"chat_id"`
}

// GetType returns the value of Type.
func (s *BotCommandScopeChatAdministrators) GetType() string {
	return s.Type
}

// GetChatID returns the value of ChatID.
func (s *BotCommandScopeChatAdministrators) GetChatID() ID {
	return s.ChatID
}

// SetType sets the value of Type.
func (s *BotCommandScopeChatAdministrators) SetType(val string) {
	s.Type = val
}

// SetChatID sets the value of ChatID.
func (s *BotCommandScopeChatAdministrators) SetChatID(val ID) {
	s.ChatID = val
}

// Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands,
// covering a specific member of a group or supergroup chat.
// Ref: #/components/schemas/BotCommandScopeChatMember
type BotCommandScopeChatMember struct {
	// Scope type, must be _chat_member_.
	Type   string `json:"type"`
	ChatID ID     `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
}

// GetType returns the value of Type.
func (s *BotCommandScopeChatMember) GetType() string {
	return s.Type
}

// GetChatID returns the value of ChatID.
func (s *BotCommandScopeChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *BotCommandScopeChatMember) GetUserID() int64 {
	return s.UserID
}

// SetType sets the value of Type.
func (s *BotCommandScopeChatMember) SetType(val string) {
	s.Type = val
}

// SetChatID sets the value of ChatID.
func (s *BotCommandScopeChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *BotCommandScopeChatMember) SetUserID(val int64) {
	s.UserID = val
}

// Represents the default [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands.
//
//	Default commands are used if no commands with a [narrower scope](https://core.telegram.
//
// org/bots/api#determining-list-of-commands) are specified for the user.
// Ref: #/components/schemas/BotCommandScopeDefault
type BotCommandScopeDefault struct {
	// Scope type, must be _default_.
	Type string `json:"type"`
}

// GetType returns the value of Type.
func (s *BotCommandScopeDefault) GetType() string {
	return s.Type
}

// SetType sets the value of Type.
func (s *BotCommandScopeDefault) SetType(val string) {
	s.Type = val
}

// Describes the connection of the bot with a business account.
// Ref: #/components/schemas/BusinessConnection
type BusinessConnection struct {
	// Unique identifier of the business connection.
	ID   string `json:"id"`
	User User   `json:"user"`
	// Identifier of a private chat with the user who created the business connection. This number may
	// have more than 32 significant bits and some programming languages may have difficulty/silent
	// defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or
	// double-precision float type are safe for storing this identifier.
	UserChatID int64 `json:"user_chat_id"`
	// Date the connection was established in Unix time.
	Date int `json:"date"`
	// True, if the bot can act on behalf of the business account in chats that were active in the last
	// 24 hours.
	CanReply bool `json:"can_reply"`
	// True, if the connection is active.
	IsEnabled bool `json:"is_enabled"`
}

// GetID returns the value of ID.
func (s *BusinessConnection) GetID() string {
	return s.ID
}

// GetUser returns the value of User.
func (s *BusinessConnection) GetUser() User {
	return s.User
}

// GetUserChatID returns the value of UserChatID.
func (s *BusinessConnection) GetUserChatID() int64 {
	return s.UserChatID
}

// GetDate returns the value of Date.
func (s *BusinessConnection) GetDate() int {
	return s.Date
}

// GetCanReply returns the value of CanReply.
func (s *BusinessConnection) GetCanReply() bool {
	return s.CanReply
}

// GetIsEnabled returns the value of IsEnabled.
func (s *BusinessConnection) GetIsEnabled() bool {
	return s.IsEnabled
}

// SetID sets the value of ID.
func (s *BusinessConnection) SetID(val string) {
	s.ID = val
}

// SetUser sets the value of User.
func (s *BusinessConnection) SetUser(val User) {
	s.User = val
}

// SetUserChatID sets the value of UserChatID.
func (s *BusinessConnection) SetUserChatID(val int64) {
	s.UserChatID = val
}

// SetDate sets the value of Date.
func (s *BusinessConnection) SetDate(val int) {
	s.Date = val
}

// SetCanReply sets the value of CanReply.
func (s *BusinessConnection) SetCanReply(val bool) {
	s.CanReply = val
}

// SetIsEnabled sets the value of IsEnabled.
func (s *BusinessConnection) SetIsEnabled(val bool) {
	s.IsEnabled = val
}

// This object is received when messages are deleted from a connected business account.
// Ref: #/components/schemas/BusinessMessagesDeleted
type BusinessMessagesDeleted struct {
	// Unique identifier of the business connection.
	BusinessConnectionID string `json:"business_connection_id"`
	Chat                 Chat   `json:"chat"`
	// The list of identifiers of deleted messages in the chat of the business account.
	MessageIds []int `json:"message_ids"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *BusinessMessagesDeleted) GetBusinessConnectionID() string {
	return s.BusinessConnectionID
}

// GetChat returns the value of Chat.
func (s *BusinessMessagesDeleted) GetChat() Chat {
	return s.Chat
}

// GetMessageIds returns the value of MessageIds.
func (s *BusinessMessagesDeleted) GetMessageIds() []int {
	return s.MessageIds
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *BusinessMessagesDeleted) SetBusinessConnectionID(val string) {
	s.BusinessConnectionID = val
}

// SetChat sets the value of Chat.
func (s *BusinessMessagesDeleted) SetChat(val Chat) {
	s.Chat = val
}

// SetMessageIds sets the value of MessageIds.
func (s *BusinessMessagesDeleted) SetMessageIds(val []int) {
	s.MessageIds = val
}

// A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up
// your game.
// Ref: #/components/schemas/CallbackGame
type CallbackGame map[string]jx.Raw

func (s *CallbackGame) init() CallbackGame {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// This object represents an incoming callback query from a callback button in an [inline
// keyboard](https://core.telegram.org/bots/features#inline-keyboards). If the button that originated
// the query was attached to a message sent by the bot, the field _message_ will be present. If the
// button was attached to a message sent via the bot (in [inline mode](https://core.telegram.
// org/bots/api#inline-mode)), the field _inline_message_id_ will be present. Exactly one of the
// fields _data_ or _game_short_name_ will be present.
// Ref: #/components/schemas/CallbackQuery
type CallbackQuery struct {
	// Unique identifier for this query.
	ID      string                      `json:"id"`
	From    User                        `json:"from"`
	Message OptMaybeInaccessibleMessage `json:"message"`
	// _Optional_. Identifier of the message sent via the bot in inline mode, that originated the query.
	InlineMessageID OptString `json:"inline_message_id"`
	// Global identifier, uniquely corresponding to the chat to which the message with the callback
	// button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api#games).
	ChatInstance string `json:"chat_instance"`
	// _Optional_. Data associated with the callback button. Be aware that the message originated the
	// query can contain no callback buttons with this data.
	Data OptString `json:"data"`
	// _Optional_. Short name of a [Game](https://core.telegram.org/bots/api#games) to be returned,
	// serves as the unique identifier for the game.
	GameShortName OptString `json:"game_short_name"`
}

// GetID returns the value of ID.
func (s *CallbackQuery) GetID() string {
	return s.ID
}

// GetFrom returns the value of From.
func (s *CallbackQuery) GetFrom() User {
	return s.From
}

// GetMessage returns the value of Message.
func (s *CallbackQuery) GetMessage() OptMaybeInaccessibleMessage {
	return s.Message
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *CallbackQuery) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetChatInstance returns the value of ChatInstance.
func (s *CallbackQuery) GetChatInstance() string {
	return s.ChatInstance
}

// GetData returns the value of Data.
func (s *CallbackQuery) GetData() OptString {
	return s.Data
}

// GetGameShortName returns the value of GameShortName.
func (s *CallbackQuery) GetGameShortName() OptString {
	return s.GameShortName
}

// SetID sets the value of ID.
func (s *CallbackQuery) SetID(val string) {
	s.ID = val
}

// SetFrom sets the value of From.
func (s *CallbackQuery) SetFrom(val User) {
	s.From = val
}

// SetMessage sets the value of Message.
func (s *CallbackQuery) SetMessage(val OptMaybeInaccessibleMessage) {
	s.Message = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *CallbackQuery) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetChatInstance sets the value of ChatInstance.
func (s *CallbackQuery) SetChatInstance(val string) {
	s.ChatInstance = val
}

// SetData sets the value of Data.
func (s *CallbackQuery) SetData(val OptString) {
	s.Data = val
}

// SetGameShortName sets the value of GameShortName.
func (s *CallbackQuery) SetGameShortName(val OptString) {
	s.GameShortName = val
}

// This object represents a chat.
// Ref: #/components/schemas/Chat
type Chat struct {
	// Unique identifier for this chat. This number may have more than 32 significant bits and some
	// programming languages may have difficulty/silent defects in interpreting it. But it has at most 52
	// significant bits, so a signed 64-bit integer or double-precision float type are safe for storing
	// this identifier.
	ID int64 `json:"id"`
	// Type of the chat, can be either `private`, `group`, `supergroup` or `channel`.
	Type ChatType `json:"type"`
	// _Optional_. Title, for supergroups, channels and group chats.
	Title OptString `json:"title"`
	// _Optional_. Username, for private chats, supergroups and channels if available.
	Username OptString `json:"username"`
	// _Optional_. First name of the other party in a private chat.
	FirstName OptString `json:"first_name"`
	// _Optional_. Last name of the other party in a private chat.
	LastName OptString `json:"last_name"`
	// _Optional_. _True_, if the supergroup chat is a forum (has [topics](https://telegram.
	// org/blog/topics-in-groups-collectible-usernames#topics-in-groups) enabled).
	IsForum                     OptBool `json:"is_forum"`
	AllMembersAreAdministrators OptBool `json:"all_members_are_administrators"`
}

// GetID returns the value of ID.
func (s *Chat) GetID() int64 {
	return s.ID
}

// GetType returns the value of Type.
func (s *Chat) GetType() ChatType {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *Chat) GetTitle() OptString {
	return s.Title
}

// GetUsername returns the value of Username.
func (s *Chat) GetUsername() OptString {
	return s.Username
}

// GetFirstName returns the value of FirstName.
func (s *Chat) GetFirstName() OptString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *Chat) GetLastName() OptString {
	return s.LastName
}

// GetIsForum returns the value of IsForum.
func (s *Chat) GetIsForum() OptBool {
	return s.IsForum
}

// GetAllMembersAreAdministrators returns the value of AllMembersAreAdministrators.
func (s *Chat) GetAllMembersAreAdministrators() OptBool {
	return s.AllMembersAreAdministrators
}

// SetID sets the value of ID.
func (s *Chat) SetID(val int64) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Chat) SetType(val ChatType) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *Chat) SetTitle(val OptString) {
	s.Title = val
}

// SetUsername sets the value of Username.
func (s *Chat) SetUsername(val OptString) {
	s.Username = val
}

// SetFirstName sets the value of FirstName.
func (s *Chat) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *Chat) SetLastName(val OptString) {
	s.LastName = val
}

// SetIsForum sets the value of IsForum.
func (s *Chat) SetIsForum(val OptBool) {
	s.IsForum = val
}

// SetAllMembersAreAdministrators sets the value of AllMembersAreAdministrators.
func (s *Chat) SetAllMembersAreAdministrators(val OptBool) {
	s.AllMembersAreAdministrators = val
}

// Represents the rights of an administrator in a chat.
// Ref: #/components/schemas/ChatAdministratorRights
type ChatAdministratorRights struct {
	// _True_, if the user's presence in the chat is hidden.
	IsAnonymous bool `json:"is_anonymous"`
	// _True_, if the administrator can access the chat event log, get boost list, see hidden supergroup
	// and channel members, report spam messages and ignore slow mode. Implied by any other administrator
	// privilege.
	CanManageChat bool `json:"can_manage_chat"`
	// _True_, if the administrator can delete messages of other users.
	CanDeleteMessages bool `json:"can_delete_messages"`
	// _True_, if the administrator can manage video chats.
	CanManageVideoChats bool `json:"can_manage_video_chats"`
	// _True_, if the administrator can restrict, ban or unban chat members, or access supergroup
	// statistics.
	CanRestrictMembers bool `json:"can_restrict_members"`
	// _True_, if the administrator can add new administrators with a subset of their own privileges or
	// demote administrators that they have promoted, directly or indirectly (promoted by administrators
	// that were appointed by the user).
	CanPromoteMembers bool `json:"can_promote_members"`
	// _True_, if the user is allowed to change the chat title, photo and other settings.
	CanChangeInfo bool `json:"can_change_info"`
	// _True_, if the user is allowed to invite new users to the chat.
	CanInviteUsers bool `json:"can_invite_users"`
	// _True_, if the administrator can post stories to the chat.
	CanPostStories bool `json:"can_post_stories"`
	// _True_, if the administrator can edit stories posted by other users, post stories to the chat page,
	//  pin chat stories, and access the chat's story archive.
	CanEditStories bool `json:"can_edit_stories"`
	// _True_, if the administrator can delete stories posted by other users.
	CanDeleteStories bool `json:"can_delete_stories"`
	// _Optional_. _True_, if the administrator can post messages in the channel, or access channel
	// statistics; for channels only.
	CanPostMessages OptBool `json:"can_post_messages"`
	// _Optional_. _True_, if the administrator can edit messages of other users and can pin messages;
	// for channels only.
	CanEditMessages OptBool `json:"can_edit_messages"`
	// _Optional_. _True_, if the user is allowed to pin messages; for groups and supergroups only.
	CanPinMessages OptBool `json:"can_pin_messages"`
	// _Optional_. _True_, if the user is allowed to create, rename, close, and reopen forum topics; for
	// supergroups only.
	CanManageTopics OptBool `json:"can_manage_topics"`
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s *ChatAdministratorRights) GetIsAnonymous() bool {
	return s.IsAnonymous
}

// GetCanManageChat returns the value of CanManageChat.
func (s *ChatAdministratorRights) GetCanManageChat() bool {
	return s.CanManageChat
}

// GetCanDeleteMessages returns the value of CanDeleteMessages.
func (s *ChatAdministratorRights) GetCanDeleteMessages() bool {
	return s.CanDeleteMessages
}

// GetCanManageVideoChats returns the value of CanManageVideoChats.
func (s *ChatAdministratorRights) GetCanManageVideoChats() bool {
	return s.CanManageVideoChats
}

// GetCanRestrictMembers returns the value of CanRestrictMembers.
func (s *ChatAdministratorRights) GetCanRestrictMembers() bool {
	return s.CanRestrictMembers
}

// GetCanPromoteMembers returns the value of CanPromoteMembers.
func (s *ChatAdministratorRights) GetCanPromoteMembers() bool {
	return s.CanPromoteMembers
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s *ChatAdministratorRights) GetCanChangeInfo() bool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s *ChatAdministratorRights) GetCanInviteUsers() bool {
	return s.CanInviteUsers
}

// GetCanPostStories returns the value of CanPostStories.
func (s *ChatAdministratorRights) GetCanPostStories() bool {
	return s.CanPostStories
}

// GetCanEditStories returns the value of CanEditStories.
func (s *ChatAdministratorRights) GetCanEditStories() bool {
	return s.CanEditStories
}

// GetCanDeleteStories returns the value of CanDeleteStories.
func (s *ChatAdministratorRights) GetCanDeleteStories() bool {
	return s.CanDeleteStories
}

// GetCanPostMessages returns the value of CanPostMessages.
func (s *ChatAdministratorRights) GetCanPostMessages() OptBool {
	return s.CanPostMessages
}

// GetCanEditMessages returns the value of CanEditMessages.
func (s *ChatAdministratorRights) GetCanEditMessages() OptBool {
	return s.CanEditMessages
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s *ChatAdministratorRights) GetCanPinMessages() OptBool {
	return s.CanPinMessages
}

// GetCanManageTopics returns the value of CanManageTopics.
func (s *ChatAdministratorRights) GetCanManageTopics() OptBool {
	return s.CanManageTopics
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *ChatAdministratorRights) SetIsAnonymous(val bool) {
	s.IsAnonymous = val
}

// SetCanManageChat sets the value of CanManageChat.
func (s *ChatAdministratorRights) SetCanManageChat(val bool) {
	s.CanManageChat = val
}

// SetCanDeleteMessages sets the value of CanDeleteMessages.
func (s *ChatAdministratorRights) SetCanDeleteMessages(val bool) {
	s.CanDeleteMessages = val
}

// SetCanManageVideoChats sets the value of CanManageVideoChats.
func (s *ChatAdministratorRights) SetCanManageVideoChats(val bool) {
	s.CanManageVideoChats = val
}

// SetCanRestrictMembers sets the value of CanRestrictMembers.
func (s *ChatAdministratorRights) SetCanRestrictMembers(val bool) {
	s.CanRestrictMembers = val
}

// SetCanPromoteMembers sets the value of CanPromoteMembers.
func (s *ChatAdministratorRights) SetCanPromoteMembers(val bool) {
	s.CanPromoteMembers = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *ChatAdministratorRights) SetCanChangeInfo(val bool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *ChatAdministratorRights) SetCanInviteUsers(val bool) {
	s.CanInviteUsers = val
}

// SetCanPostStories sets the value of CanPostStories.
func (s *ChatAdministratorRights) SetCanPostStories(val bool) {
	s.CanPostStories = val
}

// SetCanEditStories sets the value of CanEditStories.
func (s *ChatAdministratorRights) SetCanEditStories(val bool) {
	s.CanEditStories = val
}

// SetCanDeleteStories sets the value of CanDeleteStories.
func (s *ChatAdministratorRights) SetCanDeleteStories(val bool) {
	s.CanDeleteStories = val
}

// SetCanPostMessages sets the value of CanPostMessages.
func (s *ChatAdministratorRights) SetCanPostMessages(val OptBool) {
	s.CanPostMessages = val
}

// SetCanEditMessages sets the value of CanEditMessages.
func (s *ChatAdministratorRights) SetCanEditMessages(val OptBool) {
	s.CanEditMessages = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *ChatAdministratorRights) SetCanPinMessages(val OptBool) {
	s.CanPinMessages = val
}

// SetCanManageTopics sets the value of CanManageTopics.
func (s *ChatAdministratorRights) SetCanManageTopics(val OptBool) {
	s.CanManageTopics = val
}

// This object represents a chat background.
// Ref: #/components/schemas/ChatBackground
type ChatBackground struct {
	Type BackgroundType `json:"type"`
}

// GetType returns the value of Type.
func (s *ChatBackground) GetType() BackgroundType {
	return s.Type
}

// SetType sets the value of Type.
func (s *ChatBackground) SetType(val BackgroundType) {
	s.Type = val
}

// This object contains information about a chat boost.
// Ref: #/components/schemas/ChatBoost
type ChatBoost struct {
	// Unique identifier of the boost.
	BoostID string `json:"boost_id"`
	// Point in time (Unix timestamp) when the chat was boosted.
	AddDate int `json:"add_date"`
	// Point in time (Unix timestamp) when the boost will automatically expire, unless the booster's
	// Telegram Premium subscription is prolonged.
	ExpirationDate int             `json:"expiration_date"`
	Source         ChatBoostSource `json:"source"`
}

// GetBoostID returns the value of BoostID.
func (s *ChatBoost) GetBoostID() string {
	return s.BoostID
}

// GetAddDate returns the value of AddDate.
func (s *ChatBoost) GetAddDate() int {
	return s.AddDate
}

// GetExpirationDate returns the value of ExpirationDate.
func (s *ChatBoost) GetExpirationDate() int {
	return s.ExpirationDate
}

// GetSource returns the value of Source.
func (s *ChatBoost) GetSource() ChatBoostSource {
	return s.Source
}

// SetBoostID sets the value of BoostID.
func (s *ChatBoost) SetBoostID(val string) {
	s.BoostID = val
}

// SetAddDate sets the value of AddDate.
func (s *ChatBoost) SetAddDate(val int) {
	s.AddDate = val
}

// SetExpirationDate sets the value of ExpirationDate.
func (s *ChatBoost) SetExpirationDate(val int) {
	s.ExpirationDate = val
}

// SetSource sets the value of Source.
func (s *ChatBoost) SetSource(val ChatBoostSource) {
	s.Source = val
}

// This object represents a service message about a user boosting a chat.
// Ref: #/components/schemas/ChatBoostAdded
type ChatBoostAdded struct {
	// Number of boosts added by the user.
	BoostCount int `json:"boost_count"`
}

// GetBoostCount returns the value of BoostCount.
func (s *ChatBoostAdded) GetBoostCount() int {
	return s.BoostCount
}

// SetBoostCount sets the value of BoostCount.
func (s *ChatBoostAdded) SetBoostCount(val int) {
	s.BoostCount = val
}

// This object represents a boost removed from a chat.
// Ref: #/components/schemas/ChatBoostRemoved
type ChatBoostRemoved struct {
	Chat Chat `json:"chat"`
	// Unique identifier of the boost.
	BoostID string `json:"boost_id"`
	// Point in time (Unix timestamp) when the boost was removed.
	RemoveDate int             `json:"remove_date"`
	Source     ChatBoostSource `json:"source"`
}

// GetChat returns the value of Chat.
func (s *ChatBoostRemoved) GetChat() Chat {
	return s.Chat
}

// GetBoostID returns the value of BoostID.
func (s *ChatBoostRemoved) GetBoostID() string {
	return s.BoostID
}

// GetRemoveDate returns the value of RemoveDate.
func (s *ChatBoostRemoved) GetRemoveDate() int {
	return s.RemoveDate
}

// GetSource returns the value of Source.
func (s *ChatBoostRemoved) GetSource() ChatBoostSource {
	return s.Source
}

// SetChat sets the value of Chat.
func (s *ChatBoostRemoved) SetChat(val Chat) {
	s.Chat = val
}

// SetBoostID sets the value of BoostID.
func (s *ChatBoostRemoved) SetBoostID(val string) {
	s.BoostID = val
}

// SetRemoveDate sets the value of RemoveDate.
func (s *ChatBoostRemoved) SetRemoveDate(val int) {
	s.RemoveDate = val
}

// SetSource sets the value of Source.
func (s *ChatBoostRemoved) SetSource(val ChatBoostSource) {
	s.Source = val
}

// This object describes the source of a chat boost. It can be one of.
// Ref: #/components/schemas/ChatBoostSource
// ChatBoostSource represents sum type.
type ChatBoostSource struct {
	Type                    ChatBoostSourceType // switch on this field
	ChatBoostSourcePremium  ChatBoostSourcePremium
	ChatBoostSourceGiftCode ChatBoostSourceGiftCode
	ChatBoostSourceGiveaway ChatBoostSourceGiveaway
}

// ChatBoostSourceType is oneOf type of ChatBoostSource.
type ChatBoostSourceType string

// Possible values for ChatBoostSourceType.
const (
	ChatBoostSourcePremiumChatBoostSource  ChatBoostSourceType = "ChatBoostSourcePremium"
	ChatBoostSourceGiftCodeChatBoostSource ChatBoostSourceType = "ChatBoostSourceGiftCode"
	ChatBoostSourceGiveawayChatBoostSource ChatBoostSourceType = "ChatBoostSourceGiveaway"
)

// IsChatBoostSourcePremium reports whether ChatBoostSource is ChatBoostSourcePremium.
func (s ChatBoostSource) IsChatBoostSourcePremium() bool {
	return s.Type == ChatBoostSourcePremiumChatBoostSource
}

// IsChatBoostSourceGiftCode reports whether ChatBoostSource is ChatBoostSourceGiftCode.
func (s ChatBoostSource) IsChatBoostSourceGiftCode() bool {
	return s.Type == ChatBoostSourceGiftCodeChatBoostSource
}

// IsChatBoostSourceGiveaway reports whether ChatBoostSource is ChatBoostSourceGiveaway.
func (s ChatBoostSource) IsChatBoostSourceGiveaway() bool {
	return s.Type == ChatBoostSourceGiveawayChatBoostSource
}

// SetChatBoostSourcePremium sets ChatBoostSource to ChatBoostSourcePremium.
func (s *ChatBoostSource) SetChatBoostSourcePremium(v ChatBoostSourcePremium) {
	s.Type = ChatBoostSourcePremiumChatBoostSource
	s.ChatBoostSourcePremium = v
}

// GetChatBoostSourcePremium returns ChatBoostSourcePremium and true boolean if ChatBoostSource is ChatBoostSourcePremium.
func (s ChatBoostSource) GetChatBoostSourcePremium() (v ChatBoostSourcePremium, ok bool) {
	if !s.IsChatBoostSourcePremium() {
		return v, false
	}
	return s.ChatBoostSourcePremium, true
}

// NewChatBoostSourcePremiumChatBoostSource returns new ChatBoostSource from ChatBoostSourcePremium.
func NewChatBoostSourcePremiumChatBoostSource(v ChatBoostSourcePremium) ChatBoostSource {
	var s ChatBoostSource
	s.SetChatBoostSourcePremium(v)
	return s
}

// SetChatBoostSourceGiftCode sets ChatBoostSource to ChatBoostSourceGiftCode.
func (s *ChatBoostSource) SetChatBoostSourceGiftCode(v ChatBoostSourceGiftCode) {
	s.Type = ChatBoostSourceGiftCodeChatBoostSource
	s.ChatBoostSourceGiftCode = v
}

// GetChatBoostSourceGiftCode returns ChatBoostSourceGiftCode and true boolean if ChatBoostSource is ChatBoostSourceGiftCode.
func (s ChatBoostSource) GetChatBoostSourceGiftCode() (v ChatBoostSourceGiftCode, ok bool) {
	if !s.IsChatBoostSourceGiftCode() {
		return v, false
	}
	return s.ChatBoostSourceGiftCode, true
}

// NewChatBoostSourceGiftCodeChatBoostSource returns new ChatBoostSource from ChatBoostSourceGiftCode.
func NewChatBoostSourceGiftCodeChatBoostSource(v ChatBoostSourceGiftCode) ChatBoostSource {
	var s ChatBoostSource
	s.SetChatBoostSourceGiftCode(v)
	return s
}

// SetChatBoostSourceGiveaway sets ChatBoostSource to ChatBoostSourceGiveaway.
func (s *ChatBoostSource) SetChatBoostSourceGiveaway(v ChatBoostSourceGiveaway) {
	s.Type = ChatBoostSourceGiveawayChatBoostSource
	s.ChatBoostSourceGiveaway = v
}

// GetChatBoostSourceGiveaway returns ChatBoostSourceGiveaway and true boolean if ChatBoostSource is ChatBoostSourceGiveaway.
func (s ChatBoostSource) GetChatBoostSourceGiveaway() (v ChatBoostSourceGiveaway, ok bool) {
	if !s.IsChatBoostSourceGiveaway() {
		return v, false
	}
	return s.ChatBoostSourceGiveaway, true
}

// NewChatBoostSourceGiveawayChatBoostSource returns new ChatBoostSource from ChatBoostSourceGiveaway.
func NewChatBoostSourceGiveawayChatBoostSource(v ChatBoostSourceGiveaway) ChatBoostSource {
	var s ChatBoostSource
	s.SetChatBoostSourceGiveaway(v)
	return s
}

// The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such
// code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.
// Ref: #/components/schemas/ChatBoostSourceGiftCode
type ChatBoostSourceGiftCode struct {
	// Source of the boost, always `gift_code`.
	Source string `json:"source"`
	User   User   `json:"user"`
}

// GetSource returns the value of Source.
func (s *ChatBoostSourceGiftCode) GetSource() string {
	return s.Source
}

// GetUser returns the value of User.
func (s *ChatBoostSourceGiftCode) GetUser() User {
	return s.User
}

// SetSource sets the value of Source.
func (s *ChatBoostSourceGiftCode) SetSource(val string) {
	s.Source = val
}

// SetUser sets the value of User.
func (s *ChatBoostSourceGiftCode) SetUser(val User) {
	s.User = val
}

// The boost was obtained by the creation of a Telegram Premium giveaway. This boosts the chat 4
// times for the duration of the corresponding Telegram Premium subscription.
// Ref: #/components/schemas/ChatBoostSourceGiveaway
type ChatBoostSourceGiveaway struct {
	// Source of the boost, always `giveaway`.
	Source string `json:"source"`
	// Identifier of a message in the chat with the giveaway; the message could have been deleted already.
	//  May be 0 if the message isn't sent yet.
	GiveawayMessageID int     `json:"giveaway_message_id"`
	User              OptUser `json:"user"`
	// _Optional_. True, if the giveaway was completed, but there was no user to win the prize.
	IsUnclaimed OptBool `json:"is_unclaimed"`
}

// GetSource returns the value of Source.
func (s *ChatBoostSourceGiveaway) GetSource() string {
	return s.Source
}

// GetGiveawayMessageID returns the value of GiveawayMessageID.
func (s *ChatBoostSourceGiveaway) GetGiveawayMessageID() int {
	return s.GiveawayMessageID
}

// GetUser returns the value of User.
func (s *ChatBoostSourceGiveaway) GetUser() OptUser {
	return s.User
}

// GetIsUnclaimed returns the value of IsUnclaimed.
func (s *ChatBoostSourceGiveaway) GetIsUnclaimed() OptBool {
	return s.IsUnclaimed
}

// SetSource sets the value of Source.
func (s *ChatBoostSourceGiveaway) SetSource(val string) {
	s.Source = val
}

// SetGiveawayMessageID sets the value of GiveawayMessageID.
func (s *ChatBoostSourceGiveaway) SetGiveawayMessageID(val int) {
	s.GiveawayMessageID = val
}

// SetUser sets the value of User.
func (s *ChatBoostSourceGiveaway) SetUser(val OptUser) {
	s.User = val
}

// SetIsUnclaimed sets the value of IsUnclaimed.
func (s *ChatBoostSourceGiveaway) SetIsUnclaimed(val OptBool) {
	s.IsUnclaimed = val
}

// The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium
// subscription to another user.
// Ref: #/components/schemas/ChatBoostSourcePremium
type ChatBoostSourcePremium struct {
	// Source of the boost, always `premium`.
	Source string `json:"source"`
	User   User   `json:"user"`
}

// GetSource returns the value of Source.
func (s *ChatBoostSourcePremium) GetSource() string {
	return s.Source
}

// GetUser returns the value of User.
func (s *ChatBoostSourcePremium) GetUser() User {
	return s.User
}

// SetSource sets the value of Source.
func (s *ChatBoostSourcePremium) SetSource(val string) {
	s.Source = val
}

// SetUser sets the value of User.
func (s *ChatBoostSourcePremium) SetUser(val User) {
	s.User = val
}

// This object represents a boost added to a chat or changed.
// Ref: #/components/schemas/ChatBoostUpdated
type ChatBoostUpdated struct {
	Chat  Chat      `json:"chat"`
	Boost ChatBoost `json:"boost"`
}

// GetChat returns the value of Chat.
func (s *ChatBoostUpdated) GetChat() Chat {
	return s.Chat
}

// GetBoost returns the value of Boost.
func (s *ChatBoostUpdated) GetBoost() ChatBoost {
	return s.Boost
}

// SetChat sets the value of Chat.
func (s *ChatBoostUpdated) SetChat(val Chat) {
	s.Chat = val
}

// SetBoost sets the value of Boost.
func (s *ChatBoostUpdated) SetBoost(val ChatBoost) {
	s.Boost = val
}

// Represents an invite link for a chat.
// Ref: #/components/schemas/ChatInviteLink
type ChatInviteLink struct {
	// The invite link. If the link was created by another chat administrator, then the second part of
	// the link will be replaced with `...`.
	InviteLink string `json:"invite_link"`
	Creator    User   `json:"creator"`
	// _True_, if users joining the chat via the link need to be approved by chat administrators.
	CreatesJoinRequest bool `json:"creates_join_request"`
	// _True_, if the link is primary.
	IsPrimary bool `json:"is_primary"`
	// _True_, if the link is revoked.
	IsRevoked bool `json:"is_revoked"`
	// _Optional_. Invite link name.
	Name OptString `json:"name"`
	// _Optional_. Point in time (Unix timestamp) when the link will expire or has been expired.
	ExpireDate OptInt `json:"expire_date"`
	// _Optional_. The maximum number of users that can be members of the chat simultaneously after
	// joining the chat via this invite link; 1-99999.
	MemberLimit OptInt `json:"member_limit"`
	// _Optional_. Number of pending join requests created using this link.
	PendingJoinRequestCount OptInt `json:"pending_join_request_count"`
}

// GetInviteLink returns the value of InviteLink.
func (s *ChatInviteLink) GetInviteLink() string {
	return s.InviteLink
}

// GetCreator returns the value of Creator.
func (s *ChatInviteLink) GetCreator() User {
	return s.Creator
}

// GetCreatesJoinRequest returns the value of CreatesJoinRequest.
func (s *ChatInviteLink) GetCreatesJoinRequest() bool {
	return s.CreatesJoinRequest
}

// GetIsPrimary returns the value of IsPrimary.
func (s *ChatInviteLink) GetIsPrimary() bool {
	return s.IsPrimary
}

// GetIsRevoked returns the value of IsRevoked.
func (s *ChatInviteLink) GetIsRevoked() bool {
	return s.IsRevoked
}

// GetName returns the value of Name.
func (s *ChatInviteLink) GetName() OptString {
	return s.Name
}

// GetExpireDate returns the value of ExpireDate.
func (s *ChatInviteLink) GetExpireDate() OptInt {
	return s.ExpireDate
}

// GetMemberLimit returns the value of MemberLimit.
func (s *ChatInviteLink) GetMemberLimit() OptInt {
	return s.MemberLimit
}

// GetPendingJoinRequestCount returns the value of PendingJoinRequestCount.
func (s *ChatInviteLink) GetPendingJoinRequestCount() OptInt {
	return s.PendingJoinRequestCount
}

// SetInviteLink sets the value of InviteLink.
func (s *ChatInviteLink) SetInviteLink(val string) {
	s.InviteLink = val
}

// SetCreator sets the value of Creator.
func (s *ChatInviteLink) SetCreator(val User) {
	s.Creator = val
}

// SetCreatesJoinRequest sets the value of CreatesJoinRequest.
func (s *ChatInviteLink) SetCreatesJoinRequest(val bool) {
	s.CreatesJoinRequest = val
}

// SetIsPrimary sets the value of IsPrimary.
func (s *ChatInviteLink) SetIsPrimary(val bool) {
	s.IsPrimary = val
}

// SetIsRevoked sets the value of IsRevoked.
func (s *ChatInviteLink) SetIsRevoked(val bool) {
	s.IsRevoked = val
}

// SetName sets the value of Name.
func (s *ChatInviteLink) SetName(val OptString) {
	s.Name = val
}

// SetExpireDate sets the value of ExpireDate.
func (s *ChatInviteLink) SetExpireDate(val OptInt) {
	s.ExpireDate = val
}

// SetMemberLimit sets the value of MemberLimit.
func (s *ChatInviteLink) SetMemberLimit(val OptInt) {
	s.MemberLimit = val
}

// SetPendingJoinRequestCount sets the value of PendingJoinRequestCount.
func (s *ChatInviteLink) SetPendingJoinRequestCount(val OptInt) {
	s.PendingJoinRequestCount = val
}

// Represents a join request sent to a chat.
// Ref: #/components/schemas/ChatJoinRequest
type ChatJoinRequest struct {
	Chat Chat `json:"chat"`
	From User `json:"from"`
	// Identifier of a private chat with the user who sent the join request. This number may have more
	// than 32 significant bits and some programming languages may have difficulty/silent defects in
	// interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision
	// float type are safe for storing this identifier. The bot can use this identifier for 5 minutes to
	// send messages until the join request is processed, assuming no other administrator contacted the
	// user.
	UserChatID int64 `json:"user_chat_id"`
	// Date the request was sent in Unix time.
	Date int `json:"date"`
	// _Optional_. Bio of the user.
	Bio        OptString         `json:"bio"`
	InviteLink OptChatInviteLink `json:"invite_link"`
}

// GetChat returns the value of Chat.
func (s *ChatJoinRequest) GetChat() Chat {
	return s.Chat
}

// GetFrom returns the value of From.
func (s *ChatJoinRequest) GetFrom() User {
	return s.From
}

// GetUserChatID returns the value of UserChatID.
func (s *ChatJoinRequest) GetUserChatID() int64 {
	return s.UserChatID
}

// GetDate returns the value of Date.
func (s *ChatJoinRequest) GetDate() int {
	return s.Date
}

// GetBio returns the value of Bio.
func (s *ChatJoinRequest) GetBio() OptString {
	return s.Bio
}

// GetInviteLink returns the value of InviteLink.
func (s *ChatJoinRequest) GetInviteLink() OptChatInviteLink {
	return s.InviteLink
}

// SetChat sets the value of Chat.
func (s *ChatJoinRequest) SetChat(val Chat) {
	s.Chat = val
}

// SetFrom sets the value of From.
func (s *ChatJoinRequest) SetFrom(val User) {
	s.From = val
}

// SetUserChatID sets the value of UserChatID.
func (s *ChatJoinRequest) SetUserChatID(val int64) {
	s.UserChatID = val
}

// SetDate sets the value of Date.
func (s *ChatJoinRequest) SetDate(val int) {
	s.Date = val
}

// SetBio sets the value of Bio.
func (s *ChatJoinRequest) SetBio(val OptString) {
	s.Bio = val
}

// SetInviteLink sets the value of InviteLink.
func (s *ChatJoinRequest) SetInviteLink(val OptChatInviteLink) {
	s.InviteLink = val
}

// This object contains information about one member of a chat. Currently, the following 6 types of
// chat members are supported:.
// Ref: #/components/schemas/ChatMember
// ChatMember represents sum type.
type ChatMember struct {
	Type                    ChatMemberType // switch on this field
	ChatMemberOwner         ChatMemberOwner
	ChatMemberAdministrator ChatMemberAdministrator
	ChatMemberMember        ChatMemberMember
	ChatMemberRestricted    ChatMemberRestricted
	ChatMemberLeft          ChatMemberLeft
	ChatMemberBanned        ChatMemberBanned
}

// ChatMemberType is oneOf type of ChatMember.
type ChatMemberType string

// Possible values for ChatMemberType.
const (
	ChatMemberOwnerChatMember         ChatMemberType = "ChatMemberOwner"
	ChatMemberAdministratorChatMember ChatMemberType = "ChatMemberAdministrator"
	ChatMemberMemberChatMember        ChatMemberType = "ChatMemberMember"
	ChatMemberRestrictedChatMember    ChatMemberType = "ChatMemberRestricted"
	ChatMemberLeftChatMember          ChatMemberType = "ChatMemberLeft"
	ChatMemberBannedChatMember        ChatMemberType = "ChatMemberBanned"
)

// IsChatMemberOwner reports whether ChatMember is ChatMemberOwner.
func (s ChatMember) IsChatMemberOwner() bool { return s.Type == ChatMemberOwnerChatMember }

// IsChatMemberAdministrator reports whether ChatMember is ChatMemberAdministrator.
func (s ChatMember) IsChatMemberAdministrator() bool {
	return s.Type == ChatMemberAdministratorChatMember
}

// IsChatMemberMember reports whether ChatMember is ChatMemberMember.
func (s ChatMember) IsChatMemberMember() bool { return s.Type == ChatMemberMemberChatMember }

// IsChatMemberRestricted reports whether ChatMember is ChatMemberRestricted.
func (s ChatMember) IsChatMemberRestricted() bool { return s.Type == ChatMemberRestrictedChatMember }

// IsChatMemberLeft reports whether ChatMember is ChatMemberLeft.
func (s ChatMember) IsChatMemberLeft() bool { return s.Type == ChatMemberLeftChatMember }

// IsChatMemberBanned reports whether ChatMember is ChatMemberBanned.
func (s ChatMember) IsChatMemberBanned() bool { return s.Type == ChatMemberBannedChatMember }

// SetChatMemberOwner sets ChatMember to ChatMemberOwner.
func (s *ChatMember) SetChatMemberOwner(v ChatMemberOwner) {
	s.Type = ChatMemberOwnerChatMember
	s.ChatMemberOwner = v
}

// GetChatMemberOwner returns ChatMemberOwner and true boolean if ChatMember is ChatMemberOwner.
func (s ChatMember) GetChatMemberOwner() (v ChatMemberOwner, ok bool) {
	if !s.IsChatMemberOwner() {
		return v, false
	}
	return s.ChatMemberOwner, true
}

// NewChatMemberOwnerChatMember returns new ChatMember from ChatMemberOwner.
func NewChatMemberOwnerChatMember(v ChatMemberOwner) ChatMember {
	var s ChatMember
	s.SetChatMemberOwner(v)
	return s
}

// SetChatMemberAdministrator sets ChatMember to ChatMemberAdministrator.
func (s *ChatMember) SetChatMemberAdministrator(v ChatMemberAdministrator) {
	s.Type = ChatMemberAdministratorChatMember
	s.ChatMemberAdministrator = v
}

// GetChatMemberAdministrator returns ChatMemberAdministrator and true boolean if ChatMember is ChatMemberAdministrator.
func (s ChatMember) GetChatMemberAdministrator() (v ChatMemberAdministrator, ok bool) {
	if !s.IsChatMemberAdministrator() {
		return v, false
	}
	return s.ChatMemberAdministrator, true
}

// NewChatMemberAdministratorChatMember returns new ChatMember from ChatMemberAdministrator.
func NewChatMemberAdministratorChatMember(v ChatMemberAdministrator) ChatMember {
	var s ChatMember
	s.SetChatMemberAdministrator(v)
	return s
}

// SetChatMemberMember sets ChatMember to ChatMemberMember.
func (s *ChatMember) SetChatMemberMember(v ChatMemberMember) {
	s.Type = ChatMemberMemberChatMember
	s.ChatMemberMember = v
}

// GetChatMemberMember returns ChatMemberMember and true boolean if ChatMember is ChatMemberMember.
func (s ChatMember) GetChatMemberMember() (v ChatMemberMember, ok bool) {
	if !s.IsChatMemberMember() {
		return v, false
	}
	return s.ChatMemberMember, true
}

// NewChatMemberMemberChatMember returns new ChatMember from ChatMemberMember.
func NewChatMemberMemberChatMember(v ChatMemberMember) ChatMember {
	var s ChatMember
	s.SetChatMemberMember(v)
	return s
}

// SetChatMemberRestricted sets ChatMember to ChatMemberRestricted.
func (s *ChatMember) SetChatMemberRestricted(v ChatMemberRestricted) {
	s.Type = ChatMemberRestrictedChatMember
	s.ChatMemberRestricted = v
}

// GetChatMemberRestricted returns ChatMemberRestricted and true boolean if ChatMember is ChatMemberRestricted.
func (s ChatMember) GetChatMemberRestricted() (v ChatMemberRestricted, ok bool) {
	if !s.IsChatMemberRestricted() {
		return v, false
	}
	return s.ChatMemberRestricted, true
}

// NewChatMemberRestrictedChatMember returns new ChatMember from ChatMemberRestricted.
func NewChatMemberRestrictedChatMember(v ChatMemberRestricted) ChatMember {
	var s ChatMember
	s.SetChatMemberRestricted(v)
	return s
}

// SetChatMemberLeft sets ChatMember to ChatMemberLeft.
func (s *ChatMember) SetChatMemberLeft(v ChatMemberLeft) {
	s.Type = ChatMemberLeftChatMember
	s.ChatMemberLeft = v
}

// GetChatMemberLeft returns ChatMemberLeft and true boolean if ChatMember is ChatMemberLeft.
func (s ChatMember) GetChatMemberLeft() (v ChatMemberLeft, ok bool) {
	if !s.IsChatMemberLeft() {
		return v, false
	}
	return s.ChatMemberLeft, true
}

// NewChatMemberLeftChatMember returns new ChatMember from ChatMemberLeft.
func NewChatMemberLeftChatMember(v ChatMemberLeft) ChatMember {
	var s ChatMember
	s.SetChatMemberLeft(v)
	return s
}

// SetChatMemberBanned sets ChatMember to ChatMemberBanned.
func (s *ChatMember) SetChatMemberBanned(v ChatMemberBanned) {
	s.Type = ChatMemberBannedChatMember
	s.ChatMemberBanned = v
}

// GetChatMemberBanned returns ChatMemberBanned and true boolean if ChatMember is ChatMemberBanned.
func (s ChatMember) GetChatMemberBanned() (v ChatMemberBanned, ok bool) {
	if !s.IsChatMemberBanned() {
		return v, false
	}
	return s.ChatMemberBanned, true
}

// NewChatMemberBannedChatMember returns new ChatMember from ChatMemberBanned.
func NewChatMemberBannedChatMember(v ChatMemberBanned) ChatMember {
	var s ChatMember
	s.SetChatMemberBanned(v)
	return s
}

// Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that has some additional
// privileges.
// Ref: #/components/schemas/ChatMemberAdministrator
type ChatMemberAdministrator struct {
	// The member's status in the chat, always `administrator`.
	Status string `json:"status"`
	User   User   `json:"user"`
	// _True_, if the bot is allowed to edit administrator privileges of that user.
	CanBeEdited bool `json:"can_be_edited"`
	// _True_, if the user's presence in the chat is hidden.
	IsAnonymous bool `json:"is_anonymous"`
	// _True_, if the administrator can access the chat event log, get boost list, see hidden supergroup
	// and channel members, report spam messages and ignore slow mode. Implied by any other administrator
	// privilege.
	CanManageChat bool `json:"can_manage_chat"`
	// _True_, if the administrator can delete messages of other users.
	CanDeleteMessages bool `json:"can_delete_messages"`
	// _True_, if the administrator can manage video chats.
	CanManageVideoChats bool `json:"can_manage_video_chats"`
	// _True_, if the administrator can restrict, ban or unban chat members, or access supergroup
	// statistics.
	CanRestrictMembers bool `json:"can_restrict_members"`
	// _True_, if the administrator can add new administrators with a subset of their own privileges or
	// demote administrators that they have promoted, directly or indirectly (promoted by administrators
	// that were appointed by the user).
	CanPromoteMembers bool `json:"can_promote_members"`
	// _True_, if the user is allowed to change the chat title, photo and other settings.
	CanChangeInfo bool `json:"can_change_info"`
	// _True_, if the user is allowed to invite new users to the chat.
	CanInviteUsers bool `json:"can_invite_users"`
	// _True_, if the administrator can post stories to the chat.
	CanPostStories bool `json:"can_post_stories"`
	// _True_, if the administrator can edit stories posted by other users, post stories to the chat page,
	//  pin chat stories, and access the chat's story archive.
	CanEditStories bool `json:"can_edit_stories"`
	// _True_, if the administrator can delete stories posted by other users.
	CanDeleteStories bool `json:"can_delete_stories"`
	// _Optional_. _True_, if the administrator can post messages in the channel, or access channel
	// statistics; for channels only.
	CanPostMessages OptBool `json:"can_post_messages"`
	// _Optional_. _True_, if the administrator can edit messages of other users and can pin messages;
	// for channels only.
	CanEditMessages OptBool `json:"can_edit_messages"`
	// _Optional_. _True_, if the user is allowed to pin messages; for groups and supergroups only.
	CanPinMessages OptBool `json:"can_pin_messages"`
	// _Optional_. _True_, if the user is allowed to create, rename, close, and reopen forum topics; for
	// supergroups only.
	CanManageTopics OptBool `json:"can_manage_topics"`
	// _Optional_. Custom title for this user.
	CustomTitle OptString `json:"custom_title"`
}

// GetStatus returns the value of Status.
func (s *ChatMemberAdministrator) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s *ChatMemberAdministrator) GetUser() User {
	return s.User
}

// GetCanBeEdited returns the value of CanBeEdited.
func (s *ChatMemberAdministrator) GetCanBeEdited() bool {
	return s.CanBeEdited
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s *ChatMemberAdministrator) GetIsAnonymous() bool {
	return s.IsAnonymous
}

// GetCanManageChat returns the value of CanManageChat.
func (s *ChatMemberAdministrator) GetCanManageChat() bool {
	return s.CanManageChat
}

// GetCanDeleteMessages returns the value of CanDeleteMessages.
func (s *ChatMemberAdministrator) GetCanDeleteMessages() bool {
	return s.CanDeleteMessages
}

// GetCanManageVideoChats returns the value of CanManageVideoChats.
func (s *ChatMemberAdministrator) GetCanManageVideoChats() bool {
	return s.CanManageVideoChats
}

// GetCanRestrictMembers returns the value of CanRestrictMembers.
func (s *ChatMemberAdministrator) GetCanRestrictMembers() bool {
	return s.CanRestrictMembers
}

// GetCanPromoteMembers returns the value of CanPromoteMembers.
func (s *ChatMemberAdministrator) GetCanPromoteMembers() bool {
	return s.CanPromoteMembers
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s *ChatMemberAdministrator) GetCanChangeInfo() bool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s *ChatMemberAdministrator) GetCanInviteUsers() bool {
	return s.CanInviteUsers
}

// GetCanPostStories returns the value of CanPostStories.
func (s *ChatMemberAdministrator) GetCanPostStories() bool {
	return s.CanPostStories
}

// GetCanEditStories returns the value of CanEditStories.
func (s *ChatMemberAdministrator) GetCanEditStories() bool {
	return s.CanEditStories
}

// GetCanDeleteStories returns the value of CanDeleteStories.
func (s *ChatMemberAdministrator) GetCanDeleteStories() bool {
	return s.CanDeleteStories
}

// GetCanPostMessages returns the value of CanPostMessages.
func (s *ChatMemberAdministrator) GetCanPostMessages() OptBool {
	return s.CanPostMessages
}

// GetCanEditMessages returns the value of CanEditMessages.
func (s *ChatMemberAdministrator) GetCanEditMessages() OptBool {
	return s.CanEditMessages
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s *ChatMemberAdministrator) GetCanPinMessages() OptBool {
	return s.CanPinMessages
}

// GetCanManageTopics returns the value of CanManageTopics.
func (s *ChatMemberAdministrator) GetCanManageTopics() OptBool {
	return s.CanManageTopics
}

// GetCustomTitle returns the value of CustomTitle.
func (s *ChatMemberAdministrator) GetCustomTitle() OptString {
	return s.CustomTitle
}

// SetStatus sets the value of Status.
func (s *ChatMemberAdministrator) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberAdministrator) SetUser(val User) {
	s.User = val
}

// SetCanBeEdited sets the value of CanBeEdited.
func (s *ChatMemberAdministrator) SetCanBeEdited(val bool) {
	s.CanBeEdited = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *ChatMemberAdministrator) SetIsAnonymous(val bool) {
	s.IsAnonymous = val
}

// SetCanManageChat sets the value of CanManageChat.
func (s *ChatMemberAdministrator) SetCanManageChat(val bool) {
	s.CanManageChat = val
}

// SetCanDeleteMessages sets the value of CanDeleteMessages.
func (s *ChatMemberAdministrator) SetCanDeleteMessages(val bool) {
	s.CanDeleteMessages = val
}

// SetCanManageVideoChats sets the value of CanManageVideoChats.
func (s *ChatMemberAdministrator) SetCanManageVideoChats(val bool) {
	s.CanManageVideoChats = val
}

// SetCanRestrictMembers sets the value of CanRestrictMembers.
func (s *ChatMemberAdministrator) SetCanRestrictMembers(val bool) {
	s.CanRestrictMembers = val
}

// SetCanPromoteMembers sets the value of CanPromoteMembers.
func (s *ChatMemberAdministrator) SetCanPromoteMembers(val bool) {
	s.CanPromoteMembers = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *ChatMemberAdministrator) SetCanChangeInfo(val bool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *ChatMemberAdministrator) SetCanInviteUsers(val bool) {
	s.CanInviteUsers = val
}

// SetCanPostStories sets the value of CanPostStories.
func (s *ChatMemberAdministrator) SetCanPostStories(val bool) {
	s.CanPostStories = val
}

// SetCanEditStories sets the value of CanEditStories.
func (s *ChatMemberAdministrator) SetCanEditStories(val bool) {
	s.CanEditStories = val
}

// SetCanDeleteStories sets the value of CanDeleteStories.
func (s *ChatMemberAdministrator) SetCanDeleteStories(val bool) {
	s.CanDeleteStories = val
}

// SetCanPostMessages sets the value of CanPostMessages.
func (s *ChatMemberAdministrator) SetCanPostMessages(val OptBool) {
	s.CanPostMessages = val
}

// SetCanEditMessages sets the value of CanEditMessages.
func (s *ChatMemberAdministrator) SetCanEditMessages(val OptBool) {
	s.CanEditMessages = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *ChatMemberAdministrator) SetCanPinMessages(val OptBool) {
	s.CanPinMessages = val
}

// SetCanManageTopics sets the value of CanManageTopics.
func (s *ChatMemberAdministrator) SetCanManageTopics(val OptBool) {
	s.CanManageTopics = val
}

// SetCustomTitle sets the value of CustomTitle.
func (s *ChatMemberAdministrator) SetCustomTitle(val OptString) {
	s.CustomTitle = val
}

// Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that was banned in the
// chat and can't return to the chat or view chat messages.
// Ref: #/components/schemas/ChatMemberBanned
type ChatMemberBanned struct {
	// The member's status in the chat, always `kicked`.
	Status string `json:"status"`
	User   User   `json:"user"`
	// Date when restrictions will be lifted for this user; Unix time. If 0, then the user is banned
	// forever.
	UntilDate int `json:"until_date"`
}

// GetStatus returns the value of Status.
func (s *ChatMemberBanned) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s *ChatMemberBanned) GetUser() User {
	return s.User
}

// GetUntilDate returns the value of UntilDate.
func (s *ChatMemberBanned) GetUntilDate() int {
	return s.UntilDate
}

// SetStatus sets the value of Status.
func (s *ChatMemberBanned) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberBanned) SetUser(val User) {
	s.User = val
}

// SetUntilDate sets the value of UntilDate.
func (s *ChatMemberBanned) SetUntilDate(val int) {
	s.UntilDate = val
}

// Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that isn't currently a
// member of the chat, but may join it themselves.
// Ref: #/components/schemas/ChatMemberLeft
type ChatMemberLeft struct {
	// The member's status in the chat, always `left`.
	Status string `json:"status"`
	User   User   `json:"user"`
}

// GetStatus returns the value of Status.
func (s *ChatMemberLeft) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s *ChatMemberLeft) GetUser() User {
	return s.User
}

// SetStatus sets the value of Status.
func (s *ChatMemberLeft) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberLeft) SetUser(val User) {
	s.User = val
}

// Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that has no additional
// privileges or restrictions.
// Ref: #/components/schemas/ChatMemberMember
type ChatMemberMember struct {
	// The member's status in the chat, always `member`.
	Status string `json:"status"`
	User   User   `json:"user"`
}

// GetStatus returns the value of Status.
func (s *ChatMemberMember) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s *ChatMemberMember) GetUser() User {
	return s.User
}

// SetStatus sets the value of Status.
func (s *ChatMemberMember) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberMember) SetUser(val User) {
	s.User = val
}

// Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that owns the chat and
// has all administrator privileges.
// Ref: #/components/schemas/ChatMemberOwner
type ChatMemberOwner struct {
	// The member's status in the chat, always `creator`.
	Status string `json:"status"`
	User   User   `json:"user"`
	// _True_, if the user's presence in the chat is hidden.
	IsAnonymous bool `json:"is_anonymous"`
	// _Optional_. Custom title for this user.
	CustomTitle OptString `json:"custom_title"`
}

// GetStatus returns the value of Status.
func (s *ChatMemberOwner) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s *ChatMemberOwner) GetUser() User {
	return s.User
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s *ChatMemberOwner) GetIsAnonymous() bool {
	return s.IsAnonymous
}

// GetCustomTitle returns the value of CustomTitle.
func (s *ChatMemberOwner) GetCustomTitle() OptString {
	return s.CustomTitle
}

// SetStatus sets the value of Status.
func (s *ChatMemberOwner) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberOwner) SetUser(val User) {
	s.User = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *ChatMemberOwner) SetIsAnonymous(val bool) {
	s.IsAnonymous = val
}

// SetCustomTitle sets the value of CustomTitle.
func (s *ChatMemberOwner) SetCustomTitle(val OptString) {
	s.CustomTitle = val
}

// Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that is under certain
// restrictions in the chat. Supergroups only.
// Ref: #/components/schemas/ChatMemberRestricted
type ChatMemberRestricted struct {
	// The member's status in the chat, always `restricted`.
	Status string `json:"status"`
	User   User   `json:"user"`
	// _True_, if the user is a member of the chat at the moment of the request.
	IsMember bool `json:"is_member"`
	// _True_, if the user is allowed to send text messages, contacts, giveaways, giveaway winners,
	// invoices, locations and venues.
	CanSendMessages bool `json:"can_send_messages"`
	// _True_, if the user is allowed to send audios.
	CanSendAudios bool `json:"can_send_audios"`
	// _True_, if the user is allowed to send documents.
	CanSendDocuments bool `json:"can_send_documents"`
	// _True_, if the user is allowed to send photos.
	CanSendPhotos bool `json:"can_send_photos"`
	// _True_, if the user is allowed to send videos.
	CanSendVideos bool `json:"can_send_videos"`
	// _True_, if the user is allowed to send video notes.
	CanSendVideoNotes bool `json:"can_send_video_notes"`
	// _True_, if the user is allowed to send voice notes.
	CanSendVoiceNotes bool `json:"can_send_voice_notes"`
	// _True_, if the user is allowed to send polls.
	CanSendPolls bool `json:"can_send_polls"`
	// _True_, if the user is allowed to send animations, games, stickers and use inline bots.
	CanSendOtherMessages bool `json:"can_send_other_messages"`
	// _True_, if the user is allowed to add web page previews to their messages.
	CanAddWebPagePreviews bool `json:"can_add_web_page_previews"`
	// _True_, if the user is allowed to change the chat title, photo and other settings.
	CanChangeInfo bool `json:"can_change_info"`
	// _True_, if the user is allowed to invite new users to the chat.
	CanInviteUsers bool `json:"can_invite_users"`
	// _True_, if the user is allowed to pin messages.
	CanPinMessages bool `json:"can_pin_messages"`
	// _True_, if the user is allowed to create forum topics.
	CanManageTopics bool `json:"can_manage_topics"`
	// Date when restrictions will be lifted for this user; Unix time. If 0, then the user is restricted
	// forever.
	UntilDate int `json:"until_date"`
}

// GetStatus returns the value of Status.
func (s *ChatMemberRestricted) GetStatus() string {
	return s.Status
}

// GetUser returns the value of User.
func (s *ChatMemberRestricted) GetUser() User {
	return s.User
}

// GetIsMember returns the value of IsMember.
func (s *ChatMemberRestricted) GetIsMember() bool {
	return s.IsMember
}

// GetCanSendMessages returns the value of CanSendMessages.
func (s *ChatMemberRestricted) GetCanSendMessages() bool {
	return s.CanSendMessages
}

// GetCanSendAudios returns the value of CanSendAudios.
func (s *ChatMemberRestricted) GetCanSendAudios() bool {
	return s.CanSendAudios
}

// GetCanSendDocuments returns the value of CanSendDocuments.
func (s *ChatMemberRestricted) GetCanSendDocuments() bool {
	return s.CanSendDocuments
}

// GetCanSendPhotos returns the value of CanSendPhotos.
func (s *ChatMemberRestricted) GetCanSendPhotos() bool {
	return s.CanSendPhotos
}

// GetCanSendVideos returns the value of CanSendVideos.
func (s *ChatMemberRestricted) GetCanSendVideos() bool {
	return s.CanSendVideos
}

// GetCanSendVideoNotes returns the value of CanSendVideoNotes.
func (s *ChatMemberRestricted) GetCanSendVideoNotes() bool {
	return s.CanSendVideoNotes
}

// GetCanSendVoiceNotes returns the value of CanSendVoiceNotes.
func (s *ChatMemberRestricted) GetCanSendVoiceNotes() bool {
	return s.CanSendVoiceNotes
}

// GetCanSendPolls returns the value of CanSendPolls.
func (s *ChatMemberRestricted) GetCanSendPolls() bool {
	return s.CanSendPolls
}

// GetCanSendOtherMessages returns the value of CanSendOtherMessages.
func (s *ChatMemberRestricted) GetCanSendOtherMessages() bool {
	return s.CanSendOtherMessages
}

// GetCanAddWebPagePreviews returns the value of CanAddWebPagePreviews.
func (s *ChatMemberRestricted) GetCanAddWebPagePreviews() bool {
	return s.CanAddWebPagePreviews
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s *ChatMemberRestricted) GetCanChangeInfo() bool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s *ChatMemberRestricted) GetCanInviteUsers() bool {
	return s.CanInviteUsers
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s *ChatMemberRestricted) GetCanPinMessages() bool {
	return s.CanPinMessages
}

// GetCanManageTopics returns the value of CanManageTopics.
func (s *ChatMemberRestricted) GetCanManageTopics() bool {
	return s.CanManageTopics
}

// GetUntilDate returns the value of UntilDate.
func (s *ChatMemberRestricted) GetUntilDate() int {
	return s.UntilDate
}

// SetStatus sets the value of Status.
func (s *ChatMemberRestricted) SetStatus(val string) {
	s.Status = val
}

// SetUser sets the value of User.
func (s *ChatMemberRestricted) SetUser(val User) {
	s.User = val
}

// SetIsMember sets the value of IsMember.
func (s *ChatMemberRestricted) SetIsMember(val bool) {
	s.IsMember = val
}

// SetCanSendMessages sets the value of CanSendMessages.
func (s *ChatMemberRestricted) SetCanSendMessages(val bool) {
	s.CanSendMessages = val
}

// SetCanSendAudios sets the value of CanSendAudios.
func (s *ChatMemberRestricted) SetCanSendAudios(val bool) {
	s.CanSendAudios = val
}

// SetCanSendDocuments sets the value of CanSendDocuments.
func (s *ChatMemberRestricted) SetCanSendDocuments(val bool) {
	s.CanSendDocuments = val
}

// SetCanSendPhotos sets the value of CanSendPhotos.
func (s *ChatMemberRestricted) SetCanSendPhotos(val bool) {
	s.CanSendPhotos = val
}

// SetCanSendVideos sets the value of CanSendVideos.
func (s *ChatMemberRestricted) SetCanSendVideos(val bool) {
	s.CanSendVideos = val
}

// SetCanSendVideoNotes sets the value of CanSendVideoNotes.
func (s *ChatMemberRestricted) SetCanSendVideoNotes(val bool) {
	s.CanSendVideoNotes = val
}

// SetCanSendVoiceNotes sets the value of CanSendVoiceNotes.
func (s *ChatMemberRestricted) SetCanSendVoiceNotes(val bool) {
	s.CanSendVoiceNotes = val
}

// SetCanSendPolls sets the value of CanSendPolls.
func (s *ChatMemberRestricted) SetCanSendPolls(val bool) {
	s.CanSendPolls = val
}

// SetCanSendOtherMessages sets the value of CanSendOtherMessages.
func (s *ChatMemberRestricted) SetCanSendOtherMessages(val bool) {
	s.CanSendOtherMessages = val
}

// SetCanAddWebPagePreviews sets the value of CanAddWebPagePreviews.
func (s *ChatMemberRestricted) SetCanAddWebPagePreviews(val bool) {
	s.CanAddWebPagePreviews = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *ChatMemberRestricted) SetCanChangeInfo(val bool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *ChatMemberRestricted) SetCanInviteUsers(val bool) {
	s.CanInviteUsers = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *ChatMemberRestricted) SetCanPinMessages(val bool) {
	s.CanPinMessages = val
}

// SetCanManageTopics sets the value of CanManageTopics.
func (s *ChatMemberRestricted) SetCanManageTopics(val bool) {
	s.CanManageTopics = val
}

// SetUntilDate sets the value of UntilDate.
func (s *ChatMemberRestricted) SetUntilDate(val int) {
	s.UntilDate = val
}

// This object represents changes in the status of a chat member.
// Ref: #/components/schemas/ChatMemberUpdated
type ChatMemberUpdated struct {
	Chat Chat `json:"chat"`
	From User `json:"from"`
	// Date the change was done in Unix time.
	Date          int               `json:"date"`
	OldChatMember ChatMember        `json:"old_chat_member"`
	NewChatMember ChatMember        `json:"new_chat_member"`
	InviteLink    OptChatInviteLink `json:"invite_link"`
	// _Optional_. True, if the user joined the chat after sending a direct join request without using an
	// invite link and being approved by an administrator.
	ViaJoinRequest OptBool `json:"via_join_request"`
	// _Optional_. True, if the user joined the chat via a chat folder invite link.
	ViaChatFolderInviteLink OptBool `json:"via_chat_folder_invite_link"`
}

// GetChat returns the value of Chat.
func (s *ChatMemberUpdated) GetChat() Chat {
	return s.Chat
}

// GetFrom returns the value of From.
func (s *ChatMemberUpdated) GetFrom() User {
	return s.From
}

// GetDate returns the value of Date.
func (s *ChatMemberUpdated) GetDate() int {
	return s.Date
}

// GetOldChatMember returns the value of OldChatMember.
func (s *ChatMemberUpdated) GetOldChatMember() ChatMember {
	return s.OldChatMember
}

// GetNewChatMember returns the value of NewChatMember.
func (s *ChatMemberUpdated) GetNewChatMember() ChatMember {
	return s.NewChatMember
}

// GetInviteLink returns the value of InviteLink.
func (s *ChatMemberUpdated) GetInviteLink() OptChatInviteLink {
	return s.InviteLink
}

// GetViaJoinRequest returns the value of ViaJoinRequest.
func (s *ChatMemberUpdated) GetViaJoinRequest() OptBool {
	return s.ViaJoinRequest
}

// GetViaChatFolderInviteLink returns the value of ViaChatFolderInviteLink.
func (s *ChatMemberUpdated) GetViaChatFolderInviteLink() OptBool {
	return s.ViaChatFolderInviteLink
}

// SetChat sets the value of Chat.
func (s *ChatMemberUpdated) SetChat(val Chat) {
	s.Chat = val
}

// SetFrom sets the value of From.
func (s *ChatMemberUpdated) SetFrom(val User) {
	s.From = val
}

// SetDate sets the value of Date.
func (s *ChatMemberUpdated) SetDate(val int) {
	s.Date = val
}

// SetOldChatMember sets the value of OldChatMember.
func (s *ChatMemberUpdated) SetOldChatMember(val ChatMember) {
	s.OldChatMember = val
}

// SetNewChatMember sets the value of NewChatMember.
func (s *ChatMemberUpdated) SetNewChatMember(val ChatMember) {
	s.NewChatMember = val
}

// SetInviteLink sets the value of InviteLink.
func (s *ChatMemberUpdated) SetInviteLink(val OptChatInviteLink) {
	s.InviteLink = val
}

// SetViaJoinRequest sets the value of ViaJoinRequest.
func (s *ChatMemberUpdated) SetViaJoinRequest(val OptBool) {
	s.ViaJoinRequest = val
}

// SetViaChatFolderInviteLink sets the value of ViaChatFolderInviteLink.
func (s *ChatMemberUpdated) SetViaChatFolderInviteLink(val OptBool) {
	s.ViaChatFolderInviteLink = val
}

// Describes actions that a non-administrator user is allowed to take in a chat.
// Ref: #/components/schemas/ChatPermissions
type ChatPermissions struct {
	// _Optional_. _True_, if the user is allowed to send text messages, contacts, giveaways, giveaway
	// winners, invoices, locations and venues.
	CanSendMessages OptBool `json:"can_send_messages"`
	// _Optional_. _True_, if the user is allowed to send audios.
	CanSendAudios OptBool `json:"can_send_audios"`
	// _Optional_. _True_, if the user is allowed to send documents.
	CanSendDocuments OptBool `json:"can_send_documents"`
	// _Optional_. _True_, if the user is allowed to send photos.
	CanSendPhotos OptBool `json:"can_send_photos"`
	// _Optional_. _True_, if the user is allowed to send videos.
	CanSendVideos OptBool `json:"can_send_videos"`
	// _Optional_. _True_, if the user is allowed to send video notes.
	CanSendVideoNotes OptBool `json:"can_send_video_notes"`
	// _Optional_. _True_, if the user is allowed to send voice notes.
	CanSendVoiceNotes OptBool `json:"can_send_voice_notes"`
	// _Optional_. _True_, if the user is allowed to send polls.
	CanSendPolls OptBool `json:"can_send_polls"`
	// _Optional_. _True_, if the user is allowed to send animations, games, stickers and use inline bots.
	CanSendOtherMessages OptBool `json:"can_send_other_messages"`
	// _Optional_. _True_, if the user is allowed to add web page previews to their messages.
	CanAddWebPagePreviews OptBool `json:"can_add_web_page_previews"`
	// _Optional_. _True_, if the user is allowed to change the chat title, photo and other settings.
	// Ignored in public supergroups.
	CanChangeInfo OptBool `json:"can_change_info"`
	// _Optional_. _True_, if the user is allowed to invite new users to the chat.
	CanInviteUsers OptBool `json:"can_invite_users"`
	// _Optional_. _True_, if the user is allowed to pin messages. Ignored in public supergroups.
	CanPinMessages OptBool `json:"can_pin_messages"`
	// _Optional_. _True_, if the user is allowed to create forum topics. If omitted defaults to the
	// value of can_pin_messages.
	CanManageTopics OptBool `json:"can_manage_topics"`
}

// GetCanSendMessages returns the value of CanSendMessages.
func (s *ChatPermissions) GetCanSendMessages() OptBool {
	return s.CanSendMessages
}

// GetCanSendAudios returns the value of CanSendAudios.
func (s *ChatPermissions) GetCanSendAudios() OptBool {
	return s.CanSendAudios
}

// GetCanSendDocuments returns the value of CanSendDocuments.
func (s *ChatPermissions) GetCanSendDocuments() OptBool {
	return s.CanSendDocuments
}

// GetCanSendPhotos returns the value of CanSendPhotos.
func (s *ChatPermissions) GetCanSendPhotos() OptBool {
	return s.CanSendPhotos
}

// GetCanSendVideos returns the value of CanSendVideos.
func (s *ChatPermissions) GetCanSendVideos() OptBool {
	return s.CanSendVideos
}

// GetCanSendVideoNotes returns the value of CanSendVideoNotes.
func (s *ChatPermissions) GetCanSendVideoNotes() OptBool {
	return s.CanSendVideoNotes
}

// GetCanSendVoiceNotes returns the value of CanSendVoiceNotes.
func (s *ChatPermissions) GetCanSendVoiceNotes() OptBool {
	return s.CanSendVoiceNotes
}

// GetCanSendPolls returns the value of CanSendPolls.
func (s *ChatPermissions) GetCanSendPolls() OptBool {
	return s.CanSendPolls
}

// GetCanSendOtherMessages returns the value of CanSendOtherMessages.
func (s *ChatPermissions) GetCanSendOtherMessages() OptBool {
	return s.CanSendOtherMessages
}

// GetCanAddWebPagePreviews returns the value of CanAddWebPagePreviews.
func (s *ChatPermissions) GetCanAddWebPagePreviews() OptBool {
	return s.CanAddWebPagePreviews
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s *ChatPermissions) GetCanChangeInfo() OptBool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s *ChatPermissions) GetCanInviteUsers() OptBool {
	return s.CanInviteUsers
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s *ChatPermissions) GetCanPinMessages() OptBool {
	return s.CanPinMessages
}

// GetCanManageTopics returns the value of CanManageTopics.
func (s *ChatPermissions) GetCanManageTopics() OptBool {
	return s.CanManageTopics
}

// SetCanSendMessages sets the value of CanSendMessages.
func (s *ChatPermissions) SetCanSendMessages(val OptBool) {
	s.CanSendMessages = val
}

// SetCanSendAudios sets the value of CanSendAudios.
func (s *ChatPermissions) SetCanSendAudios(val OptBool) {
	s.CanSendAudios = val
}

// SetCanSendDocuments sets the value of CanSendDocuments.
func (s *ChatPermissions) SetCanSendDocuments(val OptBool) {
	s.CanSendDocuments = val
}

// SetCanSendPhotos sets the value of CanSendPhotos.
func (s *ChatPermissions) SetCanSendPhotos(val OptBool) {
	s.CanSendPhotos = val
}

// SetCanSendVideos sets the value of CanSendVideos.
func (s *ChatPermissions) SetCanSendVideos(val OptBool) {
	s.CanSendVideos = val
}

// SetCanSendVideoNotes sets the value of CanSendVideoNotes.
func (s *ChatPermissions) SetCanSendVideoNotes(val OptBool) {
	s.CanSendVideoNotes = val
}

// SetCanSendVoiceNotes sets the value of CanSendVoiceNotes.
func (s *ChatPermissions) SetCanSendVoiceNotes(val OptBool) {
	s.CanSendVoiceNotes = val
}

// SetCanSendPolls sets the value of CanSendPolls.
func (s *ChatPermissions) SetCanSendPolls(val OptBool) {
	s.CanSendPolls = val
}

// SetCanSendOtherMessages sets the value of CanSendOtherMessages.
func (s *ChatPermissions) SetCanSendOtherMessages(val OptBool) {
	s.CanSendOtherMessages = val
}

// SetCanAddWebPagePreviews sets the value of CanAddWebPagePreviews.
func (s *ChatPermissions) SetCanAddWebPagePreviews(val OptBool) {
	s.CanAddWebPagePreviews = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *ChatPermissions) SetCanChangeInfo(val OptBool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *ChatPermissions) SetCanInviteUsers(val OptBool) {
	s.CanInviteUsers = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *ChatPermissions) SetCanPinMessages(val OptBool) {
	s.CanPinMessages = val
}

// SetCanManageTopics sets the value of CanManageTopics.
func (s *ChatPermissions) SetCanManageTopics(val OptBool) {
	s.CanManageTopics = val
}

// This object contains information about a chat that was shared with the bot using a
// [KeyboardButtonRequestChat](https://core.telegram.org/bots/api#keyboardbuttonrequestchat) button.
// Ref: #/components/schemas/ChatShared
type ChatShared struct {
	// Identifier of the request.
	RequestID int `json:"request_id"`
	// Identifier of the shared chat. This number may have more than 32 significant bits and some
	// programming languages may have difficulty/silent defects in interpreting it. But it has at most 52
	// significant bits, so a 64-bit integer or double-precision float type are safe for storing this
	// identifier. The bot may not have access to the chat and could be unable to use this identifier,
	// unless the chat is already known to the bot by some other means.
	ChatID int64 `json:"chat_id"`
	// _Optional_. Title of the chat, if the title was requested by the bot.
	Title OptString `json:"title"`
	// _Optional_. Username of the chat, if the username was requested by the bot and available.
	Username OptString `json:"username"`
	// _Optional_. Available sizes of the chat photo, if the photo was requested by the bot.
	Photo []PhotoSize `json:"photo"`
}

// GetRequestID returns the value of RequestID.
func (s *ChatShared) GetRequestID() int {
	return s.RequestID
}

// GetChatID returns the value of ChatID.
func (s *ChatShared) GetChatID() int64 {
	return s.ChatID
}

// GetTitle returns the value of Title.
func (s *ChatShared) GetTitle() OptString {
	return s.Title
}

// GetUsername returns the value of Username.
func (s *ChatShared) GetUsername() OptString {
	return s.Username
}

// GetPhoto returns the value of Photo.
func (s *ChatShared) GetPhoto() []PhotoSize {
	return s.Photo
}

// SetRequestID sets the value of RequestID.
func (s *ChatShared) SetRequestID(val int) {
	s.RequestID = val
}

// SetChatID sets the value of ChatID.
func (s *ChatShared) SetChatID(val int64) {
	s.ChatID = val
}

// SetTitle sets the value of Title.
func (s *ChatShared) SetTitle(val OptString) {
	s.Title = val
}

// SetUsername sets the value of Username.
func (s *ChatShared) SetUsername(val OptString) {
	s.Username = val
}

// SetPhoto sets the value of Photo.
func (s *ChatShared) SetPhoto(val []PhotoSize) {
	s.Photo = val
}

// Type of the chat, can be either `private`, `group`, `supergroup` or `channel`.
type ChatType string

const (
	ChatTypePrivate    ChatType = "private"
	ChatTypeGroup      ChatType = "group"
	ChatTypeSupergroup ChatType = "supergroup"
	ChatTypeChannel    ChatType = "channel"
)

// AllValues returns all ChatType values.
func (ChatType) AllValues() []ChatType {
	return []ChatType{
		ChatTypePrivate,
		ChatTypeGroup,
		ChatTypeSupergroup,
		ChatTypeChannel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChatType) MarshalText() ([]byte, error) {
	switch s {
	case ChatTypePrivate:
		return []byte(s), nil
	case ChatTypeGroup:
		return []byte(s), nil
	case ChatTypeSupergroup:
		return []byte(s), nil
	case ChatTypeChannel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChatType) UnmarshalText(data []byte) error {
	switch ChatType(data) {
	case ChatTypePrivate:
		*s = ChatTypePrivate
		return nil
	case ChatTypeGroup:
		*s = ChatTypeGroup
		return nil
	case ChatTypeSupergroup:
		*s = ChatTypeSupergroup
		return nil
	case ChatTypeChannel:
		*s = ChatTypeChannel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents a [result](https://core.telegram.org/bots/api#inlinequeryresult) of an inline query
// that was chosen by the user and sent to their chat partner.
// Ref: #/components/schemas/ChosenInlineResult
type ChosenInlineResult struct {
	// The unique identifier for the result that was chosen.
	ResultID string      `json:"result_id"`
	From     User        `json:"from"`
	Location OptLocation `json:"location"`
	// _Optional_. Identifier of the sent inline message. Available only if there is an [inline
	// keyboard](https://core.telegram.org/bots/api#inlinekeyboardmarkup) attached to the message. Will
	// be also received in [callback queries](https://core.telegram.org/bots/api#callbackquery) and can
	// be used to [edit](https://core.telegram.org/bots/api#updating-messages) the message.
	InlineMessageID OptString `json:"inline_message_id"`
	// The query that was used to obtain the result.
	Query string `json:"query"`
}

// GetResultID returns the value of ResultID.
func (s *ChosenInlineResult) GetResultID() string {
	return s.ResultID
}

// GetFrom returns the value of From.
func (s *ChosenInlineResult) GetFrom() User {
	return s.From
}

// GetLocation returns the value of Location.
func (s *ChosenInlineResult) GetLocation() OptLocation {
	return s.Location
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *ChosenInlineResult) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetQuery returns the value of Query.
func (s *ChosenInlineResult) GetQuery() string {
	return s.Query
}

// SetResultID sets the value of ResultID.
func (s *ChosenInlineResult) SetResultID(val string) {
	s.ResultID = val
}

// SetFrom sets the value of From.
func (s *ChosenInlineResult) SetFrom(val User) {
	s.From = val
}

// SetLocation sets the value of Location.
func (s *ChosenInlineResult) SetLocation(val OptLocation) {
	s.Location = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *ChosenInlineResult) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetQuery sets the value of Query.
func (s *ChosenInlineResult) SetQuery(val string) {
	s.Query = val
}

// Input for closeForumTopic.
// Ref: #/components/schemas/closeForumTopic
type CloseForumTopic struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread of the forum topic.
	MessageThreadID int `json:"message_thread_id"`
}

// GetChatID returns the value of ChatID.
func (s *CloseForumTopic) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *CloseForumTopic) GetMessageThreadID() int {
	return s.MessageThreadID
}

// SetChatID sets the value of ChatID.
func (s *CloseForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *CloseForumTopic) SetMessageThreadID(val int) {
	s.MessageThreadID = val
}

// Input for closeGeneralForumTopic.
// Ref: #/components/schemas/closeGeneralForumTopic
type CloseGeneralForumTopic struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *CloseGeneralForumTopic) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *CloseGeneralForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// This object represents a phone contact.
// Ref: #/components/schemas/Contact
type Contact struct {
	// Contact's phone number.
	PhoneNumber string `json:"phone_number"`
	// Contact's first name.
	FirstName string `json:"first_name"`
	// _Optional_. Contact's last name.
	LastName OptString `json:"last_name"`
	// _Optional_. Contact's user identifier in Telegram. This number may have more than 32 significant
	// bits and some programming languages may have difficulty/silent defects in interpreting it. But it
	// has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for
	// storing this identifier.
	UserID OptInt64 `json:"user_id"`
	// _Optional_. Additional data about the contact in the form of a [vCard](https://en.wikipedia.
	// org/wiki/VCard).
	Vcard OptString `json:"vcard"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *Contact) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetFirstName returns the value of FirstName.
func (s *Contact) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *Contact) GetLastName() OptString {
	return s.LastName
}

// GetUserID returns the value of UserID.
func (s *Contact) GetUserID() OptInt64 {
	return s.UserID
}

// GetVcard returns the value of Vcard.
func (s *Contact) GetVcard() OptString {
	return s.Vcard
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *Contact) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetFirstName sets the value of FirstName.
func (s *Contact) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *Contact) SetLastName(val OptString) {
	s.LastName = val
}

// SetUserID sets the value of UserID.
func (s *Contact) SetUserID(val OptInt64) {
	s.UserID = val
}

// SetVcard sets the value of Vcard.
func (s *Contact) SetVcard(val OptString) {
	s.Vcard = val
}

// Input for copyMessage.
// Ref: #/components/schemas/copyMessage
type CopyMessage struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	FromChatID      ID     `json:"from_chat_id"`
	// Message identifier in the chat specified in _from_chat_id_.
	MessageID int `json:"message_id"`
	// New caption for media, 0-1024 characters after entities parsing. If not specified, the original
	// caption is kept.
	Caption OptString `json:"caption"`
	// Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in the new caption, which can be specified
	// instead of _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// Pass _True_, if the caption must be shown above the message media. Ignored if a new caption isn't
	// specified.
	ShowCaptionAboveMedia OptBool `json:"show_caption_above_media"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent  OptBool            `json:"protect_content"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetChatID returns the value of ChatID.
func (s *CopyMessage) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *CopyMessage) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetFromChatID returns the value of FromChatID.
func (s *CopyMessage) GetFromChatID() ID {
	return s.FromChatID
}

// GetMessageID returns the value of MessageID.
func (s *CopyMessage) GetMessageID() int {
	return s.MessageID
}

// GetCaption returns the value of Caption.
func (s *CopyMessage) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *CopyMessage) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *CopyMessage) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *CopyMessage) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetDisableNotification returns the value of DisableNotification.
func (s *CopyMessage) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *CopyMessage) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *CopyMessage) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *CopyMessage) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *CopyMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *CopyMessage) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetFromChatID sets the value of FromChatID.
func (s *CopyMessage) SetFromChatID(val ID) {
	s.FromChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *CopyMessage) SetMessageID(val int) {
	s.MessageID = val
}

// SetCaption sets the value of Caption.
func (s *CopyMessage) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *CopyMessage) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *CopyMessage) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *CopyMessage) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *CopyMessage) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *CopyMessage) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *CopyMessage) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *CopyMessage) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for copyMessages.
// Ref: #/components/schemas/copyMessages
type CopyMessages struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	FromChatID      ID     `json:"from_chat_id"`
	// A JSON-serialized list of 1-100 identifiers of messages in the chat _from_chat_id_ to copy. The
	// identifiers must be specified in a strictly increasing order.
	MessageIds []int `json:"message_ids"`
	// Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent messages from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Pass _True_ to copy the messages without their captions.
	RemoveCaption OptBool `json:"remove_caption"`
}

// GetChatID returns the value of ChatID.
func (s *CopyMessages) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *CopyMessages) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetFromChatID returns the value of FromChatID.
func (s *CopyMessages) GetFromChatID() ID {
	return s.FromChatID
}

// GetMessageIds returns the value of MessageIds.
func (s *CopyMessages) GetMessageIds() []int {
	return s.MessageIds
}

// GetDisableNotification returns the value of DisableNotification.
func (s *CopyMessages) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *CopyMessages) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetRemoveCaption returns the value of RemoveCaption.
func (s *CopyMessages) GetRemoveCaption() OptBool {
	return s.RemoveCaption
}

// SetChatID sets the value of ChatID.
func (s *CopyMessages) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *CopyMessages) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetFromChatID sets the value of FromChatID.
func (s *CopyMessages) SetFromChatID(val ID) {
	s.FromChatID = val
}

// SetMessageIds sets the value of MessageIds.
func (s *CopyMessages) SetMessageIds(val []int) {
	s.MessageIds = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *CopyMessages) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *CopyMessages) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetRemoveCaption sets the value of RemoveCaption.
func (s *CopyMessages) SetRemoveCaption(val OptBool) {
	s.RemoveCaption = val
}

// Input for createChatInviteLink.
// Ref: #/components/schemas/createChatInviteLink
type CreateChatInviteLink struct {
	ChatID ID `json:"chat_id"`
	// Invite link name; 0-32 characters.
	Name OptString `json:"name"`
	// Point in time (Unix timestamp) when the link will expire.
	ExpireDate OptInt `json:"expire_date"`
	// The maximum number of users that can be members of the chat simultaneously after joining the chat
	// via this invite link; 1-99999.
	MemberLimit OptInt `json:"member_limit"`
	// _True_, if users joining the chat via the link need to be approved by chat administrators. If
	// _True_, _member_limit_ can't be specified.
	CreatesJoinRequest OptBool `json:"creates_join_request"`
}

// GetChatID returns the value of ChatID.
func (s *CreateChatInviteLink) GetChatID() ID {
	return s.ChatID
}

// GetName returns the value of Name.
func (s *CreateChatInviteLink) GetName() OptString {
	return s.Name
}

// GetExpireDate returns the value of ExpireDate.
func (s *CreateChatInviteLink) GetExpireDate() OptInt {
	return s.ExpireDate
}

// GetMemberLimit returns the value of MemberLimit.
func (s *CreateChatInviteLink) GetMemberLimit() OptInt {
	return s.MemberLimit
}

// GetCreatesJoinRequest returns the value of CreatesJoinRequest.
func (s *CreateChatInviteLink) GetCreatesJoinRequest() OptBool {
	return s.CreatesJoinRequest
}

// SetChatID sets the value of ChatID.
func (s *CreateChatInviteLink) SetChatID(val ID) {
	s.ChatID = val
}

// SetName sets the value of Name.
func (s *CreateChatInviteLink) SetName(val OptString) {
	s.Name = val
}

// SetExpireDate sets the value of ExpireDate.
func (s *CreateChatInviteLink) SetExpireDate(val OptInt) {
	s.ExpireDate = val
}

// SetMemberLimit sets the value of MemberLimit.
func (s *CreateChatInviteLink) SetMemberLimit(val OptInt) {
	s.MemberLimit = val
}

// SetCreatesJoinRequest sets the value of CreatesJoinRequest.
func (s *CreateChatInviteLink) SetCreatesJoinRequest(val OptBool) {
	s.CreatesJoinRequest = val
}

// Input for createForumTopic.
// Ref: #/components/schemas/createForumTopic
type CreateForumTopic struct {
	ChatID ID `json:"chat_id"`
	// Topic name, 1-128 characters.
	Name string `json:"name"`
	// Color of the topic icon in RGB format. Currently, must be one of 7322096 (0x6FB9F0), 16766590
	// (0xFFD67E), 13338331 (0xCB86DB), 9367192 (0x8EEE98), 16749490 (0xFF93B2), or 16478047 (0xFB6F5F).
	IconColor OptInt `json:"icon_color"`
	// Unique identifier of the custom emoji shown as the topic icon. Use
	// [getForumTopicIconStickers](https://core.telegram.org/bots/api#getforumtopiciconstickers) to get
	// all allowed custom emoji identifiers.
	IconCustomEmojiID OptString `json:"icon_custom_emoji_id"`
}

// GetChatID returns the value of ChatID.
func (s *CreateForumTopic) GetChatID() ID {
	return s.ChatID
}

// GetName returns the value of Name.
func (s *CreateForumTopic) GetName() string {
	return s.Name
}

// GetIconColor returns the value of IconColor.
func (s *CreateForumTopic) GetIconColor() OptInt {
	return s.IconColor
}

// GetIconCustomEmojiID returns the value of IconCustomEmojiID.
func (s *CreateForumTopic) GetIconCustomEmojiID() OptString {
	return s.IconCustomEmojiID
}

// SetChatID sets the value of ChatID.
func (s *CreateForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// SetName sets the value of Name.
func (s *CreateForumTopic) SetName(val string) {
	s.Name = val
}

// SetIconColor sets the value of IconColor.
func (s *CreateForumTopic) SetIconColor(val OptInt) {
	s.IconColor = val
}

// SetIconCustomEmojiID sets the value of IconCustomEmojiID.
func (s *CreateForumTopic) SetIconCustomEmojiID(val OptString) {
	s.IconCustomEmojiID = val
}

// Input for createInvoiceLink.
// Ref: #/components/schemas/createInvoiceLink
type CreateInvoiceLink struct {
	// Product name, 1-32 characters.
	Title string `json:"title"`
	// Product description, 1-255 characters.
	Description string `json:"description"`
	// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your
	// internal processes.
	Payload string `json:"payload"`
	// Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string
	// for payments in [Telegram Stars](https://t.me/BotNews/90).
	ProviderToken OptString `json:"provider_token"`
	// Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.
	// org/bots/payments#supported-currencies). Pass `XTR` for payments in [Telegram Stars](https://t.
	// me/BotNews/90).
	Currency string `json:"currency"`
	// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery
	// cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram
	// Stars](https://t.me/BotNews/90).
	Prices []LabeledPrice `json:"prices"`
	// The maximum accepted amount for tips in the _smallest units_ of the currency (integer, **not**
	// float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`. See the
	// _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it
	// shows the number of digits past the decimal point for each currency (2 for the majority of
	// currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
	MaxTipAmount OptInt `json:"max_tip_amount"`
	// A JSON-serialized array of suggested amounts of tips in the _smallest units_ of the currency
	// (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested
	// tip amounts must be positive, passed in a strictly increased order and must not exceed
	// _max_tip_amount_.
	SuggestedTipAmounts []int `json:"suggested_tip_amounts"`
	// JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed
	// description of required fields should be provided by the payment provider.
	ProviderData OptString `json:"provider_data"`
	// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a
	// service.
	PhotoURL OptString `json:"photo_url"`
	// Photo size in bytes.
	PhotoSize OptInt `json:"photo_size"`
	// Photo width.
	PhotoWidth OptInt `json:"photo_width"`
	// Photo height.
	PhotoHeight OptInt `json:"photo_height"`
	// Pass _True_ if you require the user's full name to complete the order. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	NeedName OptBool `json:"need_name"`
	// Pass _True_ if you require the user's phone number to complete the order. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	NeedPhoneNumber OptBool `json:"need_phone_number"`
	// Pass _True_ if you require the user's email address to complete the order. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	NeedEmail OptBool `json:"need_email"`
	// Pass _True_ if you require the user's shipping address to complete the order. Ignored for payments
	// in [Telegram Stars](https://t.me/BotNews/90).
	NeedShippingAddress OptBool `json:"need_shipping_address"`
	// Pass _True_ if the user's phone number should be sent to the provider. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	SendPhoneNumberToProvider OptBool `json:"send_phone_number_to_provider"`
	// Pass _True_ if the user's email address should be sent to the provider. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	SendEmailToProvider OptBool `json:"send_email_to_provider"`
	// Pass _True_ if the final price depends on the shipping method. Ignored for payments in [Telegram
	// Stars](https://t.me/BotNews/90).
	IsFlexible OptBool `json:"is_flexible"`
}

// GetTitle returns the value of Title.
func (s *CreateInvoiceLink) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *CreateInvoiceLink) GetDescription() string {
	return s.Description
}

// GetPayload returns the value of Payload.
func (s *CreateInvoiceLink) GetPayload() string {
	return s.Payload
}

// GetProviderToken returns the value of ProviderToken.
func (s *CreateInvoiceLink) GetProviderToken() OptString {
	return s.ProviderToken
}

// GetCurrency returns the value of Currency.
func (s *CreateInvoiceLink) GetCurrency() string {
	return s.Currency
}

// GetPrices returns the value of Prices.
func (s *CreateInvoiceLink) GetPrices() []LabeledPrice {
	return s.Prices
}

// GetMaxTipAmount returns the value of MaxTipAmount.
func (s *CreateInvoiceLink) GetMaxTipAmount() OptInt {
	return s.MaxTipAmount
}

// GetSuggestedTipAmounts returns the value of SuggestedTipAmounts.
func (s *CreateInvoiceLink) GetSuggestedTipAmounts() []int {
	return s.SuggestedTipAmounts
}

// GetProviderData returns the value of ProviderData.
func (s *CreateInvoiceLink) GetProviderData() OptString {
	return s.ProviderData
}

// GetPhotoURL returns the value of PhotoURL.
func (s *CreateInvoiceLink) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetPhotoSize returns the value of PhotoSize.
func (s *CreateInvoiceLink) GetPhotoSize() OptInt {
	return s.PhotoSize
}

// GetPhotoWidth returns the value of PhotoWidth.
func (s *CreateInvoiceLink) GetPhotoWidth() OptInt {
	return s.PhotoWidth
}

// GetPhotoHeight returns the value of PhotoHeight.
func (s *CreateInvoiceLink) GetPhotoHeight() OptInt {
	return s.PhotoHeight
}

// GetNeedName returns the value of NeedName.
func (s *CreateInvoiceLink) GetNeedName() OptBool {
	return s.NeedName
}

// GetNeedPhoneNumber returns the value of NeedPhoneNumber.
func (s *CreateInvoiceLink) GetNeedPhoneNumber() OptBool {
	return s.NeedPhoneNumber
}

// GetNeedEmail returns the value of NeedEmail.
func (s *CreateInvoiceLink) GetNeedEmail() OptBool {
	return s.NeedEmail
}

// GetNeedShippingAddress returns the value of NeedShippingAddress.
func (s *CreateInvoiceLink) GetNeedShippingAddress() OptBool {
	return s.NeedShippingAddress
}

// GetSendPhoneNumberToProvider returns the value of SendPhoneNumberToProvider.
func (s *CreateInvoiceLink) GetSendPhoneNumberToProvider() OptBool {
	return s.SendPhoneNumberToProvider
}

// GetSendEmailToProvider returns the value of SendEmailToProvider.
func (s *CreateInvoiceLink) GetSendEmailToProvider() OptBool {
	return s.SendEmailToProvider
}

// GetIsFlexible returns the value of IsFlexible.
func (s *CreateInvoiceLink) GetIsFlexible() OptBool {
	return s.IsFlexible
}

// SetTitle sets the value of Title.
func (s *CreateInvoiceLink) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *CreateInvoiceLink) SetDescription(val string) {
	s.Description = val
}

// SetPayload sets the value of Payload.
func (s *CreateInvoiceLink) SetPayload(val string) {
	s.Payload = val
}

// SetProviderToken sets the value of ProviderToken.
func (s *CreateInvoiceLink) SetProviderToken(val OptString) {
	s.ProviderToken = val
}

// SetCurrency sets the value of Currency.
func (s *CreateInvoiceLink) SetCurrency(val string) {
	s.Currency = val
}

// SetPrices sets the value of Prices.
func (s *CreateInvoiceLink) SetPrices(val []LabeledPrice) {
	s.Prices = val
}

// SetMaxTipAmount sets the value of MaxTipAmount.
func (s *CreateInvoiceLink) SetMaxTipAmount(val OptInt) {
	s.MaxTipAmount = val
}

// SetSuggestedTipAmounts sets the value of SuggestedTipAmounts.
func (s *CreateInvoiceLink) SetSuggestedTipAmounts(val []int) {
	s.SuggestedTipAmounts = val
}

// SetProviderData sets the value of ProviderData.
func (s *CreateInvoiceLink) SetProviderData(val OptString) {
	s.ProviderData = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *CreateInvoiceLink) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetPhotoSize sets the value of PhotoSize.
func (s *CreateInvoiceLink) SetPhotoSize(val OptInt) {
	s.PhotoSize = val
}

// SetPhotoWidth sets the value of PhotoWidth.
func (s *CreateInvoiceLink) SetPhotoWidth(val OptInt) {
	s.PhotoWidth = val
}

// SetPhotoHeight sets the value of PhotoHeight.
func (s *CreateInvoiceLink) SetPhotoHeight(val OptInt) {
	s.PhotoHeight = val
}

// SetNeedName sets the value of NeedName.
func (s *CreateInvoiceLink) SetNeedName(val OptBool) {
	s.NeedName = val
}

// SetNeedPhoneNumber sets the value of NeedPhoneNumber.
func (s *CreateInvoiceLink) SetNeedPhoneNumber(val OptBool) {
	s.NeedPhoneNumber = val
}

// SetNeedEmail sets the value of NeedEmail.
func (s *CreateInvoiceLink) SetNeedEmail(val OptBool) {
	s.NeedEmail = val
}

// SetNeedShippingAddress sets the value of NeedShippingAddress.
func (s *CreateInvoiceLink) SetNeedShippingAddress(val OptBool) {
	s.NeedShippingAddress = val
}

// SetSendPhoneNumberToProvider sets the value of SendPhoneNumberToProvider.
func (s *CreateInvoiceLink) SetSendPhoneNumberToProvider(val OptBool) {
	s.SendPhoneNumberToProvider = val
}

// SetSendEmailToProvider sets the value of SendEmailToProvider.
func (s *CreateInvoiceLink) SetSendEmailToProvider(val OptBool) {
	s.SendEmailToProvider = val
}

// SetIsFlexible sets the value of IsFlexible.
func (s *CreateInvoiceLink) SetIsFlexible(val OptBool) {
	s.IsFlexible = val
}

// Input for createNewStickerSet.
// Ref: #/components/schemas/createNewStickerSet
type CreateNewStickerSet struct {
	// User identifier of created sticker set owner.
	UserID int64 `json:"user_id"`
	// Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., _animals_). Can contain
	// only English letters, digits and underscores. Must begin with a letter, can't contain consecutive
	// underscores and must end in `"_by_<bot_username>"`. `<bot_username>` is case insensitive. 1-64
	// characters.
	Name string `json:"name"`
	// Sticker set title, 1-64 characters.
	Title string `json:"title"`
	// A JSON-serialized list of 1-50 initial stickers to be added to the sticker set.
	Stickers []InputSticker `json:"stickers"`
	// Type of stickers in the set, pass `regular`, `mask`, or `custom_emoji`. By default, a regular
	// sticker set is created.
	StickerType OptString `json:"sticker_type"`
	// Pass _True_ if stickers in the sticker set must be repainted to the color of text when used in
	// messages, the accent color if used as emoji status, white on chat photos, or another appropriate
	// color based on context; for custom emoji sticker sets only.
	NeedsRepainting OptBool `json:"needs_repainting"`
}

// GetUserID returns the value of UserID.
func (s *CreateNewStickerSet) GetUserID() int64 {
	return s.UserID
}

// GetName returns the value of Name.
func (s *CreateNewStickerSet) GetName() string {
	return s.Name
}

// GetTitle returns the value of Title.
func (s *CreateNewStickerSet) GetTitle() string {
	return s.Title
}

// GetStickers returns the value of Stickers.
func (s *CreateNewStickerSet) GetStickers() []InputSticker {
	return s.Stickers
}

// GetStickerType returns the value of StickerType.
func (s *CreateNewStickerSet) GetStickerType() OptString {
	return s.StickerType
}

// GetNeedsRepainting returns the value of NeedsRepainting.
func (s *CreateNewStickerSet) GetNeedsRepainting() OptBool {
	return s.NeedsRepainting
}

// SetUserID sets the value of UserID.
func (s *CreateNewStickerSet) SetUserID(val int64) {
	s.UserID = val
}

// SetName sets the value of Name.
func (s *CreateNewStickerSet) SetName(val string) {
	s.Name = val
}

// SetTitle sets the value of Title.
func (s *CreateNewStickerSet) SetTitle(val string) {
	s.Title = val
}

// SetStickers sets the value of Stickers.
func (s *CreateNewStickerSet) SetStickers(val []InputSticker) {
	s.Stickers = val
}

// SetStickerType sets the value of StickerType.
func (s *CreateNewStickerSet) SetStickerType(val OptString) {
	s.StickerType = val
}

// SetNeedsRepainting sets the value of NeedsRepainting.
func (s *CreateNewStickerSet) SetNeedsRepainting(val OptBool) {
	s.NeedsRepainting = val
}

// Input for declineChatJoinRequest.
// Ref: #/components/schemas/declineChatJoinRequest
type DeclineChatJoinRequest struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
}

// GetChatID returns the value of ChatID.
func (s *DeclineChatJoinRequest) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *DeclineChatJoinRequest) GetUserID() int64 {
	return s.UserID
}

// SetChatID sets the value of ChatID.
func (s *DeclineChatJoinRequest) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *DeclineChatJoinRequest) SetUserID(val int64) {
	s.UserID = val
}

// Input for deleteChatPhoto.
// Ref: #/components/schemas/deleteChatPhoto
type DeleteChatPhoto struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *DeleteChatPhoto) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *DeleteChatPhoto) SetChatID(val ID) {
	s.ChatID = val
}

// Input for deleteChatStickerSet.
// Ref: #/components/schemas/deleteChatStickerSet
type DeleteChatStickerSet struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *DeleteChatStickerSet) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *DeleteChatStickerSet) SetChatID(val ID) {
	s.ChatID = val
}

// Input for deleteForumTopic.
// Ref: #/components/schemas/deleteForumTopic
type DeleteForumTopic struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread of the forum topic.
	MessageThreadID int `json:"message_thread_id"`
}

// GetChatID returns the value of ChatID.
func (s *DeleteForumTopic) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *DeleteForumTopic) GetMessageThreadID() int {
	return s.MessageThreadID
}

// SetChatID sets the value of ChatID.
func (s *DeleteForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *DeleteForumTopic) SetMessageThreadID(val int) {
	s.MessageThreadID = val
}

// Input for deleteMessage.
// Ref: #/components/schemas/deleteMessage
type DeleteMessage struct {
	ChatID ID `json:"chat_id"`
	// Identifier of the message to delete.
	MessageID int `json:"message_id"`
}

// GetChatID returns the value of ChatID.
func (s *DeleteMessage) GetChatID() ID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *DeleteMessage) GetMessageID() int {
	return s.MessageID
}

// SetChatID sets the value of ChatID.
func (s *DeleteMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *DeleteMessage) SetMessageID(val int) {
	s.MessageID = val
}

// Input for deleteMessages.
// Ref: #/components/schemas/deleteMessages
type DeleteMessages struct {
	ChatID ID `json:"chat_id"`
	// A JSON-serialized list of 1-100 identifiers of messages to delete. See
	// [deleteMessage](https://core.telegram.org/bots/api#deletemessage) for limitations on which
	// messages can be deleted.
	MessageIds []int `json:"message_ids"`
}

// GetChatID returns the value of ChatID.
func (s *DeleteMessages) GetChatID() ID {
	return s.ChatID
}

// GetMessageIds returns the value of MessageIds.
func (s *DeleteMessages) GetMessageIds() []int {
	return s.MessageIds
}

// SetChatID sets the value of ChatID.
func (s *DeleteMessages) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageIds sets the value of MessageIds.
func (s *DeleteMessages) SetMessageIds(val []int) {
	s.MessageIds = val
}

// Input for deleteMyCommands.
// Ref: #/components/schemas/deleteMyCommands
type DeleteMyCommands struct {
	Scope OptBotCommandScope `json:"scope"`
	// A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the
	// given scope, for whose language there are no dedicated commands.
	LanguageCode OptString `json:"language_code"`
}

// GetScope returns the value of Scope.
func (s *DeleteMyCommands) GetScope() OptBotCommandScope {
	return s.Scope
}

// GetLanguageCode returns the value of LanguageCode.
func (s *DeleteMyCommands) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetScope sets the value of Scope.
func (s *DeleteMyCommands) SetScope(val OptBotCommandScope) {
	s.Scope = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *DeleteMyCommands) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for deleteStickerFromSet.
// Ref: #/components/schemas/deleteStickerFromSet
type DeleteStickerFromSet struct {
	// File identifier of the sticker.
	Sticker string `json:"sticker"`
}

// GetSticker returns the value of Sticker.
func (s *DeleteStickerFromSet) GetSticker() string {
	return s.Sticker
}

// SetSticker sets the value of Sticker.
func (s *DeleteStickerFromSet) SetSticker(val string) {
	s.Sticker = val
}

// Input for deleteStickerSet.
// Ref: #/components/schemas/deleteStickerSet
type DeleteStickerSet struct {
	// Sticker set name.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *DeleteStickerSet) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *DeleteStickerSet) SetName(val string) {
	s.Name = val
}

// Input for deleteWebhook.
// Ref: #/components/schemas/deleteWebhook
type DeleteWebhook struct {
	// Pass _True_ to drop all pending updates.
	DropPendingUpdates OptBool `json:"drop_pending_updates"`
}

// GetDropPendingUpdates returns the value of DropPendingUpdates.
func (s *DeleteWebhook) GetDropPendingUpdates() OptBool {
	return s.DropPendingUpdates
}

// SetDropPendingUpdates sets the value of DropPendingUpdates.
func (s *DeleteWebhook) SetDropPendingUpdates(val OptBool) {
	s.DropPendingUpdates = val
}

// This object represents an animated emoji that displays a random value.
// Ref: #/components/schemas/Dice
type Dice struct {
	// Emoji on which the dice throw animation is based.
	Emoji string `json:"emoji"`
	// Value of the dice, 1-6 for `🎲`, `🎯` and `🎳` base emoji, 1-5 for `🏀` and `⚽` base
	// emoji, 1-64 for `🎰` base emoji.
	Value int `json:"value"`
}

// GetEmoji returns the value of Emoji.
func (s *Dice) GetEmoji() string {
	return s.Emoji
}

// GetValue returns the value of Value.
func (s *Dice) GetValue() int {
	return s.Value
}

// SetEmoji sets the value of Emoji.
func (s *Dice) SetEmoji(val string) {
	s.Emoji = val
}

// SetValue sets the value of Value.
func (s *Dice) SetValue(val int) {
	s.Value = val
}

// This object represents a general file (as opposed to [photos](https://core.telegram.
// org/bots/api#photosize), [voice messages](https://core.telegram.org/bots/api#voice) and [audio
// files](https://core.telegram.org/bots/api#audio)).
// Ref: #/components/schemas/Document
type Document struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string       `json:"file_unique_id"`
	Thumbnail    OptPhotoSize `json:"thumbnail"`
	// _Optional_. Original filename as defined by sender.
	FileName OptString `json:"file_name"`
	// _Optional_. MIME type of the file as defined by sender.
	MimeType OptString `json:"mime_type"`
	// _Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have
	// difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed
	// 64-bit integer or double-precision float type are safe for storing this value.
	FileSize OptInt `json:"file_size"`
}

// GetFileID returns the value of FileID.
func (s *Document) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *Document) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetThumbnail returns the value of Thumbnail.
func (s *Document) GetThumbnail() OptPhotoSize {
	return s.Thumbnail
}

// GetFileName returns the value of FileName.
func (s *Document) GetFileName() OptString {
	return s.FileName
}

// GetMimeType returns the value of MimeType.
func (s *Document) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s *Document) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Document) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Document) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *Document) SetThumbnail(val OptPhotoSize) {
	s.Thumbnail = val
}

// SetFileName sets the value of FileName.
func (s *Document) SetFileName(val OptString) {
	s.FileName = val
}

// SetMimeType sets the value of MimeType.
func (s *Document) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Document) SetFileSize(val OptInt) {
	s.FileSize = val
}

// Input for editChatInviteLink.
// Ref: #/components/schemas/editChatInviteLink
type EditChatInviteLink struct {
	ChatID ID `json:"chat_id"`
	// The invite link to edit.
	InviteLink string `json:"invite_link"`
	// Invite link name; 0-32 characters.
	Name OptString `json:"name"`
	// Point in time (Unix timestamp) when the link will expire.
	ExpireDate OptInt `json:"expire_date"`
	// The maximum number of users that can be members of the chat simultaneously after joining the chat
	// via this invite link; 1-99999.
	MemberLimit OptInt `json:"member_limit"`
	// _True_, if users joining the chat via the link need to be approved by chat administrators. If
	// _True_, _member_limit_ can't be specified.
	CreatesJoinRequest OptBool `json:"creates_join_request"`
}

// GetChatID returns the value of ChatID.
func (s *EditChatInviteLink) GetChatID() ID {
	return s.ChatID
}

// GetInviteLink returns the value of InviteLink.
func (s *EditChatInviteLink) GetInviteLink() string {
	return s.InviteLink
}

// GetName returns the value of Name.
func (s *EditChatInviteLink) GetName() OptString {
	return s.Name
}

// GetExpireDate returns the value of ExpireDate.
func (s *EditChatInviteLink) GetExpireDate() OptInt {
	return s.ExpireDate
}

// GetMemberLimit returns the value of MemberLimit.
func (s *EditChatInviteLink) GetMemberLimit() OptInt {
	return s.MemberLimit
}

// GetCreatesJoinRequest returns the value of CreatesJoinRequest.
func (s *EditChatInviteLink) GetCreatesJoinRequest() OptBool {
	return s.CreatesJoinRequest
}

// SetChatID sets the value of ChatID.
func (s *EditChatInviteLink) SetChatID(val ID) {
	s.ChatID = val
}

// SetInviteLink sets the value of InviteLink.
func (s *EditChatInviteLink) SetInviteLink(val string) {
	s.InviteLink = val
}

// SetName sets the value of Name.
func (s *EditChatInviteLink) SetName(val OptString) {
	s.Name = val
}

// SetExpireDate sets the value of ExpireDate.
func (s *EditChatInviteLink) SetExpireDate(val OptInt) {
	s.ExpireDate = val
}

// SetMemberLimit sets the value of MemberLimit.
func (s *EditChatInviteLink) SetMemberLimit(val OptInt) {
	s.MemberLimit = val
}

// SetCreatesJoinRequest sets the value of CreatesJoinRequest.
func (s *EditChatInviteLink) SetCreatesJoinRequest(val OptBool) {
	s.CreatesJoinRequest = val
}

// Input for editForumTopic.
// Ref: #/components/schemas/editForumTopic
type EditForumTopic struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread of the forum topic.
	MessageThreadID int `json:"message_thread_id"`
	// New topic name, 0-128 characters. If not specified or empty, the current name of the topic will be
	// kept.
	Name OptString `json:"name"`
	// New unique identifier of the custom emoji shown as the topic icon. Use
	// [getForumTopicIconStickers](https://core.telegram.org/bots/api#getforumtopiciconstickers) to get
	// all allowed custom emoji identifiers. Pass an empty string to remove the icon. If not specified,
	// the current icon will be kept.
	IconCustomEmojiID OptString `json:"icon_custom_emoji_id"`
}

// GetChatID returns the value of ChatID.
func (s *EditForumTopic) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *EditForumTopic) GetMessageThreadID() int {
	return s.MessageThreadID
}

// GetName returns the value of Name.
func (s *EditForumTopic) GetName() OptString {
	return s.Name
}

// GetIconCustomEmojiID returns the value of IconCustomEmojiID.
func (s *EditForumTopic) GetIconCustomEmojiID() OptString {
	return s.IconCustomEmojiID
}

// SetChatID sets the value of ChatID.
func (s *EditForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *EditForumTopic) SetMessageThreadID(val int) {
	s.MessageThreadID = val
}

// SetName sets the value of Name.
func (s *EditForumTopic) SetName(val OptString) {
	s.Name = val
}

// SetIconCustomEmojiID sets the value of IconCustomEmojiID.
func (s *EditForumTopic) SetIconCustomEmojiID(val OptString) {
	s.IconCustomEmojiID = val
}

// Input for editGeneralForumTopic.
// Ref: #/components/schemas/editGeneralForumTopic
type EditGeneralForumTopic struct {
	ChatID ID `json:"chat_id"`
	// New topic name, 1-128 characters.
	Name string `json:"name"`
}

// GetChatID returns the value of ChatID.
func (s *EditGeneralForumTopic) GetChatID() ID {
	return s.ChatID
}

// GetName returns the value of Name.
func (s *EditGeneralForumTopic) GetName() string {
	return s.Name
}

// SetChatID sets the value of ChatID.
func (s *EditGeneralForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// SetName sets the value of Name.
func (s *EditGeneralForumTopic) SetName(val string) {
	s.Name = val
}

// Input for editMessageCaption.
// Ref: #/components/schemas/editMessageCaption
type EditMessageCaption struct {
	// Unique identifier of the business connection on behalf of which the message to be edited was sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               OptID     `json:"chat_id"`
	// Required if _inline_message_id_ is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id"`
	// Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id"`
	// New caption of the message, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// Pass _True_, if the caption must be shown above the message media. Supported only for animation,
	// photo and video messages.
	ShowCaptionAboveMedia OptBool                 `json:"show_caption_above_media"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *EditMessageCaption) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *EditMessageCaption) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *EditMessageCaption) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *EditMessageCaption) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetCaption returns the value of Caption.
func (s *EditMessageCaption) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *EditMessageCaption) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *EditMessageCaption) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *EditMessageCaption) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *EditMessageCaption) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *EditMessageCaption) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *EditMessageCaption) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageCaption) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageCaption) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetCaption sets the value of Caption.
func (s *EditMessageCaption) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *EditMessageCaption) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *EditMessageCaption) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *EditMessageCaption) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageCaption) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for editMessageLiveLocation.
// Ref: #/components/schemas/editMessageLiveLocation
type EditMessageLiveLocation struct {
	// Unique identifier of the business connection on behalf of which the message to be edited was sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               OptID     `json:"chat_id"`
	// Required if _inline_message_id_ is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id"`
	// Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id"`
	// Latitude of new location.
	Latitude float64 `json:"latitude"`
	// Longitude of new location.
	Longitude float64 `json:"longitude"`
	// New period in seconds during which the location can be updated, starting from the message send
	// date. If 0x7FFFFFFF is specified, then the location can be updated forever. Otherwise, the new
	// value must not exceed the current _live_period_ by more than a day, and the live location
	// expiration date must remain within the next 90 days. If not specified, then _live_period_ remains
	// unchanged.
	LivePeriod OptInt `json:"live_period"`
	// The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy"`
	// Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
	Heading OptInt `json:"heading"`
	// The maximum distance for proximity alerts about approaching another chat member, in meters. Must
	// be between 1 and 100000 if specified.
	ProximityAlertRadius OptInt                  `json:"proximity_alert_radius"`
	ReplyMarkup          OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *EditMessageLiveLocation) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *EditMessageLiveLocation) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *EditMessageLiveLocation) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *EditMessageLiveLocation) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetLatitude returns the value of Latitude.
func (s *EditMessageLiveLocation) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *EditMessageLiveLocation) GetLongitude() float64 {
	return s.Longitude
}

// GetLivePeriod returns the value of LivePeriod.
func (s *EditMessageLiveLocation) GetLivePeriod() OptInt {
	return s.LivePeriod
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s *EditMessageLiveLocation) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetHeading returns the value of Heading.
func (s *EditMessageLiveLocation) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s *EditMessageLiveLocation) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *EditMessageLiveLocation) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *EditMessageLiveLocation) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *EditMessageLiveLocation) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageLiveLocation) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageLiveLocation) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetLatitude sets the value of Latitude.
func (s *EditMessageLiveLocation) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *EditMessageLiveLocation) SetLongitude(val float64) {
	s.Longitude = val
}

// SetLivePeriod sets the value of LivePeriod.
func (s *EditMessageLiveLocation) SetLivePeriod(val OptInt) {
	s.LivePeriod = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *EditMessageLiveLocation) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetHeading sets the value of Heading.
func (s *EditMessageLiveLocation) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *EditMessageLiveLocation) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageLiveLocation) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for editMessageMedia.
// Ref: #/components/schemas/editMessageMedia
type EditMessageMedia struct {
	// Unique identifier of the business connection on behalf of which the message to be edited was sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               OptID     `json:"chat_id"`
	// Required if _inline_message_id_ is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id"`
	// Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message.
	InlineMessageID OptString               `json:"inline_message_id"`
	Media           InputMedia              `json:"media"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *EditMessageMedia) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *EditMessageMedia) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *EditMessageMedia) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *EditMessageMedia) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetMedia returns the value of Media.
func (s *EditMessageMedia) GetMedia() InputMedia {
	return s.Media
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *EditMessageMedia) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *EditMessageMedia) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *EditMessageMedia) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageMedia) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageMedia) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetMedia sets the value of Media.
func (s *EditMessageMedia) SetMedia(val InputMedia) {
	s.Media = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageMedia) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for editMessageReplyMarkup.
// Ref: #/components/schemas/editMessageReplyMarkup
type EditMessageReplyMarkup struct {
	// Unique identifier of the business connection on behalf of which the message to be edited was sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               OptID     `json:"chat_id"`
	// Required if _inline_message_id_ is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id"`
	// Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message.
	InlineMessageID OptString               `json:"inline_message_id"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *EditMessageReplyMarkup) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *EditMessageReplyMarkup) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *EditMessageReplyMarkup) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *EditMessageReplyMarkup) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *EditMessageReplyMarkup) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *EditMessageReplyMarkup) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *EditMessageReplyMarkup) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageReplyMarkup) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageReplyMarkup) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageReplyMarkup) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for editMessageText.
// Ref: #/components/schemas/editMessageText
type EditMessageText struct {
	// Unique identifier of the business connection on behalf of which the message to be edited was sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               OptID     `json:"chat_id"`
	// Required if _inline_message_id_ is not specified. Identifier of the message to edit.
	MessageID OptInt `json:"message_id"`
	// Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id"`
	// New text of the message, 1-4096 characters after entities parsing.
	Text string `json:"text"`
	// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in message text, which can be specified
	// instead of _parse_mode_.
	Entities           []MessageEntity         `json:"entities"`
	LinkPreviewOptions OptLinkPreviewOptions   `json:"link_preview_options"`
	ReplyMarkup        OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *EditMessageText) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *EditMessageText) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *EditMessageText) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *EditMessageText) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetText returns the value of Text.
func (s *EditMessageText) GetText() string {
	return s.Text
}

// GetParseMode returns the value of ParseMode.
func (s *EditMessageText) GetParseMode() OptString {
	return s.ParseMode
}

// GetEntities returns the value of Entities.
func (s *EditMessageText) GetEntities() []MessageEntity {
	return s.Entities
}

// GetLinkPreviewOptions returns the value of LinkPreviewOptions.
func (s *EditMessageText) GetLinkPreviewOptions() OptLinkPreviewOptions {
	return s.LinkPreviewOptions
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *EditMessageText) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *EditMessageText) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *EditMessageText) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *EditMessageText) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *EditMessageText) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetText sets the value of Text.
func (s *EditMessageText) SetText(val string) {
	s.Text = val
}

// SetParseMode sets the value of ParseMode.
func (s *EditMessageText) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetEntities sets the value of Entities.
func (s *EditMessageText) SetEntities(val []MessageEntity) {
	s.Entities = val
}

// SetLinkPreviewOptions sets the value of LinkPreviewOptions.
func (s *EditMessageText) SetLinkPreviewOptions(val OptLinkPreviewOptions) {
	s.LinkPreviewOptions = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *EditMessageText) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Describes data required for decrypting and authenticating [EncryptedPassportElement](https://core.
// telegram.org/bots/api#encryptedpassportelement). See the [Telegram Passport
// Documentation](https://core.telegram.org/passport#receiving-information) for a complete
// description of the data decryption and authentication processes.
// Ref: #/components/schemas/EncryptedCredentials
type EncryptedCredentials struct {
	// Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets
	// required for [EncryptedPassportElement](https://core.telegram.
	// org/bots/api#encryptedpassportelement) decryption and authentication.
	Data string `json:"data"`
	// Base64-encoded data hash for data authentication.
	Hash string `json:"hash"`
	// Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption.
	Secret string `json:"secret"`
}

// GetData returns the value of Data.
func (s *EncryptedCredentials) GetData() string {
	return s.Data
}

// GetHash returns the value of Hash.
func (s *EncryptedCredentials) GetHash() string {
	return s.Hash
}

// GetSecret returns the value of Secret.
func (s *EncryptedCredentials) GetSecret() string {
	return s.Secret
}

// SetData sets the value of Data.
func (s *EncryptedCredentials) SetData(val string) {
	s.Data = val
}

// SetHash sets the value of Hash.
func (s *EncryptedCredentials) SetHash(val string) {
	s.Hash = val
}

// SetSecret sets the value of Secret.
func (s *EncryptedCredentials) SetSecret(val string) {
	s.Secret = val
}

// Describes documents or other Telegram Passport elements shared with the bot by the user.
// Ref: #/components/schemas/EncryptedPassportElement
type EncryptedPassportElement struct {
	// Element type. One of `personal_details`, `passport`, `driver_license`, `identity_card`,
	// `internal_passport`, `address`, `utility_bill`, `bank_statement`, `rental_agreement`,
	// `passport_registration`, `temporary_registration`, `phone_number`, `email`.
	Type EncryptedPassportElementType `json:"type"`
	// _Optional_. Base64-encoded encrypted Telegram Passport element data provided by the user;
	// available only for `personal_details`, `passport`, `driver_license`, `identity_card`,
	// `internal_passport` and `address` types. Can be decrypted and verified using the accompanying
	// [EncryptedCredentials](https://core.telegram.org/bots/api#encryptedcredentials).
	Data OptString `json:"data"`
	// _Optional_. User's verified phone number; available only for `phone_number` type.
	PhoneNumber OptString `json:"phone_number"`
	// _Optional_. User's verified email address; available only for `email` type.
	Email OptString `json:"email"`
	// _Optional_. Array of encrypted files with documents provided by the user; available only for
	// `utility_bill`, `bank_statement`, `rental_agreement`, `passport_registration` and
	// `temporary_registration` types. Files can be decrypted and verified using the accompanying
	// [EncryptedCredentials](https://core.telegram.org/bots/api#encryptedcredentials).
	Files       []PassportFile  `json:"files"`
	FrontSide   OptPassportFile `json:"front_side"`
	ReverseSide OptPassportFile `json:"reverse_side"`
	Selfie      OptPassportFile `json:"selfie"`
	// _Optional_. Array of encrypted files with translated versions of documents provided by the user;
	// available if requested for `passport`, `driver_license`, `identity_card`, `internal_passport`,
	// `utility_bill`, `bank_statement`, `rental_agreement`, `passport_registration` and
	// `temporary_registration` types. Files can be decrypted and verified using the accompanying
	// [EncryptedCredentials](https://core.telegram.org/bots/api#encryptedcredentials).
	Translation []PassportFile `json:"translation"`
	// Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.
	// org/bots/api#passportelementerrorunspecified).
	Hash string `json:"hash"`
}

// GetType returns the value of Type.
func (s *EncryptedPassportElement) GetType() EncryptedPassportElementType {
	return s.Type
}

// GetData returns the value of Data.
func (s *EncryptedPassportElement) GetData() OptString {
	return s.Data
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *EncryptedPassportElement) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetEmail returns the value of Email.
func (s *EncryptedPassportElement) GetEmail() OptString {
	return s.Email
}

// GetFiles returns the value of Files.
func (s *EncryptedPassportElement) GetFiles() []PassportFile {
	return s.Files
}

// GetFrontSide returns the value of FrontSide.
func (s *EncryptedPassportElement) GetFrontSide() OptPassportFile {
	return s.FrontSide
}

// GetReverseSide returns the value of ReverseSide.
func (s *EncryptedPassportElement) GetReverseSide() OptPassportFile {
	return s.ReverseSide
}

// GetSelfie returns the value of Selfie.
func (s *EncryptedPassportElement) GetSelfie() OptPassportFile {
	return s.Selfie
}

// GetTranslation returns the value of Translation.
func (s *EncryptedPassportElement) GetTranslation() []PassportFile {
	return s.Translation
}

// GetHash returns the value of Hash.
func (s *EncryptedPassportElement) GetHash() string {
	return s.Hash
}

// SetType sets the value of Type.
func (s *EncryptedPassportElement) SetType(val EncryptedPassportElementType) {
	s.Type = val
}

// SetData sets the value of Data.
func (s *EncryptedPassportElement) SetData(val OptString) {
	s.Data = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *EncryptedPassportElement) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetEmail sets the value of Email.
func (s *EncryptedPassportElement) SetEmail(val OptString) {
	s.Email = val
}

// SetFiles sets the value of Files.
func (s *EncryptedPassportElement) SetFiles(val []PassportFile) {
	s.Files = val
}

// SetFrontSide sets the value of FrontSide.
func (s *EncryptedPassportElement) SetFrontSide(val OptPassportFile) {
	s.FrontSide = val
}

// SetReverseSide sets the value of ReverseSide.
func (s *EncryptedPassportElement) SetReverseSide(val OptPassportFile) {
	s.ReverseSide = val
}

// SetSelfie sets the value of Selfie.
func (s *EncryptedPassportElement) SetSelfie(val OptPassportFile) {
	s.Selfie = val
}

// SetTranslation sets the value of Translation.
func (s *EncryptedPassportElement) SetTranslation(val []PassportFile) {
	s.Translation = val
}

// SetHash sets the value of Hash.
func (s *EncryptedPassportElement) SetHash(val string) {
	s.Hash = val
}

// Element type. One of `personal_details`, `passport`, `driver_license`, `identity_card`,
// `internal_passport`, `address`, `utility_bill`, `bank_statement`, `rental_agreement`,
// `passport_registration`, `temporary_registration`, `phone_number`, `email`.
type EncryptedPassportElementType string

const (
	EncryptedPassportElementTypePersonalDetails       EncryptedPassportElementType = "personal_details"
	EncryptedPassportElementTypePassport              EncryptedPassportElementType = "passport"
	EncryptedPassportElementTypeDriverLicense         EncryptedPassportElementType = "driver_license"
	EncryptedPassportElementTypeIdentityCard          EncryptedPassportElementType = "identity_card"
	EncryptedPassportElementTypeInternalPassport      EncryptedPassportElementType = "internal_passport"
	EncryptedPassportElementTypeAddress               EncryptedPassportElementType = "address"
	EncryptedPassportElementTypeUtilityBill           EncryptedPassportElementType = "utility_bill"
	EncryptedPassportElementTypeBankStatement         EncryptedPassportElementType = "bank_statement"
	EncryptedPassportElementTypeRentalAgreement       EncryptedPassportElementType = "rental_agreement"
	EncryptedPassportElementTypePassportRegistration  EncryptedPassportElementType = "passport_registration"
	EncryptedPassportElementTypeTemporaryRegistration EncryptedPassportElementType = "temporary_registration"
	EncryptedPassportElementTypePhoneNumber           EncryptedPassportElementType = "phone_number"
	EncryptedPassportElementTypeEmail                 EncryptedPassportElementType = "email"
)

// AllValues returns all EncryptedPassportElementType values.
func (EncryptedPassportElementType) AllValues() []EncryptedPassportElementType {
	return []EncryptedPassportElementType{
		EncryptedPassportElementTypePersonalDetails,
		EncryptedPassportElementTypePassport,
		EncryptedPassportElementTypeDriverLicense,
		EncryptedPassportElementTypeIdentityCard,
		EncryptedPassportElementTypeInternalPassport,
		EncryptedPassportElementTypeAddress,
		EncryptedPassportElementTypeUtilityBill,
		EncryptedPassportElementTypeBankStatement,
		EncryptedPassportElementTypeRentalAgreement,
		EncryptedPassportElementTypePassportRegistration,
		EncryptedPassportElementTypeTemporaryRegistration,
		EncryptedPassportElementTypePhoneNumber,
		EncryptedPassportElementTypeEmail,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s EncryptedPassportElementType) MarshalText() ([]byte, error) {
	switch s {
	case EncryptedPassportElementTypePersonalDetails:
		return []byte(s), nil
	case EncryptedPassportElementTypePassport:
		return []byte(s), nil
	case EncryptedPassportElementTypeDriverLicense:
		return []byte(s), nil
	case EncryptedPassportElementTypeIdentityCard:
		return []byte(s), nil
	case EncryptedPassportElementTypeInternalPassport:
		return []byte(s), nil
	case EncryptedPassportElementTypeAddress:
		return []byte(s), nil
	case EncryptedPassportElementTypeUtilityBill:
		return []byte(s), nil
	case EncryptedPassportElementTypeBankStatement:
		return []byte(s), nil
	case EncryptedPassportElementTypeRentalAgreement:
		return []byte(s), nil
	case EncryptedPassportElementTypePassportRegistration:
		return []byte(s), nil
	case EncryptedPassportElementTypeTemporaryRegistration:
		return []byte(s), nil
	case EncryptedPassportElementTypePhoneNumber:
		return []byte(s), nil
	case EncryptedPassportElementTypeEmail:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EncryptedPassportElementType) UnmarshalText(data []byte) error {
	switch EncryptedPassportElementType(data) {
	case EncryptedPassportElementTypePersonalDetails:
		*s = EncryptedPassportElementTypePersonalDetails
		return nil
	case EncryptedPassportElementTypePassport:
		*s = EncryptedPassportElementTypePassport
		return nil
	case EncryptedPassportElementTypeDriverLicense:
		*s = EncryptedPassportElementTypeDriverLicense
		return nil
	case EncryptedPassportElementTypeIdentityCard:
		*s = EncryptedPassportElementTypeIdentityCard
		return nil
	case EncryptedPassportElementTypeInternalPassport:
		*s = EncryptedPassportElementTypeInternalPassport
		return nil
	case EncryptedPassportElementTypeAddress:
		*s = EncryptedPassportElementTypeAddress
		return nil
	case EncryptedPassportElementTypeUtilityBill:
		*s = EncryptedPassportElementTypeUtilityBill
		return nil
	case EncryptedPassportElementTypeBankStatement:
		*s = EncryptedPassportElementTypeBankStatement
		return nil
	case EncryptedPassportElementTypeRentalAgreement:
		*s = EncryptedPassportElementTypeRentalAgreement
		return nil
	case EncryptedPassportElementTypePassportRegistration:
		*s = EncryptedPassportElementTypePassportRegistration
		return nil
	case EncryptedPassportElementTypeTemporaryRegistration:
		*s = EncryptedPassportElementTypeTemporaryRegistration
		return nil
	case EncryptedPassportElementTypePhoneNumber:
		*s = EncryptedPassportElementTypePhoneNumber
		return nil
	case EncryptedPassportElementTypeEmail:
		*s = EncryptedPassportElementTypeEmail
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Error
type Error struct {
	Ok          bool                  `json:"ok"`
	ErrorCode   int                   `json:"error_code"`
	Description string                `json:"description"`
	Parameters  OptResponseParameters `json:"parameters"`
}

// GetOk returns the value of Ok.
func (s *Error) GetOk() bool {
	return s.Ok
}

// GetErrorCode returns the value of ErrorCode.
func (s *Error) GetErrorCode() int {
	return s.ErrorCode
}

// GetDescription returns the value of Description.
func (s *Error) GetDescription() string {
	return s.Description
}

// GetParameters returns the value of Parameters.
func (s *Error) GetParameters() OptResponseParameters {
	return s.Parameters
}

// SetOk sets the value of Ok.
func (s *Error) SetOk(val bool) {
	s.Ok = val
}

// SetErrorCode sets the value of ErrorCode.
func (s *Error) SetErrorCode(val int) {
	s.ErrorCode = val
}

// SetDescription sets the value of Description.
func (s *Error) SetDescription(val string) {
	s.Description = val
}

// SetParameters sets the value of Parameters.
func (s *Error) SetParameters(val OptResponseParameters) {
	s.Parameters = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Input for exportChatInviteLink.
// Ref: #/components/schemas/exportChatInviteLink
type ExportChatInviteLink struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *ExportChatInviteLink) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *ExportChatInviteLink) SetChatID(val ID) {
	s.ChatID = val
}

// This object contains information about a message that is being replied to, which may come from
// another chat or forum topic.
// Ref: #/components/schemas/ExternalReplyInfo
type ExternalReplyInfo struct {
	Origin MessageOrigin `json:"origin"`
	Chat   OptChat       `json:"chat"`
	// _Optional_. Unique message identifier inside the original chat. Available only if the original
	// chat is a supergroup or a channel.
	MessageID          OptInt                `json:"message_id"`
	LinkPreviewOptions OptLinkPreviewOptions `json:"link_preview_options"`
	Animation          OptAnimation          `json:"animation"`
	Audio              OptAudio              `json:"audio"`
	Document           OptDocument           `json:"document"`
	// _Optional_. Message is a photo, available sizes of the photo.
	Photo     []PhotoSize  `json:"photo"`
	Sticker   OptSticker   `json:"sticker"`
	Story     OptStory     `json:"story"`
	Video     OptVideo     `json:"video"`
	VideoNote OptVideoNote `json:"video_note"`
	Voice     OptVoice     `json:"voice"`
	// _Optional_. _True_, if the message media is covered by a spoiler animation.
	HasMediaSpoiler OptBool            `json:"has_media_spoiler"`
	Contact         OptContact         `json:"contact"`
	Dice            OptDice            `json:"dice"`
	Game            OptGame            `json:"game"`
	Giveaway        OptGiveaway        `json:"giveaway"`
	GiveawayWinners OptGiveawayWinners `json:"giveaway_winners"`
	Invoice         OptInvoice         `json:"invoice"`
	Location        OptLocation        `json:"location"`
	Poll            OptPoll            `json:"poll"`
	Venue           OptVenue           `json:"venue"`
}

// GetOrigin returns the value of Origin.
func (s *ExternalReplyInfo) GetOrigin() MessageOrigin {
	return s.Origin
}

// GetChat returns the value of Chat.
func (s *ExternalReplyInfo) GetChat() OptChat {
	return s.Chat
}

// GetMessageID returns the value of MessageID.
func (s *ExternalReplyInfo) GetMessageID() OptInt {
	return s.MessageID
}

// GetLinkPreviewOptions returns the value of LinkPreviewOptions.
func (s *ExternalReplyInfo) GetLinkPreviewOptions() OptLinkPreviewOptions {
	return s.LinkPreviewOptions
}

// GetAnimation returns the value of Animation.
func (s *ExternalReplyInfo) GetAnimation() OptAnimation {
	return s.Animation
}

// GetAudio returns the value of Audio.
func (s *ExternalReplyInfo) GetAudio() OptAudio {
	return s.Audio
}

// GetDocument returns the value of Document.
func (s *ExternalReplyInfo) GetDocument() OptDocument {
	return s.Document
}

// GetPhoto returns the value of Photo.
func (s *ExternalReplyInfo) GetPhoto() []PhotoSize {
	return s.Photo
}

// GetSticker returns the value of Sticker.
func (s *ExternalReplyInfo) GetSticker() OptSticker {
	return s.Sticker
}

// GetStory returns the value of Story.
func (s *ExternalReplyInfo) GetStory() OptStory {
	return s.Story
}

// GetVideo returns the value of Video.
func (s *ExternalReplyInfo) GetVideo() OptVideo {
	return s.Video
}

// GetVideoNote returns the value of VideoNote.
func (s *ExternalReplyInfo) GetVideoNote() OptVideoNote {
	return s.VideoNote
}

// GetVoice returns the value of Voice.
func (s *ExternalReplyInfo) GetVoice() OptVoice {
	return s.Voice
}

// GetHasMediaSpoiler returns the value of HasMediaSpoiler.
func (s *ExternalReplyInfo) GetHasMediaSpoiler() OptBool {
	return s.HasMediaSpoiler
}

// GetContact returns the value of Contact.
func (s *ExternalReplyInfo) GetContact() OptContact {
	return s.Contact
}

// GetDice returns the value of Dice.
func (s *ExternalReplyInfo) GetDice() OptDice {
	return s.Dice
}

// GetGame returns the value of Game.
func (s *ExternalReplyInfo) GetGame() OptGame {
	return s.Game
}

// GetGiveaway returns the value of Giveaway.
func (s *ExternalReplyInfo) GetGiveaway() OptGiveaway {
	return s.Giveaway
}

// GetGiveawayWinners returns the value of GiveawayWinners.
func (s *ExternalReplyInfo) GetGiveawayWinners() OptGiveawayWinners {
	return s.GiveawayWinners
}

// GetInvoice returns the value of Invoice.
func (s *ExternalReplyInfo) GetInvoice() OptInvoice {
	return s.Invoice
}

// GetLocation returns the value of Location.
func (s *ExternalReplyInfo) GetLocation() OptLocation {
	return s.Location
}

// GetPoll returns the value of Poll.
func (s *ExternalReplyInfo) GetPoll() OptPoll {
	return s.Poll
}

// GetVenue returns the value of Venue.
func (s *ExternalReplyInfo) GetVenue() OptVenue {
	return s.Venue
}

// SetOrigin sets the value of Origin.
func (s *ExternalReplyInfo) SetOrigin(val MessageOrigin) {
	s.Origin = val
}

// SetChat sets the value of Chat.
func (s *ExternalReplyInfo) SetChat(val OptChat) {
	s.Chat = val
}

// SetMessageID sets the value of MessageID.
func (s *ExternalReplyInfo) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetLinkPreviewOptions sets the value of LinkPreviewOptions.
func (s *ExternalReplyInfo) SetLinkPreviewOptions(val OptLinkPreviewOptions) {
	s.LinkPreviewOptions = val
}

// SetAnimation sets the value of Animation.
func (s *ExternalReplyInfo) SetAnimation(val OptAnimation) {
	s.Animation = val
}

// SetAudio sets the value of Audio.
func (s *ExternalReplyInfo) SetAudio(val OptAudio) {
	s.Audio = val
}

// SetDocument sets the value of Document.
func (s *ExternalReplyInfo) SetDocument(val OptDocument) {
	s.Document = val
}

// SetPhoto sets the value of Photo.
func (s *ExternalReplyInfo) SetPhoto(val []PhotoSize) {
	s.Photo = val
}

// SetSticker sets the value of Sticker.
func (s *ExternalReplyInfo) SetSticker(val OptSticker) {
	s.Sticker = val
}

// SetStory sets the value of Story.
func (s *ExternalReplyInfo) SetStory(val OptStory) {
	s.Story = val
}

// SetVideo sets the value of Video.
func (s *ExternalReplyInfo) SetVideo(val OptVideo) {
	s.Video = val
}

// SetVideoNote sets the value of VideoNote.
func (s *ExternalReplyInfo) SetVideoNote(val OptVideoNote) {
	s.VideoNote = val
}

// SetVoice sets the value of Voice.
func (s *ExternalReplyInfo) SetVoice(val OptVoice) {
	s.Voice = val
}

// SetHasMediaSpoiler sets the value of HasMediaSpoiler.
func (s *ExternalReplyInfo) SetHasMediaSpoiler(val OptBool) {
	s.HasMediaSpoiler = val
}

// SetContact sets the value of Contact.
func (s *ExternalReplyInfo) SetContact(val OptContact) {
	s.Contact = val
}

// SetDice sets the value of Dice.
func (s *ExternalReplyInfo) SetDice(val OptDice) {
	s.Dice = val
}

// SetGame sets the value of Game.
func (s *ExternalReplyInfo) SetGame(val OptGame) {
	s.Game = val
}

// SetGiveaway sets the value of Giveaway.
func (s *ExternalReplyInfo) SetGiveaway(val OptGiveaway) {
	s.Giveaway = val
}

// SetGiveawayWinners sets the value of GiveawayWinners.
func (s *ExternalReplyInfo) SetGiveawayWinners(val OptGiveawayWinners) {
	s.GiveawayWinners = val
}

// SetInvoice sets the value of Invoice.
func (s *ExternalReplyInfo) SetInvoice(val OptInvoice) {
	s.Invoice = val
}

// SetLocation sets the value of Location.
func (s *ExternalReplyInfo) SetLocation(val OptLocation) {
	s.Location = val
}

// SetPoll sets the value of Poll.
func (s *ExternalReplyInfo) SetPoll(val OptPoll) {
	s.Poll = val
}

// SetVenue sets the value of Venue.
func (s *ExternalReplyInfo) SetVenue(val OptVenue) {
	s.Venue = val
}

// This object represents a file ready to be downloaded. The file can be downloaded via the link
// `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be
// valid for at least 1 hour. When the link expires, a new one can be requested by calling
// [getFile](https://core.telegram.org/bots/api#getfile).
// Ref: #/components/schemas/File
type File struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// _Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have
	// difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed
	// 64-bit integer or double-precision float type are safe for storing this value.
	FileSize OptInt `json:"file_size"`
	// _Optional_. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.
	FilePath OptString `json:"file_path"`
}

// GetFileID returns the value of FileID.
func (s *File) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *File) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetFileSize returns the value of FileSize.
func (s *File) GetFileSize() OptInt {
	return s.FileSize
}

// GetFilePath returns the value of FilePath.
func (s *File) GetFilePath() OptString {
	return s.FilePath
}

// SetFileID sets the value of FileID.
func (s *File) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *File) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetFileSize sets the value of FileSize.
func (s *File) SetFileSize(val OptInt) {
	s.FileSize = val
}

// SetFilePath sets the value of FilePath.
func (s *File) SetFilePath(val OptString) {
	s.FilePath = val
}

// Upon receiving a message with this object, Telegram clients will display a reply interface to the
// user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely
// useful if you want to create user-friendly step-by-step interfaces without having to sacrifice
// [privacy mode](https://core.telegram.org/bots/features#privacy-mode). Not supported in channels
// and for messages sent on behalf of a Telegram Business account.
// Ref: #/components/schemas/ForceReply
type ForceReply struct {
	// Shows reply interface to the user, as if they manually selected the bot's message and tapped
	// 'Reply'.
	ForceReply bool `json:"force_reply"`
	// _Optional_. The placeholder to be shown in the input field when the reply is active; 1-64
	// characters.
	InputFieldPlaceholder OptString `json:"input_field_placeholder"`
	// _Optional_. Use this parameter if you want to force reply from specific users only. Targets: 1)
	// users that are @mentioned in the _text_ of the [Message](https://core.telegram.
	// org/bots/api#message) object; 2) if the bot's message is a reply to a message in the same chat and
	// forum topic, sender of the original message.
	Selective OptBool `json:"selective"`
}

// GetForceReply returns the value of ForceReply.
func (s *ForceReply) GetForceReply() bool {
	return s.ForceReply
}

// GetInputFieldPlaceholder returns the value of InputFieldPlaceholder.
func (s *ForceReply) GetInputFieldPlaceholder() OptString {
	return s.InputFieldPlaceholder
}

// GetSelective returns the value of Selective.
func (s *ForceReply) GetSelective() OptBool {
	return s.Selective
}

// SetForceReply sets the value of ForceReply.
func (s *ForceReply) SetForceReply(val bool) {
	s.ForceReply = val
}

// SetInputFieldPlaceholder sets the value of InputFieldPlaceholder.
func (s *ForceReply) SetInputFieldPlaceholder(val OptString) {
	s.InputFieldPlaceholder = val
}

// SetSelective sets the value of Selective.
func (s *ForceReply) SetSelective(val OptBool) {
	s.Selective = val
}

// This object represents a service message about a forum topic closed in the chat. Currently holds
// no information.
// Ref: #/components/schemas/ForumTopicClosed
type ForumTopicClosed map[string]jx.Raw

func (s *ForumTopicClosed) init() ForumTopicClosed {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// This object represents a service message about a new forum topic created in the chat.
// Ref: #/components/schemas/ForumTopicCreated
type ForumTopicCreated struct {
	// Name of the topic.
	Name string `json:"name"`
	// Color of the topic icon in RGB format.
	IconColor int `json:"icon_color"`
	// _Optional_. Unique identifier of the custom emoji shown as the topic icon.
	IconCustomEmojiID OptString `json:"icon_custom_emoji_id"`
}

// GetName returns the value of Name.
func (s *ForumTopicCreated) GetName() string {
	return s.Name
}

// GetIconColor returns the value of IconColor.
func (s *ForumTopicCreated) GetIconColor() int {
	return s.IconColor
}

// GetIconCustomEmojiID returns the value of IconCustomEmojiID.
func (s *ForumTopicCreated) GetIconCustomEmojiID() OptString {
	return s.IconCustomEmojiID
}

// SetName sets the value of Name.
func (s *ForumTopicCreated) SetName(val string) {
	s.Name = val
}

// SetIconColor sets the value of IconColor.
func (s *ForumTopicCreated) SetIconColor(val int) {
	s.IconColor = val
}

// SetIconCustomEmojiID sets the value of IconCustomEmojiID.
func (s *ForumTopicCreated) SetIconCustomEmojiID(val OptString) {
	s.IconCustomEmojiID = val
}

// This object represents a service message about an edited forum topic.
// Ref: #/components/schemas/ForumTopicEdited
type ForumTopicEdited struct {
	// _Optional_. New name of the topic, if it was edited.
	Name OptString `json:"name"`
	// _Optional_. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty
	// string if the icon was removed.
	IconCustomEmojiID OptString `json:"icon_custom_emoji_id"`
}

// GetName returns the value of Name.
func (s *ForumTopicEdited) GetName() OptString {
	return s.Name
}

// GetIconCustomEmojiID returns the value of IconCustomEmojiID.
func (s *ForumTopicEdited) GetIconCustomEmojiID() OptString {
	return s.IconCustomEmojiID
}

// SetName sets the value of Name.
func (s *ForumTopicEdited) SetName(val OptString) {
	s.Name = val
}

// SetIconCustomEmojiID sets the value of IconCustomEmojiID.
func (s *ForumTopicEdited) SetIconCustomEmojiID(val OptString) {
	s.IconCustomEmojiID = val
}

// This object represents a service message about a forum topic reopened in the chat. Currently holds
// no information.
// Ref: #/components/schemas/ForumTopicReopened
type ForumTopicReopened map[string]jx.Raw

func (s *ForumTopicReopened) init() ForumTopicReopened {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Input for forwardMessage.
// Ref: #/components/schemas/forwardMessage
type ForwardMessage struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	FromChatID      ID     `json:"from_chat_id"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the forwarded message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Message identifier in the chat specified in _from_chat_id_.
	MessageID int `json:"message_id"`
}

// GetChatID returns the value of ChatID.
func (s *ForwardMessage) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *ForwardMessage) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetFromChatID returns the value of FromChatID.
func (s *ForwardMessage) GetFromChatID() ID {
	return s.FromChatID
}

// GetDisableNotification returns the value of DisableNotification.
func (s *ForwardMessage) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *ForwardMessage) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageID returns the value of MessageID.
func (s *ForwardMessage) GetMessageID() int {
	return s.MessageID
}

// SetChatID sets the value of ChatID.
func (s *ForwardMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *ForwardMessage) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetFromChatID sets the value of FromChatID.
func (s *ForwardMessage) SetFromChatID(val ID) {
	s.FromChatID = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *ForwardMessage) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *ForwardMessage) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageID sets the value of MessageID.
func (s *ForwardMessage) SetMessageID(val int) {
	s.MessageID = val
}

// Input for forwardMessages.
// Ref: #/components/schemas/forwardMessages
type ForwardMessages struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	FromChatID      ID     `json:"from_chat_id"`
	// A JSON-serialized list of 1-100 identifiers of messages in the chat _from_chat_id_ to forward. The
	// identifiers must be specified in a strictly increasing order.
	MessageIds []int `json:"message_ids"`
	// Sends the messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the forwarded messages from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
}

// GetChatID returns the value of ChatID.
func (s *ForwardMessages) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *ForwardMessages) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetFromChatID returns the value of FromChatID.
func (s *ForwardMessages) GetFromChatID() ID {
	return s.FromChatID
}

// GetMessageIds returns the value of MessageIds.
func (s *ForwardMessages) GetMessageIds() []int {
	return s.MessageIds
}

// GetDisableNotification returns the value of DisableNotification.
func (s *ForwardMessages) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *ForwardMessages) GetProtectContent() OptBool {
	return s.ProtectContent
}

// SetChatID sets the value of ChatID.
func (s *ForwardMessages) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *ForwardMessages) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetFromChatID sets the value of FromChatID.
func (s *ForwardMessages) SetFromChatID(val ID) {
	s.FromChatID = val
}

// SetMessageIds sets the value of MessageIds.
func (s *ForwardMessages) SetMessageIds(val []int) {
	s.MessageIds = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *ForwardMessages) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *ForwardMessages) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// This object represents a game. Use BotFather to create and edit games, their short names will act
// as unique identifiers.
// Ref: #/components/schemas/Game
type Game struct {
	// Title of the game.
	Title string `json:"title"`
	// Description of the game.
	Description string `json:"description"`
	// Photo that will be displayed in the game message in chats.
	Photo []PhotoSize `json:"photo"`
	// _Optional_. Brief description of the game or high scores included in the game message. Can be
	// automatically edited to include current high scores for the game when the bot calls
	// [setGameScore](https://core.telegram.org/bots/api#setgamescore), or manually edited using
	// [editMessageText](https://core.telegram.org/bots/api#editmessagetext). 0-4096 characters.
	Text OptString `json:"text"`
	// _Optional_. Special entities that appear in _text_, such as usernames, URLs, bot commands, etc.
	TextEntities []MessageEntity `json:"text_entities"`
	Animation    OptAnimation    `json:"animation"`
}

// GetTitle returns the value of Title.
func (s *Game) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Game) GetDescription() string {
	return s.Description
}

// GetPhoto returns the value of Photo.
func (s *Game) GetPhoto() []PhotoSize {
	return s.Photo
}

// GetText returns the value of Text.
func (s *Game) GetText() OptString {
	return s.Text
}

// GetTextEntities returns the value of TextEntities.
func (s *Game) GetTextEntities() []MessageEntity {
	return s.TextEntities
}

// GetAnimation returns the value of Animation.
func (s *Game) GetAnimation() OptAnimation {
	return s.Animation
}

// SetTitle sets the value of Title.
func (s *Game) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Game) SetDescription(val string) {
	s.Description = val
}

// SetPhoto sets the value of Photo.
func (s *Game) SetPhoto(val []PhotoSize) {
	s.Photo = val
}

// SetText sets the value of Text.
func (s *Game) SetText(val OptString) {
	s.Text = val
}

// SetTextEntities sets the value of TextEntities.
func (s *Game) SetTextEntities(val []MessageEntity) {
	s.TextEntities = val
}

// SetAnimation sets the value of Animation.
func (s *Game) SetAnimation(val OptAnimation) {
	s.Animation = val
}

// This object represents one row of the high scores table for a game.
// Ref: #/components/schemas/GameHighScore
type GameHighScore struct {
	// Position in high score table for the game.
	Position int  `json:"position"`
	User     User `json:"user"`
	// Score.
	Score int `json:"score"`
}

// GetPosition returns the value of Position.
func (s *GameHighScore) GetPosition() int {
	return s.Position
}

// GetUser returns the value of User.
func (s *GameHighScore) GetUser() User {
	return s.User
}

// GetScore returns the value of Score.
func (s *GameHighScore) GetScore() int {
	return s.Score
}

// SetPosition sets the value of Position.
func (s *GameHighScore) SetPosition(val int) {
	s.Position = val
}

// SetUser sets the value of User.
func (s *GameHighScore) SetUser(val User) {
	s.User = val
}

// SetScore sets the value of Score.
func (s *GameHighScore) SetScore(val int) {
	s.Score = val
}

// This object represents a service message about General forum topic hidden in the chat. Currently
// holds no information.
// Ref: #/components/schemas/GeneralForumTopicHidden
type GeneralForumTopicHidden map[string]jx.Raw

func (s *GeneralForumTopicHidden) init() GeneralForumTopicHidden {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// This object represents a service message about General forum topic unhidden in the chat. Currently
// holds no information.
// Ref: #/components/schemas/GeneralForumTopicUnhidden
type GeneralForumTopicUnhidden map[string]jx.Raw

func (s *GeneralForumTopicUnhidden) init() GeneralForumTopicUnhidden {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Input for getBusinessConnection.
// Ref: #/components/schemas/getBusinessConnection
type GetBusinessConnection struct {
	// Unique identifier of the business connection.
	BusinessConnectionID string `json:"business_connection_id"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *GetBusinessConnection) GetBusinessConnectionID() string {
	return s.BusinessConnectionID
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *GetBusinessConnection) SetBusinessConnectionID(val string) {
	s.BusinessConnectionID = val
}

// Input for getChat.
// Ref: #/components/schemas/getChat
type GetChat struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *GetChat) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *GetChat) SetChatID(val ID) {
	s.ChatID = val
}

// Input for getChatAdministrators.
// Ref: #/components/schemas/getChatAdministrators
type GetChatAdministrators struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *GetChatAdministrators) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *GetChatAdministrators) SetChatID(val ID) {
	s.ChatID = val
}

// Input for getChatMember.
// Ref: #/components/schemas/getChatMember
type GetChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
}

// GetChatID returns the value of ChatID.
func (s *GetChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *GetChatMember) GetUserID() int64 {
	return s.UserID
}

// SetChatID sets the value of ChatID.
func (s *GetChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *GetChatMember) SetUserID(val int64) {
	s.UserID = val
}

// Input for getChatMemberCount.
// Ref: #/components/schemas/getChatMemberCount
type GetChatMemberCount struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *GetChatMemberCount) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *GetChatMemberCount) SetChatID(val ID) {
	s.ChatID = val
}

// Input for getChatMenuButton.
// Ref: #/components/schemas/getChatMenuButton
type GetChatMenuButton struct {
	// Unique identifier for the target private chat. If not specified, default bot's menu button will be
	// returned.
	ChatID OptInt64 `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *GetChatMenuButton) GetChatID() OptInt64 {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *GetChatMenuButton) SetChatID(val OptInt64) {
	s.ChatID = val
}

// Input for getCustomEmojiStickers.
// Ref: #/components/schemas/getCustomEmojiStickers
type GetCustomEmojiStickers struct {
	// A JSON-serialized list of custom emoji identifiers. At most 200 custom emoji identifiers can be
	// specified.
	CustomEmojiIds []string `json:"custom_emoji_ids"`
}

// GetCustomEmojiIds returns the value of CustomEmojiIds.
func (s *GetCustomEmojiStickers) GetCustomEmojiIds() []string {
	return s.CustomEmojiIds
}

// SetCustomEmojiIds sets the value of CustomEmojiIds.
func (s *GetCustomEmojiStickers) SetCustomEmojiIds(val []string) {
	s.CustomEmojiIds = val
}

// Input for getFile.
// Ref: #/components/schemas/getFile
type GetFile struct {
	// File identifier to get information about.
	FileID string `json:"file_id"`
}

// GetFileID returns the value of FileID.
func (s *GetFile) GetFileID() string {
	return s.FileID
}

// SetFileID sets the value of FileID.
func (s *GetFile) SetFileID(val string) {
	s.FileID = val
}

// Input for getGameHighScores.
// Ref: #/components/schemas/getGameHighScores
type GetGameHighScores struct {
	// Target user id.
	UserID int64 `json:"user_id"`
	// Required if _inline_message_id_ is not specified. Unique identifier for the target chat.
	ChatID OptInt64 `json:"chat_id"`
	// Required if _inline_message_id_ is not specified. Identifier of the sent message.
	MessageID OptInt `json:"message_id"`
	// Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id"`
}

// GetUserID returns the value of UserID.
func (s *GetGameHighScores) GetUserID() int64 {
	return s.UserID
}

// GetChatID returns the value of ChatID.
func (s *GetGameHighScores) GetChatID() OptInt64 {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *GetGameHighScores) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *GetGameHighScores) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// SetUserID sets the value of UserID.
func (s *GetGameHighScores) SetUserID(val int64) {
	s.UserID = val
}

// SetChatID sets the value of ChatID.
func (s *GetGameHighScores) SetChatID(val OptInt64) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *GetGameHighScores) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *GetGameHighScores) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// Input for getMyCommands.
// Ref: #/components/schemas/getMyCommands
type GetMyCommands struct {
	Scope OptBotCommandScope `json:"scope"`
	// A two-letter ISO 639-1 language code or an empty string.
	LanguageCode OptString `json:"language_code"`
}

// GetScope returns the value of Scope.
func (s *GetMyCommands) GetScope() OptBotCommandScope {
	return s.Scope
}

// GetLanguageCode returns the value of LanguageCode.
func (s *GetMyCommands) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetScope sets the value of Scope.
func (s *GetMyCommands) SetScope(val OptBotCommandScope) {
	s.Scope = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *GetMyCommands) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for getMyDefaultAdministratorRights.
// Ref: #/components/schemas/getMyDefaultAdministratorRights
type GetMyDefaultAdministratorRights struct {
	// Pass _True_ to get default administrator rights of the bot in channels. Otherwise, default
	// administrator rights of the bot for groups and supergroups will be returned.
	ForChannels OptBool `json:"for_channels"`
}

// GetForChannels returns the value of ForChannels.
func (s *GetMyDefaultAdministratorRights) GetForChannels() OptBool {
	return s.ForChannels
}

// SetForChannels sets the value of ForChannels.
func (s *GetMyDefaultAdministratorRights) SetForChannels(val OptBool) {
	s.ForChannels = val
}

// Input for getMyDescription.
// Ref: #/components/schemas/getMyDescription
type GetMyDescription struct {
	// A two-letter ISO 639-1 language code or an empty string.
	LanguageCode OptString `json:"language_code"`
}

// GetLanguageCode returns the value of LanguageCode.
func (s *GetMyDescription) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetLanguageCode sets the value of LanguageCode.
func (s *GetMyDescription) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for getMyName.
// Ref: #/components/schemas/getMyName
type GetMyName struct {
	// A two-letter ISO 639-1 language code or an empty string.
	LanguageCode OptString `json:"language_code"`
}

// GetLanguageCode returns the value of LanguageCode.
func (s *GetMyName) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetLanguageCode sets the value of LanguageCode.
func (s *GetMyName) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for getMyShortDescription.
// Ref: #/components/schemas/getMyShortDescription
type GetMyShortDescription struct {
	// A two-letter ISO 639-1 language code or an empty string.
	LanguageCode OptString `json:"language_code"`
}

// GetLanguageCode returns the value of LanguageCode.
func (s *GetMyShortDescription) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetLanguageCode sets the value of LanguageCode.
func (s *GetMyShortDescription) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for getStarTransactions.
// Ref: #/components/schemas/getStarTransactions
type GetStarTransactions struct {
	// Number of transactions to skip in the response.
	Offset OptInt `json:"offset"`
	// The maximum number of transactions to be retrieved. Values between 1-100 are accepted. Defaults to
	// 100.
	Limit OptInt `json:"limit"`
}

// GetOffset returns the value of Offset.
func (s *GetStarTransactions) GetOffset() OptInt {
	return s.Offset
}

// GetLimit returns the value of Limit.
func (s *GetStarTransactions) GetLimit() OptInt {
	return s.Limit
}

// SetOffset sets the value of Offset.
func (s *GetStarTransactions) SetOffset(val OptInt) {
	s.Offset = val
}

// SetLimit sets the value of Limit.
func (s *GetStarTransactions) SetLimit(val OptInt) {
	s.Limit = val
}

// Input for getStickerSet.
// Ref: #/components/schemas/getStickerSet
type GetStickerSet struct {
	// Name of the sticker set.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *GetStickerSet) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *GetStickerSet) SetName(val string) {
	s.Name = val
}

// Input for getUpdates.
// Ref: #/components/schemas/getUpdates
type GetUpdates struct {
	// Identifier of the first update to be returned. Must be greater by one than the highest among the
	// identifiers of previously received updates. By default, updates starting with the earliest
	// unconfirmed update are returned. An update is considered confirmed as soon as
	// [getUpdates](https://core.telegram.org/bots/api#getupdates) is called with an _offset_ higher than
	// its _update_id_. The negative offset can be specified to retrieve updates starting from _-offset_
	// update from the end of the updates queue. All previous updates will be forgotten.
	Offset OptInt `json:"offset"`
	// Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit OptInt `json:"limit"`
	// Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive,
	// short polling should be used for testing purposes only.
	Timeout OptInt `json:"timeout"`
	// A JSON-serialized list of the update types you want your bot to receive. For example, specify
	// `["message", "edited_channel_post", "callback_query"]` to only receive updates of these types. See
	// [Update](https://core.telegram.org/bots/api#update) for a complete list of available update types.
	// Specify an empty list to receive all update types except _chat_member_, _message_reaction_, and
	// _message_reaction_count_ (default). If not specified, the previous setting will be used.Please
	// note that this parameter doesn't affect updates created before the call to the getUpdates, so
	// unwanted updates may be received for a short period of time.
	AllowedUpdates []string `json:"allowed_updates"`
}

// GetOffset returns the value of Offset.
func (s *GetUpdates) GetOffset() OptInt {
	return s.Offset
}

// GetLimit returns the value of Limit.
func (s *GetUpdates) GetLimit() OptInt {
	return s.Limit
}

// GetTimeout returns the value of Timeout.
func (s *GetUpdates) GetTimeout() OptInt {
	return s.Timeout
}

// GetAllowedUpdates returns the value of AllowedUpdates.
func (s *GetUpdates) GetAllowedUpdates() []string {
	return s.AllowedUpdates
}

// SetOffset sets the value of Offset.
func (s *GetUpdates) SetOffset(val OptInt) {
	s.Offset = val
}

// SetLimit sets the value of Limit.
func (s *GetUpdates) SetLimit(val OptInt) {
	s.Limit = val
}

// SetTimeout sets the value of Timeout.
func (s *GetUpdates) SetTimeout(val OptInt) {
	s.Timeout = val
}

// SetAllowedUpdates sets the value of AllowedUpdates.
func (s *GetUpdates) SetAllowedUpdates(val []string) {
	s.AllowedUpdates = val
}

// Input for getUserChatBoosts.
// Ref: #/components/schemas/getUserChatBoosts
type GetUserChatBoosts struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
}

// GetChatID returns the value of ChatID.
func (s *GetUserChatBoosts) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *GetUserChatBoosts) GetUserID() int64 {
	return s.UserID
}

// SetChatID sets the value of ChatID.
func (s *GetUserChatBoosts) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *GetUserChatBoosts) SetUserID(val int64) {
	s.UserID = val
}

// Input for getUserProfilePhotos.
// Ref: #/components/schemas/getUserProfilePhotos
type GetUserProfilePhotos struct {
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// Sequential number of the first photo to be returned. By default, all photos are returned.
	Offset OptInt `json:"offset"`
	// Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
	Limit OptInt `json:"limit"`
}

// GetUserID returns the value of UserID.
func (s *GetUserProfilePhotos) GetUserID() int64 {
	return s.UserID
}

// GetOffset returns the value of Offset.
func (s *GetUserProfilePhotos) GetOffset() OptInt {
	return s.Offset
}

// GetLimit returns the value of Limit.
func (s *GetUserProfilePhotos) GetLimit() OptInt {
	return s.Limit
}

// SetUserID sets the value of UserID.
func (s *GetUserProfilePhotos) SetUserID(val int64) {
	s.UserID = val
}

// SetOffset sets the value of Offset.
func (s *GetUserProfilePhotos) SetOffset(val OptInt) {
	s.Offset = val
}

// SetLimit sets the value of Limit.
func (s *GetUserProfilePhotos) SetLimit(val OptInt) {
	s.Limit = val
}

// This object represents a message about a scheduled giveaway.
// Ref: #/components/schemas/Giveaway
type Giveaway struct {
	// The list of chats which the user must join to participate in the giveaway.
	Chats []Chat `json:"chats"`
	// Point in time (Unix timestamp) when winners of the giveaway will be selected.
	WinnersSelectionDate int `json:"winners_selection_date"`
	// The number of users which are supposed to be selected as winners of the giveaway.
	WinnerCount int `json:"winner_count"`
	// _Optional_. _True_, if only users who join the chats after the giveaway started should be eligible
	// to win.
	OnlyNewMembers OptBool `json:"only_new_members"`
	// _Optional_. _True_, if the list of giveaway winners will be visible to everyone.
	HasPublicWinners OptBool `json:"has_public_winners"`
	// _Optional_. Description of additional giveaway prize.
	PrizeDescription OptString `json:"prize_description"`
	// _Optional_. A list of two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.
	// org/wiki/ISO_3166-1_alpha-2) country codes indicating the countries from which eligible users for
	// the giveaway must come. If empty, then all users can participate in the giveaway. Users with a
	// phone number that was bought on Fragment can always participate in giveaways.
	CountryCodes []string `json:"country_codes"`
	// _Optional_. The number of months the Telegram Premium subscription won from the giveaway will be
	// active for.
	PremiumSubscriptionMonthCount OptInt `json:"premium_subscription_month_count"`
}

// GetChats returns the value of Chats.
func (s *Giveaway) GetChats() []Chat {
	return s.Chats
}

// GetWinnersSelectionDate returns the value of WinnersSelectionDate.
func (s *Giveaway) GetWinnersSelectionDate() int {
	return s.WinnersSelectionDate
}

// GetWinnerCount returns the value of WinnerCount.
func (s *Giveaway) GetWinnerCount() int {
	return s.WinnerCount
}

// GetOnlyNewMembers returns the value of OnlyNewMembers.
func (s *Giveaway) GetOnlyNewMembers() OptBool {
	return s.OnlyNewMembers
}

// GetHasPublicWinners returns the value of HasPublicWinners.
func (s *Giveaway) GetHasPublicWinners() OptBool {
	return s.HasPublicWinners
}

// GetPrizeDescription returns the value of PrizeDescription.
func (s *Giveaway) GetPrizeDescription() OptString {
	return s.PrizeDescription
}

// GetCountryCodes returns the value of CountryCodes.
func (s *Giveaway) GetCountryCodes() []string {
	return s.CountryCodes
}

// GetPremiumSubscriptionMonthCount returns the value of PremiumSubscriptionMonthCount.
func (s *Giveaway) GetPremiumSubscriptionMonthCount() OptInt {
	return s.PremiumSubscriptionMonthCount
}

// SetChats sets the value of Chats.
func (s *Giveaway) SetChats(val []Chat) {
	s.Chats = val
}

// SetWinnersSelectionDate sets the value of WinnersSelectionDate.
func (s *Giveaway) SetWinnersSelectionDate(val int) {
	s.WinnersSelectionDate = val
}

// SetWinnerCount sets the value of WinnerCount.
func (s *Giveaway) SetWinnerCount(val int) {
	s.WinnerCount = val
}

// SetOnlyNewMembers sets the value of OnlyNewMembers.
func (s *Giveaway) SetOnlyNewMembers(val OptBool) {
	s.OnlyNewMembers = val
}

// SetHasPublicWinners sets the value of HasPublicWinners.
func (s *Giveaway) SetHasPublicWinners(val OptBool) {
	s.HasPublicWinners = val
}

// SetPrizeDescription sets the value of PrizeDescription.
func (s *Giveaway) SetPrizeDescription(val OptString) {
	s.PrizeDescription = val
}

// SetCountryCodes sets the value of CountryCodes.
func (s *Giveaway) SetCountryCodes(val []string) {
	s.CountryCodes = val
}

// SetPremiumSubscriptionMonthCount sets the value of PremiumSubscriptionMonthCount.
func (s *Giveaway) SetPremiumSubscriptionMonthCount(val OptInt) {
	s.PremiumSubscriptionMonthCount = val
}

// This object represents a service message about the completion of a giveaway without public winners.
// Ref: #/components/schemas/GiveawayCompleted
type GiveawayCompleted struct {
	// Number of winners in the giveaway.
	WinnerCount int `json:"winner_count"`
	// _Optional_. Number of undistributed prizes.
	UnclaimedPrizeCount OptInt     `json:"unclaimed_prize_count"`
	GiveawayMessage     OptMessage `json:"giveaway_message"`
}

// GetWinnerCount returns the value of WinnerCount.
func (s *GiveawayCompleted) GetWinnerCount() int {
	return s.WinnerCount
}

// GetUnclaimedPrizeCount returns the value of UnclaimedPrizeCount.
func (s *GiveawayCompleted) GetUnclaimedPrizeCount() OptInt {
	return s.UnclaimedPrizeCount
}

// GetGiveawayMessage returns the value of GiveawayMessage.
func (s *GiveawayCompleted) GetGiveawayMessage() OptMessage {
	return s.GiveawayMessage
}

// SetWinnerCount sets the value of WinnerCount.
func (s *GiveawayCompleted) SetWinnerCount(val int) {
	s.WinnerCount = val
}

// SetUnclaimedPrizeCount sets the value of UnclaimedPrizeCount.
func (s *GiveawayCompleted) SetUnclaimedPrizeCount(val OptInt) {
	s.UnclaimedPrizeCount = val
}

// SetGiveawayMessage sets the value of GiveawayMessage.
func (s *GiveawayCompleted) SetGiveawayMessage(val OptMessage) {
	s.GiveawayMessage = val
}

// This object represents a service message about the creation of a scheduled giveaway. Currently
// holds no information.
// Ref: #/components/schemas/GiveawayCreated
type GiveawayCreated map[string]jx.Raw

func (s *GiveawayCreated) init() GiveawayCreated {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// This object represents a message about the completion of a giveaway with public winners.
// Ref: #/components/schemas/GiveawayWinners
type GiveawayWinners struct {
	Chat Chat `json:"chat"`
	// Identifier of the message with the giveaway in the chat.
	GiveawayMessageID int `json:"giveaway_message_id"`
	// Point in time (Unix timestamp) when winners of the giveaway were selected.
	WinnersSelectionDate int `json:"winners_selection_date"`
	// Total number of winners in the giveaway.
	WinnerCount int `json:"winner_count"`
	// List of up to 100 winners of the giveaway.
	Winners []User `json:"winners"`
	// _Optional_. The number of other chats the user had to join in order to be eligible for the giveaway.
	AdditionalChatCount OptInt `json:"additional_chat_count"`
	// _Optional_. The number of months the Telegram Premium subscription won from the giveaway will be
	// active for.
	PremiumSubscriptionMonthCount OptInt `json:"premium_subscription_month_count"`
	// _Optional_. Number of undistributed prizes.
	UnclaimedPrizeCount OptInt `json:"unclaimed_prize_count"`
	// _Optional_. _True_, if only users who had joined the chats after the giveaway started were
	// eligible to win.
	OnlyNewMembers OptBool `json:"only_new_members"`
	// _Optional_. _True_, if the giveaway was canceled because the payment for it was refunded.
	WasRefunded OptBool `json:"was_refunded"`
	// _Optional_. Description of additional giveaway prize.
	PrizeDescription OptString `json:"prize_description"`
}

// GetChat returns the value of Chat.
func (s *GiveawayWinners) GetChat() Chat {
	return s.Chat
}

// GetGiveawayMessageID returns the value of GiveawayMessageID.
func (s *GiveawayWinners) GetGiveawayMessageID() int {
	return s.GiveawayMessageID
}

// GetWinnersSelectionDate returns the value of WinnersSelectionDate.
func (s *GiveawayWinners) GetWinnersSelectionDate() int {
	return s.WinnersSelectionDate
}

// GetWinnerCount returns the value of WinnerCount.
func (s *GiveawayWinners) GetWinnerCount() int {
	return s.WinnerCount
}

// GetWinners returns the value of Winners.
func (s *GiveawayWinners) GetWinners() []User {
	return s.Winners
}

// GetAdditionalChatCount returns the value of AdditionalChatCount.
func (s *GiveawayWinners) GetAdditionalChatCount() OptInt {
	return s.AdditionalChatCount
}

// GetPremiumSubscriptionMonthCount returns the value of PremiumSubscriptionMonthCount.
func (s *GiveawayWinners) GetPremiumSubscriptionMonthCount() OptInt {
	return s.PremiumSubscriptionMonthCount
}

// GetUnclaimedPrizeCount returns the value of UnclaimedPrizeCount.
func (s *GiveawayWinners) GetUnclaimedPrizeCount() OptInt {
	return s.UnclaimedPrizeCount
}

// GetOnlyNewMembers returns the value of OnlyNewMembers.
func (s *GiveawayWinners) GetOnlyNewMembers() OptBool {
	return s.OnlyNewMembers
}

// GetWasRefunded returns the value of WasRefunded.
func (s *GiveawayWinners) GetWasRefunded() OptBool {
	return s.WasRefunded
}

// GetPrizeDescription returns the value of PrizeDescription.
func (s *GiveawayWinners) GetPrizeDescription() OptString {
	return s.PrizeDescription
}

// SetChat sets the value of Chat.
func (s *GiveawayWinners) SetChat(val Chat) {
	s.Chat = val
}

// SetGiveawayMessageID sets the value of GiveawayMessageID.
func (s *GiveawayWinners) SetGiveawayMessageID(val int) {
	s.GiveawayMessageID = val
}

// SetWinnersSelectionDate sets the value of WinnersSelectionDate.
func (s *GiveawayWinners) SetWinnersSelectionDate(val int) {
	s.WinnersSelectionDate = val
}

// SetWinnerCount sets the value of WinnerCount.
func (s *GiveawayWinners) SetWinnerCount(val int) {
	s.WinnerCount = val
}

// SetWinners sets the value of Winners.
func (s *GiveawayWinners) SetWinners(val []User) {
	s.Winners = val
}

// SetAdditionalChatCount sets the value of AdditionalChatCount.
func (s *GiveawayWinners) SetAdditionalChatCount(val OptInt) {
	s.AdditionalChatCount = val
}

// SetPremiumSubscriptionMonthCount sets the value of PremiumSubscriptionMonthCount.
func (s *GiveawayWinners) SetPremiumSubscriptionMonthCount(val OptInt) {
	s.PremiumSubscriptionMonthCount = val
}

// SetUnclaimedPrizeCount sets the value of UnclaimedPrizeCount.
func (s *GiveawayWinners) SetUnclaimedPrizeCount(val OptInt) {
	s.UnclaimedPrizeCount = val
}

// SetOnlyNewMembers sets the value of OnlyNewMembers.
func (s *GiveawayWinners) SetOnlyNewMembers(val OptBool) {
	s.OnlyNewMembers = val
}

// SetWasRefunded sets the value of WasRefunded.
func (s *GiveawayWinners) SetWasRefunded(val OptBool) {
	s.WasRefunded = val
}

// SetPrizeDescription sets the value of PrizeDescription.
func (s *GiveawayWinners) SetPrizeDescription(val OptString) {
	s.PrizeDescription = val
}

// Input for hideGeneralForumTopic.
// Ref: #/components/schemas/hideGeneralForumTopic
type HideGeneralForumTopic struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *HideGeneralForumTopic) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *HideGeneralForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// Ref: #/components/schemas/ID
// ID represents sum type.
type ID struct {
	Type   IDType // switch on this field
	String string
	Int64  int64
}

// IDType is oneOf type of ID.
type IDType string

// Possible values for IDType.
const (
	StringID IDType = "string"
	Int64ID  IDType = "int64"
)

// IsString reports whether ID is string.
func (s ID) IsString() bool { return s.Type == StringID }

// IsInt64 reports whether ID is int64.
func (s ID) IsInt64() bool { return s.Type == Int64ID }

// SetString sets ID to string.
func (s *ID) SetString(v string) {
	s.Type = StringID
	s.String = v
}

// GetString returns string and true boolean if ID is string.
func (s ID) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringID returns new ID from string.
func NewStringID(v string) ID {
	var s ID
	s.SetString(v)
	return s
}

// SetInt64 sets ID to int64.
func (s *ID) SetInt64(v int64) {
	s.Type = Int64ID
	s.Int64 = v
}

// GetInt64 returns int64 and true boolean if ID is int64.
func (s ID) GetInt64() (v int64, ok bool) {
	if !s.IsInt64() {
		return v, false
	}
	return s.Int64, true
}

// NewInt64ID returns new ID from int64.
func NewInt64ID(v int64) ID {
	var s ID
	s.SetInt64(v)
	return s
}

// This object describes a message that was deleted or is otherwise inaccessible to the bot.
// Ref: #/components/schemas/InaccessibleMessage
type InaccessibleMessage struct {
	Chat Chat `json:"chat"`
	// Unique message identifier inside the chat.
	MessageID int `json:"message_id"`
	// Always 0. The field can be used to differentiate regular and inaccessible messages.
	Date int `json:"date"`
}

// GetChat returns the value of Chat.
func (s *InaccessibleMessage) GetChat() Chat {
	return s.Chat
}

// GetMessageID returns the value of MessageID.
func (s *InaccessibleMessage) GetMessageID() int {
	return s.MessageID
}

// GetDate returns the value of Date.
func (s *InaccessibleMessage) GetDate() int {
	return s.Date
}

// SetChat sets the value of Chat.
func (s *InaccessibleMessage) SetChat(val Chat) {
	s.Chat = val
}

// SetMessageID sets the value of MessageID.
func (s *InaccessibleMessage) SetMessageID(val int) {
	s.MessageID = val
}

// SetDate sets the value of Date.
func (s *InaccessibleMessage) SetDate(val int) {
	s.Date = val
}

// This object represents one button of an inline keyboard. Exactly one of the optional fields must
// be used to specify type of the button.
// Ref: #/components/schemas/InlineKeyboardButton
type InlineKeyboardButton struct {
	// Label text on the button.
	Text string `json:"text"`
	// _Optional_. HTTP or tg:// URL to be opened when the button is pressed. Links
	// `tg://user?id=<user_id>` can be used to mention a user by their identifier without using a
	// username, if this is allowed by their privacy settings.
	URL OptString `json:"url"`
	// _Optional_. Data to be sent in a [callback query](https://core.telegram.
	// org/bots/api#callbackquery) to the bot when the button is pressed, 1-64 bytes.
	CallbackData OptString     `json:"callback_data"`
	WebApp       OptWebAppInfo `json:"web_app"`
	LoginURL     OptLoginUrl   `json:"login_url"`
	// _Optional_. If set, pressing the button will prompt the user to select one of their chats, open
	// that chat and insert the bot's username and the specified inline query in the input field. May be
	// empty, in which case just the bot's username will be inserted. Not supported for messages sent on
	// behalf of a Telegram Business account.
	SwitchInlineQuery OptString `json:"switch_inline_query"`
	// _Optional_. If set, pressing the button will insert the bot's username and the specified inline
	// query in the current chat's input field. May be empty, in which case only the bot's username will
	// be inserted.This offers a quick way for the user to open your bot in inline mode in the same chat
	// - good for selecting something from multiple options. Not supported in channels and for messages
	// sent on behalf of a Telegram Business account.
	SwitchInlineQueryCurrentChat OptString                      `json:"switch_inline_query_current_chat"`
	SwitchInlineQueryChosenChat  OptSwitchInlineQueryChosenChat `json:"switch_inline_query_chosen_chat"`
	CallbackGame                 OptCallbackGame                `json:"callback_game"`
	// _Optional_. Specify _True_, to send a [Pay button](https://core.telegram.org/bots/api#payments).
	// Substrings `⭐` and `XTR` in the buttons's text will be replaced with a Telegram Star icon.
	// **NOTE:** This type of button **must** always be the first button in the first row and can only be
	// used in invoice messages.
	Pay OptBool `json:"pay"`
}

// GetText returns the value of Text.
func (s *InlineKeyboardButton) GetText() string {
	return s.Text
}

// GetURL returns the value of URL.
func (s *InlineKeyboardButton) GetURL() OptString {
	return s.URL
}

// GetCallbackData returns the value of CallbackData.
func (s *InlineKeyboardButton) GetCallbackData() OptString {
	return s.CallbackData
}

// GetWebApp returns the value of WebApp.
func (s *InlineKeyboardButton) GetWebApp() OptWebAppInfo {
	return s.WebApp
}

// GetLoginURL returns the value of LoginURL.
func (s *InlineKeyboardButton) GetLoginURL() OptLoginUrl {
	return s.LoginURL
}

// GetSwitchInlineQuery returns the value of SwitchInlineQuery.
func (s *InlineKeyboardButton) GetSwitchInlineQuery() OptString {
	return s.SwitchInlineQuery
}

// GetSwitchInlineQueryCurrentChat returns the value of SwitchInlineQueryCurrentChat.
func (s *InlineKeyboardButton) GetSwitchInlineQueryCurrentChat() OptString {
	return s.SwitchInlineQueryCurrentChat
}

// GetSwitchInlineQueryChosenChat returns the value of SwitchInlineQueryChosenChat.
func (s *InlineKeyboardButton) GetSwitchInlineQueryChosenChat() OptSwitchInlineQueryChosenChat {
	return s.SwitchInlineQueryChosenChat
}

// GetCallbackGame returns the value of CallbackGame.
func (s *InlineKeyboardButton) GetCallbackGame() OptCallbackGame {
	return s.CallbackGame
}

// GetPay returns the value of Pay.
func (s *InlineKeyboardButton) GetPay() OptBool {
	return s.Pay
}

// SetText sets the value of Text.
func (s *InlineKeyboardButton) SetText(val string) {
	s.Text = val
}

// SetURL sets the value of URL.
func (s *InlineKeyboardButton) SetURL(val OptString) {
	s.URL = val
}

// SetCallbackData sets the value of CallbackData.
func (s *InlineKeyboardButton) SetCallbackData(val OptString) {
	s.CallbackData = val
}

// SetWebApp sets the value of WebApp.
func (s *InlineKeyboardButton) SetWebApp(val OptWebAppInfo) {
	s.WebApp = val
}

// SetLoginURL sets the value of LoginURL.
func (s *InlineKeyboardButton) SetLoginURL(val OptLoginUrl) {
	s.LoginURL = val
}

// SetSwitchInlineQuery sets the value of SwitchInlineQuery.
func (s *InlineKeyboardButton) SetSwitchInlineQuery(val OptString) {
	s.SwitchInlineQuery = val
}

// SetSwitchInlineQueryCurrentChat sets the value of SwitchInlineQueryCurrentChat.
func (s *InlineKeyboardButton) SetSwitchInlineQueryCurrentChat(val OptString) {
	s.SwitchInlineQueryCurrentChat = val
}

// SetSwitchInlineQueryChosenChat sets the value of SwitchInlineQueryChosenChat.
func (s *InlineKeyboardButton) SetSwitchInlineQueryChosenChat(val OptSwitchInlineQueryChosenChat) {
	s.SwitchInlineQueryChosenChat = val
}

// SetCallbackGame sets the value of CallbackGame.
func (s *InlineKeyboardButton) SetCallbackGame(val OptCallbackGame) {
	s.CallbackGame = val
}

// SetPay sets the value of Pay.
func (s *InlineKeyboardButton) SetPay(val OptBool) {
	s.Pay = val
}

// This object represents an [inline keyboard](https://core.telegram.
// org/bots/features#inline-keyboards) that appears right next to the message it belongs to.
// Ref: #/components/schemas/InlineKeyboardMarkup
type InlineKeyboardMarkup struct {
	// Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.
	// org/bots/api#inlinekeyboardbutton) objects.
	InlineKeyboard [][]InlineKeyboardButton `json:"inline_keyboard"`
}

// GetInlineKeyboard returns the value of InlineKeyboard.
func (s *InlineKeyboardMarkup) GetInlineKeyboard() [][]InlineKeyboardButton {
	return s.InlineKeyboard
}

// SetInlineKeyboard sets the value of InlineKeyboard.
func (s *InlineKeyboardMarkup) SetInlineKeyboard(val [][]InlineKeyboardButton) {
	s.InlineKeyboard = val
}

// This object represents an incoming inline query. When the user sends an empty query, your bot
// could return some default or trending results.
// Ref: #/components/schemas/InlineQuery
type InlineQuery struct {
	// Unique identifier for this query.
	ID   string `json:"id"`
	From User   `json:"from"`
	// Text of the query (up to 256 characters).
	Query string `json:"query"`
	// Offset of the results to be returned, can be controlled by the bot.
	Offset string `json:"offset"`
	// _Optional_. Type of the chat from which the inline query was sent. Can be either `sender` for a
	// private chat with the inline query sender, `private`, `group`, `supergroup`, or `channel`. The
	// chat type should be always known for requests sent from official clients and most third-party
	// clients, unless the request was sent from a secret chat.
	ChatType OptInlineQueryChatType `json:"chat_type"`
	Location OptLocation            `json:"location"`
}

// GetID returns the value of ID.
func (s *InlineQuery) GetID() string {
	return s.ID
}

// GetFrom returns the value of From.
func (s *InlineQuery) GetFrom() User {
	return s.From
}

// GetQuery returns the value of Query.
func (s *InlineQuery) GetQuery() string {
	return s.Query
}

// GetOffset returns the value of Offset.
func (s *InlineQuery) GetOffset() string {
	return s.Offset
}

// GetChatType returns the value of ChatType.
func (s *InlineQuery) GetChatType() OptInlineQueryChatType {
	return s.ChatType
}

// GetLocation returns the value of Location.
func (s *InlineQuery) GetLocation() OptLocation {
	return s.Location
}

// SetID sets the value of ID.
func (s *InlineQuery) SetID(val string) {
	s.ID = val
}

// SetFrom sets the value of From.
func (s *InlineQuery) SetFrom(val User) {
	s.From = val
}

// SetQuery sets the value of Query.
func (s *InlineQuery) SetQuery(val string) {
	s.Query = val
}

// SetOffset sets the value of Offset.
func (s *InlineQuery) SetOffset(val string) {
	s.Offset = val
}

// SetChatType sets the value of ChatType.
func (s *InlineQuery) SetChatType(val OptInlineQueryChatType) {
	s.ChatType = val
}

// SetLocation sets the value of Location.
func (s *InlineQuery) SetLocation(val OptLocation) {
	s.Location = val
}

// _Optional_. Type of the chat from which the inline query was sent. Can be either `sender` for a
// private chat with the inline query sender, `private`, `group`, `supergroup`, or `channel`. The
// chat type should be always known for requests sent from official clients and most third-party
// clients, unless the request was sent from a secret chat.
type InlineQueryChatType string

const (
	InlineQueryChatTypeSender     InlineQueryChatType = "sender"
	InlineQueryChatTypePrivate    InlineQueryChatType = "private"
	InlineQueryChatTypeGroup      InlineQueryChatType = "group"
	InlineQueryChatTypeSupergroup InlineQueryChatType = "supergroup"
	InlineQueryChatTypeChannel    InlineQueryChatType = "channel"
)

// AllValues returns all InlineQueryChatType values.
func (InlineQueryChatType) AllValues() []InlineQueryChatType {
	return []InlineQueryChatType{
		InlineQueryChatTypeSender,
		InlineQueryChatTypePrivate,
		InlineQueryChatTypeGroup,
		InlineQueryChatTypeSupergroup,
		InlineQueryChatTypeChannel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InlineQueryChatType) MarshalText() ([]byte, error) {
	switch s {
	case InlineQueryChatTypeSender:
		return []byte(s), nil
	case InlineQueryChatTypePrivate:
		return []byte(s), nil
	case InlineQueryChatTypeGroup:
		return []byte(s), nil
	case InlineQueryChatTypeSupergroup:
		return []byte(s), nil
	case InlineQueryChatTypeChannel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InlineQueryChatType) UnmarshalText(data []byte) error {
	switch InlineQueryChatType(data) {
	case InlineQueryChatTypeSender:
		*s = InlineQueryChatTypeSender
		return nil
	case InlineQueryChatTypePrivate:
		*s = InlineQueryChatTypePrivate
		return nil
	case InlineQueryChatTypeGroup:
		*s = InlineQueryChatTypeGroup
		return nil
	case InlineQueryChatTypeSupergroup:
		*s = InlineQueryChatTypeSupergroup
		return nil
	case InlineQueryChatTypeChannel:
		*s = InlineQueryChatTypeChannel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This object represents one result of an inline query. Telegram clients currently support results
// of the following 20 types:.
// Ref: #/components/schemas/InlineQueryResult
// InlineQueryResult represents sum type.
type InlineQueryResult struct {
	Type                            InlineQueryResultType // switch on this field
	InlineQueryResultCachedAudio    InlineQueryResultCachedAudio
	InlineQueryResultCachedDocument InlineQueryResultCachedDocument
	InlineQueryResultCachedGif      InlineQueryResultCachedGif
	InlineQueryResultCachedMpeg4Gif InlineQueryResultCachedMpeg4Gif
	InlineQueryResultCachedPhoto    InlineQueryResultCachedPhoto
	InlineQueryResultCachedSticker  InlineQueryResultCachedSticker
	InlineQueryResultCachedVideo    InlineQueryResultCachedVideo
	InlineQueryResultCachedVoice    InlineQueryResultCachedVoice
	InlineQueryResultArticle        InlineQueryResultArticle
	InlineQueryResultAudio          InlineQueryResultAudio
	InlineQueryResultContact        InlineQueryResultContact
	InlineQueryResultGame           InlineQueryResultGame
	InlineQueryResultDocument       InlineQueryResultDocument
	InlineQueryResultGif            InlineQueryResultGif
	InlineQueryResultLocation       InlineQueryResultLocation
	InlineQueryResultMpeg4Gif       InlineQueryResultMpeg4Gif
	InlineQueryResultPhoto          InlineQueryResultPhoto
	InlineQueryResultVenue          InlineQueryResultVenue
	InlineQueryResultVideo          InlineQueryResultVideo
	InlineQueryResultVoice          InlineQueryResultVoice
}

// InlineQueryResultType is oneOf type of InlineQueryResult.
type InlineQueryResultType string

// Possible values for InlineQueryResultType.
const (
	InlineQueryResultCachedAudioInlineQueryResult    InlineQueryResultType = "InlineQueryResultCachedAudio"
	InlineQueryResultCachedDocumentInlineQueryResult InlineQueryResultType = "InlineQueryResultCachedDocument"
	InlineQueryResultCachedGifInlineQueryResult      InlineQueryResultType = "InlineQueryResultCachedGif"
	InlineQueryResultCachedMpeg4GifInlineQueryResult InlineQueryResultType = "InlineQueryResultCachedMpeg4Gif"
	InlineQueryResultCachedPhotoInlineQueryResult    InlineQueryResultType = "InlineQueryResultCachedPhoto"
	InlineQueryResultCachedStickerInlineQueryResult  InlineQueryResultType = "sticker"
	InlineQueryResultCachedVideoInlineQueryResult    InlineQueryResultType = "InlineQueryResultCachedVideo"
	InlineQueryResultCachedVoiceInlineQueryResult    InlineQueryResultType = "InlineQueryResultCachedVoice"
	InlineQueryResultArticleInlineQueryResult        InlineQueryResultType = "article"
	InlineQueryResultAudioInlineQueryResult          InlineQueryResultType = "audio"
	InlineQueryResultContactInlineQueryResult        InlineQueryResultType = "contact"
	InlineQueryResultGameInlineQueryResult           InlineQueryResultType = "game"
	InlineQueryResultDocumentInlineQueryResult       InlineQueryResultType = "document"
	InlineQueryResultGifInlineQueryResult            InlineQueryResultType = "gif"
	InlineQueryResultLocationInlineQueryResult       InlineQueryResultType = "location"
	InlineQueryResultMpeg4GifInlineQueryResult       InlineQueryResultType = "mpeg4_gif"
	InlineQueryResultPhotoInlineQueryResult          InlineQueryResultType = "photo"
	InlineQueryResultVenueInlineQueryResult          InlineQueryResultType = "venue"
	InlineQueryResultVideoInlineQueryResult          InlineQueryResultType = "video"
	InlineQueryResultVoiceInlineQueryResult          InlineQueryResultType = "voice"
)

// IsInlineQueryResultCachedAudio reports whether InlineQueryResult is InlineQueryResultCachedAudio.
func (s InlineQueryResult) IsInlineQueryResultCachedAudio() bool {
	return s.Type == InlineQueryResultCachedAudioInlineQueryResult
}

// IsInlineQueryResultCachedDocument reports whether InlineQueryResult is InlineQueryResultCachedDocument.
func (s InlineQueryResult) IsInlineQueryResultCachedDocument() bool {
	return s.Type == InlineQueryResultCachedDocumentInlineQueryResult
}

// IsInlineQueryResultCachedGif reports whether InlineQueryResult is InlineQueryResultCachedGif.
func (s InlineQueryResult) IsInlineQueryResultCachedGif() bool {
	return s.Type == InlineQueryResultCachedGifInlineQueryResult
}

// IsInlineQueryResultCachedMpeg4Gif reports whether InlineQueryResult is InlineQueryResultCachedMpeg4Gif.
func (s InlineQueryResult) IsInlineQueryResultCachedMpeg4Gif() bool {
	return s.Type == InlineQueryResultCachedMpeg4GifInlineQueryResult
}

// IsInlineQueryResultCachedPhoto reports whether InlineQueryResult is InlineQueryResultCachedPhoto.
func (s InlineQueryResult) IsInlineQueryResultCachedPhoto() bool {
	return s.Type == InlineQueryResultCachedPhotoInlineQueryResult
}

// IsInlineQueryResultCachedSticker reports whether InlineQueryResult is InlineQueryResultCachedSticker.
func (s InlineQueryResult) IsInlineQueryResultCachedSticker() bool {
	return s.Type == InlineQueryResultCachedStickerInlineQueryResult
}

// IsInlineQueryResultCachedVideo reports whether InlineQueryResult is InlineQueryResultCachedVideo.
func (s InlineQueryResult) IsInlineQueryResultCachedVideo() bool {
	return s.Type == InlineQueryResultCachedVideoInlineQueryResult
}

// IsInlineQueryResultCachedVoice reports whether InlineQueryResult is InlineQueryResultCachedVoice.
func (s InlineQueryResult) IsInlineQueryResultCachedVoice() bool {
	return s.Type == InlineQueryResultCachedVoiceInlineQueryResult
}

// IsInlineQueryResultArticle reports whether InlineQueryResult is InlineQueryResultArticle.
func (s InlineQueryResult) IsInlineQueryResultArticle() bool {
	return s.Type == InlineQueryResultArticleInlineQueryResult
}

// IsInlineQueryResultAudio reports whether InlineQueryResult is InlineQueryResultAudio.
func (s InlineQueryResult) IsInlineQueryResultAudio() bool {
	return s.Type == InlineQueryResultAudioInlineQueryResult
}

// IsInlineQueryResultContact reports whether InlineQueryResult is InlineQueryResultContact.
func (s InlineQueryResult) IsInlineQueryResultContact() bool {
	return s.Type == InlineQueryResultContactInlineQueryResult
}

// IsInlineQueryResultGame reports whether InlineQueryResult is InlineQueryResultGame.
func (s InlineQueryResult) IsInlineQueryResultGame() bool {
	return s.Type == InlineQueryResultGameInlineQueryResult
}

// IsInlineQueryResultDocument reports whether InlineQueryResult is InlineQueryResultDocument.
func (s InlineQueryResult) IsInlineQueryResultDocument() bool {
	return s.Type == InlineQueryResultDocumentInlineQueryResult
}

// IsInlineQueryResultGif reports whether InlineQueryResult is InlineQueryResultGif.
func (s InlineQueryResult) IsInlineQueryResultGif() bool {
	return s.Type == InlineQueryResultGifInlineQueryResult
}

// IsInlineQueryResultLocation reports whether InlineQueryResult is InlineQueryResultLocation.
func (s InlineQueryResult) IsInlineQueryResultLocation() bool {
	return s.Type == InlineQueryResultLocationInlineQueryResult
}

// IsInlineQueryResultMpeg4Gif reports whether InlineQueryResult is InlineQueryResultMpeg4Gif.
func (s InlineQueryResult) IsInlineQueryResultMpeg4Gif() bool {
	return s.Type == InlineQueryResultMpeg4GifInlineQueryResult
}

// IsInlineQueryResultPhoto reports whether InlineQueryResult is InlineQueryResultPhoto.
func (s InlineQueryResult) IsInlineQueryResultPhoto() bool {
	return s.Type == InlineQueryResultPhotoInlineQueryResult
}

// IsInlineQueryResultVenue reports whether InlineQueryResult is InlineQueryResultVenue.
func (s InlineQueryResult) IsInlineQueryResultVenue() bool {
	return s.Type == InlineQueryResultVenueInlineQueryResult
}

// IsInlineQueryResultVideo reports whether InlineQueryResult is InlineQueryResultVideo.
func (s InlineQueryResult) IsInlineQueryResultVideo() bool {
	return s.Type == InlineQueryResultVideoInlineQueryResult
}

// IsInlineQueryResultVoice reports whether InlineQueryResult is InlineQueryResultVoice.
func (s InlineQueryResult) IsInlineQueryResultVoice() bool {
	return s.Type == InlineQueryResultVoiceInlineQueryResult
}

// SetInlineQueryResultCachedAudio sets InlineQueryResult to InlineQueryResultCachedAudio.
func (s *InlineQueryResult) SetInlineQueryResultCachedAudio(v InlineQueryResultCachedAudio) {
	s.Type = InlineQueryResultCachedAudioInlineQueryResult
	s.InlineQueryResultCachedAudio = v
}

// GetInlineQueryResultCachedAudio returns InlineQueryResultCachedAudio and true boolean if InlineQueryResult is InlineQueryResultCachedAudio.
func (s InlineQueryResult) GetInlineQueryResultCachedAudio() (v InlineQueryResultCachedAudio, ok bool) {
	if !s.IsInlineQueryResultCachedAudio() {
		return v, false
	}
	return s.InlineQueryResultCachedAudio, true
}

// NewInlineQueryResultCachedAudioInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedAudio.
func NewInlineQueryResultCachedAudioInlineQueryResult(v InlineQueryResultCachedAudio) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedAudio(v)
	return s
}

// SetInlineQueryResultCachedDocument sets InlineQueryResult to InlineQueryResultCachedDocument.
func (s *InlineQueryResult) SetInlineQueryResultCachedDocument(v InlineQueryResultCachedDocument) {
	s.Type = InlineQueryResultCachedDocumentInlineQueryResult
	s.InlineQueryResultCachedDocument = v
}

// GetInlineQueryResultCachedDocument returns InlineQueryResultCachedDocument and true boolean if InlineQueryResult is InlineQueryResultCachedDocument.
func (s InlineQueryResult) GetInlineQueryResultCachedDocument() (v InlineQueryResultCachedDocument, ok bool) {
	if !s.IsInlineQueryResultCachedDocument() {
		return v, false
	}
	return s.InlineQueryResultCachedDocument, true
}

// NewInlineQueryResultCachedDocumentInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedDocument.
func NewInlineQueryResultCachedDocumentInlineQueryResult(v InlineQueryResultCachedDocument) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedDocument(v)
	return s
}

// SetInlineQueryResultCachedGif sets InlineQueryResult to InlineQueryResultCachedGif.
func (s *InlineQueryResult) SetInlineQueryResultCachedGif(v InlineQueryResultCachedGif) {
	s.Type = InlineQueryResultCachedGifInlineQueryResult
	s.InlineQueryResultCachedGif = v
}

// GetInlineQueryResultCachedGif returns InlineQueryResultCachedGif and true boolean if InlineQueryResult is InlineQueryResultCachedGif.
func (s InlineQueryResult) GetInlineQueryResultCachedGif() (v InlineQueryResultCachedGif, ok bool) {
	if !s.IsInlineQueryResultCachedGif() {
		return v, false
	}
	return s.InlineQueryResultCachedGif, true
}

// NewInlineQueryResultCachedGifInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedGif.
func NewInlineQueryResultCachedGifInlineQueryResult(v InlineQueryResultCachedGif) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedGif(v)
	return s
}

// SetInlineQueryResultCachedMpeg4Gif sets InlineQueryResult to InlineQueryResultCachedMpeg4Gif.
func (s *InlineQueryResult) SetInlineQueryResultCachedMpeg4Gif(v InlineQueryResultCachedMpeg4Gif) {
	s.Type = InlineQueryResultCachedMpeg4GifInlineQueryResult
	s.InlineQueryResultCachedMpeg4Gif = v
}

// GetInlineQueryResultCachedMpeg4Gif returns InlineQueryResultCachedMpeg4Gif and true boolean if InlineQueryResult is InlineQueryResultCachedMpeg4Gif.
func (s InlineQueryResult) GetInlineQueryResultCachedMpeg4Gif() (v InlineQueryResultCachedMpeg4Gif, ok bool) {
	if !s.IsInlineQueryResultCachedMpeg4Gif() {
		return v, false
	}
	return s.InlineQueryResultCachedMpeg4Gif, true
}

// NewInlineQueryResultCachedMpeg4GifInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedMpeg4Gif.
func NewInlineQueryResultCachedMpeg4GifInlineQueryResult(v InlineQueryResultCachedMpeg4Gif) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedMpeg4Gif(v)
	return s
}

// SetInlineQueryResultCachedPhoto sets InlineQueryResult to InlineQueryResultCachedPhoto.
func (s *InlineQueryResult) SetInlineQueryResultCachedPhoto(v InlineQueryResultCachedPhoto) {
	s.Type = InlineQueryResultCachedPhotoInlineQueryResult
	s.InlineQueryResultCachedPhoto = v
}

// GetInlineQueryResultCachedPhoto returns InlineQueryResultCachedPhoto and true boolean if InlineQueryResult is InlineQueryResultCachedPhoto.
func (s InlineQueryResult) GetInlineQueryResultCachedPhoto() (v InlineQueryResultCachedPhoto, ok bool) {
	if !s.IsInlineQueryResultCachedPhoto() {
		return v, false
	}
	return s.InlineQueryResultCachedPhoto, true
}

// NewInlineQueryResultCachedPhotoInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedPhoto.
func NewInlineQueryResultCachedPhotoInlineQueryResult(v InlineQueryResultCachedPhoto) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedPhoto(v)
	return s
}

// SetInlineQueryResultCachedSticker sets InlineQueryResult to InlineQueryResultCachedSticker.
func (s *InlineQueryResult) SetInlineQueryResultCachedSticker(v InlineQueryResultCachedSticker) {
	s.Type = InlineQueryResultCachedStickerInlineQueryResult
	s.InlineQueryResultCachedSticker = v
}

// GetInlineQueryResultCachedSticker returns InlineQueryResultCachedSticker and true boolean if InlineQueryResult is InlineQueryResultCachedSticker.
func (s InlineQueryResult) GetInlineQueryResultCachedSticker() (v InlineQueryResultCachedSticker, ok bool) {
	if !s.IsInlineQueryResultCachedSticker() {
		return v, false
	}
	return s.InlineQueryResultCachedSticker, true
}

// NewInlineQueryResultCachedStickerInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedSticker.
func NewInlineQueryResultCachedStickerInlineQueryResult(v InlineQueryResultCachedSticker) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedSticker(v)
	return s
}

// SetInlineQueryResultCachedVideo sets InlineQueryResult to InlineQueryResultCachedVideo.
func (s *InlineQueryResult) SetInlineQueryResultCachedVideo(v InlineQueryResultCachedVideo) {
	s.Type = InlineQueryResultCachedVideoInlineQueryResult
	s.InlineQueryResultCachedVideo = v
}

// GetInlineQueryResultCachedVideo returns InlineQueryResultCachedVideo and true boolean if InlineQueryResult is InlineQueryResultCachedVideo.
func (s InlineQueryResult) GetInlineQueryResultCachedVideo() (v InlineQueryResultCachedVideo, ok bool) {
	if !s.IsInlineQueryResultCachedVideo() {
		return v, false
	}
	return s.InlineQueryResultCachedVideo, true
}

// NewInlineQueryResultCachedVideoInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedVideo.
func NewInlineQueryResultCachedVideoInlineQueryResult(v InlineQueryResultCachedVideo) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedVideo(v)
	return s
}

// SetInlineQueryResultCachedVoice sets InlineQueryResult to InlineQueryResultCachedVoice.
func (s *InlineQueryResult) SetInlineQueryResultCachedVoice(v InlineQueryResultCachedVoice) {
	s.Type = InlineQueryResultCachedVoiceInlineQueryResult
	s.InlineQueryResultCachedVoice = v
}

// GetInlineQueryResultCachedVoice returns InlineQueryResultCachedVoice and true boolean if InlineQueryResult is InlineQueryResultCachedVoice.
func (s InlineQueryResult) GetInlineQueryResultCachedVoice() (v InlineQueryResultCachedVoice, ok bool) {
	if !s.IsInlineQueryResultCachedVoice() {
		return v, false
	}
	return s.InlineQueryResultCachedVoice, true
}

// NewInlineQueryResultCachedVoiceInlineQueryResult returns new InlineQueryResult from InlineQueryResultCachedVoice.
func NewInlineQueryResultCachedVoiceInlineQueryResult(v InlineQueryResultCachedVoice) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultCachedVoice(v)
	return s
}

// SetInlineQueryResultArticle sets InlineQueryResult to InlineQueryResultArticle.
func (s *InlineQueryResult) SetInlineQueryResultArticle(v InlineQueryResultArticle) {
	s.Type = InlineQueryResultArticleInlineQueryResult
	s.InlineQueryResultArticle = v
}

// GetInlineQueryResultArticle returns InlineQueryResultArticle and true boolean if InlineQueryResult is InlineQueryResultArticle.
func (s InlineQueryResult) GetInlineQueryResultArticle() (v InlineQueryResultArticle, ok bool) {
	if !s.IsInlineQueryResultArticle() {
		return v, false
	}
	return s.InlineQueryResultArticle, true
}

// NewInlineQueryResultArticleInlineQueryResult returns new InlineQueryResult from InlineQueryResultArticle.
func NewInlineQueryResultArticleInlineQueryResult(v InlineQueryResultArticle) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultArticle(v)
	return s
}

// SetInlineQueryResultAudio sets InlineQueryResult to InlineQueryResultAudio.
func (s *InlineQueryResult) SetInlineQueryResultAudio(v InlineQueryResultAudio) {
	s.Type = InlineQueryResultAudioInlineQueryResult
	s.InlineQueryResultAudio = v
}

// GetInlineQueryResultAudio returns InlineQueryResultAudio and true boolean if InlineQueryResult is InlineQueryResultAudio.
func (s InlineQueryResult) GetInlineQueryResultAudio() (v InlineQueryResultAudio, ok bool) {
	if !s.IsInlineQueryResultAudio() {
		return v, false
	}
	return s.InlineQueryResultAudio, true
}

// NewInlineQueryResultAudioInlineQueryResult returns new InlineQueryResult from InlineQueryResultAudio.
func NewInlineQueryResultAudioInlineQueryResult(v InlineQueryResultAudio) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultAudio(v)
	return s
}

// SetInlineQueryResultContact sets InlineQueryResult to InlineQueryResultContact.
func (s *InlineQueryResult) SetInlineQueryResultContact(v InlineQueryResultContact) {
	s.Type = InlineQueryResultContactInlineQueryResult
	s.InlineQueryResultContact = v
}

// GetInlineQueryResultContact returns InlineQueryResultContact and true boolean if InlineQueryResult is InlineQueryResultContact.
func (s InlineQueryResult) GetInlineQueryResultContact() (v InlineQueryResultContact, ok bool) {
	if !s.IsInlineQueryResultContact() {
		return v, false
	}
	return s.InlineQueryResultContact, true
}

// NewInlineQueryResultContactInlineQueryResult returns new InlineQueryResult from InlineQueryResultContact.
func NewInlineQueryResultContactInlineQueryResult(v InlineQueryResultContact) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultContact(v)
	return s
}

// SetInlineQueryResultGame sets InlineQueryResult to InlineQueryResultGame.
func (s *InlineQueryResult) SetInlineQueryResultGame(v InlineQueryResultGame) {
	s.Type = InlineQueryResultGameInlineQueryResult
	s.InlineQueryResultGame = v
}

// GetInlineQueryResultGame returns InlineQueryResultGame and true boolean if InlineQueryResult is InlineQueryResultGame.
func (s InlineQueryResult) GetInlineQueryResultGame() (v InlineQueryResultGame, ok bool) {
	if !s.IsInlineQueryResultGame() {
		return v, false
	}
	return s.InlineQueryResultGame, true
}

// NewInlineQueryResultGameInlineQueryResult returns new InlineQueryResult from InlineQueryResultGame.
func NewInlineQueryResultGameInlineQueryResult(v InlineQueryResultGame) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultGame(v)
	return s
}

// SetInlineQueryResultDocument sets InlineQueryResult to InlineQueryResultDocument.
func (s *InlineQueryResult) SetInlineQueryResultDocument(v InlineQueryResultDocument) {
	s.Type = InlineQueryResultDocumentInlineQueryResult
	s.InlineQueryResultDocument = v
}

// GetInlineQueryResultDocument returns InlineQueryResultDocument and true boolean if InlineQueryResult is InlineQueryResultDocument.
func (s InlineQueryResult) GetInlineQueryResultDocument() (v InlineQueryResultDocument, ok bool) {
	if !s.IsInlineQueryResultDocument() {
		return v, false
	}
	return s.InlineQueryResultDocument, true
}

// NewInlineQueryResultDocumentInlineQueryResult returns new InlineQueryResult from InlineQueryResultDocument.
func NewInlineQueryResultDocumentInlineQueryResult(v InlineQueryResultDocument) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultDocument(v)
	return s
}

// SetInlineQueryResultGif sets InlineQueryResult to InlineQueryResultGif.
func (s *InlineQueryResult) SetInlineQueryResultGif(v InlineQueryResultGif) {
	s.Type = InlineQueryResultGifInlineQueryResult
	s.InlineQueryResultGif = v
}

// GetInlineQueryResultGif returns InlineQueryResultGif and true boolean if InlineQueryResult is InlineQueryResultGif.
func (s InlineQueryResult) GetInlineQueryResultGif() (v InlineQueryResultGif, ok bool) {
	if !s.IsInlineQueryResultGif() {
		return v, false
	}
	return s.InlineQueryResultGif, true
}

// NewInlineQueryResultGifInlineQueryResult returns new InlineQueryResult from InlineQueryResultGif.
func NewInlineQueryResultGifInlineQueryResult(v InlineQueryResultGif) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultGif(v)
	return s
}

// SetInlineQueryResultLocation sets InlineQueryResult to InlineQueryResultLocation.
func (s *InlineQueryResult) SetInlineQueryResultLocation(v InlineQueryResultLocation) {
	s.Type = InlineQueryResultLocationInlineQueryResult
	s.InlineQueryResultLocation = v
}

// GetInlineQueryResultLocation returns InlineQueryResultLocation and true boolean if InlineQueryResult is InlineQueryResultLocation.
func (s InlineQueryResult) GetInlineQueryResultLocation() (v InlineQueryResultLocation, ok bool) {
	if !s.IsInlineQueryResultLocation() {
		return v, false
	}
	return s.InlineQueryResultLocation, true
}

// NewInlineQueryResultLocationInlineQueryResult returns new InlineQueryResult from InlineQueryResultLocation.
func NewInlineQueryResultLocationInlineQueryResult(v InlineQueryResultLocation) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultLocation(v)
	return s
}

// SetInlineQueryResultMpeg4Gif sets InlineQueryResult to InlineQueryResultMpeg4Gif.
func (s *InlineQueryResult) SetInlineQueryResultMpeg4Gif(v InlineQueryResultMpeg4Gif) {
	s.Type = InlineQueryResultMpeg4GifInlineQueryResult
	s.InlineQueryResultMpeg4Gif = v
}

// GetInlineQueryResultMpeg4Gif returns InlineQueryResultMpeg4Gif and true boolean if InlineQueryResult is InlineQueryResultMpeg4Gif.
func (s InlineQueryResult) GetInlineQueryResultMpeg4Gif() (v InlineQueryResultMpeg4Gif, ok bool) {
	if !s.IsInlineQueryResultMpeg4Gif() {
		return v, false
	}
	return s.InlineQueryResultMpeg4Gif, true
}

// NewInlineQueryResultMpeg4GifInlineQueryResult returns new InlineQueryResult from InlineQueryResultMpeg4Gif.
func NewInlineQueryResultMpeg4GifInlineQueryResult(v InlineQueryResultMpeg4Gif) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultMpeg4Gif(v)
	return s
}

// SetInlineQueryResultPhoto sets InlineQueryResult to InlineQueryResultPhoto.
func (s *InlineQueryResult) SetInlineQueryResultPhoto(v InlineQueryResultPhoto) {
	s.Type = InlineQueryResultPhotoInlineQueryResult
	s.InlineQueryResultPhoto = v
}

// GetInlineQueryResultPhoto returns InlineQueryResultPhoto and true boolean if InlineQueryResult is InlineQueryResultPhoto.
func (s InlineQueryResult) GetInlineQueryResultPhoto() (v InlineQueryResultPhoto, ok bool) {
	if !s.IsInlineQueryResultPhoto() {
		return v, false
	}
	return s.InlineQueryResultPhoto, true
}

// NewInlineQueryResultPhotoInlineQueryResult returns new InlineQueryResult from InlineQueryResultPhoto.
func NewInlineQueryResultPhotoInlineQueryResult(v InlineQueryResultPhoto) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultPhoto(v)
	return s
}

// SetInlineQueryResultVenue sets InlineQueryResult to InlineQueryResultVenue.
func (s *InlineQueryResult) SetInlineQueryResultVenue(v InlineQueryResultVenue) {
	s.Type = InlineQueryResultVenueInlineQueryResult
	s.InlineQueryResultVenue = v
}

// GetInlineQueryResultVenue returns InlineQueryResultVenue and true boolean if InlineQueryResult is InlineQueryResultVenue.
func (s InlineQueryResult) GetInlineQueryResultVenue() (v InlineQueryResultVenue, ok bool) {
	if !s.IsInlineQueryResultVenue() {
		return v, false
	}
	return s.InlineQueryResultVenue, true
}

// NewInlineQueryResultVenueInlineQueryResult returns new InlineQueryResult from InlineQueryResultVenue.
func NewInlineQueryResultVenueInlineQueryResult(v InlineQueryResultVenue) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultVenue(v)
	return s
}

// SetInlineQueryResultVideo sets InlineQueryResult to InlineQueryResultVideo.
func (s *InlineQueryResult) SetInlineQueryResultVideo(v InlineQueryResultVideo) {
	s.Type = InlineQueryResultVideoInlineQueryResult
	s.InlineQueryResultVideo = v
}

// GetInlineQueryResultVideo returns InlineQueryResultVideo and true boolean if InlineQueryResult is InlineQueryResultVideo.
func (s InlineQueryResult) GetInlineQueryResultVideo() (v InlineQueryResultVideo, ok bool) {
	if !s.IsInlineQueryResultVideo() {
		return v, false
	}
	return s.InlineQueryResultVideo, true
}

// NewInlineQueryResultVideoInlineQueryResult returns new InlineQueryResult from InlineQueryResultVideo.
func NewInlineQueryResultVideoInlineQueryResult(v InlineQueryResultVideo) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultVideo(v)
	return s
}

// SetInlineQueryResultVoice sets InlineQueryResult to InlineQueryResultVoice.
func (s *InlineQueryResult) SetInlineQueryResultVoice(v InlineQueryResultVoice) {
	s.Type = InlineQueryResultVoiceInlineQueryResult
	s.InlineQueryResultVoice = v
}

// GetInlineQueryResultVoice returns InlineQueryResultVoice and true boolean if InlineQueryResult is InlineQueryResultVoice.
func (s InlineQueryResult) GetInlineQueryResultVoice() (v InlineQueryResultVoice, ok bool) {
	if !s.IsInlineQueryResultVoice() {
		return v, false
	}
	return s.InlineQueryResultVoice, true
}

// NewInlineQueryResultVoiceInlineQueryResult returns new InlineQueryResult from InlineQueryResultVoice.
func NewInlineQueryResultVoiceInlineQueryResult(v InlineQueryResultVoice) InlineQueryResult {
	var s InlineQueryResult
	s.SetInlineQueryResultVoice(v)
	return s
}

// Represents a link to an article or web page.
// Ref: #/components/schemas/InlineQueryResultArticle
type InlineQueryResultArticle struct {
	// Type of the result, must be _article_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 Bytes.
	ID string `json:"id"`
	// Title of the result.
	Title               string                  `json:"title"`
	InputMessageContent InputMessageContent     `json:"input_message_content"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	// _Optional_. URL of the result.
	URL OptString `json:"url"`
	// _Optional_. Pass _True_ if you don't want the URL to be shown in the message.
	HideURL OptBool `json:"hide_url"`
	// _Optional_. Short description of the result.
	Description OptString `json:"description"`
	// _Optional_. URL of the thumbnail for the result.
	ThumbnailURL OptString `json:"thumbnail_url"`
	// _Optional_. Thumbnail width.
	ThumbnailWidth OptInt `json:"thumbnail_width"`
	// _Optional_. Thumbnail height.
	ThumbnailHeight OptInt `json:"thumbnail_height"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultArticle) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultArticle) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultArticle) GetTitle() string {
	return s.Title
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultArticle) GetInputMessageContent() InputMessageContent {
	return s.InputMessageContent
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultArticle) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetURL returns the value of URL.
func (s *InlineQueryResultArticle) GetURL() OptString {
	return s.URL
}

// GetHideURL returns the value of HideURL.
func (s *InlineQueryResultArticle) GetHideURL() OptBool {
	return s.HideURL
}

// GetDescription returns the value of Description.
func (s *InlineQueryResultArticle) GetDescription() OptString {
	return s.Description
}

// GetThumbnailURL returns the value of ThumbnailURL.
func (s *InlineQueryResultArticle) GetThumbnailURL() OptString {
	return s.ThumbnailURL
}

// GetThumbnailWidth returns the value of ThumbnailWidth.
func (s *InlineQueryResultArticle) GetThumbnailWidth() OptInt {
	return s.ThumbnailWidth
}

// GetThumbnailHeight returns the value of ThumbnailHeight.
func (s *InlineQueryResultArticle) GetThumbnailHeight() OptInt {
	return s.ThumbnailHeight
}

// SetType sets the value of Type.
func (s *InlineQueryResultArticle) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultArticle) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultArticle) SetTitle(val string) {
	s.Title = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultArticle) SetInputMessageContent(val InputMessageContent) {
	s.InputMessageContent = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultArticle) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetURL sets the value of URL.
func (s *InlineQueryResultArticle) SetURL(val OptString) {
	s.URL = val
}

// SetHideURL sets the value of HideURL.
func (s *InlineQueryResultArticle) SetHideURL(val OptBool) {
	s.HideURL = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultArticle) SetDescription(val OptString) {
	s.Description = val
}

// SetThumbnailURL sets the value of ThumbnailURL.
func (s *InlineQueryResultArticle) SetThumbnailURL(val OptString) {
	s.ThumbnailURL = val
}

// SetThumbnailWidth sets the value of ThumbnailWidth.
func (s *InlineQueryResultArticle) SetThumbnailWidth(val OptInt) {
	s.ThumbnailWidth = val
}

// SetThumbnailHeight sets the value of ThumbnailHeight.
func (s *InlineQueryResultArticle) SetThumbnailHeight(val OptInt) {
	s.ThumbnailHeight = val
}

// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user.
// Alternatively, you can use _input_message_content_ to send a message with the specified content
// instead of the audio.
// Ref: #/components/schemas/InlineQueryResultAudio
type InlineQueryResultAudio struct {
	// Type of the result, must be _audio_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the audio file.
	AudioURL string `json:"audio_url"`
	// Title.
	Title string `json:"title"`
	// _Optional_. Caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the audio caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Performer.
	Performer OptString `json:"performer"`
	// _Optional_. Audio duration in seconds.
	AudioDuration       OptInt                  `json:"audio_duration"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultAudio) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultAudio) GetID() string {
	return s.ID
}

// GetAudioURL returns the value of AudioURL.
func (s *InlineQueryResultAudio) GetAudioURL() string {
	return s.AudioURL
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultAudio) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultAudio) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultAudio) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultAudio) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetPerformer returns the value of Performer.
func (s *InlineQueryResultAudio) GetPerformer() OptString {
	return s.Performer
}

// GetAudioDuration returns the value of AudioDuration.
func (s *InlineQueryResultAudio) GetAudioDuration() OptInt {
	return s.AudioDuration
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultAudio) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultAudio) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultAudio) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultAudio) SetID(val string) {
	s.ID = val
}

// SetAudioURL sets the value of AudioURL.
func (s *InlineQueryResultAudio) SetAudioURL(val string) {
	s.AudioURL = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultAudio) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultAudio) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultAudio) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultAudio) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetPerformer sets the value of Performer.
func (s *InlineQueryResultAudio) SetPerformer(val OptString) {
	s.Performer = val
}

// SetAudioDuration sets the value of AudioDuration.
func (s *InlineQueryResultAudio) SetAudioDuration(val OptInt) {
	s.AudioDuration = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultAudio) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultAudio) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file
// will be sent by the user. Alternatively, you can use _input_message_content_ to send a message
// with the specified content instead of the audio.
// Ref: #/components/schemas/InlineQueryResultCachedAudio
type InlineQueryResultCachedAudio struct {
	// Type of the result, must be _audio_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the audio file.
	AudioFileID string `json:"audio_file_id"`
	// _Optional_. Caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the audio caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities     []MessageEntity         `json:"caption_entities"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultCachedAudio) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultCachedAudio) GetID() string {
	return s.ID
}

// GetAudioFileID returns the value of AudioFileID.
func (s *InlineQueryResultCachedAudio) GetAudioFileID() string {
	return s.AudioFileID
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultCachedAudio) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultCachedAudio) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultCachedAudio) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultCachedAudio) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultCachedAudio) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedAudio) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedAudio) SetID(val string) {
	s.ID = val
}

// SetAudioFileID sets the value of AudioFileID.
func (s *InlineQueryResultCachedAudio) SetAudioFileID(val string) {
	s.AudioFileID = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedAudio) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedAudio) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedAudio) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedAudio) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedAudio) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by
// the user with an optional caption. Alternatively, you can use _input_message_content_ to send a
// message with the specified content instead of the file.
// Ref: #/components/schemas/InlineQueryResultCachedDocument
type InlineQueryResultCachedDocument struct {
	// Type of the result, must be _document_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// Title for the result.
	Title string `json:"title"`
	// A valid file identifier for the file.
	DocumentFileID string `json:"document_file_id"`
	// _Optional_. Short description of the result.
	Description OptString `json:"description"`
	// _Optional_. Caption of the document to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the document caption. See [formatting
	// options](https://core.telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities     []MessageEntity         `json:"caption_entities"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultCachedDocument) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultCachedDocument) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultCachedDocument) GetTitle() string {
	return s.Title
}

// GetDocumentFileID returns the value of DocumentFileID.
func (s *InlineQueryResultCachedDocument) GetDocumentFileID() string {
	return s.DocumentFileID
}

// GetDescription returns the value of Description.
func (s *InlineQueryResultCachedDocument) GetDescription() OptString {
	return s.Description
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultCachedDocument) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultCachedDocument) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultCachedDocument) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultCachedDocument) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultCachedDocument) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedDocument) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedDocument) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedDocument) SetTitle(val string) {
	s.Title = val
}

// SetDocumentFileID sets the value of DocumentFileID.
func (s *InlineQueryResultCachedDocument) SetDocumentFileID(val string) {
	s.DocumentFileID = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultCachedDocument) SetDescription(val OptString) {
	s.Description = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedDocument) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedDocument) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedDocument) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedDocument) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedDocument) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to an animated GIF file stored on the Telegram servers. By default, this
// animated GIF file will be sent by the user with an optional caption. Alternatively, you can use
// _input_message_content_ to send a message with specified content instead of the animation.
// Ref: #/components/schemas/InlineQueryResultCachedGif
type InlineQueryResultCachedGif struct {
	// Type of the result, must be _gif_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the GIF file.
	GIFFileID string `json:"gif_file_id"`
	// _Optional_. Title for the result.
	Title OptString `json:"title"`
	// _Optional_. Caption of the GIF file to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool                 `json:"show_caption_above_media"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent   OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultCachedGif) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultCachedGif) GetID() string {
	return s.ID
}

// GetGIFFileID returns the value of GIFFileID.
func (s *InlineQueryResultCachedGif) GetGIFFileID() string {
	return s.GIFFileID
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultCachedGif) GetTitle() OptString {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultCachedGif) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultCachedGif) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultCachedGif) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultCachedGif) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultCachedGif) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultCachedGif) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedGif) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedGif) SetID(val string) {
	s.ID = val
}

// SetGIFFileID sets the value of GIFFileID.
func (s *InlineQueryResultCachedGif) SetGIFFileID(val string) {
	s.GIFFileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedGif) SetTitle(val OptString) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedGif) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedGif) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedGif) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultCachedGif) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedGif) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedGif) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the
// Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional
// caption. Alternatively, you can use _input_message_content_ to send a message with the specified
// content instead of the animation.
// Ref: #/components/schemas/InlineQueryResultCachedMpeg4Gif
type InlineQueryResultCachedMpeg4Gif struct {
	// Type of the result, must be _mpeg4_gif_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the MPEG4 file.
	Mpeg4FileID string `json:"mpeg4_file_id"`
	// _Optional_. Title for the result.
	Title OptString `json:"title"`
	// _Optional_. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool                 `json:"show_caption_above_media"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent   OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultCachedMpeg4Gif) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultCachedMpeg4Gif) GetID() string {
	return s.ID
}

// GetMpeg4FileID returns the value of Mpeg4FileID.
func (s *InlineQueryResultCachedMpeg4Gif) GetMpeg4FileID() string {
	return s.Mpeg4FileID
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultCachedMpeg4Gif) GetTitle() OptString {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultCachedMpeg4Gif) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultCachedMpeg4Gif) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultCachedMpeg4Gif) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultCachedMpeg4Gif) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultCachedMpeg4Gif) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultCachedMpeg4Gif) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedMpeg4Gif) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedMpeg4Gif) SetID(val string) {
	s.ID = val
}

// SetMpeg4FileID sets the value of Mpeg4FileID.
func (s *InlineQueryResultCachedMpeg4Gif) SetMpeg4FileID(val string) {
	s.Mpeg4FileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedMpeg4Gif) SetTitle(val OptString) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedMpeg4Gif) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedMpeg4Gif) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedMpeg4Gif) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultCachedMpeg4Gif) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedMpeg4Gif) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedMpeg4Gif) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent
// by the user with an optional caption. Alternatively, you can use _input_message_content_ to send a
// message with the specified content instead of the photo.
// Ref: #/components/schemas/InlineQueryResultCachedPhoto
type InlineQueryResultCachedPhoto struct {
	// Type of the result, must be _photo_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier of the photo.
	PhotoFileID string `json:"photo_file_id"`
	// _Optional_. Title for the result.
	Title OptString `json:"title"`
	// _Optional_. Short description of the result.
	Description OptString `json:"description"`
	// _Optional_. Caption of the photo to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the photo caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool                 `json:"show_caption_above_media"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent   OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultCachedPhoto) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultCachedPhoto) GetID() string {
	return s.ID
}

// GetPhotoFileID returns the value of PhotoFileID.
func (s *InlineQueryResultCachedPhoto) GetPhotoFileID() string {
	return s.PhotoFileID
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultCachedPhoto) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *InlineQueryResultCachedPhoto) GetDescription() OptString {
	return s.Description
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultCachedPhoto) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultCachedPhoto) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultCachedPhoto) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultCachedPhoto) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultCachedPhoto) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultCachedPhoto) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedPhoto) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedPhoto) SetID(val string) {
	s.ID = val
}

// SetPhotoFileID sets the value of PhotoFileID.
func (s *InlineQueryResultCachedPhoto) SetPhotoFileID(val string) {
	s.PhotoFileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedPhoto) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultCachedPhoto) SetDescription(val OptString) {
	s.Description = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedPhoto) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedPhoto) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedPhoto) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultCachedPhoto) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedPhoto) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedPhoto) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be
// sent by the user. Alternatively, you can use _input_message_content_ to send a message with the
// specified content instead of the sticker.
// Ref: #/components/schemas/InlineQueryResultCachedSticker
type InlineQueryResultCachedSticker struct {
	// Type of the result, must be _sticker_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier of the sticker.
	StickerFileID       string                  `json:"sticker_file_id"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultCachedSticker) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultCachedSticker) GetID() string {
	return s.ID
}

// GetStickerFileID returns the value of StickerFileID.
func (s *InlineQueryResultCachedSticker) GetStickerFileID() string {
	return s.StickerFileID
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultCachedSticker) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultCachedSticker) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedSticker) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedSticker) SetID(val string) {
	s.ID = val
}

// SetStickerFileID sets the value of StickerFileID.
func (s *InlineQueryResultCachedSticker) SetStickerFileID(val string) {
	s.StickerFileID = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedSticker) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedSticker) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a video file stored on the Telegram servers. By default, this video file will
// be sent by the user with an optional caption. Alternatively, you can use _input_message_content_
// to send a message with the specified content instead of the video.
// Ref: #/components/schemas/InlineQueryResultCachedVideo
type InlineQueryResultCachedVideo struct {
	// Type of the result, must be _video_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the video file.
	VideoFileID string `json:"video_file_id"`
	// Title for the result.
	Title string `json:"title"`
	// _Optional_. Short description of the result.
	Description OptString `json:"description"`
	// _Optional_. Caption of the video to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the video caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool                 `json:"show_caption_above_media"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent   OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultCachedVideo) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultCachedVideo) GetID() string {
	return s.ID
}

// GetVideoFileID returns the value of VideoFileID.
func (s *InlineQueryResultCachedVideo) GetVideoFileID() string {
	return s.VideoFileID
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultCachedVideo) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *InlineQueryResultCachedVideo) GetDescription() OptString {
	return s.Description
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultCachedVideo) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultCachedVideo) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultCachedVideo) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultCachedVideo) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultCachedVideo) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultCachedVideo) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedVideo) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedVideo) SetID(val string) {
	s.ID = val
}

// SetVideoFileID sets the value of VideoFileID.
func (s *InlineQueryResultCachedVideo) SetVideoFileID(val string) {
	s.VideoFileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedVideo) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultCachedVideo) SetDescription(val OptString) {
	s.Description = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedVideo) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedVideo) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedVideo) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultCachedVideo) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedVideo) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedVideo) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a voice message stored on the Telegram servers. By default, this voice
// message will be sent by the user. Alternatively, you can use _input_message_content_ to send a
// message with the specified content instead of the voice message.
// Ref: #/components/schemas/InlineQueryResultCachedVoice
type InlineQueryResultCachedVoice struct {
	// Type of the result, must be _voice_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid file identifier for the voice message.
	VoiceFileID string `json:"voice_file_id"`
	// Voice message title.
	Title string `json:"title"`
	// _Optional_. Caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the voice message caption. See [formatting
	// options](https://core.telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities     []MessageEntity         `json:"caption_entities"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultCachedVoice) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultCachedVoice) GetID() string {
	return s.ID
}

// GetVoiceFileID returns the value of VoiceFileID.
func (s *InlineQueryResultCachedVoice) GetVoiceFileID() string {
	return s.VoiceFileID
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultCachedVoice) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultCachedVoice) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultCachedVoice) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultCachedVoice) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultCachedVoice) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultCachedVoice) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultCachedVoice) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultCachedVoice) SetID(val string) {
	s.ID = val
}

// SetVoiceFileID sets the value of VoiceFileID.
func (s *InlineQueryResultCachedVoice) SetVoiceFileID(val string) {
	s.VoiceFileID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultCachedVoice) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultCachedVoice) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultCachedVoice) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultCachedVoice) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultCachedVoice) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultCachedVoice) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a contact with a phone number. By default, this contact will be sent by the user.
// Alternatively, you can use _input_message_content_ to send a message with the specified content
// instead of the contact.
// Ref: #/components/schemas/InlineQueryResultContact
type InlineQueryResultContact struct {
	// Type of the result, must be _contact_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 Bytes.
	ID string `json:"id"`
	// Contact's phone number.
	PhoneNumber string `json:"phone_number"`
	// Contact's first name.
	FirstName string `json:"first_name"`
	// _Optional_. Contact's last name.
	LastName OptString `json:"last_name"`
	// _Optional_. Additional data about the contact in the form of a [vCard](https://en.wikipedia.
	// org/wiki/VCard), 0-2048 bytes.
	Vcard               OptString               `json:"vcard"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
	// _Optional_. URL of the thumbnail for the result.
	ThumbnailURL OptString `json:"thumbnail_url"`
	// _Optional_. Thumbnail width.
	ThumbnailWidth OptInt `json:"thumbnail_width"`
	// _Optional_. Thumbnail height.
	ThumbnailHeight OptInt `json:"thumbnail_height"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultContact) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultContact) GetID() string {
	return s.ID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *InlineQueryResultContact) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetFirstName returns the value of FirstName.
func (s *InlineQueryResultContact) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *InlineQueryResultContact) GetLastName() OptString {
	return s.LastName
}

// GetVcard returns the value of Vcard.
func (s *InlineQueryResultContact) GetVcard() OptString {
	return s.Vcard
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultContact) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultContact) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// GetThumbnailURL returns the value of ThumbnailURL.
func (s *InlineQueryResultContact) GetThumbnailURL() OptString {
	return s.ThumbnailURL
}

// GetThumbnailWidth returns the value of ThumbnailWidth.
func (s *InlineQueryResultContact) GetThumbnailWidth() OptInt {
	return s.ThumbnailWidth
}

// GetThumbnailHeight returns the value of ThumbnailHeight.
func (s *InlineQueryResultContact) GetThumbnailHeight() OptInt {
	return s.ThumbnailHeight
}

// SetType sets the value of Type.
func (s *InlineQueryResultContact) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultContact) SetID(val string) {
	s.ID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *InlineQueryResultContact) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetFirstName sets the value of FirstName.
func (s *InlineQueryResultContact) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *InlineQueryResultContact) SetLastName(val OptString) {
	s.LastName = val
}

// SetVcard sets the value of Vcard.
func (s *InlineQueryResultContact) SetVcard(val OptString) {
	s.Vcard = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultContact) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultContact) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// SetThumbnailURL sets the value of ThumbnailURL.
func (s *InlineQueryResultContact) SetThumbnailURL(val OptString) {
	s.ThumbnailURL = val
}

// SetThumbnailWidth sets the value of ThumbnailWidth.
func (s *InlineQueryResultContact) SetThumbnailWidth(val OptInt) {
	s.ThumbnailWidth = val
}

// SetThumbnailHeight sets the value of ThumbnailHeight.
func (s *InlineQueryResultContact) SetThumbnailHeight(val OptInt) {
	s.ThumbnailHeight = val
}

// Represents a link to a file. By default, this file will be sent by the user with an optional
// caption. Alternatively, you can use _input_message_content_ to send a message with the specified
// content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this
// method.
// Ref: #/components/schemas/InlineQueryResultDocument
type InlineQueryResultDocument struct {
	// Type of the result, must be _document_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// Title for the result.
	Title string `json:"title"`
	// _Optional_. Caption of the document to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the document caption. See [formatting
	// options](https://core.telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// A valid URL for the file.
	DocumentURL string `json:"document_url"`
	// MIME type of the content of the file, either `application/pdf` or `application/zip`.
	MimeType string `json:"mime_type"`
	// _Optional_. Short description of the result.
	Description         OptString               `json:"description"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
	// _Optional_. URL of the thumbnail (JPEG only) for the file.
	ThumbnailURL OptString `json:"thumbnail_url"`
	// _Optional_. Thumbnail width.
	ThumbnailWidth OptInt `json:"thumbnail_width"`
	// _Optional_. Thumbnail height.
	ThumbnailHeight OptInt `json:"thumbnail_height"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultDocument) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultDocument) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultDocument) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultDocument) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultDocument) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultDocument) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDocumentURL returns the value of DocumentURL.
func (s *InlineQueryResultDocument) GetDocumentURL() string {
	return s.DocumentURL
}

// GetMimeType returns the value of MimeType.
func (s *InlineQueryResultDocument) GetMimeType() string {
	return s.MimeType
}

// GetDescription returns the value of Description.
func (s *InlineQueryResultDocument) GetDescription() OptString {
	return s.Description
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultDocument) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultDocument) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// GetThumbnailURL returns the value of ThumbnailURL.
func (s *InlineQueryResultDocument) GetThumbnailURL() OptString {
	return s.ThumbnailURL
}

// GetThumbnailWidth returns the value of ThumbnailWidth.
func (s *InlineQueryResultDocument) GetThumbnailWidth() OptInt {
	return s.ThumbnailWidth
}

// GetThumbnailHeight returns the value of ThumbnailHeight.
func (s *InlineQueryResultDocument) GetThumbnailHeight() OptInt {
	return s.ThumbnailHeight
}

// SetType sets the value of Type.
func (s *InlineQueryResultDocument) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultDocument) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultDocument) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultDocument) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultDocument) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultDocument) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDocumentURL sets the value of DocumentURL.
func (s *InlineQueryResultDocument) SetDocumentURL(val string) {
	s.DocumentURL = val
}

// SetMimeType sets the value of MimeType.
func (s *InlineQueryResultDocument) SetMimeType(val string) {
	s.MimeType = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultDocument) SetDescription(val OptString) {
	s.Description = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultDocument) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultDocument) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// SetThumbnailURL sets the value of ThumbnailURL.
func (s *InlineQueryResultDocument) SetThumbnailURL(val OptString) {
	s.ThumbnailURL = val
}

// SetThumbnailWidth sets the value of ThumbnailWidth.
func (s *InlineQueryResultDocument) SetThumbnailWidth(val OptInt) {
	s.ThumbnailWidth = val
}

// SetThumbnailHeight sets the value of ThumbnailHeight.
func (s *InlineQueryResultDocument) SetThumbnailHeight(val OptInt) {
	s.ThumbnailHeight = val
}

// Represents a [Game](https://core.telegram.org/bots/api#games).
// Ref: #/components/schemas/InlineQueryResultGame
type InlineQueryResultGame struct {
	// Type of the result, must be _game_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// Short name of the game.
	GameShortName string                  `json:"game_short_name"`
	ReplyMarkup   OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultGame) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultGame) GetID() string {
	return s.ID
}

// GetGameShortName returns the value of GameShortName.
func (s *InlineQueryResultGame) GetGameShortName() string {
	return s.GameShortName
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultGame) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetType sets the value of Type.
func (s *InlineQueryResultGame) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultGame) SetID(val string) {
	s.ID = val
}

// SetGameShortName sets the value of GameShortName.
func (s *InlineQueryResultGame) SetGameShortName(val string) {
	s.GameShortName = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultGame) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the
// user with optional caption. Alternatively, you can use _input_message_content_ to send a message
// with the specified content instead of the animation.
// Ref: #/components/schemas/InlineQueryResultGif
type InlineQueryResultGif struct {
	// Type of the result, must be _gif_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the GIF file. File size must not exceed 1MB.
	GIFURL string `json:"gif_url"`
	// _Optional_. Width of the GIF.
	GIFWidth OptInt `json:"gif_width"`
	// _Optional_. Height of the GIF.
	GIFHeight OptInt `json:"gif_height"`
	// _Optional_. Duration of the GIF in seconds.
	GIFDuration OptInt `json:"gif_duration"`
	// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.
	ThumbnailURL string `json:"thumbnail_url"`
	// _Optional_. MIME type of the thumbnail, must be one of `image/jpeg`, `image/gif`, or `video/mp4`.
	// Defaults to `image/jpeg`.
	ThumbnailMimeType OptString `json:"thumbnail_mime_type"`
	// _Optional_. Title for the result.
	Title OptString `json:"title"`
	// _Optional_. Caption of the GIF file to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool                 `json:"show_caption_above_media"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent   OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultGif) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultGif) GetID() string {
	return s.ID
}

// GetGIFURL returns the value of GIFURL.
func (s *InlineQueryResultGif) GetGIFURL() string {
	return s.GIFURL
}

// GetGIFWidth returns the value of GIFWidth.
func (s *InlineQueryResultGif) GetGIFWidth() OptInt {
	return s.GIFWidth
}

// GetGIFHeight returns the value of GIFHeight.
func (s *InlineQueryResultGif) GetGIFHeight() OptInt {
	return s.GIFHeight
}

// GetGIFDuration returns the value of GIFDuration.
func (s *InlineQueryResultGif) GetGIFDuration() OptInt {
	return s.GIFDuration
}

// GetThumbnailURL returns the value of ThumbnailURL.
func (s *InlineQueryResultGif) GetThumbnailURL() string {
	return s.ThumbnailURL
}

// GetThumbnailMimeType returns the value of ThumbnailMimeType.
func (s *InlineQueryResultGif) GetThumbnailMimeType() OptString {
	return s.ThumbnailMimeType
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultGif) GetTitle() OptString {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultGif) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultGif) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultGif) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultGif) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultGif) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultGif) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultGif) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultGif) SetID(val string) {
	s.ID = val
}

// SetGIFURL sets the value of GIFURL.
func (s *InlineQueryResultGif) SetGIFURL(val string) {
	s.GIFURL = val
}

// SetGIFWidth sets the value of GIFWidth.
func (s *InlineQueryResultGif) SetGIFWidth(val OptInt) {
	s.GIFWidth = val
}

// SetGIFHeight sets the value of GIFHeight.
func (s *InlineQueryResultGif) SetGIFHeight(val OptInt) {
	s.GIFHeight = val
}

// SetGIFDuration sets the value of GIFDuration.
func (s *InlineQueryResultGif) SetGIFDuration(val OptInt) {
	s.GIFDuration = val
}

// SetThumbnailURL sets the value of ThumbnailURL.
func (s *InlineQueryResultGif) SetThumbnailURL(val string) {
	s.ThumbnailURL = val
}

// SetThumbnailMimeType sets the value of ThumbnailMimeType.
func (s *InlineQueryResultGif) SetThumbnailMimeType(val OptString) {
	s.ThumbnailMimeType = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultGif) SetTitle(val OptString) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultGif) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultGif) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultGif) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultGif) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultGif) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultGif) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a location on a map. By default, the location will be sent by the user. Alternatively,
// you can use _input_message_content_ to send a message with the specified content instead of the
// location.
// Ref: #/components/schemas/InlineQueryResultLocation
type InlineQueryResultLocation struct {
	// Type of the result, must be _location_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 Bytes.
	ID string `json:"id"`
	// Location latitude in degrees.
	Latitude float64 `json:"latitude"`
	// Location longitude in degrees.
	Longitude float64 `json:"longitude"`
	// Location title.
	Title string `json:"title"`
	// _Optional_. The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy"`
	// _Optional_. Period in seconds during which the location can be updated, should be between 60 and
	// 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
	LivePeriod OptInt `json:"live_period"`
	// _Optional_. For live locations, a direction in which the user is moving, in degrees. Must be
	// between 1 and 360 if specified.
	Heading OptInt `json:"heading"`
	// _Optional_. For live locations, a maximum distance for proximity alerts about approaching another
	// chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius OptInt                  `json:"proximity_alert_radius"`
	ReplyMarkup          OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent  OptInputMessageContent  `json:"input_message_content"`
	// _Optional_. URL of the thumbnail for the result.
	ThumbnailURL OptString `json:"thumbnail_url"`
	// _Optional_. Thumbnail width.
	ThumbnailWidth OptInt `json:"thumbnail_width"`
	// _Optional_. Thumbnail height.
	ThumbnailHeight OptInt `json:"thumbnail_height"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultLocation) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultLocation) GetID() string {
	return s.ID
}

// GetLatitude returns the value of Latitude.
func (s *InlineQueryResultLocation) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *InlineQueryResultLocation) GetLongitude() float64 {
	return s.Longitude
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultLocation) GetTitle() string {
	return s.Title
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s *InlineQueryResultLocation) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetLivePeriod returns the value of LivePeriod.
func (s *InlineQueryResultLocation) GetLivePeriod() OptInt {
	return s.LivePeriod
}

// GetHeading returns the value of Heading.
func (s *InlineQueryResultLocation) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s *InlineQueryResultLocation) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultLocation) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultLocation) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// GetThumbnailURL returns the value of ThumbnailURL.
func (s *InlineQueryResultLocation) GetThumbnailURL() OptString {
	return s.ThumbnailURL
}

// GetThumbnailWidth returns the value of ThumbnailWidth.
func (s *InlineQueryResultLocation) GetThumbnailWidth() OptInt {
	return s.ThumbnailWidth
}

// GetThumbnailHeight returns the value of ThumbnailHeight.
func (s *InlineQueryResultLocation) GetThumbnailHeight() OptInt {
	return s.ThumbnailHeight
}

// SetType sets the value of Type.
func (s *InlineQueryResultLocation) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultLocation) SetID(val string) {
	s.ID = val
}

// SetLatitude sets the value of Latitude.
func (s *InlineQueryResultLocation) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *InlineQueryResultLocation) SetLongitude(val float64) {
	s.Longitude = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultLocation) SetTitle(val string) {
	s.Title = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *InlineQueryResultLocation) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetLivePeriod sets the value of LivePeriod.
func (s *InlineQueryResultLocation) SetLivePeriod(val OptInt) {
	s.LivePeriod = val
}

// SetHeading sets the value of Heading.
func (s *InlineQueryResultLocation) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *InlineQueryResultLocation) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultLocation) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultLocation) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// SetThumbnailURL sets the value of ThumbnailURL.
func (s *InlineQueryResultLocation) SetThumbnailURL(val OptString) {
	s.ThumbnailURL = val
}

// SetThumbnailWidth sets the value of ThumbnailWidth.
func (s *InlineQueryResultLocation) SetThumbnailWidth(val OptInt) {
	s.ThumbnailWidth = val
}

// SetThumbnailHeight sets the value of ThumbnailHeight.
func (s *InlineQueryResultLocation) SetThumbnailHeight(val OptInt) {
	s.ThumbnailHeight = val
}

// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this
// animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use
// _input_message_content_ to send a message with the specified content instead of the animation.
// Ref: #/components/schemas/InlineQueryResultMpeg4Gif
type InlineQueryResultMpeg4Gif struct {
	// Type of the result, must be _mpeg4_gif_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the MPEG4 file. File size must not exceed 1MB.
	Mpeg4URL string `json:"mpeg4_url"`
	// _Optional_. Video width.
	Mpeg4Width OptInt `json:"mpeg4_width"`
	// _Optional_. Video height.
	Mpeg4Height OptInt `json:"mpeg4_height"`
	// _Optional_. Video duration in seconds.
	Mpeg4Duration OptInt `json:"mpeg4_duration"`
	// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result.
	ThumbnailURL string `json:"thumbnail_url"`
	// _Optional_. MIME type of the thumbnail, must be one of `image/jpeg`, `image/gif`, or `video/mp4`.
	// Defaults to `image/jpeg`.
	ThumbnailMimeType OptString `json:"thumbnail_mime_type"`
	// _Optional_. Title for the result.
	Title OptString `json:"title"`
	// _Optional_. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool                 `json:"show_caption_above_media"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent   OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultMpeg4Gif) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultMpeg4Gif) GetID() string {
	return s.ID
}

// GetMpeg4URL returns the value of Mpeg4URL.
func (s *InlineQueryResultMpeg4Gif) GetMpeg4URL() string {
	return s.Mpeg4URL
}

// GetMpeg4Width returns the value of Mpeg4Width.
func (s *InlineQueryResultMpeg4Gif) GetMpeg4Width() OptInt {
	return s.Mpeg4Width
}

// GetMpeg4Height returns the value of Mpeg4Height.
func (s *InlineQueryResultMpeg4Gif) GetMpeg4Height() OptInt {
	return s.Mpeg4Height
}

// GetMpeg4Duration returns the value of Mpeg4Duration.
func (s *InlineQueryResultMpeg4Gif) GetMpeg4Duration() OptInt {
	return s.Mpeg4Duration
}

// GetThumbnailURL returns the value of ThumbnailURL.
func (s *InlineQueryResultMpeg4Gif) GetThumbnailURL() string {
	return s.ThumbnailURL
}

// GetThumbnailMimeType returns the value of ThumbnailMimeType.
func (s *InlineQueryResultMpeg4Gif) GetThumbnailMimeType() OptString {
	return s.ThumbnailMimeType
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultMpeg4Gif) GetTitle() OptString {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultMpeg4Gif) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultMpeg4Gif) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultMpeg4Gif) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultMpeg4Gif) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultMpeg4Gif) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultMpeg4Gif) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultMpeg4Gif) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultMpeg4Gif) SetID(val string) {
	s.ID = val
}

// SetMpeg4URL sets the value of Mpeg4URL.
func (s *InlineQueryResultMpeg4Gif) SetMpeg4URL(val string) {
	s.Mpeg4URL = val
}

// SetMpeg4Width sets the value of Mpeg4Width.
func (s *InlineQueryResultMpeg4Gif) SetMpeg4Width(val OptInt) {
	s.Mpeg4Width = val
}

// SetMpeg4Height sets the value of Mpeg4Height.
func (s *InlineQueryResultMpeg4Gif) SetMpeg4Height(val OptInt) {
	s.Mpeg4Height = val
}

// SetMpeg4Duration sets the value of Mpeg4Duration.
func (s *InlineQueryResultMpeg4Gif) SetMpeg4Duration(val OptInt) {
	s.Mpeg4Duration = val
}

// SetThumbnailURL sets the value of ThumbnailURL.
func (s *InlineQueryResultMpeg4Gif) SetThumbnailURL(val string) {
	s.ThumbnailURL = val
}

// SetThumbnailMimeType sets the value of ThumbnailMimeType.
func (s *InlineQueryResultMpeg4Gif) SetThumbnailMimeType(val OptString) {
	s.ThumbnailMimeType = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultMpeg4Gif) SetTitle(val OptString) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultMpeg4Gif) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultMpeg4Gif) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultMpeg4Gif) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultMpeg4Gif) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultMpeg4Gif) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultMpeg4Gif) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a photo. By default, this photo will be sent by the user with optional
// caption. Alternatively, you can use _input_message_content_ to send a message with the specified
// content instead of the photo.
// Ref: #/components/schemas/InlineQueryResultPhoto
type InlineQueryResultPhoto struct {
	// Type of the result, must be _photo_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL of the photo. Photo must be in **JPEG** format. Photo size must not exceed 5MB.
	PhotoURL string `json:"photo_url"`
	// URL of the thumbnail for the photo.
	ThumbnailURL string `json:"thumbnail_url"`
	// _Optional_. Width of the photo.
	PhotoWidth OptInt `json:"photo_width"`
	// _Optional_. Height of the photo.
	PhotoHeight OptInt `json:"photo_height"`
	// _Optional_. Title for the result.
	Title OptString `json:"title"`
	// _Optional_. Short description of the result.
	Description OptString `json:"description"`
	// _Optional_. Caption of the photo to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the photo caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool                 `json:"show_caption_above_media"`
	ReplyMarkup           OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent   OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultPhoto) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultPhoto) GetID() string {
	return s.ID
}

// GetPhotoURL returns the value of PhotoURL.
func (s *InlineQueryResultPhoto) GetPhotoURL() string {
	return s.PhotoURL
}

// GetThumbnailURL returns the value of ThumbnailURL.
func (s *InlineQueryResultPhoto) GetThumbnailURL() string {
	return s.ThumbnailURL
}

// GetPhotoWidth returns the value of PhotoWidth.
func (s *InlineQueryResultPhoto) GetPhotoWidth() OptInt {
	return s.PhotoWidth
}

// GetPhotoHeight returns the value of PhotoHeight.
func (s *InlineQueryResultPhoto) GetPhotoHeight() OptInt {
	return s.PhotoHeight
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultPhoto) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *InlineQueryResultPhoto) GetDescription() OptString {
	return s.Description
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultPhoto) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultPhoto) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultPhoto) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultPhoto) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultPhoto) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultPhoto) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultPhoto) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultPhoto) SetID(val string) {
	s.ID = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *InlineQueryResultPhoto) SetPhotoURL(val string) {
	s.PhotoURL = val
}

// SetThumbnailURL sets the value of ThumbnailURL.
func (s *InlineQueryResultPhoto) SetThumbnailURL(val string) {
	s.ThumbnailURL = val
}

// SetPhotoWidth sets the value of PhotoWidth.
func (s *InlineQueryResultPhoto) SetPhotoWidth(val OptInt) {
	s.PhotoWidth = val
}

// SetPhotoHeight sets the value of PhotoHeight.
func (s *InlineQueryResultPhoto) SetPhotoHeight(val OptInt) {
	s.PhotoHeight = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultPhoto) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultPhoto) SetDescription(val OptString) {
	s.Description = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultPhoto) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultPhoto) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultPhoto) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultPhoto) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultPhoto) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultPhoto) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use
// _input_message_content_ to send a message with the specified content instead of the venue.
// Ref: #/components/schemas/InlineQueryResultVenue
type InlineQueryResultVenue struct {
	// Type of the result, must be _venue_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 Bytes.
	ID string `json:"id"`
	// Latitude of the venue location in degrees.
	Latitude float64 `json:"latitude"`
	// Longitude of the venue location in degrees.
	Longitude float64 `json:"longitude"`
	// Title of the venue.
	Title string `json:"title"`
	// Address of the venue.
	Address string `json:"address"`
	// _Optional_. Foursquare identifier of the venue if known.
	FoursquareID OptString `json:"foursquare_id"`
	// _Optional_. Foursquare type of the venue, if known. (For example, `arts_entertainment/default`,
	// `arts_entertainment/aquarium` or `food/icecream`.).
	FoursquareType OptString `json:"foursquare_type"`
	// _Optional_. Google Places identifier of the venue.
	GooglePlaceID OptString `json:"google_place_id"`
	// _Optional_. Google Places type of the venue. (See [supported types](https://developers.google.
	// com/places/web-service/supported_types).).
	GooglePlaceType     OptString               `json:"google_place_type"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
	// _Optional_. URL of the thumbnail for the result.
	ThumbnailURL OptString `json:"thumbnail_url"`
	// _Optional_. Thumbnail width.
	ThumbnailWidth OptInt `json:"thumbnail_width"`
	// _Optional_. Thumbnail height.
	ThumbnailHeight OptInt `json:"thumbnail_height"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultVenue) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultVenue) GetID() string {
	return s.ID
}

// GetLatitude returns the value of Latitude.
func (s *InlineQueryResultVenue) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *InlineQueryResultVenue) GetLongitude() float64 {
	return s.Longitude
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultVenue) GetTitle() string {
	return s.Title
}

// GetAddress returns the value of Address.
func (s *InlineQueryResultVenue) GetAddress() string {
	return s.Address
}

// GetFoursquareID returns the value of FoursquareID.
func (s *InlineQueryResultVenue) GetFoursquareID() OptString {
	return s.FoursquareID
}

// GetFoursquareType returns the value of FoursquareType.
func (s *InlineQueryResultVenue) GetFoursquareType() OptString {
	return s.FoursquareType
}

// GetGooglePlaceID returns the value of GooglePlaceID.
func (s *InlineQueryResultVenue) GetGooglePlaceID() OptString {
	return s.GooglePlaceID
}

// GetGooglePlaceType returns the value of GooglePlaceType.
func (s *InlineQueryResultVenue) GetGooglePlaceType() OptString {
	return s.GooglePlaceType
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultVenue) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultVenue) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// GetThumbnailURL returns the value of ThumbnailURL.
func (s *InlineQueryResultVenue) GetThumbnailURL() OptString {
	return s.ThumbnailURL
}

// GetThumbnailWidth returns the value of ThumbnailWidth.
func (s *InlineQueryResultVenue) GetThumbnailWidth() OptInt {
	return s.ThumbnailWidth
}

// GetThumbnailHeight returns the value of ThumbnailHeight.
func (s *InlineQueryResultVenue) GetThumbnailHeight() OptInt {
	return s.ThumbnailHeight
}

// SetType sets the value of Type.
func (s *InlineQueryResultVenue) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultVenue) SetID(val string) {
	s.ID = val
}

// SetLatitude sets the value of Latitude.
func (s *InlineQueryResultVenue) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *InlineQueryResultVenue) SetLongitude(val float64) {
	s.Longitude = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultVenue) SetTitle(val string) {
	s.Title = val
}

// SetAddress sets the value of Address.
func (s *InlineQueryResultVenue) SetAddress(val string) {
	s.Address = val
}

// SetFoursquareID sets the value of FoursquareID.
func (s *InlineQueryResultVenue) SetFoursquareID(val OptString) {
	s.FoursquareID = val
}

// SetFoursquareType sets the value of FoursquareType.
func (s *InlineQueryResultVenue) SetFoursquareType(val OptString) {
	s.FoursquareType = val
}

// SetGooglePlaceID sets the value of GooglePlaceID.
func (s *InlineQueryResultVenue) SetGooglePlaceID(val OptString) {
	s.GooglePlaceID = val
}

// SetGooglePlaceType sets the value of GooglePlaceType.
func (s *InlineQueryResultVenue) SetGooglePlaceType(val OptString) {
	s.GooglePlaceType = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultVenue) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultVenue) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// SetThumbnailURL sets the value of ThumbnailURL.
func (s *InlineQueryResultVenue) SetThumbnailURL(val OptString) {
	s.ThumbnailURL = val
}

// SetThumbnailWidth sets the value of ThumbnailWidth.
func (s *InlineQueryResultVenue) SetThumbnailWidth(val OptInt) {
	s.ThumbnailWidth = val
}

// SetThumbnailHeight sets the value of ThumbnailHeight.
func (s *InlineQueryResultVenue) SetThumbnailHeight(val OptInt) {
	s.ThumbnailHeight = val
}

// Represents a link to a page containing an embedded video player or a video file. By default, this
// video file will be sent by the user with an optional caption. Alternatively, you can use
// _input_message_content_ to send a message with the specified content instead of the video.
// Ref: #/components/schemas/InlineQueryResultVideo
type InlineQueryResultVideo struct {
	// Type of the result, must be _video_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the embedded video player or video file.
	VideoURL string `json:"video_url"`
	// MIME type of the content of the video URL, `text/html` or `video/mp4`.
	MimeType string `json:"mime_type"`
	// URL of the thumbnail (JPEG only) for the video.
	ThumbnailURL string `json:"thumbnail_url"`
	// Title for the result.
	Title string `json:"title"`
	// _Optional_. Caption of the video to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the video caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool `json:"show_caption_above_media"`
	// _Optional_. Video width.
	VideoWidth OptInt `json:"video_width"`
	// _Optional_. Video height.
	VideoHeight OptInt `json:"video_height"`
	// _Optional_. Video duration in seconds.
	VideoDuration OptInt `json:"video_duration"`
	// _Optional_. Short description of the result.
	Description         OptString               `json:"description"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultVideo) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultVideo) GetID() string {
	return s.ID
}

// GetVideoURL returns the value of VideoURL.
func (s *InlineQueryResultVideo) GetVideoURL() string {
	return s.VideoURL
}

// GetMimeType returns the value of MimeType.
func (s *InlineQueryResultVideo) GetMimeType() string {
	return s.MimeType
}

// GetThumbnailURL returns the value of ThumbnailURL.
func (s *InlineQueryResultVideo) GetThumbnailURL() string {
	return s.ThumbnailURL
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultVideo) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultVideo) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultVideo) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultVideo) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultVideo) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetVideoWidth returns the value of VideoWidth.
func (s *InlineQueryResultVideo) GetVideoWidth() OptInt {
	return s.VideoWidth
}

// GetVideoHeight returns the value of VideoHeight.
func (s *InlineQueryResultVideo) GetVideoHeight() OptInt {
	return s.VideoHeight
}

// GetVideoDuration returns the value of VideoDuration.
func (s *InlineQueryResultVideo) GetVideoDuration() OptInt {
	return s.VideoDuration
}

// GetDescription returns the value of Description.
func (s *InlineQueryResultVideo) GetDescription() OptString {
	return s.Description
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultVideo) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultVideo) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultVideo) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultVideo) SetID(val string) {
	s.ID = val
}

// SetVideoURL sets the value of VideoURL.
func (s *InlineQueryResultVideo) SetVideoURL(val string) {
	s.VideoURL = val
}

// SetMimeType sets the value of MimeType.
func (s *InlineQueryResultVideo) SetMimeType(val string) {
	s.MimeType = val
}

// SetThumbnailURL sets the value of ThumbnailURL.
func (s *InlineQueryResultVideo) SetThumbnailURL(val string) {
	s.ThumbnailURL = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultVideo) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultVideo) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultVideo) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultVideo) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InlineQueryResultVideo) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetVideoWidth sets the value of VideoWidth.
func (s *InlineQueryResultVideo) SetVideoWidth(val OptInt) {
	s.VideoWidth = val
}

// SetVideoHeight sets the value of VideoHeight.
func (s *InlineQueryResultVideo) SetVideoHeight(val OptInt) {
	s.VideoHeight = val
}

// SetVideoDuration sets the value of VideoDuration.
func (s *InlineQueryResultVideo) SetVideoDuration(val OptInt) {
	s.VideoDuration = val
}

// SetDescription sets the value of Description.
func (s *InlineQueryResultVideo) SetDescription(val OptString) {
	s.Description = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultVideo) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultVideo) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this
// voice recording will be sent by the user. Alternatively, you can use _input_message_content_ to
// send a message with the specified content instead of the the voice message.
// Ref: #/components/schemas/InlineQueryResultVoice
type InlineQueryResultVoice struct {
	// Type of the result, must be _voice_.
	Type string `json:"type"`
	// Unique identifier for this result, 1-64 bytes.
	ID string `json:"id"`
	// A valid URL for the voice recording.
	VoiceURL string `json:"voice_url"`
	// Recording title.
	Title string `json:"title"`
	// _Optional_. Caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the voice message caption. See [formatting
	// options](https://core.telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Recording duration in seconds.
	VoiceDuration       OptInt                  `json:"voice_duration"`
	ReplyMarkup         OptInlineKeyboardMarkup `json:"reply_markup"`
	InputMessageContent OptInputMessageContent  `json:"input_message_content"`
}

// GetType returns the value of Type.
func (s *InlineQueryResultVoice) GetType() string {
	return s.Type
}

// GetID returns the value of ID.
func (s *InlineQueryResultVoice) GetID() string {
	return s.ID
}

// GetVoiceURL returns the value of VoiceURL.
func (s *InlineQueryResultVoice) GetVoiceURL() string {
	return s.VoiceURL
}

// GetTitle returns the value of Title.
func (s *InlineQueryResultVoice) GetTitle() string {
	return s.Title
}

// GetCaption returns the value of Caption.
func (s *InlineQueryResultVoice) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InlineQueryResultVoice) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InlineQueryResultVoice) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetVoiceDuration returns the value of VoiceDuration.
func (s *InlineQueryResultVoice) GetVoiceDuration() OptInt {
	return s.VoiceDuration
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *InlineQueryResultVoice) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetInputMessageContent returns the value of InputMessageContent.
func (s *InlineQueryResultVoice) GetInputMessageContent() OptInputMessageContent {
	return s.InputMessageContent
}

// SetType sets the value of Type.
func (s *InlineQueryResultVoice) SetType(val string) {
	s.Type = val
}

// SetID sets the value of ID.
func (s *InlineQueryResultVoice) SetID(val string) {
	s.ID = val
}

// SetVoiceURL sets the value of VoiceURL.
func (s *InlineQueryResultVoice) SetVoiceURL(val string) {
	s.VoiceURL = val
}

// SetTitle sets the value of Title.
func (s *InlineQueryResultVoice) SetTitle(val string) {
	s.Title = val
}

// SetCaption sets the value of Caption.
func (s *InlineQueryResultVoice) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InlineQueryResultVoice) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InlineQueryResultVoice) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetVoiceDuration sets the value of VoiceDuration.
func (s *InlineQueryResultVoice) SetVoiceDuration(val OptInt) {
	s.VoiceDuration = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *InlineQueryResultVoice) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetInputMessageContent sets the value of InputMessageContent.
func (s *InlineQueryResultVoice) SetInputMessageContent(val OptInputMessageContent) {
	s.InputMessageContent = val
}

// This object represents a button to be shown above inline query results. You **must** use exactly
// one of the optional fields.
// Ref: #/components/schemas/InlineQueryResultsButton
type InlineQueryResultsButton struct {
	// Label text on the button.
	Text   string        `json:"text"`
	WebApp OptWebAppInfo `json:"web_app"`
	// _Optional_. [Deep-linking](https://core.telegram.org/bots/features#deep-linking) parameter for the
	// /start message sent to the bot when a user presses the button. 1-64 characters, only `A-Z`, `a-z`,
	// `0-9`, `_` and `-` are allowed._Example:_ An inline bot that sends YouTube videos can ask the user
	// to connect the bot to their YouTube account to adapt search results accordingly. To do this, it
	// displays a 'Connect your YouTube account' button above the results, or even before showing any.
	// The user presses the button, switches to a private chat with the bot and, in doing so, passes a
	// start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a
	// [_switch_inline_](https://core.telegram.org/bots/api#inlinekeyboardmarkup) button so that the user
	// can easily return to the chat where they wanted to use the bot's inline capabilities.
	StartParameter OptString `json:"start_parameter"`
}

// GetText returns the value of Text.
func (s *InlineQueryResultsButton) GetText() string {
	return s.Text
}

// GetWebApp returns the value of WebApp.
func (s *InlineQueryResultsButton) GetWebApp() OptWebAppInfo {
	return s.WebApp
}

// GetStartParameter returns the value of StartParameter.
func (s *InlineQueryResultsButton) GetStartParameter() OptString {
	return s.StartParameter
}

// SetText sets the value of Text.
func (s *InlineQueryResultsButton) SetText(val string) {
	s.Text = val
}

// SetWebApp sets the value of WebApp.
func (s *InlineQueryResultsButton) SetWebApp(val OptWebAppInfo) {
	s.WebApp = val
}

// SetStartParameter sets the value of StartParameter.
func (s *InlineQueryResultsButton) SetStartParameter(val OptString) {
	s.StartParameter = val
}

// Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of a contact
// message to be sent as the result of an inline query.
// Ref: #/components/schemas/InputContactMessageContent
type InputContactMessageContent struct {
	// Contact's phone number.
	PhoneNumber string `json:"phone_number"`
	// Contact's first name.
	FirstName string `json:"first_name"`
	// _Optional_. Contact's last name.
	LastName OptString `json:"last_name"`
	// _Optional_. Additional data about the contact in the form of a [vCard](https://en.wikipedia.
	// org/wiki/VCard), 0-2048 bytes.
	Vcard OptString `json:"vcard"`
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *InputContactMessageContent) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetFirstName returns the value of FirstName.
func (s *InputContactMessageContent) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *InputContactMessageContent) GetLastName() OptString {
	return s.LastName
}

// GetVcard returns the value of Vcard.
func (s *InputContactMessageContent) GetVcard() OptString {
	return s.Vcard
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *InputContactMessageContent) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetFirstName sets the value of FirstName.
func (s *InputContactMessageContent) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *InputContactMessageContent) SetLastName(val OptString) {
	s.LastName = val
}

// SetVcard sets the value of Vcard.
func (s *InputContactMessageContent) SetVcard(val OptString) {
	s.Vcard = val
}

// Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of an invoice
// message to be sent as the result of an inline query.
// Ref: #/components/schemas/InputInvoiceMessageContent
type InputInvoiceMessageContent struct {
	// Product name, 1-32 characters.
	Title string `json:"title"`
	// Product description, 1-255 characters.
	Description string `json:"description"`
	// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your
	// internal processes.
	Payload string `json:"payload"`
	// _Optional_. Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an
	// empty string for payments in [Telegram Stars](https://t.me/BotNews/90).
	ProviderToken OptString `json:"provider_token"`
	// Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.
	// org/bots/payments#supported-currencies). Pass `XTR` for payments in [Telegram Stars](https://t.
	// me/BotNews/90).
	Currency string `json:"currency"`
	// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery
	// cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram
	// Stars](https://t.me/BotNews/90).
	Prices []LabeledPrice `json:"prices"`
	// _Optional_. The maximum accepted amount for tips in the _smallest units_ of the currency (integer,
	// **not** float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`.
	// See the _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.
	// json), it shows the number of digits past the decimal point for each currency (2 for the majority
	// of currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.
	// me/BotNews/90).
	MaxTipAmount OptInt `json:"max_tip_amount"`
	// _Optional_. A JSON-serialized array of suggested amounts of tip in the _smallest units_ of the
	// currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The
	// suggested tip amounts must be positive, passed in a strictly increased order and must not exceed
	// _max_tip_amount_.
	SuggestedTipAmounts []int64 `json:"suggested_tip_amounts"`
	// _Optional_. A JSON-serialized object for data about the invoice, which will be shared with the
	// payment provider. A detailed description of the required fields should be provided by the payment
	// provider.
	ProviderData OptString `json:"provider_data"`
	// _Optional_. URL of the product photo for the invoice. Can be a photo of the goods or a marketing
	// image for a service.
	PhotoURL OptString `json:"photo_url"`
	// _Optional_. Photo size in bytes.
	PhotoSize OptInt `json:"photo_size"`
	// _Optional_. Photo width.
	PhotoWidth OptInt `json:"photo_width"`
	// _Optional_. Photo height.
	PhotoHeight OptInt `json:"photo_height"`
	// _Optional_. Pass _True_ if you require the user's full name to complete the order. Ignored for
	// payments in [Telegram Stars](https://t.me/BotNews/90).
	NeedName OptBool `json:"need_name"`
	// _Optional_. Pass _True_ if you require the user's phone number to complete the order. Ignored for
	// payments in [Telegram Stars](https://t.me/BotNews/90).
	NeedPhoneNumber OptBool `json:"need_phone_number"`
	// _Optional_. Pass _True_ if you require the user's email address to complete the order. Ignored for
	// payments in [Telegram Stars](https://t.me/BotNews/90).
	NeedEmail OptBool `json:"need_email"`
	// _Optional_. Pass _True_ if you require the user's shipping address to complete the order. Ignored
	// for payments in [Telegram Stars](https://t.me/BotNews/90).
	NeedShippingAddress OptBool `json:"need_shipping_address"`
	// _Optional_. Pass _True_ if the user's phone number should be sent to the provider. Ignored for
	// payments in [Telegram Stars](https://t.me/BotNews/90).
	SendPhoneNumberToProvider OptBool `json:"send_phone_number_to_provider"`
	// _Optional_. Pass _True_ if the user's email address should be sent to the provider. Ignored for
	// payments in [Telegram Stars](https://t.me/BotNews/90).
	SendEmailToProvider OptBool `json:"send_email_to_provider"`
	// _Optional_. Pass _True_ if the final price depends on the shipping method. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	IsFlexible OptBool `json:"is_flexible"`
}

// GetTitle returns the value of Title.
func (s *InputInvoiceMessageContent) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *InputInvoiceMessageContent) GetDescription() string {
	return s.Description
}

// GetPayload returns the value of Payload.
func (s *InputInvoiceMessageContent) GetPayload() string {
	return s.Payload
}

// GetProviderToken returns the value of ProviderToken.
func (s *InputInvoiceMessageContent) GetProviderToken() OptString {
	return s.ProviderToken
}

// GetCurrency returns the value of Currency.
func (s *InputInvoiceMessageContent) GetCurrency() string {
	return s.Currency
}

// GetPrices returns the value of Prices.
func (s *InputInvoiceMessageContent) GetPrices() []LabeledPrice {
	return s.Prices
}

// GetMaxTipAmount returns the value of MaxTipAmount.
func (s *InputInvoiceMessageContent) GetMaxTipAmount() OptInt {
	return s.MaxTipAmount
}

// GetSuggestedTipAmounts returns the value of SuggestedTipAmounts.
func (s *InputInvoiceMessageContent) GetSuggestedTipAmounts() []int64 {
	return s.SuggestedTipAmounts
}

// GetProviderData returns the value of ProviderData.
func (s *InputInvoiceMessageContent) GetProviderData() OptString {
	return s.ProviderData
}

// GetPhotoURL returns the value of PhotoURL.
func (s *InputInvoiceMessageContent) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetPhotoSize returns the value of PhotoSize.
func (s *InputInvoiceMessageContent) GetPhotoSize() OptInt {
	return s.PhotoSize
}

// GetPhotoWidth returns the value of PhotoWidth.
func (s *InputInvoiceMessageContent) GetPhotoWidth() OptInt {
	return s.PhotoWidth
}

// GetPhotoHeight returns the value of PhotoHeight.
func (s *InputInvoiceMessageContent) GetPhotoHeight() OptInt {
	return s.PhotoHeight
}

// GetNeedName returns the value of NeedName.
func (s *InputInvoiceMessageContent) GetNeedName() OptBool {
	return s.NeedName
}

// GetNeedPhoneNumber returns the value of NeedPhoneNumber.
func (s *InputInvoiceMessageContent) GetNeedPhoneNumber() OptBool {
	return s.NeedPhoneNumber
}

// GetNeedEmail returns the value of NeedEmail.
func (s *InputInvoiceMessageContent) GetNeedEmail() OptBool {
	return s.NeedEmail
}

// GetNeedShippingAddress returns the value of NeedShippingAddress.
func (s *InputInvoiceMessageContent) GetNeedShippingAddress() OptBool {
	return s.NeedShippingAddress
}

// GetSendPhoneNumberToProvider returns the value of SendPhoneNumberToProvider.
func (s *InputInvoiceMessageContent) GetSendPhoneNumberToProvider() OptBool {
	return s.SendPhoneNumberToProvider
}

// GetSendEmailToProvider returns the value of SendEmailToProvider.
func (s *InputInvoiceMessageContent) GetSendEmailToProvider() OptBool {
	return s.SendEmailToProvider
}

// GetIsFlexible returns the value of IsFlexible.
func (s *InputInvoiceMessageContent) GetIsFlexible() OptBool {
	return s.IsFlexible
}

// SetTitle sets the value of Title.
func (s *InputInvoiceMessageContent) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *InputInvoiceMessageContent) SetDescription(val string) {
	s.Description = val
}

// SetPayload sets the value of Payload.
func (s *InputInvoiceMessageContent) SetPayload(val string) {
	s.Payload = val
}

// SetProviderToken sets the value of ProviderToken.
func (s *InputInvoiceMessageContent) SetProviderToken(val OptString) {
	s.ProviderToken = val
}

// SetCurrency sets the value of Currency.
func (s *InputInvoiceMessageContent) SetCurrency(val string) {
	s.Currency = val
}

// SetPrices sets the value of Prices.
func (s *InputInvoiceMessageContent) SetPrices(val []LabeledPrice) {
	s.Prices = val
}

// SetMaxTipAmount sets the value of MaxTipAmount.
func (s *InputInvoiceMessageContent) SetMaxTipAmount(val OptInt) {
	s.MaxTipAmount = val
}

// SetSuggestedTipAmounts sets the value of SuggestedTipAmounts.
func (s *InputInvoiceMessageContent) SetSuggestedTipAmounts(val []int64) {
	s.SuggestedTipAmounts = val
}

// SetProviderData sets the value of ProviderData.
func (s *InputInvoiceMessageContent) SetProviderData(val OptString) {
	s.ProviderData = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *InputInvoiceMessageContent) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetPhotoSize sets the value of PhotoSize.
func (s *InputInvoiceMessageContent) SetPhotoSize(val OptInt) {
	s.PhotoSize = val
}

// SetPhotoWidth sets the value of PhotoWidth.
func (s *InputInvoiceMessageContent) SetPhotoWidth(val OptInt) {
	s.PhotoWidth = val
}

// SetPhotoHeight sets the value of PhotoHeight.
func (s *InputInvoiceMessageContent) SetPhotoHeight(val OptInt) {
	s.PhotoHeight = val
}

// SetNeedName sets the value of NeedName.
func (s *InputInvoiceMessageContent) SetNeedName(val OptBool) {
	s.NeedName = val
}

// SetNeedPhoneNumber sets the value of NeedPhoneNumber.
func (s *InputInvoiceMessageContent) SetNeedPhoneNumber(val OptBool) {
	s.NeedPhoneNumber = val
}

// SetNeedEmail sets the value of NeedEmail.
func (s *InputInvoiceMessageContent) SetNeedEmail(val OptBool) {
	s.NeedEmail = val
}

// SetNeedShippingAddress sets the value of NeedShippingAddress.
func (s *InputInvoiceMessageContent) SetNeedShippingAddress(val OptBool) {
	s.NeedShippingAddress = val
}

// SetSendPhoneNumberToProvider sets the value of SendPhoneNumberToProvider.
func (s *InputInvoiceMessageContent) SetSendPhoneNumberToProvider(val OptBool) {
	s.SendPhoneNumberToProvider = val
}

// SetSendEmailToProvider sets the value of SendEmailToProvider.
func (s *InputInvoiceMessageContent) SetSendEmailToProvider(val OptBool) {
	s.SendEmailToProvider = val
}

// SetIsFlexible sets the value of IsFlexible.
func (s *InputInvoiceMessageContent) SetIsFlexible(val OptBool) {
	s.IsFlexible = val
}

// Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of a location
// message to be sent as the result of an inline query.
// Ref: #/components/schemas/InputLocationMessageContent
type InputLocationMessageContent struct {
	// Latitude of the location in degrees.
	Latitude float64 `json:"latitude"`
	// Longitude of the location in degrees.
	Longitude float64 `json:"longitude"`
	// _Optional_. The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy"`
	// _Optional_. Period in seconds during which the location can be updated, should be between 60 and
	// 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely.
	LivePeriod OptInt `json:"live_period"`
	// _Optional_. For live locations, a direction in which the user is moving, in degrees. Must be
	// between 1 and 360 if specified.
	Heading OptInt `json:"heading"`
	// _Optional_. For live locations, a maximum distance for proximity alerts about approaching another
	// chat member, in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius OptInt `json:"proximity_alert_radius"`
}

// GetLatitude returns the value of Latitude.
func (s *InputLocationMessageContent) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *InputLocationMessageContent) GetLongitude() float64 {
	return s.Longitude
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s *InputLocationMessageContent) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetLivePeriod returns the value of LivePeriod.
func (s *InputLocationMessageContent) GetLivePeriod() OptInt {
	return s.LivePeriod
}

// GetHeading returns the value of Heading.
func (s *InputLocationMessageContent) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s *InputLocationMessageContent) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// SetLatitude sets the value of Latitude.
func (s *InputLocationMessageContent) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *InputLocationMessageContent) SetLongitude(val float64) {
	s.Longitude = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *InputLocationMessageContent) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetLivePeriod sets the value of LivePeriod.
func (s *InputLocationMessageContent) SetLivePeriod(val OptInt) {
	s.LivePeriod = val
}

// SetHeading sets the value of Heading.
func (s *InputLocationMessageContent) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *InputLocationMessageContent) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// This object represents the content of a media message to be sent. It should be one of.
// Ref: #/components/schemas/InputMedia
// InputMedia represents sum type.
type InputMedia struct {
	Type                InputMediaType // switch on this field
	InputMediaAnimation InputMediaAnimation
	InputMediaDocument  InputMediaDocument
	InputMediaAudio     InputMediaAudio
	InputMediaPhoto     InputMediaPhoto
	InputMediaVideo     InputMediaVideo
}

// InputMediaType is oneOf type of InputMedia.
type InputMediaType string

// Possible values for InputMediaType.
const (
	InputMediaAnimationInputMedia InputMediaType = "animation"
	InputMediaDocumentInputMedia  InputMediaType = "document"
	InputMediaAudioInputMedia     InputMediaType = "audio"
	InputMediaPhotoInputMedia     InputMediaType = "photo"
	InputMediaVideoInputMedia     InputMediaType = "video"
)

// IsInputMediaAnimation reports whether InputMedia is InputMediaAnimation.
func (s InputMedia) IsInputMediaAnimation() bool { return s.Type == InputMediaAnimationInputMedia }

// IsInputMediaDocument reports whether InputMedia is InputMediaDocument.
func (s InputMedia) IsInputMediaDocument() bool { return s.Type == InputMediaDocumentInputMedia }

// IsInputMediaAudio reports whether InputMedia is InputMediaAudio.
func (s InputMedia) IsInputMediaAudio() bool { return s.Type == InputMediaAudioInputMedia }

// IsInputMediaPhoto reports whether InputMedia is InputMediaPhoto.
func (s InputMedia) IsInputMediaPhoto() bool { return s.Type == InputMediaPhotoInputMedia }

// IsInputMediaVideo reports whether InputMedia is InputMediaVideo.
func (s InputMedia) IsInputMediaVideo() bool { return s.Type == InputMediaVideoInputMedia }

// SetInputMediaAnimation sets InputMedia to InputMediaAnimation.
func (s *InputMedia) SetInputMediaAnimation(v InputMediaAnimation) {
	s.Type = InputMediaAnimationInputMedia
	s.InputMediaAnimation = v
}

// GetInputMediaAnimation returns InputMediaAnimation and true boolean if InputMedia is InputMediaAnimation.
func (s InputMedia) GetInputMediaAnimation() (v InputMediaAnimation, ok bool) {
	if !s.IsInputMediaAnimation() {
		return v, false
	}
	return s.InputMediaAnimation, true
}

// NewInputMediaAnimationInputMedia returns new InputMedia from InputMediaAnimation.
func NewInputMediaAnimationInputMedia(v InputMediaAnimation) InputMedia {
	var s InputMedia
	s.SetInputMediaAnimation(v)
	return s
}

// SetInputMediaDocument sets InputMedia to InputMediaDocument.
func (s *InputMedia) SetInputMediaDocument(v InputMediaDocument) {
	s.Type = InputMediaDocumentInputMedia
	s.InputMediaDocument = v
}

// GetInputMediaDocument returns InputMediaDocument and true boolean if InputMedia is InputMediaDocument.
func (s InputMedia) GetInputMediaDocument() (v InputMediaDocument, ok bool) {
	if !s.IsInputMediaDocument() {
		return v, false
	}
	return s.InputMediaDocument, true
}

// NewInputMediaDocumentInputMedia returns new InputMedia from InputMediaDocument.
func NewInputMediaDocumentInputMedia(v InputMediaDocument) InputMedia {
	var s InputMedia
	s.SetInputMediaDocument(v)
	return s
}

// SetInputMediaAudio sets InputMedia to InputMediaAudio.
func (s *InputMedia) SetInputMediaAudio(v InputMediaAudio) {
	s.Type = InputMediaAudioInputMedia
	s.InputMediaAudio = v
}

// GetInputMediaAudio returns InputMediaAudio and true boolean if InputMedia is InputMediaAudio.
func (s InputMedia) GetInputMediaAudio() (v InputMediaAudio, ok bool) {
	if !s.IsInputMediaAudio() {
		return v, false
	}
	return s.InputMediaAudio, true
}

// NewInputMediaAudioInputMedia returns new InputMedia from InputMediaAudio.
func NewInputMediaAudioInputMedia(v InputMediaAudio) InputMedia {
	var s InputMedia
	s.SetInputMediaAudio(v)
	return s
}

// SetInputMediaPhoto sets InputMedia to InputMediaPhoto.
func (s *InputMedia) SetInputMediaPhoto(v InputMediaPhoto) {
	s.Type = InputMediaPhotoInputMedia
	s.InputMediaPhoto = v
}

// GetInputMediaPhoto returns InputMediaPhoto and true boolean if InputMedia is InputMediaPhoto.
func (s InputMedia) GetInputMediaPhoto() (v InputMediaPhoto, ok bool) {
	if !s.IsInputMediaPhoto() {
		return v, false
	}
	return s.InputMediaPhoto, true
}

// NewInputMediaPhotoInputMedia returns new InputMedia from InputMediaPhoto.
func NewInputMediaPhotoInputMedia(v InputMediaPhoto) InputMedia {
	var s InputMedia
	s.SetInputMediaPhoto(v)
	return s
}

// SetInputMediaVideo sets InputMedia to InputMediaVideo.
func (s *InputMedia) SetInputMediaVideo(v InputMediaVideo) {
	s.Type = InputMediaVideoInputMedia
	s.InputMediaVideo = v
}

// GetInputMediaVideo returns InputMediaVideo and true boolean if InputMedia is InputMediaVideo.
func (s InputMedia) GetInputMediaVideo() (v InputMediaVideo, ok bool) {
	if !s.IsInputMediaVideo() {
		return v, false
	}
	return s.InputMediaVideo, true
}

// NewInputMediaVideoInputMedia returns new InputMedia from InputMediaVideo.
func NewInputMediaVideoInputMedia(v InputMediaVideo) InputMedia {
	var s InputMedia
	s.SetInputMediaVideo(v)
	return s
}

// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
// Ref: #/components/schemas/InputMediaAnimation
type InputMediaAnimation struct {
	// Type of the result, must be _animation_.
	Type string `json:"type"`
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// `attach://<file_attach_name>` to upload a new one using multipart/form-data under
	// <file_attach_name> name. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Media string `json:"media"`
	// _Optional_. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is
	// supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A
	// thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Thumbnail OptString `json:"thumbnail"`
	// _Optional_. Caption of the animation to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the animation caption. See [formatting
	// options](https://core.telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool `json:"show_caption_above_media"`
	// _Optional_. Animation width.
	Width OptInt `json:"width"`
	// _Optional_. Animation height.
	Height OptInt `json:"height"`
	// _Optional_. Animation duration in seconds.
	Duration OptInt `json:"duration"`
	// _Optional_. Pass _True_ if the animation needs to be covered with a spoiler animation.
	HasSpoiler OptBool `json:"has_spoiler"`
}

// GetType returns the value of Type.
func (s *InputMediaAnimation) GetType() string {
	return s.Type
}

// GetMedia returns the value of Media.
func (s *InputMediaAnimation) GetMedia() string {
	return s.Media
}

// GetThumbnail returns the value of Thumbnail.
func (s *InputMediaAnimation) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetCaption returns the value of Caption.
func (s *InputMediaAnimation) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InputMediaAnimation) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InputMediaAnimation) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InputMediaAnimation) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetWidth returns the value of Width.
func (s *InputMediaAnimation) GetWidth() OptInt {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *InputMediaAnimation) GetHeight() OptInt {
	return s.Height
}

// GetDuration returns the value of Duration.
func (s *InputMediaAnimation) GetDuration() OptInt {
	return s.Duration
}

// GetHasSpoiler returns the value of HasSpoiler.
func (s *InputMediaAnimation) GetHasSpoiler() OptBool {
	return s.HasSpoiler
}

// SetType sets the value of Type.
func (s *InputMediaAnimation) SetType(val string) {
	s.Type = val
}

// SetMedia sets the value of Media.
func (s *InputMediaAnimation) SetMedia(val string) {
	s.Media = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *InputMediaAnimation) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaAnimation) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaAnimation) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaAnimation) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InputMediaAnimation) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetWidth sets the value of Width.
func (s *InputMediaAnimation) SetWidth(val OptInt) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *InputMediaAnimation) SetHeight(val OptInt) {
	s.Height = val
}

// SetDuration sets the value of Duration.
func (s *InputMediaAnimation) SetDuration(val OptInt) {
	s.Duration = val
}

// SetHasSpoiler sets the value of HasSpoiler.
func (s *InputMediaAnimation) SetHasSpoiler(val OptBool) {
	s.HasSpoiler = val
}

// Represents an audio file to be treated as music to be sent.
// Ref: #/components/schemas/InputMediaAudio
type InputMediaAudio struct {
	// Type of the result, must be _audio_.
	Type string `json:"type"`
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// `attach://<file_attach_name>` to upload a new one using multipart/form-data under
	// <file_attach_name> name. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Media string `json:"media"`
	// _Optional_. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is
	// supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A
	// thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Thumbnail OptString `json:"thumbnail"`
	// _Optional_. Caption of the audio to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the audio caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Duration of the audio in seconds.
	Duration OptInt `json:"duration"`
	// _Optional_. Performer of the audio.
	Performer OptString `json:"performer"`
	// _Optional_. Title of the audio.
	Title OptString `json:"title"`
}

// GetType returns the value of Type.
func (s *InputMediaAudio) GetType() string {
	return s.Type
}

// GetMedia returns the value of Media.
func (s *InputMediaAudio) GetMedia() string {
	return s.Media
}

// GetThumbnail returns the value of Thumbnail.
func (s *InputMediaAudio) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetCaption returns the value of Caption.
func (s *InputMediaAudio) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InputMediaAudio) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InputMediaAudio) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDuration returns the value of Duration.
func (s *InputMediaAudio) GetDuration() OptInt {
	return s.Duration
}

// GetPerformer returns the value of Performer.
func (s *InputMediaAudio) GetPerformer() OptString {
	return s.Performer
}

// GetTitle returns the value of Title.
func (s *InputMediaAudio) GetTitle() OptString {
	return s.Title
}

// SetType sets the value of Type.
func (s *InputMediaAudio) SetType(val string) {
	s.Type = val
}

// SetMedia sets the value of Media.
func (s *InputMediaAudio) SetMedia(val string) {
	s.Media = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *InputMediaAudio) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaAudio) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaAudio) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaAudio) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDuration sets the value of Duration.
func (s *InputMediaAudio) SetDuration(val OptInt) {
	s.Duration = val
}

// SetPerformer sets the value of Performer.
func (s *InputMediaAudio) SetPerformer(val OptString) {
	s.Performer = val
}

// SetTitle sets the value of Title.
func (s *InputMediaAudio) SetTitle(val OptString) {
	s.Title = val
}

// Represents a general file to be sent.
// Ref: #/components/schemas/InputMediaDocument
type InputMediaDocument struct {
	// Type of the result, must be _document_.
	Type string `json:"type"`
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// `attach://<file_attach_name>` to upload a new one using multipart/form-data under
	// <file_attach_name> name. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Media string `json:"media"`
	// _Optional_. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is
	// supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A
	// thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Thumbnail OptString `json:"thumbnail"`
	// _Optional_. Caption of the document to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the document caption. See [formatting
	// options](https://core.telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Disables automatic server-side content type detection for files uploaded using
	// multipart/form-data. Always _True_, if the document is sent as part of an album.
	DisableContentTypeDetection OptBool `json:"disable_content_type_detection"`
}

// GetType returns the value of Type.
func (s *InputMediaDocument) GetType() string {
	return s.Type
}

// GetMedia returns the value of Media.
func (s *InputMediaDocument) GetMedia() string {
	return s.Media
}

// GetThumbnail returns the value of Thumbnail.
func (s *InputMediaDocument) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetCaption returns the value of Caption.
func (s *InputMediaDocument) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InputMediaDocument) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InputMediaDocument) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDisableContentTypeDetection returns the value of DisableContentTypeDetection.
func (s *InputMediaDocument) GetDisableContentTypeDetection() OptBool {
	return s.DisableContentTypeDetection
}

// SetType sets the value of Type.
func (s *InputMediaDocument) SetType(val string) {
	s.Type = val
}

// SetMedia sets the value of Media.
func (s *InputMediaDocument) SetMedia(val string) {
	s.Media = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *InputMediaDocument) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaDocument) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaDocument) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaDocument) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDisableContentTypeDetection sets the value of DisableContentTypeDetection.
func (s *InputMediaDocument) SetDisableContentTypeDetection(val OptBool) {
	s.DisableContentTypeDetection = val
}

// Represents a photo to be sent.
// Ref: #/components/schemas/InputMediaPhoto
type InputMediaPhoto struct {
	// Type of the result, must be _photo_.
	Type string `json:"type"`
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// `attach://<file_attach_name>` to upload a new one using multipart/form-data under
	// <file_attach_name> name. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Media string `json:"media"`
	// _Optional_. Caption of the photo to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the photo caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool `json:"show_caption_above_media"`
	// _Optional_. Pass _True_ if the photo needs to be covered with a spoiler animation.
	HasSpoiler OptBool `json:"has_spoiler"`
}

// GetType returns the value of Type.
func (s *InputMediaPhoto) GetType() string {
	return s.Type
}

// GetMedia returns the value of Media.
func (s *InputMediaPhoto) GetMedia() string {
	return s.Media
}

// GetCaption returns the value of Caption.
func (s *InputMediaPhoto) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InputMediaPhoto) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InputMediaPhoto) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InputMediaPhoto) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetHasSpoiler returns the value of HasSpoiler.
func (s *InputMediaPhoto) GetHasSpoiler() OptBool {
	return s.HasSpoiler
}

// SetType sets the value of Type.
func (s *InputMediaPhoto) SetType(val string) {
	s.Type = val
}

// SetMedia sets the value of Media.
func (s *InputMediaPhoto) SetMedia(val string) {
	s.Media = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaPhoto) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaPhoto) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaPhoto) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InputMediaPhoto) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetHasSpoiler sets the value of HasSpoiler.
func (s *InputMediaPhoto) SetHasSpoiler(val OptBool) {
	s.HasSpoiler = val
}

// Represents a video to be sent.
// Ref: #/components/schemas/InputMediaVideo
type InputMediaVideo struct {
	// Type of the result, must be _video_.
	Type string `json:"type"`
	// File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
	// pass an HTTP URL for Telegram to get a file from the Internet, or pass
	// `attach://<file_attach_name>` to upload a new one using multipart/form-data under
	// <file_attach_name> name. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Media string `json:"media"`
	// _Optional_. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is
	// supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A
	// thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Thumbnail OptString `json:"thumbnail"`
	// _Optional_. Caption of the video to be sent, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// _Optional_. Mode for parsing entities in the video caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in the caption, which can be specified instead of
	// _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool `json:"show_caption_above_media"`
	// _Optional_. Video width.
	Width OptInt `json:"width"`
	// _Optional_. Video height.
	Height OptInt `json:"height"`
	// _Optional_. Video duration in seconds.
	Duration OptInt `json:"duration"`
	// _Optional_. Pass _True_ if the uploaded video is suitable for streaming.
	SupportsStreaming OptBool `json:"supports_streaming"`
	// _Optional_. Pass _True_ if the video needs to be covered with a spoiler animation.
	HasSpoiler OptBool `json:"has_spoiler"`
}

// GetType returns the value of Type.
func (s *InputMediaVideo) GetType() string {
	return s.Type
}

// GetMedia returns the value of Media.
func (s *InputMediaVideo) GetMedia() string {
	return s.Media
}

// GetThumbnail returns the value of Thumbnail.
func (s *InputMediaVideo) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetCaption returns the value of Caption.
func (s *InputMediaVideo) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *InputMediaVideo) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *InputMediaVideo) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *InputMediaVideo) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetWidth returns the value of Width.
func (s *InputMediaVideo) GetWidth() OptInt {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *InputMediaVideo) GetHeight() OptInt {
	return s.Height
}

// GetDuration returns the value of Duration.
func (s *InputMediaVideo) GetDuration() OptInt {
	return s.Duration
}

// GetSupportsStreaming returns the value of SupportsStreaming.
func (s *InputMediaVideo) GetSupportsStreaming() OptBool {
	return s.SupportsStreaming
}

// GetHasSpoiler returns the value of HasSpoiler.
func (s *InputMediaVideo) GetHasSpoiler() OptBool {
	return s.HasSpoiler
}

// SetType sets the value of Type.
func (s *InputMediaVideo) SetType(val string) {
	s.Type = val
}

// SetMedia sets the value of Media.
func (s *InputMediaVideo) SetMedia(val string) {
	s.Media = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *InputMediaVideo) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetCaption sets the value of Caption.
func (s *InputMediaVideo) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputMediaVideo) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *InputMediaVideo) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *InputMediaVideo) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetWidth sets the value of Width.
func (s *InputMediaVideo) SetWidth(val OptInt) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *InputMediaVideo) SetHeight(val OptInt) {
	s.Height = val
}

// SetDuration sets the value of Duration.
func (s *InputMediaVideo) SetDuration(val OptInt) {
	s.Duration = val
}

// SetSupportsStreaming sets the value of SupportsStreaming.
func (s *InputMediaVideo) SetSupportsStreaming(val OptBool) {
	s.SupportsStreaming = val
}

// SetHasSpoiler sets the value of HasSpoiler.
func (s *InputMediaVideo) SetHasSpoiler(val OptBool) {
	s.HasSpoiler = val
}

// This object represents the content of a message to be sent as a result of an inline query.
// Telegram clients currently support the following 5 types:.
// Ref: #/components/schemas/InputMessageContent
// InputMessageContent represents sum type.
type InputMessageContent struct {
	Type                        InputMessageContentType // switch on this field
	InputTextMessageContent     InputTextMessageContent
	InputLocationMessageContent InputLocationMessageContent
	InputVenueMessageContent    InputVenueMessageContent
	InputContactMessageContent  InputContactMessageContent
	InputInvoiceMessageContent  InputInvoiceMessageContent
}

// InputMessageContentType is oneOf type of InputMessageContent.
type InputMessageContentType string

// Possible values for InputMessageContentType.
const (
	InputTextMessageContentInputMessageContent     InputMessageContentType = "InputTextMessageContent"
	InputLocationMessageContentInputMessageContent InputMessageContentType = "InputLocationMessageContent"
	InputVenueMessageContentInputMessageContent    InputMessageContentType = "InputVenueMessageContent"
	InputContactMessageContentInputMessageContent  InputMessageContentType = "InputContactMessageContent"
	InputInvoiceMessageContentInputMessageContent  InputMessageContentType = "InputInvoiceMessageContent"
)

// IsInputTextMessageContent reports whether InputMessageContent is InputTextMessageContent.
func (s InputMessageContent) IsInputTextMessageContent() bool {
	return s.Type == InputTextMessageContentInputMessageContent
}

// IsInputLocationMessageContent reports whether InputMessageContent is InputLocationMessageContent.
func (s InputMessageContent) IsInputLocationMessageContent() bool {
	return s.Type == InputLocationMessageContentInputMessageContent
}

// IsInputVenueMessageContent reports whether InputMessageContent is InputVenueMessageContent.
func (s InputMessageContent) IsInputVenueMessageContent() bool {
	return s.Type == InputVenueMessageContentInputMessageContent
}

// IsInputContactMessageContent reports whether InputMessageContent is InputContactMessageContent.
func (s InputMessageContent) IsInputContactMessageContent() bool {
	return s.Type == InputContactMessageContentInputMessageContent
}

// IsInputInvoiceMessageContent reports whether InputMessageContent is InputInvoiceMessageContent.
func (s InputMessageContent) IsInputInvoiceMessageContent() bool {
	return s.Type == InputInvoiceMessageContentInputMessageContent
}

// SetInputTextMessageContent sets InputMessageContent to InputTextMessageContent.
func (s *InputMessageContent) SetInputTextMessageContent(v InputTextMessageContent) {
	s.Type = InputTextMessageContentInputMessageContent
	s.InputTextMessageContent = v
}

// GetInputTextMessageContent returns InputTextMessageContent and true boolean if InputMessageContent is InputTextMessageContent.
func (s InputMessageContent) GetInputTextMessageContent() (v InputTextMessageContent, ok bool) {
	if !s.IsInputTextMessageContent() {
		return v, false
	}
	return s.InputTextMessageContent, true
}

// NewInputTextMessageContentInputMessageContent returns new InputMessageContent from InputTextMessageContent.
func NewInputTextMessageContentInputMessageContent(v InputTextMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputTextMessageContent(v)
	return s
}

// SetInputLocationMessageContent sets InputMessageContent to InputLocationMessageContent.
func (s *InputMessageContent) SetInputLocationMessageContent(v InputLocationMessageContent) {
	s.Type = InputLocationMessageContentInputMessageContent
	s.InputLocationMessageContent = v
}

// GetInputLocationMessageContent returns InputLocationMessageContent and true boolean if InputMessageContent is InputLocationMessageContent.
func (s InputMessageContent) GetInputLocationMessageContent() (v InputLocationMessageContent, ok bool) {
	if !s.IsInputLocationMessageContent() {
		return v, false
	}
	return s.InputLocationMessageContent, true
}

// NewInputLocationMessageContentInputMessageContent returns new InputMessageContent from InputLocationMessageContent.
func NewInputLocationMessageContentInputMessageContent(v InputLocationMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputLocationMessageContent(v)
	return s
}

// SetInputVenueMessageContent sets InputMessageContent to InputVenueMessageContent.
func (s *InputMessageContent) SetInputVenueMessageContent(v InputVenueMessageContent) {
	s.Type = InputVenueMessageContentInputMessageContent
	s.InputVenueMessageContent = v
}

// GetInputVenueMessageContent returns InputVenueMessageContent and true boolean if InputMessageContent is InputVenueMessageContent.
func (s InputMessageContent) GetInputVenueMessageContent() (v InputVenueMessageContent, ok bool) {
	if !s.IsInputVenueMessageContent() {
		return v, false
	}
	return s.InputVenueMessageContent, true
}

// NewInputVenueMessageContentInputMessageContent returns new InputMessageContent from InputVenueMessageContent.
func NewInputVenueMessageContentInputMessageContent(v InputVenueMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputVenueMessageContent(v)
	return s
}

// SetInputContactMessageContent sets InputMessageContent to InputContactMessageContent.
func (s *InputMessageContent) SetInputContactMessageContent(v InputContactMessageContent) {
	s.Type = InputContactMessageContentInputMessageContent
	s.InputContactMessageContent = v
}

// GetInputContactMessageContent returns InputContactMessageContent and true boolean if InputMessageContent is InputContactMessageContent.
func (s InputMessageContent) GetInputContactMessageContent() (v InputContactMessageContent, ok bool) {
	if !s.IsInputContactMessageContent() {
		return v, false
	}
	return s.InputContactMessageContent, true
}

// NewInputContactMessageContentInputMessageContent returns new InputMessageContent from InputContactMessageContent.
func NewInputContactMessageContentInputMessageContent(v InputContactMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputContactMessageContent(v)
	return s
}

// SetInputInvoiceMessageContent sets InputMessageContent to InputInvoiceMessageContent.
func (s *InputMessageContent) SetInputInvoiceMessageContent(v InputInvoiceMessageContent) {
	s.Type = InputInvoiceMessageContentInputMessageContent
	s.InputInvoiceMessageContent = v
}

// GetInputInvoiceMessageContent returns InputInvoiceMessageContent and true boolean if InputMessageContent is InputInvoiceMessageContent.
func (s InputMessageContent) GetInputInvoiceMessageContent() (v InputInvoiceMessageContent, ok bool) {
	if !s.IsInputInvoiceMessageContent() {
		return v, false
	}
	return s.InputInvoiceMessageContent, true
}

// NewInputInvoiceMessageContentInputMessageContent returns new InputMessageContent from InputInvoiceMessageContent.
func NewInputInvoiceMessageContentInputMessageContent(v InputInvoiceMessageContent) InputMessageContent {
	var s InputMessageContent
	s.SetInputInvoiceMessageContent(v)
	return s
}

// This object contains information about one answer option in a poll to send.
// Ref: #/components/schemas/InputPollOption
type InputPollOption struct {
	// Option text, 1-100 characters.
	Text string `json:"text"`
	// _Optional_. Mode for parsing entities in the text. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details. Currently, only custom emoji entities are
	// allowed.
	TextParseMode OptString `json:"text_parse_mode"`
	// _Optional_. A JSON-serialized list of special entities that appear in the poll option text. It can
	// be specified instead of _text_parse_mode_.
	TextEntities []MessageEntity `json:"text_entities"`
}

// GetText returns the value of Text.
func (s *InputPollOption) GetText() string {
	return s.Text
}

// GetTextParseMode returns the value of TextParseMode.
func (s *InputPollOption) GetTextParseMode() OptString {
	return s.TextParseMode
}

// GetTextEntities returns the value of TextEntities.
func (s *InputPollOption) GetTextEntities() []MessageEntity {
	return s.TextEntities
}

// SetText sets the value of Text.
func (s *InputPollOption) SetText(val string) {
	s.Text = val
}

// SetTextParseMode sets the value of TextParseMode.
func (s *InputPollOption) SetTextParseMode(val OptString) {
	s.TextParseMode = val
}

// SetTextEntities sets the value of TextEntities.
func (s *InputPollOption) SetTextEntities(val []MessageEntity) {
	s.TextEntities = val
}

// This object describes a sticker to be added to a sticker set.
// Ref: #/components/schemas/InputSticker
type InputSticker struct {
	// The added sticker. Pass a _file_id_ as a String to send a file that already exists on the Telegram
	// servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, upload a new
	// one using multipart/form-data, or pass `attach://<file_attach_name>` to upload a new one using
	// multipart/form-data under <file_attach_name> name. Animated and video stickers can't be uploaded
	// via HTTP URL. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files).
	Sticker string `json:"sticker"`
	// Format of the added sticker, must be one of `static` for a **.WEBP** or **.PNG** image, `animated`
	// for a **.TGS** animation, `video` for a **WEBM** video.
	Format string `json:"format"`
	// List of 1-20 emoji associated with the sticker.
	EmojiList    []string        `json:"emoji_list"`
	MaskPosition OptMaskPosition `json:"mask_position"`
	// _Optional_. List of 0-20 search keywords for the sticker with total length of up to 64 characters.
	// For `regular` and `custom_emoji` stickers only.
	Keywords []string `json:"keywords"`
}

// GetSticker returns the value of Sticker.
func (s *InputSticker) GetSticker() string {
	return s.Sticker
}

// GetFormat returns the value of Format.
func (s *InputSticker) GetFormat() string {
	return s.Format
}

// GetEmojiList returns the value of EmojiList.
func (s *InputSticker) GetEmojiList() []string {
	return s.EmojiList
}

// GetMaskPosition returns the value of MaskPosition.
func (s *InputSticker) GetMaskPosition() OptMaskPosition {
	return s.MaskPosition
}

// GetKeywords returns the value of Keywords.
func (s *InputSticker) GetKeywords() []string {
	return s.Keywords
}

// SetSticker sets the value of Sticker.
func (s *InputSticker) SetSticker(val string) {
	s.Sticker = val
}

// SetFormat sets the value of Format.
func (s *InputSticker) SetFormat(val string) {
	s.Format = val
}

// SetEmojiList sets the value of EmojiList.
func (s *InputSticker) SetEmojiList(val []string) {
	s.EmojiList = val
}

// SetMaskPosition sets the value of MaskPosition.
func (s *InputSticker) SetMaskPosition(val OptMaskPosition) {
	s.MaskPosition = val
}

// SetKeywords sets the value of Keywords.
func (s *InputSticker) SetKeywords(val []string) {
	s.Keywords = val
}

// Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of a text message
// to be sent as the result of an inline query.
// Ref: #/components/schemas/InputTextMessageContent
type InputTextMessageContent struct {
	// Text of the message to be sent, 1-4096 characters.
	MessageText string `json:"message_text"`
	// _Optional_. Mode for parsing entities in the message text. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// _Optional_. List of special entities that appear in message text, which can be specified instead
	// of _parse_mode_.
	Entities           []MessageEntity       `json:"entities"`
	LinkPreviewOptions OptLinkPreviewOptions `json:"link_preview_options"`
}

// GetMessageText returns the value of MessageText.
func (s *InputTextMessageContent) GetMessageText() string {
	return s.MessageText
}

// GetParseMode returns the value of ParseMode.
func (s *InputTextMessageContent) GetParseMode() OptString {
	return s.ParseMode
}

// GetEntities returns the value of Entities.
func (s *InputTextMessageContent) GetEntities() []MessageEntity {
	return s.Entities
}

// GetLinkPreviewOptions returns the value of LinkPreviewOptions.
func (s *InputTextMessageContent) GetLinkPreviewOptions() OptLinkPreviewOptions {
	return s.LinkPreviewOptions
}

// SetMessageText sets the value of MessageText.
func (s *InputTextMessageContent) SetMessageText(val string) {
	s.MessageText = val
}

// SetParseMode sets the value of ParseMode.
func (s *InputTextMessageContent) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetEntities sets the value of Entities.
func (s *InputTextMessageContent) SetEntities(val []MessageEntity) {
	s.Entities = val
}

// SetLinkPreviewOptions sets the value of LinkPreviewOptions.
func (s *InputTextMessageContent) SetLinkPreviewOptions(val OptLinkPreviewOptions) {
	s.LinkPreviewOptions = val
}

// Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of a venue
// message to be sent as the result of an inline query.
// Ref: #/components/schemas/InputVenueMessageContent
type InputVenueMessageContent struct {
	// Latitude of the venue in degrees.
	Latitude float64 `json:"latitude"`
	// Longitude of the venue in degrees.
	Longitude float64 `json:"longitude"`
	// Name of the venue.
	Title string `json:"title"`
	// Address of the venue.
	Address string `json:"address"`
	// _Optional_. Foursquare identifier of the venue, if known.
	FoursquareID OptString `json:"foursquare_id"`
	// _Optional_. Foursquare type of the venue, if known. (For example, `arts_entertainment/default`,
	// `arts_entertainment/aquarium` or `food/icecream`.).
	FoursquareType OptString `json:"foursquare_type"`
	// _Optional_. Google Places identifier of the venue.
	GooglePlaceID OptString `json:"google_place_id"`
	// _Optional_. Google Places type of the venue. (See [supported types](https://developers.google.
	// com/places/web-service/supported_types).).
	GooglePlaceType OptString `json:"google_place_type"`
}

// GetLatitude returns the value of Latitude.
func (s *InputVenueMessageContent) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *InputVenueMessageContent) GetLongitude() float64 {
	return s.Longitude
}

// GetTitle returns the value of Title.
func (s *InputVenueMessageContent) GetTitle() string {
	return s.Title
}

// GetAddress returns the value of Address.
func (s *InputVenueMessageContent) GetAddress() string {
	return s.Address
}

// GetFoursquareID returns the value of FoursquareID.
func (s *InputVenueMessageContent) GetFoursquareID() OptString {
	return s.FoursquareID
}

// GetFoursquareType returns the value of FoursquareType.
func (s *InputVenueMessageContent) GetFoursquareType() OptString {
	return s.FoursquareType
}

// GetGooglePlaceID returns the value of GooglePlaceID.
func (s *InputVenueMessageContent) GetGooglePlaceID() OptString {
	return s.GooglePlaceID
}

// GetGooglePlaceType returns the value of GooglePlaceType.
func (s *InputVenueMessageContent) GetGooglePlaceType() OptString {
	return s.GooglePlaceType
}

// SetLatitude sets the value of Latitude.
func (s *InputVenueMessageContent) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *InputVenueMessageContent) SetLongitude(val float64) {
	s.Longitude = val
}

// SetTitle sets the value of Title.
func (s *InputVenueMessageContent) SetTitle(val string) {
	s.Title = val
}

// SetAddress sets the value of Address.
func (s *InputVenueMessageContent) SetAddress(val string) {
	s.Address = val
}

// SetFoursquareID sets the value of FoursquareID.
func (s *InputVenueMessageContent) SetFoursquareID(val OptString) {
	s.FoursquareID = val
}

// SetFoursquareType sets the value of FoursquareType.
func (s *InputVenueMessageContent) SetFoursquareType(val OptString) {
	s.FoursquareType = val
}

// SetGooglePlaceID sets the value of GooglePlaceID.
func (s *InputVenueMessageContent) SetGooglePlaceID(val OptString) {
	s.GooglePlaceID = val
}

// SetGooglePlaceType sets the value of GooglePlaceType.
func (s *InputVenueMessageContent) SetGooglePlaceType(val OptString) {
	s.GooglePlaceType = val
}

// This object contains basic information about an invoice.
// Ref: #/components/schemas/Invoice
type Invoice struct {
	// Product name.
	Title string `json:"title"`
	// Product description.
	Description string `json:"description"`
	// Unique bot deep-linking parameter that can be used to generate this invoice.
	StartParameter string `json:"start_parameter"`
	// Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies)
	// code, or `XTR` for payments in [Telegram Stars](https://t.me/BotNews/90).
	Currency string `json:"currency"`
	// Total price in the _smallest units_ of the currency (integer, **not** float/double). For example,
	// for a price of `US$ 1.45` pass `amount = 145`. See the _exp_ parameter in [currencies.
	// json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past
	// the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int `json:"total_amount"`
}

// GetTitle returns the value of Title.
func (s *Invoice) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Invoice) GetDescription() string {
	return s.Description
}

// GetStartParameter returns the value of StartParameter.
func (s *Invoice) GetStartParameter() string {
	return s.StartParameter
}

// GetCurrency returns the value of Currency.
func (s *Invoice) GetCurrency() string {
	return s.Currency
}

// GetTotalAmount returns the value of TotalAmount.
func (s *Invoice) GetTotalAmount() int {
	return s.TotalAmount
}

// SetTitle sets the value of Title.
func (s *Invoice) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Invoice) SetDescription(val string) {
	s.Description = val
}

// SetStartParameter sets the value of StartParameter.
func (s *Invoice) SetStartParameter(val string) {
	s.StartParameter = val
}

// SetCurrency sets the value of Currency.
func (s *Invoice) SetCurrency(val string) {
	s.Currency = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *Invoice) SetTotalAmount(val int) {
	s.TotalAmount = val
}

// Ref: #/components/schemas/KeyboardButton
// KeyboardButton represents sum type.
type KeyboardButton struct {
	Type                 KeyboardButtonType // switch on this field
	String               string
	KeyboardButtonObject KeyboardButtonObject
}

// KeyboardButtonType is oneOf type of KeyboardButton.
type KeyboardButtonType string

// Possible values for KeyboardButtonType.
const (
	StringKeyboardButton               KeyboardButtonType = "string"
	KeyboardButtonObjectKeyboardButton KeyboardButtonType = "KeyboardButtonObject"
)

// IsString reports whether KeyboardButton is string.
func (s KeyboardButton) IsString() bool { return s.Type == StringKeyboardButton }

// IsKeyboardButtonObject reports whether KeyboardButton is KeyboardButtonObject.
func (s KeyboardButton) IsKeyboardButtonObject() bool {
	return s.Type == KeyboardButtonObjectKeyboardButton
}

// SetString sets KeyboardButton to string.
func (s *KeyboardButton) SetString(v string) {
	s.Type = StringKeyboardButton
	s.String = v
}

// GetString returns string and true boolean if KeyboardButton is string.
func (s KeyboardButton) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringKeyboardButton returns new KeyboardButton from string.
func NewStringKeyboardButton(v string) KeyboardButton {
	var s KeyboardButton
	s.SetString(v)
	return s
}

// SetKeyboardButtonObject sets KeyboardButton to KeyboardButtonObject.
func (s *KeyboardButton) SetKeyboardButtonObject(v KeyboardButtonObject) {
	s.Type = KeyboardButtonObjectKeyboardButton
	s.KeyboardButtonObject = v
}

// GetKeyboardButtonObject returns KeyboardButtonObject and true boolean if KeyboardButton is KeyboardButtonObject.
func (s KeyboardButton) GetKeyboardButtonObject() (v KeyboardButtonObject, ok bool) {
	if !s.IsKeyboardButtonObject() {
		return v, false
	}
	return s.KeyboardButtonObject, true
}

// NewKeyboardButtonObjectKeyboardButton returns new KeyboardButton from KeyboardButtonObject.
func NewKeyboardButtonObjectKeyboardButton(v KeyboardButtonObject) KeyboardButton {
	var s KeyboardButton
	s.SetKeyboardButtonObject(v)
	return s
}

// This object represents one button of the reply keyboard. At most one of the optional fields must
// be used to specify type of the button. For simple text buttons, _String_ can be used instead of
// this object to specify the button text.
// Ref: #/components/schemas/KeyboardButtonObject
type KeyboardButtonObject struct {
	// Text of the button. If none of the optional fields are used, it will be sent as a message when the
	// button is pressed.
	Text         string                        `json:"text"`
	RequestUsers OptKeyboardButtonRequestUsers `json:"request_users"`
	RequestChat  OptKeyboardButtonRequestChat  `json:"request_chat"`
	// _Optional_. If _True_, the user's phone number will be sent as a contact when the button is
	// pressed. Available in private chats only.
	RequestContact OptBool `json:"request_contact"`
	// _Optional_. If _True_, the user's current location will be sent when the button is pressed.
	// Available in private chats only.
	RequestLocation OptBool                   `json:"request_location"`
	RequestPoll     OptKeyboardButtonPollType `json:"request_poll"`
	WebApp          OptWebAppInfo             `json:"web_app"`
}

// GetText returns the value of Text.
func (s *KeyboardButtonObject) GetText() string {
	return s.Text
}

// GetRequestUsers returns the value of RequestUsers.
func (s *KeyboardButtonObject) GetRequestUsers() OptKeyboardButtonRequestUsers {
	return s.RequestUsers
}

// GetRequestChat returns the value of RequestChat.
func (s *KeyboardButtonObject) GetRequestChat() OptKeyboardButtonRequestChat {
	return s.RequestChat
}

// GetRequestContact returns the value of RequestContact.
func (s *KeyboardButtonObject) GetRequestContact() OptBool {
	return s.RequestContact
}

// GetRequestLocation returns the value of RequestLocation.
func (s *KeyboardButtonObject) GetRequestLocation() OptBool {
	return s.RequestLocation
}

// GetRequestPoll returns the value of RequestPoll.
func (s *KeyboardButtonObject) GetRequestPoll() OptKeyboardButtonPollType {
	return s.RequestPoll
}

// GetWebApp returns the value of WebApp.
func (s *KeyboardButtonObject) GetWebApp() OptWebAppInfo {
	return s.WebApp
}

// SetText sets the value of Text.
func (s *KeyboardButtonObject) SetText(val string) {
	s.Text = val
}

// SetRequestUsers sets the value of RequestUsers.
func (s *KeyboardButtonObject) SetRequestUsers(val OptKeyboardButtonRequestUsers) {
	s.RequestUsers = val
}

// SetRequestChat sets the value of RequestChat.
func (s *KeyboardButtonObject) SetRequestChat(val OptKeyboardButtonRequestChat) {
	s.RequestChat = val
}

// SetRequestContact sets the value of RequestContact.
func (s *KeyboardButtonObject) SetRequestContact(val OptBool) {
	s.RequestContact = val
}

// SetRequestLocation sets the value of RequestLocation.
func (s *KeyboardButtonObject) SetRequestLocation(val OptBool) {
	s.RequestLocation = val
}

// SetRequestPoll sets the value of RequestPoll.
func (s *KeyboardButtonObject) SetRequestPoll(val OptKeyboardButtonPollType) {
	s.RequestPoll = val
}

// SetWebApp sets the value of WebApp.
func (s *KeyboardButtonObject) SetWebApp(val OptWebAppInfo) {
	s.WebApp = val
}

// This object represents type of a poll, which is allowed to be created and sent when the
// corresponding button is pressed.
// Ref: #/components/schemas/KeyboardButtonPollType
type KeyboardButtonPollType struct {
	// _Optional_. If _quiz_ is passed, the user will be allowed to create only polls in the quiz mode.
	// If _regular_ is passed, only regular polls will be allowed. Otherwise, the user will be allowed to
	// create a poll of any type.
	Type OptString `json:"type"`
}

// GetType returns the value of Type.
func (s *KeyboardButtonPollType) GetType() OptString {
	return s.Type
}

// SetType sets the value of Type.
func (s *KeyboardButtonPollType) SetType(val OptString) {
	s.Type = val
}

// This object defines the criteria used to request a suitable chat. Information about the selected
// chat will be shared with the bot when the corresponding button is pressed. The bot will be granted
// requested rights in the chat if appropriate. [More about requesting chats](https://core.telegram.
// org/bots/features#chat-and-user-selection).
// Ref: #/components/schemas/KeyboardButtonRequestChat
type KeyboardButtonRequestChat struct {
	// Signed 32-bit identifier of the request, which will be received back in the
	// [ChatShared](https://core.telegram.org/bots/api#chatshared) object. Must be unique within the
	// message.
	RequestID int `json:"request_id"`
	// Pass _True_ to request a channel chat, pass _False_ to request a group or a supergroup chat.
	ChatIsChannel bool `json:"chat_is_channel"`
	// _Optional_. Pass _True_ to request a forum supergroup, pass _False_ to request a non-forum chat.
	// If not specified, no additional restrictions are applied.
	ChatIsForum OptBool `json:"chat_is_forum"`
	// _Optional_. Pass _True_ to request a supergroup or a channel with a username, pass _False_ to
	// request a chat without a username. If not specified, no additional restrictions are applied.
	ChatHasUsername OptBool `json:"chat_has_username"`
	// _Optional_. Pass _True_ to request a chat owned by the user. Otherwise, no additional restrictions
	// are applied.
	ChatIsCreated           OptBool                    `json:"chat_is_created"`
	UserAdministratorRights OptChatAdministratorRights `json:"user_administrator_rights"`
	BotAdministratorRights  OptChatAdministratorRights `json:"bot_administrator_rights"`
	// _Optional_. Pass _True_ to request a chat with the bot as a member. Otherwise, no additional
	// restrictions are applied.
	BotIsMember OptBool `json:"bot_is_member"`
	// _Optional_. Pass _True_ to request the chat's title.
	RequestTitle OptBool `json:"request_title"`
	// _Optional_. Pass _True_ to request the chat's username.
	RequestUsername OptBool `json:"request_username"`
	// _Optional_. Pass _True_ to request the chat's photo.
	RequestPhoto OptBool `json:"request_photo"`
}

// GetRequestID returns the value of RequestID.
func (s *KeyboardButtonRequestChat) GetRequestID() int {
	return s.RequestID
}

// GetChatIsChannel returns the value of ChatIsChannel.
func (s *KeyboardButtonRequestChat) GetChatIsChannel() bool {
	return s.ChatIsChannel
}

// GetChatIsForum returns the value of ChatIsForum.
func (s *KeyboardButtonRequestChat) GetChatIsForum() OptBool {
	return s.ChatIsForum
}

// GetChatHasUsername returns the value of ChatHasUsername.
func (s *KeyboardButtonRequestChat) GetChatHasUsername() OptBool {
	return s.ChatHasUsername
}

// GetChatIsCreated returns the value of ChatIsCreated.
func (s *KeyboardButtonRequestChat) GetChatIsCreated() OptBool {
	return s.ChatIsCreated
}

// GetUserAdministratorRights returns the value of UserAdministratorRights.
func (s *KeyboardButtonRequestChat) GetUserAdministratorRights() OptChatAdministratorRights {
	return s.UserAdministratorRights
}

// GetBotAdministratorRights returns the value of BotAdministratorRights.
func (s *KeyboardButtonRequestChat) GetBotAdministratorRights() OptChatAdministratorRights {
	return s.BotAdministratorRights
}

// GetBotIsMember returns the value of BotIsMember.
func (s *KeyboardButtonRequestChat) GetBotIsMember() OptBool {
	return s.BotIsMember
}

// GetRequestTitle returns the value of RequestTitle.
func (s *KeyboardButtonRequestChat) GetRequestTitle() OptBool {
	return s.RequestTitle
}

// GetRequestUsername returns the value of RequestUsername.
func (s *KeyboardButtonRequestChat) GetRequestUsername() OptBool {
	return s.RequestUsername
}

// GetRequestPhoto returns the value of RequestPhoto.
func (s *KeyboardButtonRequestChat) GetRequestPhoto() OptBool {
	return s.RequestPhoto
}

// SetRequestID sets the value of RequestID.
func (s *KeyboardButtonRequestChat) SetRequestID(val int) {
	s.RequestID = val
}

// SetChatIsChannel sets the value of ChatIsChannel.
func (s *KeyboardButtonRequestChat) SetChatIsChannel(val bool) {
	s.ChatIsChannel = val
}

// SetChatIsForum sets the value of ChatIsForum.
func (s *KeyboardButtonRequestChat) SetChatIsForum(val OptBool) {
	s.ChatIsForum = val
}

// SetChatHasUsername sets the value of ChatHasUsername.
func (s *KeyboardButtonRequestChat) SetChatHasUsername(val OptBool) {
	s.ChatHasUsername = val
}

// SetChatIsCreated sets the value of ChatIsCreated.
func (s *KeyboardButtonRequestChat) SetChatIsCreated(val OptBool) {
	s.ChatIsCreated = val
}

// SetUserAdministratorRights sets the value of UserAdministratorRights.
func (s *KeyboardButtonRequestChat) SetUserAdministratorRights(val OptChatAdministratorRights) {
	s.UserAdministratorRights = val
}

// SetBotAdministratorRights sets the value of BotAdministratorRights.
func (s *KeyboardButtonRequestChat) SetBotAdministratorRights(val OptChatAdministratorRights) {
	s.BotAdministratorRights = val
}

// SetBotIsMember sets the value of BotIsMember.
func (s *KeyboardButtonRequestChat) SetBotIsMember(val OptBool) {
	s.BotIsMember = val
}

// SetRequestTitle sets the value of RequestTitle.
func (s *KeyboardButtonRequestChat) SetRequestTitle(val OptBool) {
	s.RequestTitle = val
}

// SetRequestUsername sets the value of RequestUsername.
func (s *KeyboardButtonRequestChat) SetRequestUsername(val OptBool) {
	s.RequestUsername = val
}

// SetRequestPhoto sets the value of RequestPhoto.
func (s *KeyboardButtonRequestChat) SetRequestPhoto(val OptBool) {
	s.RequestPhoto = val
}

// This object defines the criteria used to request suitable users. Information about the selected
// users will be shared with the bot when the corresponding button is pressed. [More about requesting
// users](https://core.telegram.org/bots/features#chat-and-user-selection).
// Ref: #/components/schemas/KeyboardButtonRequestUsers
type KeyboardButtonRequestUsers struct {
	// Signed 32-bit identifier of the request that will be received back in the
	// [UsersShared](https://core.telegram.org/bots/api#usersshared) object. Must be unique within the
	// message.
	RequestID int `json:"request_id"`
	// _Optional_. Pass _True_ to request bots, pass _False_ to request regular users. If not specified,
	// no additional restrictions are applied.
	UserIsBot OptBool `json:"user_is_bot"`
	// _Optional_. Pass _True_ to request premium users, pass _False_ to request non-premium users. If
	// not specified, no additional restrictions are applied.
	UserIsPremium OptBool `json:"user_is_premium"`
	// _Optional_. The maximum number of users to be selected; 1-10. Defaults to 1.
	MaxQuantity OptInt `json:"max_quantity"`
	// _Optional_. Pass _True_ to request the users' first and last names.
	RequestName OptBool `json:"request_name"`
	// _Optional_. Pass _True_ to request the users' usernames.
	RequestUsername OptBool `json:"request_username"`
	// _Optional_. Pass _True_ to request the users' photos.
	RequestPhoto OptBool `json:"request_photo"`
}

// GetRequestID returns the value of RequestID.
func (s *KeyboardButtonRequestUsers) GetRequestID() int {
	return s.RequestID
}

// GetUserIsBot returns the value of UserIsBot.
func (s *KeyboardButtonRequestUsers) GetUserIsBot() OptBool {
	return s.UserIsBot
}

// GetUserIsPremium returns the value of UserIsPremium.
func (s *KeyboardButtonRequestUsers) GetUserIsPremium() OptBool {
	return s.UserIsPremium
}

// GetMaxQuantity returns the value of MaxQuantity.
func (s *KeyboardButtonRequestUsers) GetMaxQuantity() OptInt {
	return s.MaxQuantity
}

// GetRequestName returns the value of RequestName.
func (s *KeyboardButtonRequestUsers) GetRequestName() OptBool {
	return s.RequestName
}

// GetRequestUsername returns the value of RequestUsername.
func (s *KeyboardButtonRequestUsers) GetRequestUsername() OptBool {
	return s.RequestUsername
}

// GetRequestPhoto returns the value of RequestPhoto.
func (s *KeyboardButtonRequestUsers) GetRequestPhoto() OptBool {
	return s.RequestPhoto
}

// SetRequestID sets the value of RequestID.
func (s *KeyboardButtonRequestUsers) SetRequestID(val int) {
	s.RequestID = val
}

// SetUserIsBot sets the value of UserIsBot.
func (s *KeyboardButtonRequestUsers) SetUserIsBot(val OptBool) {
	s.UserIsBot = val
}

// SetUserIsPremium sets the value of UserIsPremium.
func (s *KeyboardButtonRequestUsers) SetUserIsPremium(val OptBool) {
	s.UserIsPremium = val
}

// SetMaxQuantity sets the value of MaxQuantity.
func (s *KeyboardButtonRequestUsers) SetMaxQuantity(val OptInt) {
	s.MaxQuantity = val
}

// SetRequestName sets the value of RequestName.
func (s *KeyboardButtonRequestUsers) SetRequestName(val OptBool) {
	s.RequestName = val
}

// SetRequestUsername sets the value of RequestUsername.
func (s *KeyboardButtonRequestUsers) SetRequestUsername(val OptBool) {
	s.RequestUsername = val
}

// SetRequestPhoto sets the value of RequestPhoto.
func (s *KeyboardButtonRequestUsers) SetRequestPhoto(val OptBool) {
	s.RequestPhoto = val
}

// This object represents a portion of the price for goods or services.
// Ref: #/components/schemas/LabeledPrice
type LabeledPrice struct {
	// Portion label.
	Label string `json:"label"`
	// Price of the product in the _smallest units_ of the [currency](https://core.telegram.
	// org/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price
	// of `US$ 1.45` pass `amount = 145`. See the _exp_ parameter in [currencies.json](https://core.
	// telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point
	// for each currency (2 for the majority of currencies).
	Amount int `json:"amount"`
}

// GetLabel returns the value of Label.
func (s *LabeledPrice) GetLabel() string {
	return s.Label
}

// GetAmount returns the value of Amount.
func (s *LabeledPrice) GetAmount() int {
	return s.Amount
}

// SetLabel sets the value of Label.
func (s *LabeledPrice) SetLabel(val string) {
	s.Label = val
}

// SetAmount sets the value of Amount.
func (s *LabeledPrice) SetAmount(val int) {
	s.Amount = val
}

// Input for leaveChat.
// Ref: #/components/schemas/leaveChat
type LeaveChat struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *LeaveChat) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *LeaveChat) SetChatID(val ID) {
	s.ChatID = val
}

// Describes the options used for link preview generation.
// Ref: #/components/schemas/LinkPreviewOptions
type LinkPreviewOptions struct {
	// _Optional_. _True_, if the link preview is disabled.
	IsDisabled OptBool `json:"is_disabled"`
	// _Optional_. URL to use for the link preview. If empty, then the first URL found in the message
	// text will be used.
	URL OptString `json:"url"`
	// _Optional_. _True_, if the media in the link preview is supposed to be shrunk; ignored if the URL
	// isn't explicitly specified or media size change isn't supported for the preview.
	PreferSmallMedia OptBool `json:"prefer_small_media"`
	// _Optional_. _True_, if the media in the link preview is supposed to be enlarged; ignored if the
	// URL isn't explicitly specified or media size change isn't supported for the preview.
	PreferLargeMedia OptBool `json:"prefer_large_media"`
	// _Optional_. _True_, if the link preview must be shown above the message text; otherwise, the link
	// preview will be shown below the message text.
	ShowAboveText OptBool `json:"show_above_text"`
}

// GetIsDisabled returns the value of IsDisabled.
func (s *LinkPreviewOptions) GetIsDisabled() OptBool {
	return s.IsDisabled
}

// GetURL returns the value of URL.
func (s *LinkPreviewOptions) GetURL() OptString {
	return s.URL
}

// GetPreferSmallMedia returns the value of PreferSmallMedia.
func (s *LinkPreviewOptions) GetPreferSmallMedia() OptBool {
	return s.PreferSmallMedia
}

// GetPreferLargeMedia returns the value of PreferLargeMedia.
func (s *LinkPreviewOptions) GetPreferLargeMedia() OptBool {
	return s.PreferLargeMedia
}

// GetShowAboveText returns the value of ShowAboveText.
func (s *LinkPreviewOptions) GetShowAboveText() OptBool {
	return s.ShowAboveText
}

// SetIsDisabled sets the value of IsDisabled.
func (s *LinkPreviewOptions) SetIsDisabled(val OptBool) {
	s.IsDisabled = val
}

// SetURL sets the value of URL.
func (s *LinkPreviewOptions) SetURL(val OptString) {
	s.URL = val
}

// SetPreferSmallMedia sets the value of PreferSmallMedia.
func (s *LinkPreviewOptions) SetPreferSmallMedia(val OptBool) {
	s.PreferSmallMedia = val
}

// SetPreferLargeMedia sets the value of PreferLargeMedia.
func (s *LinkPreviewOptions) SetPreferLargeMedia(val OptBool) {
	s.PreferLargeMedia = val
}

// SetShowAboveText sets the value of ShowAboveText.
func (s *LinkPreviewOptions) SetShowAboveText(val OptBool) {
	s.ShowAboveText = val
}

// This object represents a point on the map.
// Ref: #/components/schemas/Location
type Location struct {
	// Latitude as defined by sender.
	Latitude float64 `json:"latitude"`
	// Longitude as defined by sender.
	Longitude float64 `json:"longitude"`
	// _Optional_. The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy"`
	// _Optional_. Time relative to the message sending date, during which the location can be updated;
	// in seconds. For active live locations only.
	LivePeriod OptInt `json:"live_period"`
	// _Optional_. The direction in which user is moving, in degrees; 1-360. For active live locations
	// only.
	Heading OptInt `json:"heading"`
	// _Optional_. The maximum distance for proximity alerts about approaching another chat member, in
	// meters. For sent live locations only.
	ProximityAlertRadius OptInt `json:"proximity_alert_radius"`
}

// GetLatitude returns the value of Latitude.
func (s *Location) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *Location) GetLongitude() float64 {
	return s.Longitude
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s *Location) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetLivePeriod returns the value of LivePeriod.
func (s *Location) GetLivePeriod() OptInt {
	return s.LivePeriod
}

// GetHeading returns the value of Heading.
func (s *Location) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s *Location) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// SetLatitude sets the value of Latitude.
func (s *Location) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *Location) SetLongitude(val float64) {
	s.Longitude = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *Location) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetLivePeriod sets the value of LivePeriod.
func (s *Location) SetLivePeriod(val OptInt) {
	s.LivePeriod = val
}

// SetHeading sets the value of Heading.
func (s *Location) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *Location) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// Telegram apps support these buttons as of [version 5.7](https://telegram.
// org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).
// Ref: #/components/schemas/LoginUrl
type LoginUrl struct {
	// An HTTPS URL to be opened with user authorization data added to the query string when the button
	// is pressed. If the user refuses to provide authorization data, the original URL without
	// information about the user will be opened. The data added is the same as described in [Receiving
	// authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).
	// **NOTE:** You **must** always check the hash of the received data to verify the authentication and
	// the integrity of the data as described in [Checking authorization](https://core.telegram.
	// org/widgets/login#checking-authorization).
	URL string `json:"url"`
	// _Optional_. New text of the button in forwarded messages.
	ForwardText OptString `json:"forward_text"`
	// _Optional_. Username of a bot, which will be used for user authorization. See [Setting up a
	// bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified,
	// the current bot's username will be assumed. The _url_'s domain must be the same as the domain
	// linked with the bot. See [Linking your domain to the bot](https://core.telegram.
	// org/widgets/login#linking-your-domain-to-the-bot) for more details.
	BotUsername OptString `json:"bot_username"`
	// _Optional_. Pass _True_ to request the permission for your bot to send messages to the user.
	RequestWriteAccess OptBool `json:"request_write_access"`
}

// GetURL returns the value of URL.
func (s *LoginUrl) GetURL() string {
	return s.URL
}

// GetForwardText returns the value of ForwardText.
func (s *LoginUrl) GetForwardText() OptString {
	return s.ForwardText
}

// GetBotUsername returns the value of BotUsername.
func (s *LoginUrl) GetBotUsername() OptString {
	return s.BotUsername
}

// GetRequestWriteAccess returns the value of RequestWriteAccess.
func (s *LoginUrl) GetRequestWriteAccess() OptBool {
	return s.RequestWriteAccess
}

// SetURL sets the value of URL.
func (s *LoginUrl) SetURL(val string) {
	s.URL = val
}

// SetForwardText sets the value of ForwardText.
func (s *LoginUrl) SetForwardText(val OptString) {
	s.ForwardText = val
}

// SetBotUsername sets the value of BotUsername.
func (s *LoginUrl) SetBotUsername(val OptString) {
	s.BotUsername = val
}

// SetRequestWriteAccess sets the value of RequestWriteAccess.
func (s *LoginUrl) SetRequestWriteAccess(val OptBool) {
	s.RequestWriteAccess = val
}

// This object describes the position on faces where a mask should be placed by default.
// Ref: #/components/schemas/MaskPosition
type MaskPosition struct {
	// The part of the face relative to which the mask should be placed. One of `forehead`, `eyes`,
	// `mouth`, or `chin`.
	Point string `json:"point"`
	// Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For
	// example, choosing -1.0 will place mask just to the left of the default mask position.
	XShift float64 `json:"x_shift"`
	// Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For
	// example, 1.0 will place the mask just below the default mask position.
	YShift float64 `json:"y_shift"`
	// Mask scaling coefficient. For example, 2.0 means double size.
	Scale float64 `json:"scale"`
}

// GetPoint returns the value of Point.
func (s *MaskPosition) GetPoint() string {
	return s.Point
}

// GetXShift returns the value of XShift.
func (s *MaskPosition) GetXShift() float64 {
	return s.XShift
}

// GetYShift returns the value of YShift.
func (s *MaskPosition) GetYShift() float64 {
	return s.YShift
}

// GetScale returns the value of Scale.
func (s *MaskPosition) GetScale() float64 {
	return s.Scale
}

// SetPoint sets the value of Point.
func (s *MaskPosition) SetPoint(val string) {
	s.Point = val
}

// SetXShift sets the value of XShift.
func (s *MaskPosition) SetXShift(val float64) {
	s.XShift = val
}

// SetYShift sets the value of YShift.
func (s *MaskPosition) SetYShift(val float64) {
	s.YShift = val
}

// SetScale sets the value of Scale.
func (s *MaskPosition) SetScale(val float64) {
	s.Scale = val
}

// This object describes a message that can be inaccessible to the bot. It can be one of.
// Ref: #/components/schemas/MaybeInaccessibleMessage
// MaybeInaccessibleMessage represents sum type.
type MaybeInaccessibleMessage struct {
	Type                MaybeInaccessibleMessageType // switch on this field
	Message             Message
	InaccessibleMessage InaccessibleMessage
}

// MaybeInaccessibleMessageType is oneOf type of MaybeInaccessibleMessage.
type MaybeInaccessibleMessageType string

// Possible values for MaybeInaccessibleMessageType.
const (
	MessageMaybeInaccessibleMessage             MaybeInaccessibleMessageType = "Message"
	InaccessibleMessageMaybeInaccessibleMessage MaybeInaccessibleMessageType = "InaccessibleMessage"
)

// IsMessage reports whether MaybeInaccessibleMessage is Message.
func (s MaybeInaccessibleMessage) IsMessage() bool { return s.Type == MessageMaybeInaccessibleMessage }

// IsInaccessibleMessage reports whether MaybeInaccessibleMessage is InaccessibleMessage.
func (s MaybeInaccessibleMessage) IsInaccessibleMessage() bool {
	return s.Type == InaccessibleMessageMaybeInaccessibleMessage
}

// SetMessage sets MaybeInaccessibleMessage to Message.
func (s *MaybeInaccessibleMessage) SetMessage(v Message) {
	s.Type = MessageMaybeInaccessibleMessage
	s.Message = v
}

// GetMessage returns Message and true boolean if MaybeInaccessibleMessage is Message.
func (s MaybeInaccessibleMessage) GetMessage() (v Message, ok bool) {
	if !s.IsMessage() {
		return v, false
	}
	return s.Message, true
}

// NewMessageMaybeInaccessibleMessage returns new MaybeInaccessibleMessage from Message.
func NewMessageMaybeInaccessibleMessage(v Message) MaybeInaccessibleMessage {
	var s MaybeInaccessibleMessage
	s.SetMessage(v)
	return s
}

// SetInaccessibleMessage sets MaybeInaccessibleMessage to InaccessibleMessage.
func (s *MaybeInaccessibleMessage) SetInaccessibleMessage(v InaccessibleMessage) {
	s.Type = InaccessibleMessageMaybeInaccessibleMessage
	s.InaccessibleMessage = v
}

// GetInaccessibleMessage returns InaccessibleMessage and true boolean if MaybeInaccessibleMessage is InaccessibleMessage.
func (s MaybeInaccessibleMessage) GetInaccessibleMessage() (v InaccessibleMessage, ok bool) {
	if !s.IsInaccessibleMessage() {
		return v, false
	}
	return s.InaccessibleMessage, true
}

// NewInaccessibleMessageMaybeInaccessibleMessage returns new MaybeInaccessibleMessage from InaccessibleMessage.
func NewInaccessibleMessageMaybeInaccessibleMessage(v InaccessibleMessage) MaybeInaccessibleMessage {
	var s MaybeInaccessibleMessage
	s.SetInaccessibleMessage(v)
	return s
}

// This object describes the bot's menu button in a private chat. It should be one of.
// Ref: #/components/schemas/MenuButton
// MenuButton represents sum type.
type MenuButton struct {
	Type               MenuButtonType // switch on this field
	MenuButtonCommands MenuButtonCommands
	MenuButtonWebApp   MenuButtonWebApp
	MenuButtonDefault  MenuButtonDefault
}

// MenuButtonType is oneOf type of MenuButton.
type MenuButtonType string

// Possible values for MenuButtonType.
const (
	MenuButtonCommandsMenuButton MenuButtonType = "commands"
	MenuButtonWebAppMenuButton   MenuButtonType = "web_app"
	MenuButtonDefaultMenuButton  MenuButtonType = "default"
)

// IsMenuButtonCommands reports whether MenuButton is MenuButtonCommands.
func (s MenuButton) IsMenuButtonCommands() bool { return s.Type == MenuButtonCommandsMenuButton }

// IsMenuButtonWebApp reports whether MenuButton is MenuButtonWebApp.
func (s MenuButton) IsMenuButtonWebApp() bool { return s.Type == MenuButtonWebAppMenuButton }

// IsMenuButtonDefault reports whether MenuButton is MenuButtonDefault.
func (s MenuButton) IsMenuButtonDefault() bool { return s.Type == MenuButtonDefaultMenuButton }

// SetMenuButtonCommands sets MenuButton to MenuButtonCommands.
func (s *MenuButton) SetMenuButtonCommands(v MenuButtonCommands) {
	s.Type = MenuButtonCommandsMenuButton
	s.MenuButtonCommands = v
}

// GetMenuButtonCommands returns MenuButtonCommands and true boolean if MenuButton is MenuButtonCommands.
func (s MenuButton) GetMenuButtonCommands() (v MenuButtonCommands, ok bool) {
	if !s.IsMenuButtonCommands() {
		return v, false
	}
	return s.MenuButtonCommands, true
}

// NewMenuButtonCommandsMenuButton returns new MenuButton from MenuButtonCommands.
func NewMenuButtonCommandsMenuButton(v MenuButtonCommands) MenuButton {
	var s MenuButton
	s.SetMenuButtonCommands(v)
	return s
}

// SetMenuButtonWebApp sets MenuButton to MenuButtonWebApp.
func (s *MenuButton) SetMenuButtonWebApp(v MenuButtonWebApp) {
	s.Type = MenuButtonWebAppMenuButton
	s.MenuButtonWebApp = v
}

// GetMenuButtonWebApp returns MenuButtonWebApp and true boolean if MenuButton is MenuButtonWebApp.
func (s MenuButton) GetMenuButtonWebApp() (v MenuButtonWebApp, ok bool) {
	if !s.IsMenuButtonWebApp() {
		return v, false
	}
	return s.MenuButtonWebApp, true
}

// NewMenuButtonWebAppMenuButton returns new MenuButton from MenuButtonWebApp.
func NewMenuButtonWebAppMenuButton(v MenuButtonWebApp) MenuButton {
	var s MenuButton
	s.SetMenuButtonWebApp(v)
	return s
}

// SetMenuButtonDefault sets MenuButton to MenuButtonDefault.
func (s *MenuButton) SetMenuButtonDefault(v MenuButtonDefault) {
	s.Type = MenuButtonDefaultMenuButton
	s.MenuButtonDefault = v
}

// GetMenuButtonDefault returns MenuButtonDefault and true boolean if MenuButton is MenuButtonDefault.
func (s MenuButton) GetMenuButtonDefault() (v MenuButtonDefault, ok bool) {
	if !s.IsMenuButtonDefault() {
		return v, false
	}
	return s.MenuButtonDefault, true
}

// NewMenuButtonDefaultMenuButton returns new MenuButton from MenuButtonDefault.
func NewMenuButtonDefaultMenuButton(v MenuButtonDefault) MenuButton {
	var s MenuButton
	s.SetMenuButtonDefault(v)
	return s
}

// Represents a menu button, which opens the bot's list of commands.
// Ref: #/components/schemas/MenuButtonCommands
type MenuButtonCommands struct {
	// Type of the button, must be _commands_.
	Type string `json:"type"`
}

// GetType returns the value of Type.
func (s *MenuButtonCommands) GetType() string {
	return s.Type
}

// SetType sets the value of Type.
func (s *MenuButtonCommands) SetType(val string) {
	s.Type = val
}

// Describes that no specific value for the menu button was set.
// Ref: #/components/schemas/MenuButtonDefault
type MenuButtonDefault struct {
	// Type of the button, must be _default_.
	Type string `json:"type"`
}

// GetType returns the value of Type.
func (s *MenuButtonDefault) GetType() string {
	return s.Type
}

// SetType sets the value of Type.
func (s *MenuButtonDefault) SetType(val string) {
	s.Type = val
}

// Represents a menu button, which launches a [Web App](https://core.telegram.org/bots/webapps).
// Ref: #/components/schemas/MenuButtonWebApp
type MenuButtonWebApp struct {
	// Type of the button, must be _web_app_.
	Type string `json:"type"`
	// Text on the button.
	Text   string     `json:"text"`
	WebApp WebAppInfo `json:"web_app"`
}

// GetType returns the value of Type.
func (s *MenuButtonWebApp) GetType() string {
	return s.Type
}

// GetText returns the value of Text.
func (s *MenuButtonWebApp) GetText() string {
	return s.Text
}

// GetWebApp returns the value of WebApp.
func (s *MenuButtonWebApp) GetWebApp() WebAppInfo {
	return s.WebApp
}

// SetType sets the value of Type.
func (s *MenuButtonWebApp) SetType(val string) {
	s.Type = val
}

// SetText sets the value of Text.
func (s *MenuButtonWebApp) SetText(val string) {
	s.Text = val
}

// SetWebApp sets the value of WebApp.
func (s *MenuButtonWebApp) SetWebApp(val WebAppInfo) {
	s.WebApp = val
}

// This object represents a message.
// Ref: #/components/schemas/Message
type Message struct {
	// Unique message identifier inside this chat.
	MessageID int `json:"message_id"`
	// _Optional_. Unique identifier of a message thread to which the message belongs; for supergroups
	// only.
	MessageThreadID OptInt  `json:"message_thread_id"`
	From            OptUser `json:"from"`
	SenderChat      OptChat `json:"sender_chat"`
	// _Optional_. If the sender of the message boosted the chat, the number of boosts added by the user.
	SenderBoostCount  OptInt  `json:"sender_boost_count"`
	SenderBusinessBot OptUser `json:"sender_business_bot"`
	// Date the message was sent in Unix time. It is always a positive number, representing a valid date.
	Date int `json:"date"`
	// _Optional_. Unique identifier of the business connection from which the message was received. If
	// non-empty, the message belongs to a chat of the corresponding business account that is independent
	// from any potential bot chat which might share the same identifier.
	BusinessConnectionID OptString        `json:"business_connection_id"`
	Chat                 Chat             `json:"chat"`
	ForwardOrigin        OptMessageOrigin `json:"forward_origin"`
	// _Optional_. _True_, if the message is sent to a forum topic.
	IsTopicMessage OptBool `json:"is_topic_message"`
	// _Optional_. _True_, if the message is a channel post that was automatically forwarded to the
	// connected discussion group.
	IsAutomaticForward OptBool              `json:"is_automatic_forward"`
	ReplyToMessage     *Message             `json:"reply_to_message"`
	ExternalReply      OptExternalReplyInfo `json:"external_reply"`
	Quote              OptTextQuote         `json:"quote"`
	ReplyToStory       OptStory             `json:"reply_to_story"`
	ViaBot             OptUser              `json:"via_bot"`
	// _Optional_. Date the message was last edited in Unix time.
	EditDate OptInt `json:"edit_date"`
	// _Optional_. _True_, if the message can't be forwarded.
	HasProtectedContent OptBool `json:"has_protected_content"`
	// _Optional_. True, if the message was sent by an implicit action, for example, as an away or a
	// greeting business message, or as a scheduled message.
	IsFromOffline OptBool `json:"is_from_offline"`
	// _Optional_. The unique identifier of a media message group this message belongs to.
	MediaGroupID OptString `json:"media_group_id"`
	// _Optional_. Signature of the post author for messages in channels, or the custom title of an
	// anonymous group administrator.
	AuthorSignature OptString `json:"author_signature"`
	// _Optional_. For text messages, the actual UTF-8 text of the message.
	Text OptString `json:"text"`
	// _Optional_. For text messages, special entities like usernames, URLs, bot commands, etc. that
	// appear in the text.
	Entities           []MessageEntity       `json:"entities"`
	LinkPreviewOptions OptLinkPreviewOptions `json:"link_preview_options"`
	// _Optional_. Unique identifier of the message effect added to the message.
	EffectID  OptString    `json:"effect_id"`
	Animation OptAnimation `json:"animation"`
	Audio     OptAudio     `json:"audio"`
	Document  OptDocument  `json:"document"`
	// _Optional_. Message is a photo, available sizes of the photo.
	Photo     []PhotoSize  `json:"photo"`
	Sticker   OptSticker   `json:"sticker"`
	Story     OptStory     `json:"story"`
	Video     OptVideo     `json:"video"`
	VideoNote OptVideoNote `json:"video_note"`
	Voice     OptVoice     `json:"voice"`
	// _Optional_. Caption for the animation, audio, document, photo, video or voice.
	Caption OptString `json:"caption"`
	// _Optional_. For messages with a caption, special entities like usernames, URLs, bot commands, etc.
	// that appear in the caption.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// _Optional_. True, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool `json:"show_caption_above_media"`
	// _Optional_. _True_, if the message media is covered by a spoiler animation.
	HasMediaSpoiler OptBool     `json:"has_media_spoiler"`
	Contact         OptContact  `json:"contact"`
	Dice            OptDice     `json:"dice"`
	Game            OptGame     `json:"game"`
	Poll            OptPoll     `json:"poll"`
	Venue           OptVenue    `json:"venue"`
	Location        OptLocation `json:"location"`
	// _Optional_. New members that were added to the group or supergroup and information about them (the
	// bot itself may be one of these members).
	NewChatMembers []User  `json:"new_chat_members"`
	LeftChatMember OptUser `json:"left_chat_member"`
	// _Optional_. A chat title was changed to this value.
	NewChatTitle OptString `json:"new_chat_title"`
	// _Optional_. A chat photo was change to this value.
	NewChatPhoto []PhotoSize `json:"new_chat_photo"`
	// _Optional_. Service message: the chat photo was deleted.
	DeleteChatPhoto OptBool `json:"delete_chat_photo"`
	// _Optional_. Service message: the group has been created.
	GroupChatCreated OptBool `json:"group_chat_created"`
	// _Optional_. Service message: the supergroup has been created. This field can't be received in a
	// message coming through updates, because bot can't be a member of a supergroup when it is created.
	// It can only be found in reply_to_message if someone replies to a very first message in a directly
	// created supergroup.
	SupergroupChatCreated OptBool `json:"supergroup_chat_created"`
	// _Optional_. Service message: the channel has been created. This field can't be received in a
	// message coming through updates, because bot can't be a member of a channel when it is created. It
	// can only be found in reply_to_message if someone replies to a very first message in a channel.
	ChannelChatCreated            OptBool                          `json:"channel_chat_created"`
	MessageAutoDeleteTimerChanged OptMessageAutoDeleteTimerChanged `json:"message_auto_delete_timer_changed"`
	// _Optional_. The group has been migrated to a supergroup with the specified identifier. This number
	// may have more than 32 significant bits and some programming languages may have difficulty/silent
	// defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or
	// double-precision float type are safe for storing this identifier.
	MigrateToChatID OptInt64 `json:"migrate_to_chat_id"`
	// _Optional_. The supergroup has been migrated from a group with the specified identifier. This
	// number may have more than 32 significant bits and some programming languages may have
	// difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed
	// 64-bit integer or double-precision float type are safe for storing this identifier.
	MigrateFromChatID OptInt64                  `json:"migrate_from_chat_id"`
	PinnedMessage     *MaybeInaccessibleMessage `json:"pinned_message"`
	Invoice           OptInvoice                `json:"invoice"`
	SuccessfulPayment OptSuccessfulPayment      `json:"successful_payment"`
	UsersShared       OptUsersShared            `json:"users_shared"`
	ChatShared        OptChatShared             `json:"chat_shared"`
	// _Optional_. The domain name of the website on which the user has logged in. [More about Telegram
	// Login](https://core.telegram.org/widgets/login).
	ConnectedWebsite             OptString                       `json:"connected_website"`
	WriteAccessAllowed           OptWriteAccessAllowed           `json:"write_access_allowed"`
	PassportData                 OptPassportData                 `json:"passport_data"`
	ProximityAlertTriggered      OptProximityAlertTriggered      `json:"proximity_alert_triggered"`
	BoostAdded                   OptChatBoostAdded               `json:"boost_added"`
	ChatBackgroundSet            OptChatBackground               `json:"chat_background_set"`
	ForumTopicCreated            OptForumTopicCreated            `json:"forum_topic_created"`
	ForumTopicEdited             OptForumTopicEdited             `json:"forum_topic_edited"`
	ForumTopicClosed             OptForumTopicClosed             `json:"forum_topic_closed"`
	ForumTopicReopened           OptForumTopicReopened           `json:"forum_topic_reopened"`
	GeneralForumTopicHidden      OptGeneralForumTopicHidden      `json:"general_forum_topic_hidden"`
	GeneralForumTopicUnhidden    OptGeneralForumTopicUnhidden    `json:"general_forum_topic_unhidden"`
	GiveawayCreated              OptGiveawayCreated              `json:"giveaway_created"`
	Giveaway                     OptGiveaway                     `json:"giveaway"`
	GiveawayWinners              OptGiveawayWinners              `json:"giveaway_winners"`
	GiveawayCompleted            OptGiveawayCompleted            `json:"giveaway_completed"`
	VideoChatScheduled           OptVideoChatScheduled           `json:"video_chat_scheduled"`
	VideoChatStarted             OptVideoChatStarted             `json:"video_chat_started"`
	VideoChatEnded               OptVideoChatEnded               `json:"video_chat_ended"`
	VideoChatParticipantsInvited OptVideoChatParticipantsInvited `json:"video_chat_participants_invited"`
	WebAppData                   OptWebAppData                   `json:"web_app_data"`
	ReplyMarkup                  OptInlineKeyboardMarkup         `json:"reply_markup"`
	NewChatMember                OptUser                         `json:"new_chat_member"`
	NewChatParticipant           OptUser                         `json:"new_chat_participant"`
	LeftChatParticipant          OptUser                         `json:"left_chat_participant"`
}

// GetMessageID returns the value of MessageID.
func (s *Message) GetMessageID() int {
	return s.MessageID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *Message) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetFrom returns the value of From.
func (s *Message) GetFrom() OptUser {
	return s.From
}

// GetSenderChat returns the value of SenderChat.
func (s *Message) GetSenderChat() OptChat {
	return s.SenderChat
}

// GetSenderBoostCount returns the value of SenderBoostCount.
func (s *Message) GetSenderBoostCount() OptInt {
	return s.SenderBoostCount
}

// GetSenderBusinessBot returns the value of SenderBusinessBot.
func (s *Message) GetSenderBusinessBot() OptUser {
	return s.SenderBusinessBot
}

// GetDate returns the value of Date.
func (s *Message) GetDate() int {
	return s.Date
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *Message) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChat returns the value of Chat.
func (s *Message) GetChat() Chat {
	return s.Chat
}

// GetForwardOrigin returns the value of ForwardOrigin.
func (s *Message) GetForwardOrigin() OptMessageOrigin {
	return s.ForwardOrigin
}

// GetIsTopicMessage returns the value of IsTopicMessage.
func (s *Message) GetIsTopicMessage() OptBool {
	return s.IsTopicMessage
}

// GetIsAutomaticForward returns the value of IsAutomaticForward.
func (s *Message) GetIsAutomaticForward() OptBool {
	return s.IsAutomaticForward
}

// GetReplyToMessage returns the value of ReplyToMessage.
func (s *Message) GetReplyToMessage() *Message {
	return s.ReplyToMessage
}

// GetExternalReply returns the value of ExternalReply.
func (s *Message) GetExternalReply() OptExternalReplyInfo {
	return s.ExternalReply
}

// GetQuote returns the value of Quote.
func (s *Message) GetQuote() OptTextQuote {
	return s.Quote
}

// GetReplyToStory returns the value of ReplyToStory.
func (s *Message) GetReplyToStory() OptStory {
	return s.ReplyToStory
}

// GetViaBot returns the value of ViaBot.
func (s *Message) GetViaBot() OptUser {
	return s.ViaBot
}

// GetEditDate returns the value of EditDate.
func (s *Message) GetEditDate() OptInt {
	return s.EditDate
}

// GetHasProtectedContent returns the value of HasProtectedContent.
func (s *Message) GetHasProtectedContent() OptBool {
	return s.HasProtectedContent
}

// GetIsFromOffline returns the value of IsFromOffline.
func (s *Message) GetIsFromOffline() OptBool {
	return s.IsFromOffline
}

// GetMediaGroupID returns the value of MediaGroupID.
func (s *Message) GetMediaGroupID() OptString {
	return s.MediaGroupID
}

// GetAuthorSignature returns the value of AuthorSignature.
func (s *Message) GetAuthorSignature() OptString {
	return s.AuthorSignature
}

// GetText returns the value of Text.
func (s *Message) GetText() OptString {
	return s.Text
}

// GetEntities returns the value of Entities.
func (s *Message) GetEntities() []MessageEntity {
	return s.Entities
}

// GetLinkPreviewOptions returns the value of LinkPreviewOptions.
func (s *Message) GetLinkPreviewOptions() OptLinkPreviewOptions {
	return s.LinkPreviewOptions
}

// GetEffectID returns the value of EffectID.
func (s *Message) GetEffectID() OptString {
	return s.EffectID
}

// GetAnimation returns the value of Animation.
func (s *Message) GetAnimation() OptAnimation {
	return s.Animation
}

// GetAudio returns the value of Audio.
func (s *Message) GetAudio() OptAudio {
	return s.Audio
}

// GetDocument returns the value of Document.
func (s *Message) GetDocument() OptDocument {
	return s.Document
}

// GetPhoto returns the value of Photo.
func (s *Message) GetPhoto() []PhotoSize {
	return s.Photo
}

// GetSticker returns the value of Sticker.
func (s *Message) GetSticker() OptSticker {
	return s.Sticker
}

// GetStory returns the value of Story.
func (s *Message) GetStory() OptStory {
	return s.Story
}

// GetVideo returns the value of Video.
func (s *Message) GetVideo() OptVideo {
	return s.Video
}

// GetVideoNote returns the value of VideoNote.
func (s *Message) GetVideoNote() OptVideoNote {
	return s.VideoNote
}

// GetVoice returns the value of Voice.
func (s *Message) GetVoice() OptVoice {
	return s.Voice
}

// GetCaption returns the value of Caption.
func (s *Message) GetCaption() OptString {
	return s.Caption
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *Message) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *Message) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetHasMediaSpoiler returns the value of HasMediaSpoiler.
func (s *Message) GetHasMediaSpoiler() OptBool {
	return s.HasMediaSpoiler
}

// GetContact returns the value of Contact.
func (s *Message) GetContact() OptContact {
	return s.Contact
}

// GetDice returns the value of Dice.
func (s *Message) GetDice() OptDice {
	return s.Dice
}

// GetGame returns the value of Game.
func (s *Message) GetGame() OptGame {
	return s.Game
}

// GetPoll returns the value of Poll.
func (s *Message) GetPoll() OptPoll {
	return s.Poll
}

// GetVenue returns the value of Venue.
func (s *Message) GetVenue() OptVenue {
	return s.Venue
}

// GetLocation returns the value of Location.
func (s *Message) GetLocation() OptLocation {
	return s.Location
}

// GetNewChatMembers returns the value of NewChatMembers.
func (s *Message) GetNewChatMembers() []User {
	return s.NewChatMembers
}

// GetLeftChatMember returns the value of LeftChatMember.
func (s *Message) GetLeftChatMember() OptUser {
	return s.LeftChatMember
}

// GetNewChatTitle returns the value of NewChatTitle.
func (s *Message) GetNewChatTitle() OptString {
	return s.NewChatTitle
}

// GetNewChatPhoto returns the value of NewChatPhoto.
func (s *Message) GetNewChatPhoto() []PhotoSize {
	return s.NewChatPhoto
}

// GetDeleteChatPhoto returns the value of DeleteChatPhoto.
func (s *Message) GetDeleteChatPhoto() OptBool {
	return s.DeleteChatPhoto
}

// GetGroupChatCreated returns the value of GroupChatCreated.
func (s *Message) GetGroupChatCreated() OptBool {
	return s.GroupChatCreated
}

// GetSupergroupChatCreated returns the value of SupergroupChatCreated.
func (s *Message) GetSupergroupChatCreated() OptBool {
	return s.SupergroupChatCreated
}

// GetChannelChatCreated returns the value of ChannelChatCreated.
func (s *Message) GetChannelChatCreated() OptBool {
	return s.ChannelChatCreated
}

// GetMessageAutoDeleteTimerChanged returns the value of MessageAutoDeleteTimerChanged.
func (s *Message) GetMessageAutoDeleteTimerChanged() OptMessageAutoDeleteTimerChanged {
	return s.MessageAutoDeleteTimerChanged
}

// GetMigrateToChatID returns the value of MigrateToChatID.
func (s *Message) GetMigrateToChatID() OptInt64 {
	return s.MigrateToChatID
}

// GetMigrateFromChatID returns the value of MigrateFromChatID.
func (s *Message) GetMigrateFromChatID() OptInt64 {
	return s.MigrateFromChatID
}

// GetPinnedMessage returns the value of PinnedMessage.
func (s *Message) GetPinnedMessage() *MaybeInaccessibleMessage {
	return s.PinnedMessage
}

// GetInvoice returns the value of Invoice.
func (s *Message) GetInvoice() OptInvoice {
	return s.Invoice
}

// GetSuccessfulPayment returns the value of SuccessfulPayment.
func (s *Message) GetSuccessfulPayment() OptSuccessfulPayment {
	return s.SuccessfulPayment
}

// GetUsersShared returns the value of UsersShared.
func (s *Message) GetUsersShared() OptUsersShared {
	return s.UsersShared
}

// GetChatShared returns the value of ChatShared.
func (s *Message) GetChatShared() OptChatShared {
	return s.ChatShared
}

// GetConnectedWebsite returns the value of ConnectedWebsite.
func (s *Message) GetConnectedWebsite() OptString {
	return s.ConnectedWebsite
}

// GetWriteAccessAllowed returns the value of WriteAccessAllowed.
func (s *Message) GetWriteAccessAllowed() OptWriteAccessAllowed {
	return s.WriteAccessAllowed
}

// GetPassportData returns the value of PassportData.
func (s *Message) GetPassportData() OptPassportData {
	return s.PassportData
}

// GetProximityAlertTriggered returns the value of ProximityAlertTriggered.
func (s *Message) GetProximityAlertTriggered() OptProximityAlertTriggered {
	return s.ProximityAlertTriggered
}

// GetBoostAdded returns the value of BoostAdded.
func (s *Message) GetBoostAdded() OptChatBoostAdded {
	return s.BoostAdded
}

// GetChatBackgroundSet returns the value of ChatBackgroundSet.
func (s *Message) GetChatBackgroundSet() OptChatBackground {
	return s.ChatBackgroundSet
}

// GetForumTopicCreated returns the value of ForumTopicCreated.
func (s *Message) GetForumTopicCreated() OptForumTopicCreated {
	return s.ForumTopicCreated
}

// GetForumTopicEdited returns the value of ForumTopicEdited.
func (s *Message) GetForumTopicEdited() OptForumTopicEdited {
	return s.ForumTopicEdited
}

// GetForumTopicClosed returns the value of ForumTopicClosed.
func (s *Message) GetForumTopicClosed() OptForumTopicClosed {
	return s.ForumTopicClosed
}

// GetForumTopicReopened returns the value of ForumTopicReopened.
func (s *Message) GetForumTopicReopened() OptForumTopicReopened {
	return s.ForumTopicReopened
}

// GetGeneralForumTopicHidden returns the value of GeneralForumTopicHidden.
func (s *Message) GetGeneralForumTopicHidden() OptGeneralForumTopicHidden {
	return s.GeneralForumTopicHidden
}

// GetGeneralForumTopicUnhidden returns the value of GeneralForumTopicUnhidden.
func (s *Message) GetGeneralForumTopicUnhidden() OptGeneralForumTopicUnhidden {
	return s.GeneralForumTopicUnhidden
}

// GetGiveawayCreated returns the value of GiveawayCreated.
func (s *Message) GetGiveawayCreated() OptGiveawayCreated {
	return s.GiveawayCreated
}

// GetGiveaway returns the value of Giveaway.
func (s *Message) GetGiveaway() OptGiveaway {
	return s.Giveaway
}

// GetGiveawayWinners returns the value of GiveawayWinners.
func (s *Message) GetGiveawayWinners() OptGiveawayWinners {
	return s.GiveawayWinners
}

// GetGiveawayCompleted returns the value of GiveawayCompleted.
func (s *Message) GetGiveawayCompleted() OptGiveawayCompleted {
	return s.GiveawayCompleted
}

// GetVideoChatScheduled returns the value of VideoChatScheduled.
func (s *Message) GetVideoChatScheduled() OptVideoChatScheduled {
	return s.VideoChatScheduled
}

// GetVideoChatStarted returns the value of VideoChatStarted.
func (s *Message) GetVideoChatStarted() OptVideoChatStarted {
	return s.VideoChatStarted
}

// GetVideoChatEnded returns the value of VideoChatEnded.
func (s *Message) GetVideoChatEnded() OptVideoChatEnded {
	return s.VideoChatEnded
}

// GetVideoChatParticipantsInvited returns the value of VideoChatParticipantsInvited.
func (s *Message) GetVideoChatParticipantsInvited() OptVideoChatParticipantsInvited {
	return s.VideoChatParticipantsInvited
}

// GetWebAppData returns the value of WebAppData.
func (s *Message) GetWebAppData() OptWebAppData {
	return s.WebAppData
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *Message) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// GetNewChatMember returns the value of NewChatMember.
func (s *Message) GetNewChatMember() OptUser {
	return s.NewChatMember
}

// GetNewChatParticipant returns the value of NewChatParticipant.
func (s *Message) GetNewChatParticipant() OptUser {
	return s.NewChatParticipant
}

// GetLeftChatParticipant returns the value of LeftChatParticipant.
func (s *Message) GetLeftChatParticipant() OptUser {
	return s.LeftChatParticipant
}

// SetMessageID sets the value of MessageID.
func (s *Message) SetMessageID(val int) {
	s.MessageID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *Message) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetFrom sets the value of From.
func (s *Message) SetFrom(val OptUser) {
	s.From = val
}

// SetSenderChat sets the value of SenderChat.
func (s *Message) SetSenderChat(val OptChat) {
	s.SenderChat = val
}

// SetSenderBoostCount sets the value of SenderBoostCount.
func (s *Message) SetSenderBoostCount(val OptInt) {
	s.SenderBoostCount = val
}

// SetSenderBusinessBot sets the value of SenderBusinessBot.
func (s *Message) SetSenderBusinessBot(val OptUser) {
	s.SenderBusinessBot = val
}

// SetDate sets the value of Date.
func (s *Message) SetDate(val int) {
	s.Date = val
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *Message) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChat sets the value of Chat.
func (s *Message) SetChat(val Chat) {
	s.Chat = val
}

// SetForwardOrigin sets the value of ForwardOrigin.
func (s *Message) SetForwardOrigin(val OptMessageOrigin) {
	s.ForwardOrigin = val
}

// SetIsTopicMessage sets the value of IsTopicMessage.
func (s *Message) SetIsTopicMessage(val OptBool) {
	s.IsTopicMessage = val
}

// SetIsAutomaticForward sets the value of IsAutomaticForward.
func (s *Message) SetIsAutomaticForward(val OptBool) {
	s.IsAutomaticForward = val
}

// SetReplyToMessage sets the value of ReplyToMessage.
func (s *Message) SetReplyToMessage(val *Message) {
	s.ReplyToMessage = val
}

// SetExternalReply sets the value of ExternalReply.
func (s *Message) SetExternalReply(val OptExternalReplyInfo) {
	s.ExternalReply = val
}

// SetQuote sets the value of Quote.
func (s *Message) SetQuote(val OptTextQuote) {
	s.Quote = val
}

// SetReplyToStory sets the value of ReplyToStory.
func (s *Message) SetReplyToStory(val OptStory) {
	s.ReplyToStory = val
}

// SetViaBot sets the value of ViaBot.
func (s *Message) SetViaBot(val OptUser) {
	s.ViaBot = val
}

// SetEditDate sets the value of EditDate.
func (s *Message) SetEditDate(val OptInt) {
	s.EditDate = val
}

// SetHasProtectedContent sets the value of HasProtectedContent.
func (s *Message) SetHasProtectedContent(val OptBool) {
	s.HasProtectedContent = val
}

// SetIsFromOffline sets the value of IsFromOffline.
func (s *Message) SetIsFromOffline(val OptBool) {
	s.IsFromOffline = val
}

// SetMediaGroupID sets the value of MediaGroupID.
func (s *Message) SetMediaGroupID(val OptString) {
	s.MediaGroupID = val
}

// SetAuthorSignature sets the value of AuthorSignature.
func (s *Message) SetAuthorSignature(val OptString) {
	s.AuthorSignature = val
}

// SetText sets the value of Text.
func (s *Message) SetText(val OptString) {
	s.Text = val
}

// SetEntities sets the value of Entities.
func (s *Message) SetEntities(val []MessageEntity) {
	s.Entities = val
}

// SetLinkPreviewOptions sets the value of LinkPreviewOptions.
func (s *Message) SetLinkPreviewOptions(val OptLinkPreviewOptions) {
	s.LinkPreviewOptions = val
}

// SetEffectID sets the value of EffectID.
func (s *Message) SetEffectID(val OptString) {
	s.EffectID = val
}

// SetAnimation sets the value of Animation.
func (s *Message) SetAnimation(val OptAnimation) {
	s.Animation = val
}

// SetAudio sets the value of Audio.
func (s *Message) SetAudio(val OptAudio) {
	s.Audio = val
}

// SetDocument sets the value of Document.
func (s *Message) SetDocument(val OptDocument) {
	s.Document = val
}

// SetPhoto sets the value of Photo.
func (s *Message) SetPhoto(val []PhotoSize) {
	s.Photo = val
}

// SetSticker sets the value of Sticker.
func (s *Message) SetSticker(val OptSticker) {
	s.Sticker = val
}

// SetStory sets the value of Story.
func (s *Message) SetStory(val OptStory) {
	s.Story = val
}

// SetVideo sets the value of Video.
func (s *Message) SetVideo(val OptVideo) {
	s.Video = val
}

// SetVideoNote sets the value of VideoNote.
func (s *Message) SetVideoNote(val OptVideoNote) {
	s.VideoNote = val
}

// SetVoice sets the value of Voice.
func (s *Message) SetVoice(val OptVoice) {
	s.Voice = val
}

// SetCaption sets the value of Caption.
func (s *Message) SetCaption(val OptString) {
	s.Caption = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *Message) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *Message) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetHasMediaSpoiler sets the value of HasMediaSpoiler.
func (s *Message) SetHasMediaSpoiler(val OptBool) {
	s.HasMediaSpoiler = val
}

// SetContact sets the value of Contact.
func (s *Message) SetContact(val OptContact) {
	s.Contact = val
}

// SetDice sets the value of Dice.
func (s *Message) SetDice(val OptDice) {
	s.Dice = val
}

// SetGame sets the value of Game.
func (s *Message) SetGame(val OptGame) {
	s.Game = val
}

// SetPoll sets the value of Poll.
func (s *Message) SetPoll(val OptPoll) {
	s.Poll = val
}

// SetVenue sets the value of Venue.
func (s *Message) SetVenue(val OptVenue) {
	s.Venue = val
}

// SetLocation sets the value of Location.
func (s *Message) SetLocation(val OptLocation) {
	s.Location = val
}

// SetNewChatMembers sets the value of NewChatMembers.
func (s *Message) SetNewChatMembers(val []User) {
	s.NewChatMembers = val
}

// SetLeftChatMember sets the value of LeftChatMember.
func (s *Message) SetLeftChatMember(val OptUser) {
	s.LeftChatMember = val
}

// SetNewChatTitle sets the value of NewChatTitle.
func (s *Message) SetNewChatTitle(val OptString) {
	s.NewChatTitle = val
}

// SetNewChatPhoto sets the value of NewChatPhoto.
func (s *Message) SetNewChatPhoto(val []PhotoSize) {
	s.NewChatPhoto = val
}

// SetDeleteChatPhoto sets the value of DeleteChatPhoto.
func (s *Message) SetDeleteChatPhoto(val OptBool) {
	s.DeleteChatPhoto = val
}

// SetGroupChatCreated sets the value of GroupChatCreated.
func (s *Message) SetGroupChatCreated(val OptBool) {
	s.GroupChatCreated = val
}

// SetSupergroupChatCreated sets the value of SupergroupChatCreated.
func (s *Message) SetSupergroupChatCreated(val OptBool) {
	s.SupergroupChatCreated = val
}

// SetChannelChatCreated sets the value of ChannelChatCreated.
func (s *Message) SetChannelChatCreated(val OptBool) {
	s.ChannelChatCreated = val
}

// SetMessageAutoDeleteTimerChanged sets the value of MessageAutoDeleteTimerChanged.
func (s *Message) SetMessageAutoDeleteTimerChanged(val OptMessageAutoDeleteTimerChanged) {
	s.MessageAutoDeleteTimerChanged = val
}

// SetMigrateToChatID sets the value of MigrateToChatID.
func (s *Message) SetMigrateToChatID(val OptInt64) {
	s.MigrateToChatID = val
}

// SetMigrateFromChatID sets the value of MigrateFromChatID.
func (s *Message) SetMigrateFromChatID(val OptInt64) {
	s.MigrateFromChatID = val
}

// SetPinnedMessage sets the value of PinnedMessage.
func (s *Message) SetPinnedMessage(val *MaybeInaccessibleMessage) {
	s.PinnedMessage = val
}

// SetInvoice sets the value of Invoice.
func (s *Message) SetInvoice(val OptInvoice) {
	s.Invoice = val
}

// SetSuccessfulPayment sets the value of SuccessfulPayment.
func (s *Message) SetSuccessfulPayment(val OptSuccessfulPayment) {
	s.SuccessfulPayment = val
}

// SetUsersShared sets the value of UsersShared.
func (s *Message) SetUsersShared(val OptUsersShared) {
	s.UsersShared = val
}

// SetChatShared sets the value of ChatShared.
func (s *Message) SetChatShared(val OptChatShared) {
	s.ChatShared = val
}

// SetConnectedWebsite sets the value of ConnectedWebsite.
func (s *Message) SetConnectedWebsite(val OptString) {
	s.ConnectedWebsite = val
}

// SetWriteAccessAllowed sets the value of WriteAccessAllowed.
func (s *Message) SetWriteAccessAllowed(val OptWriteAccessAllowed) {
	s.WriteAccessAllowed = val
}

// SetPassportData sets the value of PassportData.
func (s *Message) SetPassportData(val OptPassportData) {
	s.PassportData = val
}

// SetProximityAlertTriggered sets the value of ProximityAlertTriggered.
func (s *Message) SetProximityAlertTriggered(val OptProximityAlertTriggered) {
	s.ProximityAlertTriggered = val
}

// SetBoostAdded sets the value of BoostAdded.
func (s *Message) SetBoostAdded(val OptChatBoostAdded) {
	s.BoostAdded = val
}

// SetChatBackgroundSet sets the value of ChatBackgroundSet.
func (s *Message) SetChatBackgroundSet(val OptChatBackground) {
	s.ChatBackgroundSet = val
}

// SetForumTopicCreated sets the value of ForumTopicCreated.
func (s *Message) SetForumTopicCreated(val OptForumTopicCreated) {
	s.ForumTopicCreated = val
}

// SetForumTopicEdited sets the value of ForumTopicEdited.
func (s *Message) SetForumTopicEdited(val OptForumTopicEdited) {
	s.ForumTopicEdited = val
}

// SetForumTopicClosed sets the value of ForumTopicClosed.
func (s *Message) SetForumTopicClosed(val OptForumTopicClosed) {
	s.ForumTopicClosed = val
}

// SetForumTopicReopened sets the value of ForumTopicReopened.
func (s *Message) SetForumTopicReopened(val OptForumTopicReopened) {
	s.ForumTopicReopened = val
}

// SetGeneralForumTopicHidden sets the value of GeneralForumTopicHidden.
func (s *Message) SetGeneralForumTopicHidden(val OptGeneralForumTopicHidden) {
	s.GeneralForumTopicHidden = val
}

// SetGeneralForumTopicUnhidden sets the value of GeneralForumTopicUnhidden.
func (s *Message) SetGeneralForumTopicUnhidden(val OptGeneralForumTopicUnhidden) {
	s.GeneralForumTopicUnhidden = val
}

// SetGiveawayCreated sets the value of GiveawayCreated.
func (s *Message) SetGiveawayCreated(val OptGiveawayCreated) {
	s.GiveawayCreated = val
}

// SetGiveaway sets the value of Giveaway.
func (s *Message) SetGiveaway(val OptGiveaway) {
	s.Giveaway = val
}

// SetGiveawayWinners sets the value of GiveawayWinners.
func (s *Message) SetGiveawayWinners(val OptGiveawayWinners) {
	s.GiveawayWinners = val
}

// SetGiveawayCompleted sets the value of GiveawayCompleted.
func (s *Message) SetGiveawayCompleted(val OptGiveawayCompleted) {
	s.GiveawayCompleted = val
}

// SetVideoChatScheduled sets the value of VideoChatScheduled.
func (s *Message) SetVideoChatScheduled(val OptVideoChatScheduled) {
	s.VideoChatScheduled = val
}

// SetVideoChatStarted sets the value of VideoChatStarted.
func (s *Message) SetVideoChatStarted(val OptVideoChatStarted) {
	s.VideoChatStarted = val
}

// SetVideoChatEnded sets the value of VideoChatEnded.
func (s *Message) SetVideoChatEnded(val OptVideoChatEnded) {
	s.VideoChatEnded = val
}

// SetVideoChatParticipantsInvited sets the value of VideoChatParticipantsInvited.
func (s *Message) SetVideoChatParticipantsInvited(val OptVideoChatParticipantsInvited) {
	s.VideoChatParticipantsInvited = val
}

// SetWebAppData sets the value of WebAppData.
func (s *Message) SetWebAppData(val OptWebAppData) {
	s.WebAppData = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *Message) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// SetNewChatMember sets the value of NewChatMember.
func (s *Message) SetNewChatMember(val OptUser) {
	s.NewChatMember = val
}

// SetNewChatParticipant sets the value of NewChatParticipant.
func (s *Message) SetNewChatParticipant(val OptUser) {
	s.NewChatParticipant = val
}

// SetLeftChatParticipant sets the value of LeftChatParticipant.
func (s *Message) SetLeftChatParticipant(val OptUser) {
	s.LeftChatParticipant = val
}

// This object represents a service message about a change in auto-delete timer settings.
// Ref: #/components/schemas/MessageAutoDeleteTimerChanged
type MessageAutoDeleteTimerChanged struct {
	// New auto-delete time for messages in the chat; in seconds.
	MessageAutoDeleteTime int `json:"message_auto_delete_time"`
}

// GetMessageAutoDeleteTime returns the value of MessageAutoDeleteTime.
func (s *MessageAutoDeleteTimerChanged) GetMessageAutoDeleteTime() int {
	return s.MessageAutoDeleteTime
}

// SetMessageAutoDeleteTime sets the value of MessageAutoDeleteTime.
func (s *MessageAutoDeleteTimerChanged) SetMessageAutoDeleteTime(val int) {
	s.MessageAutoDeleteTime = val
}

// This object represents one special entity in a text message. For example, hashtags, usernames,
// URLs, etc.
// Ref: #/components/schemas/MessageEntity
type MessageEntity struct {
	// Type of the entity. Currently, can be `mention` (`@username`), `hashtag` (`#hashtag`), `cashtag`
	// (`$USD`), `bot_command` (`/start@jobs_bot`), `url` (`https://telegram.org`), `email`
	// (`do-not-reply@telegram.org`), `phone_number` (`+1-212-555-0123`), `bold` (**bold text**),
	// `italic` (_italic text_), `underline` (underlined text), `strikethrough` (strikethrough text),
	// `spoiler` (spoiler message), `blockquote` (block quotation), `expandable_blockquote`
	// (collapsed-by-default block quotation), `code` (monowidth string), `pre` (monowidth block),
	// `text_link` (for clickable text URLs), `text_mention` (for users [without
	// usernames](https://telegram.org/blog/edit#new-mentions)), `custom_emoji` (for inline custom emoji
	// stickers).
	Type MessageEntityType `json:"type"`
	// Offset in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length) to the start
	// of the entity.
	Offset int `json:"offset"`
	// Length of the entity in [UTF-16 code units](https://core.telegram.org/api/entities#entity-length).
	Length int `json:"length"`
	// _Optional_. For `text_link` only, URL that will be opened after user taps on the text.
	URL  OptString `json:"url"`
	User OptUser   `json:"user"`
	// _Optional_. For `pre` only, the programming language of the entity text.
	Language OptString `json:"language"`
	// _Optional_. For `custom_emoji` only, unique identifier of the custom emoji. Use
	// [getCustomEmojiStickers](https://core.telegram.org/bots/api#getcustomemojistickers) to get full
	// information about the sticker.
	CustomEmojiID OptString `json:"custom_emoji_id"`
}

// GetType returns the value of Type.
func (s *MessageEntity) GetType() MessageEntityType {
	return s.Type
}

// GetOffset returns the value of Offset.
func (s *MessageEntity) GetOffset() int {
	return s.Offset
}

// GetLength returns the value of Length.
func (s *MessageEntity) GetLength() int {
	return s.Length
}

// GetURL returns the value of URL.
func (s *MessageEntity) GetURL() OptString {
	return s.URL
}

// GetUser returns the value of User.
func (s *MessageEntity) GetUser() OptUser {
	return s.User
}

// GetLanguage returns the value of Language.
func (s *MessageEntity) GetLanguage() OptString {
	return s.Language
}

// GetCustomEmojiID returns the value of CustomEmojiID.
func (s *MessageEntity) GetCustomEmojiID() OptString {
	return s.CustomEmojiID
}

// SetType sets the value of Type.
func (s *MessageEntity) SetType(val MessageEntityType) {
	s.Type = val
}

// SetOffset sets the value of Offset.
func (s *MessageEntity) SetOffset(val int) {
	s.Offset = val
}

// SetLength sets the value of Length.
func (s *MessageEntity) SetLength(val int) {
	s.Length = val
}

// SetURL sets the value of URL.
func (s *MessageEntity) SetURL(val OptString) {
	s.URL = val
}

// SetUser sets the value of User.
func (s *MessageEntity) SetUser(val OptUser) {
	s.User = val
}

// SetLanguage sets the value of Language.
func (s *MessageEntity) SetLanguage(val OptString) {
	s.Language = val
}

// SetCustomEmojiID sets the value of CustomEmojiID.
func (s *MessageEntity) SetCustomEmojiID(val OptString) {
	s.CustomEmojiID = val
}

// Type of the entity. Currently, can be `mention` (`@username`), `hashtag` (`#hashtag`), `cashtag`
// (`$USD`), `bot_command` (`/start@jobs_bot`), `url` (`https://telegram.org`), `email`
// (`do-not-reply@telegram.org`), `phone_number` (`+1-212-555-0123`), `bold` (**bold text**),
// `italic` (_italic text_), `underline` (underlined text), `strikethrough` (strikethrough text),
// `spoiler` (spoiler message), `blockquote` (block quotation), `expandable_blockquote`
// (collapsed-by-default block quotation), `code` (monowidth string), `pre` (monowidth block),
// `text_link` (for clickable text URLs), `text_mention` (for users [without
// usernames](https://telegram.org/blog/edit#new-mentions)), `custom_emoji` (for inline custom emoji
// stickers).
type MessageEntityType string

const (
	MessageEntityTypeMention              MessageEntityType = "mention"
	MessageEntityTypeHashtag              MessageEntityType = "hashtag"
	MessageEntityTypeCashtag              MessageEntityType = "cashtag"
	MessageEntityTypeBotCommand           MessageEntityType = "bot_command"
	MessageEntityTypeURL                  MessageEntityType = "url"
	MessageEntityTypeEmail                MessageEntityType = "email"
	MessageEntityTypePhoneNumber          MessageEntityType = "phone_number"
	MessageEntityTypeBold                 MessageEntityType = "bold"
	MessageEntityTypeItalic               MessageEntityType = "italic"
	MessageEntityTypeUnderline            MessageEntityType = "underline"
	MessageEntityTypeStrikethrough        MessageEntityType = "strikethrough"
	MessageEntityTypeSpoiler              MessageEntityType = "spoiler"
	MessageEntityTypeBlockquote           MessageEntityType = "blockquote"
	MessageEntityTypeExpandableBlockquote MessageEntityType = "expandable_blockquote"
	MessageEntityTypeCode                 MessageEntityType = "code"
	MessageEntityTypePre                  MessageEntityType = "pre"
	MessageEntityTypeTextLink             MessageEntityType = "text_link"
	MessageEntityTypeTextMention          MessageEntityType = "text_mention"
	MessageEntityTypeCustomEmoji          MessageEntityType = "custom_emoji"
)

// AllValues returns all MessageEntityType values.
func (MessageEntityType) AllValues() []MessageEntityType {
	return []MessageEntityType{
		MessageEntityTypeMention,
		MessageEntityTypeHashtag,
		MessageEntityTypeCashtag,
		MessageEntityTypeBotCommand,
		MessageEntityTypeURL,
		MessageEntityTypeEmail,
		MessageEntityTypePhoneNumber,
		MessageEntityTypeBold,
		MessageEntityTypeItalic,
		MessageEntityTypeUnderline,
		MessageEntityTypeStrikethrough,
		MessageEntityTypeSpoiler,
		MessageEntityTypeBlockquote,
		MessageEntityTypeExpandableBlockquote,
		MessageEntityTypeCode,
		MessageEntityTypePre,
		MessageEntityTypeTextLink,
		MessageEntityTypeTextMention,
		MessageEntityTypeCustomEmoji,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageEntityType) MarshalText() ([]byte, error) {
	switch s {
	case MessageEntityTypeMention:
		return []byte(s), nil
	case MessageEntityTypeHashtag:
		return []byte(s), nil
	case MessageEntityTypeCashtag:
		return []byte(s), nil
	case MessageEntityTypeBotCommand:
		return []byte(s), nil
	case MessageEntityTypeURL:
		return []byte(s), nil
	case MessageEntityTypeEmail:
		return []byte(s), nil
	case MessageEntityTypePhoneNumber:
		return []byte(s), nil
	case MessageEntityTypeBold:
		return []byte(s), nil
	case MessageEntityTypeItalic:
		return []byte(s), nil
	case MessageEntityTypeUnderline:
		return []byte(s), nil
	case MessageEntityTypeStrikethrough:
		return []byte(s), nil
	case MessageEntityTypeSpoiler:
		return []byte(s), nil
	case MessageEntityTypeBlockquote:
		return []byte(s), nil
	case MessageEntityTypeExpandableBlockquote:
		return []byte(s), nil
	case MessageEntityTypeCode:
		return []byte(s), nil
	case MessageEntityTypePre:
		return []byte(s), nil
	case MessageEntityTypeTextLink:
		return []byte(s), nil
	case MessageEntityTypeTextMention:
		return []byte(s), nil
	case MessageEntityTypeCustomEmoji:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageEntityType) UnmarshalText(data []byte) error {
	switch MessageEntityType(data) {
	case MessageEntityTypeMention:
		*s = MessageEntityTypeMention
		return nil
	case MessageEntityTypeHashtag:
		*s = MessageEntityTypeHashtag
		return nil
	case MessageEntityTypeCashtag:
		*s = MessageEntityTypeCashtag
		return nil
	case MessageEntityTypeBotCommand:
		*s = MessageEntityTypeBotCommand
		return nil
	case MessageEntityTypeURL:
		*s = MessageEntityTypeURL
		return nil
	case MessageEntityTypeEmail:
		*s = MessageEntityTypeEmail
		return nil
	case MessageEntityTypePhoneNumber:
		*s = MessageEntityTypePhoneNumber
		return nil
	case MessageEntityTypeBold:
		*s = MessageEntityTypeBold
		return nil
	case MessageEntityTypeItalic:
		*s = MessageEntityTypeItalic
		return nil
	case MessageEntityTypeUnderline:
		*s = MessageEntityTypeUnderline
		return nil
	case MessageEntityTypeStrikethrough:
		*s = MessageEntityTypeStrikethrough
		return nil
	case MessageEntityTypeSpoiler:
		*s = MessageEntityTypeSpoiler
		return nil
	case MessageEntityTypeBlockquote:
		*s = MessageEntityTypeBlockquote
		return nil
	case MessageEntityTypeExpandableBlockquote:
		*s = MessageEntityTypeExpandableBlockquote
		return nil
	case MessageEntityTypeCode:
		*s = MessageEntityTypeCode
		return nil
	case MessageEntityTypePre:
		*s = MessageEntityTypePre
		return nil
	case MessageEntityTypeTextLink:
		*s = MessageEntityTypeTextLink
		return nil
	case MessageEntityTypeTextMention:
		*s = MessageEntityTypeTextMention
		return nil
	case MessageEntityTypeCustomEmoji:
		*s = MessageEntityTypeCustomEmoji
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This object represents a unique message identifier.
// Ref: #/components/schemas/MessageId
type MessageId struct {
	// Unique message identifier.
	MessageID int `json:"message_id"`
}

// GetMessageID returns the value of MessageID.
func (s *MessageId) GetMessageID() int {
	return s.MessageID
}

// SetMessageID sets the value of MessageID.
func (s *MessageId) SetMessageID(val int) {
	s.MessageID = val
}

// This object describes the origin of a message. It can be one of.
// Ref: #/components/schemas/MessageOrigin
// MessageOrigin represents sum type.
type MessageOrigin struct {
	Type                    MessageOriginType // switch on this field
	MessageOriginUser       MessageOriginUser
	MessageOriginHiddenUser MessageOriginHiddenUser
	MessageOriginChat       MessageOriginChat
	MessageOriginChannel    MessageOriginChannel
}

// MessageOriginType is oneOf type of MessageOrigin.
type MessageOriginType string

// Possible values for MessageOriginType.
const (
	MessageOriginUserMessageOrigin       MessageOriginType = "MessageOriginUser"
	MessageOriginHiddenUserMessageOrigin MessageOriginType = "MessageOriginHiddenUser"
	MessageOriginChatMessageOrigin       MessageOriginType = "MessageOriginChat"
	MessageOriginChannelMessageOrigin    MessageOriginType = "MessageOriginChannel"
)

// IsMessageOriginUser reports whether MessageOrigin is MessageOriginUser.
func (s MessageOrigin) IsMessageOriginUser() bool { return s.Type == MessageOriginUserMessageOrigin }

// IsMessageOriginHiddenUser reports whether MessageOrigin is MessageOriginHiddenUser.
func (s MessageOrigin) IsMessageOriginHiddenUser() bool {
	return s.Type == MessageOriginHiddenUserMessageOrigin
}

// IsMessageOriginChat reports whether MessageOrigin is MessageOriginChat.
func (s MessageOrigin) IsMessageOriginChat() bool { return s.Type == MessageOriginChatMessageOrigin }

// IsMessageOriginChannel reports whether MessageOrigin is MessageOriginChannel.
func (s MessageOrigin) IsMessageOriginChannel() bool {
	return s.Type == MessageOriginChannelMessageOrigin
}

// SetMessageOriginUser sets MessageOrigin to MessageOriginUser.
func (s *MessageOrigin) SetMessageOriginUser(v MessageOriginUser) {
	s.Type = MessageOriginUserMessageOrigin
	s.MessageOriginUser = v
}

// GetMessageOriginUser returns MessageOriginUser and true boolean if MessageOrigin is MessageOriginUser.
func (s MessageOrigin) GetMessageOriginUser() (v MessageOriginUser, ok bool) {
	if !s.IsMessageOriginUser() {
		return v, false
	}
	return s.MessageOriginUser, true
}

// NewMessageOriginUserMessageOrigin returns new MessageOrigin from MessageOriginUser.
func NewMessageOriginUserMessageOrigin(v MessageOriginUser) MessageOrigin {
	var s MessageOrigin
	s.SetMessageOriginUser(v)
	return s
}

// SetMessageOriginHiddenUser sets MessageOrigin to MessageOriginHiddenUser.
func (s *MessageOrigin) SetMessageOriginHiddenUser(v MessageOriginHiddenUser) {
	s.Type = MessageOriginHiddenUserMessageOrigin
	s.MessageOriginHiddenUser = v
}

// GetMessageOriginHiddenUser returns MessageOriginHiddenUser and true boolean if MessageOrigin is MessageOriginHiddenUser.
func (s MessageOrigin) GetMessageOriginHiddenUser() (v MessageOriginHiddenUser, ok bool) {
	if !s.IsMessageOriginHiddenUser() {
		return v, false
	}
	return s.MessageOriginHiddenUser, true
}

// NewMessageOriginHiddenUserMessageOrigin returns new MessageOrigin from MessageOriginHiddenUser.
func NewMessageOriginHiddenUserMessageOrigin(v MessageOriginHiddenUser) MessageOrigin {
	var s MessageOrigin
	s.SetMessageOriginHiddenUser(v)
	return s
}

// SetMessageOriginChat sets MessageOrigin to MessageOriginChat.
func (s *MessageOrigin) SetMessageOriginChat(v MessageOriginChat) {
	s.Type = MessageOriginChatMessageOrigin
	s.MessageOriginChat = v
}

// GetMessageOriginChat returns MessageOriginChat and true boolean if MessageOrigin is MessageOriginChat.
func (s MessageOrigin) GetMessageOriginChat() (v MessageOriginChat, ok bool) {
	if !s.IsMessageOriginChat() {
		return v, false
	}
	return s.MessageOriginChat, true
}

// NewMessageOriginChatMessageOrigin returns new MessageOrigin from MessageOriginChat.
func NewMessageOriginChatMessageOrigin(v MessageOriginChat) MessageOrigin {
	var s MessageOrigin
	s.SetMessageOriginChat(v)
	return s
}

// SetMessageOriginChannel sets MessageOrigin to MessageOriginChannel.
func (s *MessageOrigin) SetMessageOriginChannel(v MessageOriginChannel) {
	s.Type = MessageOriginChannelMessageOrigin
	s.MessageOriginChannel = v
}

// GetMessageOriginChannel returns MessageOriginChannel and true boolean if MessageOrigin is MessageOriginChannel.
func (s MessageOrigin) GetMessageOriginChannel() (v MessageOriginChannel, ok bool) {
	if !s.IsMessageOriginChannel() {
		return v, false
	}
	return s.MessageOriginChannel, true
}

// NewMessageOriginChannelMessageOrigin returns new MessageOrigin from MessageOriginChannel.
func NewMessageOriginChannelMessageOrigin(v MessageOriginChannel) MessageOrigin {
	var s MessageOrigin
	s.SetMessageOriginChannel(v)
	return s
}

// The message was originally sent to a channel chat.
// Ref: #/components/schemas/MessageOriginChannel
type MessageOriginChannel struct {
	// Type of the message origin, always `channel`.
	Type string `json:"type"`
	// Date the message was sent originally in Unix time.
	Date int  `json:"date"`
	Chat Chat `json:"chat"`
	// Unique message identifier inside the chat.
	MessageID int `json:"message_id"`
	// _Optional_. Signature of the original post author.
	AuthorSignature OptString `json:"author_signature"`
}

// GetType returns the value of Type.
func (s *MessageOriginChannel) GetType() string {
	return s.Type
}

// GetDate returns the value of Date.
func (s *MessageOriginChannel) GetDate() int {
	return s.Date
}

// GetChat returns the value of Chat.
func (s *MessageOriginChannel) GetChat() Chat {
	return s.Chat
}

// GetMessageID returns the value of MessageID.
func (s *MessageOriginChannel) GetMessageID() int {
	return s.MessageID
}

// GetAuthorSignature returns the value of AuthorSignature.
func (s *MessageOriginChannel) GetAuthorSignature() OptString {
	return s.AuthorSignature
}

// SetType sets the value of Type.
func (s *MessageOriginChannel) SetType(val string) {
	s.Type = val
}

// SetDate sets the value of Date.
func (s *MessageOriginChannel) SetDate(val int) {
	s.Date = val
}

// SetChat sets the value of Chat.
func (s *MessageOriginChannel) SetChat(val Chat) {
	s.Chat = val
}

// SetMessageID sets the value of MessageID.
func (s *MessageOriginChannel) SetMessageID(val int) {
	s.MessageID = val
}

// SetAuthorSignature sets the value of AuthorSignature.
func (s *MessageOriginChannel) SetAuthorSignature(val OptString) {
	s.AuthorSignature = val
}

// The message was originally sent on behalf of a chat to a group chat.
// Ref: #/components/schemas/MessageOriginChat
type MessageOriginChat struct {
	// Type of the message origin, always `chat`.
	Type string `json:"type"`
	// Date the message was sent originally in Unix time.
	Date       int  `json:"date"`
	SenderChat Chat `json:"sender_chat"`
	// _Optional_. For messages originally sent by an anonymous chat administrator, original message
	// author signature.
	AuthorSignature OptString `json:"author_signature"`
}

// GetType returns the value of Type.
func (s *MessageOriginChat) GetType() string {
	return s.Type
}

// GetDate returns the value of Date.
func (s *MessageOriginChat) GetDate() int {
	return s.Date
}

// GetSenderChat returns the value of SenderChat.
func (s *MessageOriginChat) GetSenderChat() Chat {
	return s.SenderChat
}

// GetAuthorSignature returns the value of AuthorSignature.
func (s *MessageOriginChat) GetAuthorSignature() OptString {
	return s.AuthorSignature
}

// SetType sets the value of Type.
func (s *MessageOriginChat) SetType(val string) {
	s.Type = val
}

// SetDate sets the value of Date.
func (s *MessageOriginChat) SetDate(val int) {
	s.Date = val
}

// SetSenderChat sets the value of SenderChat.
func (s *MessageOriginChat) SetSenderChat(val Chat) {
	s.SenderChat = val
}

// SetAuthorSignature sets the value of AuthorSignature.
func (s *MessageOriginChat) SetAuthorSignature(val OptString) {
	s.AuthorSignature = val
}

// The message was originally sent by an unknown user.
// Ref: #/components/schemas/MessageOriginHiddenUser
type MessageOriginHiddenUser struct {
	// Type of the message origin, always `hidden_user`.
	Type string `json:"type"`
	// Date the message was sent originally in Unix time.
	Date int `json:"date"`
	// Name of the user that sent the message originally.
	SenderUserName string `json:"sender_user_name"`
}

// GetType returns the value of Type.
func (s *MessageOriginHiddenUser) GetType() string {
	return s.Type
}

// GetDate returns the value of Date.
func (s *MessageOriginHiddenUser) GetDate() int {
	return s.Date
}

// GetSenderUserName returns the value of SenderUserName.
func (s *MessageOriginHiddenUser) GetSenderUserName() string {
	return s.SenderUserName
}

// SetType sets the value of Type.
func (s *MessageOriginHiddenUser) SetType(val string) {
	s.Type = val
}

// SetDate sets the value of Date.
func (s *MessageOriginHiddenUser) SetDate(val int) {
	s.Date = val
}

// SetSenderUserName sets the value of SenderUserName.
func (s *MessageOriginHiddenUser) SetSenderUserName(val string) {
	s.SenderUserName = val
}

// The message was originally sent by a known user.
// Ref: #/components/schemas/MessageOriginUser
type MessageOriginUser struct {
	// Type of the message origin, always `user`.
	Type string `json:"type"`
	// Date the message was sent originally in Unix time.
	Date       int  `json:"date"`
	SenderUser User `json:"sender_user"`
}

// GetType returns the value of Type.
func (s *MessageOriginUser) GetType() string {
	return s.Type
}

// GetDate returns the value of Date.
func (s *MessageOriginUser) GetDate() int {
	return s.Date
}

// GetSenderUser returns the value of SenderUser.
func (s *MessageOriginUser) GetSenderUser() User {
	return s.SenderUser
}

// SetType sets the value of Type.
func (s *MessageOriginUser) SetType(val string) {
	s.Type = val
}

// SetDate sets the value of Date.
func (s *MessageOriginUser) SetDate(val int) {
	s.Date = val
}

// SetSenderUser sets the value of SenderUser.
func (s *MessageOriginUser) SetSenderUser(val User) {
	s.SenderUser = val
}

// This object represents reaction changes on a message with anonymous reactions.
// Ref: #/components/schemas/MessageReactionCountUpdated
type MessageReactionCountUpdated struct {
	Chat Chat `json:"chat"`
	// Unique message identifier inside the chat.
	MessageID int `json:"message_id"`
	// Date of the change in Unix time.
	Date int `json:"date"`
	// List of reactions that are present on the message.
	Reactions []ReactionCount `json:"reactions"`
}

// GetChat returns the value of Chat.
func (s *MessageReactionCountUpdated) GetChat() Chat {
	return s.Chat
}

// GetMessageID returns the value of MessageID.
func (s *MessageReactionCountUpdated) GetMessageID() int {
	return s.MessageID
}

// GetDate returns the value of Date.
func (s *MessageReactionCountUpdated) GetDate() int {
	return s.Date
}

// GetReactions returns the value of Reactions.
func (s *MessageReactionCountUpdated) GetReactions() []ReactionCount {
	return s.Reactions
}

// SetChat sets the value of Chat.
func (s *MessageReactionCountUpdated) SetChat(val Chat) {
	s.Chat = val
}

// SetMessageID sets the value of MessageID.
func (s *MessageReactionCountUpdated) SetMessageID(val int) {
	s.MessageID = val
}

// SetDate sets the value of Date.
func (s *MessageReactionCountUpdated) SetDate(val int) {
	s.Date = val
}

// SetReactions sets the value of Reactions.
func (s *MessageReactionCountUpdated) SetReactions(val []ReactionCount) {
	s.Reactions = val
}

// This object represents a change of a reaction on a message performed by a user.
// Ref: #/components/schemas/MessageReactionUpdated
type MessageReactionUpdated struct {
	Chat Chat `json:"chat"`
	// Unique identifier of the message inside the chat.
	MessageID int     `json:"message_id"`
	User      OptUser `json:"user"`
	ActorChat OptChat `json:"actor_chat"`
	// Date of the change in Unix time.
	Date int `json:"date"`
	// Previous list of reaction types that were set by the user.
	OldReaction []ReactionType `json:"old_reaction"`
	// New list of reaction types that have been set by the user.
	NewReaction []ReactionType `json:"new_reaction"`
}

// GetChat returns the value of Chat.
func (s *MessageReactionUpdated) GetChat() Chat {
	return s.Chat
}

// GetMessageID returns the value of MessageID.
func (s *MessageReactionUpdated) GetMessageID() int {
	return s.MessageID
}

// GetUser returns the value of User.
func (s *MessageReactionUpdated) GetUser() OptUser {
	return s.User
}

// GetActorChat returns the value of ActorChat.
func (s *MessageReactionUpdated) GetActorChat() OptChat {
	return s.ActorChat
}

// GetDate returns the value of Date.
func (s *MessageReactionUpdated) GetDate() int {
	return s.Date
}

// GetOldReaction returns the value of OldReaction.
func (s *MessageReactionUpdated) GetOldReaction() []ReactionType {
	return s.OldReaction
}

// GetNewReaction returns the value of NewReaction.
func (s *MessageReactionUpdated) GetNewReaction() []ReactionType {
	return s.NewReaction
}

// SetChat sets the value of Chat.
func (s *MessageReactionUpdated) SetChat(val Chat) {
	s.Chat = val
}

// SetMessageID sets the value of MessageID.
func (s *MessageReactionUpdated) SetMessageID(val int) {
	s.MessageID = val
}

// SetUser sets the value of User.
func (s *MessageReactionUpdated) SetUser(val OptUser) {
	s.User = val
}

// SetActorChat sets the value of ActorChat.
func (s *MessageReactionUpdated) SetActorChat(val OptChat) {
	s.ActorChat = val
}

// SetDate sets the value of Date.
func (s *MessageReactionUpdated) SetDate(val int) {
	s.Date = val
}

// SetOldReaction sets the value of OldReaction.
func (s *MessageReactionUpdated) SetOldReaction(val []ReactionType) {
	s.OldReaction = val
}

// SetNewReaction sets the value of NewReaction.
func (s *MessageReactionUpdated) SetNewReaction(val []ReactionType) {
	s.NewReaction = val
}

// NewOptAnimation returns new OptAnimation with value set to v.
func NewOptAnimation(v Animation) OptAnimation {
	return OptAnimation{
		Value: v,
		Set:   true,
	}
}

// OptAnimation is optional Animation.
type OptAnimation struct {
	Value Animation
	Set   bool
}

// IsSet returns true if OptAnimation was set.
func (o OptAnimation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAnimation) Reset() {
	var v Animation
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAnimation) SetTo(v Animation) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAnimation) Get() (v Animation, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAnimation) Or(d Animation) Animation {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAudio returns new OptAudio with value set to v.
func NewOptAudio(v Audio) OptAudio {
	return OptAudio{
		Value: v,
		Set:   true,
	}
}

// OptAudio is optional Audio.
type OptAudio struct {
	Value Audio
	Set   bool
}

// IsSet returns true if OptAudio was set.
func (o OptAudio) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAudio) Reset() {
	var v Audio
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAudio) SetTo(v Audio) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAudio) Get() (v Audio, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAudio) Or(d Audio) Audio {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBotCommandScope returns new OptBotCommandScope with value set to v.
func NewOptBotCommandScope(v BotCommandScope) OptBotCommandScope {
	return OptBotCommandScope{
		Value: v,
		Set:   true,
	}
}

// OptBotCommandScope is optional BotCommandScope.
type OptBotCommandScope struct {
	Value BotCommandScope
	Set   bool
}

// IsSet returns true if OptBotCommandScope was set.
func (o OptBotCommandScope) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBotCommandScope) Reset() {
	var v BotCommandScope
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBotCommandScope) SetTo(v BotCommandScope) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBotCommandScope) Get() (v BotCommandScope, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBotCommandScope) Or(d BotCommandScope) BotCommandScope {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBusinessConnection returns new OptBusinessConnection with value set to v.
func NewOptBusinessConnection(v BusinessConnection) OptBusinessConnection {
	return OptBusinessConnection{
		Value: v,
		Set:   true,
	}
}

// OptBusinessConnection is optional BusinessConnection.
type OptBusinessConnection struct {
	Value BusinessConnection
	Set   bool
}

// IsSet returns true if OptBusinessConnection was set.
func (o OptBusinessConnection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBusinessConnection) Reset() {
	var v BusinessConnection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBusinessConnection) SetTo(v BusinessConnection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBusinessConnection) Get() (v BusinessConnection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBusinessConnection) Or(d BusinessConnection) BusinessConnection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBusinessMessagesDeleted returns new OptBusinessMessagesDeleted with value set to v.
func NewOptBusinessMessagesDeleted(v BusinessMessagesDeleted) OptBusinessMessagesDeleted {
	return OptBusinessMessagesDeleted{
		Value: v,
		Set:   true,
	}
}

// OptBusinessMessagesDeleted is optional BusinessMessagesDeleted.
type OptBusinessMessagesDeleted struct {
	Value BusinessMessagesDeleted
	Set   bool
}

// IsSet returns true if OptBusinessMessagesDeleted was set.
func (o OptBusinessMessagesDeleted) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBusinessMessagesDeleted) Reset() {
	var v BusinessMessagesDeleted
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBusinessMessagesDeleted) SetTo(v BusinessMessagesDeleted) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBusinessMessagesDeleted) Get() (v BusinessMessagesDeleted, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBusinessMessagesDeleted) Or(d BusinessMessagesDeleted) BusinessMessagesDeleted {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallbackGame returns new OptCallbackGame with value set to v.
func NewOptCallbackGame(v CallbackGame) OptCallbackGame {
	return OptCallbackGame{
		Value: v,
		Set:   true,
	}
}

// OptCallbackGame is optional CallbackGame.
type OptCallbackGame struct {
	Value CallbackGame
	Set   bool
}

// IsSet returns true if OptCallbackGame was set.
func (o OptCallbackGame) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallbackGame) Reset() {
	var v CallbackGame
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallbackGame) SetTo(v CallbackGame) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallbackGame) Get() (v CallbackGame, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallbackGame) Or(d CallbackGame) CallbackGame {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCallbackQuery returns new OptCallbackQuery with value set to v.
func NewOptCallbackQuery(v CallbackQuery) OptCallbackQuery {
	return OptCallbackQuery{
		Value: v,
		Set:   true,
	}
}

// OptCallbackQuery is optional CallbackQuery.
type OptCallbackQuery struct {
	Value CallbackQuery
	Set   bool
}

// IsSet returns true if OptCallbackQuery was set.
func (o OptCallbackQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCallbackQuery) Reset() {
	var v CallbackQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCallbackQuery) SetTo(v CallbackQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCallbackQuery) Get() (v CallbackQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCallbackQuery) Or(d CallbackQuery) CallbackQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChat returns new OptChat with value set to v.
func NewOptChat(v Chat) OptChat {
	return OptChat{
		Value: v,
		Set:   true,
	}
}

// OptChat is optional Chat.
type OptChat struct {
	Value Chat
	Set   bool
}

// IsSet returns true if OptChat was set.
func (o OptChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChat) Reset() {
	var v Chat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChat) SetTo(v Chat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChat) Get() (v Chat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChat) Or(d Chat) Chat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatAdministratorRights returns new OptChatAdministratorRights with value set to v.
func NewOptChatAdministratorRights(v ChatAdministratorRights) OptChatAdministratorRights {
	return OptChatAdministratorRights{
		Value: v,
		Set:   true,
	}
}

// OptChatAdministratorRights is optional ChatAdministratorRights.
type OptChatAdministratorRights struct {
	Value ChatAdministratorRights
	Set   bool
}

// IsSet returns true if OptChatAdministratorRights was set.
func (o OptChatAdministratorRights) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatAdministratorRights) Reset() {
	var v ChatAdministratorRights
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatAdministratorRights) SetTo(v ChatAdministratorRights) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatAdministratorRights) Get() (v ChatAdministratorRights, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatAdministratorRights) Or(d ChatAdministratorRights) ChatAdministratorRights {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatBackground returns new OptChatBackground with value set to v.
func NewOptChatBackground(v ChatBackground) OptChatBackground {
	return OptChatBackground{
		Value: v,
		Set:   true,
	}
}

// OptChatBackground is optional ChatBackground.
type OptChatBackground struct {
	Value ChatBackground
	Set   bool
}

// IsSet returns true if OptChatBackground was set.
func (o OptChatBackground) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatBackground) Reset() {
	var v ChatBackground
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatBackground) SetTo(v ChatBackground) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatBackground) Get() (v ChatBackground, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatBackground) Or(d ChatBackground) ChatBackground {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatBoostAdded returns new OptChatBoostAdded with value set to v.
func NewOptChatBoostAdded(v ChatBoostAdded) OptChatBoostAdded {
	return OptChatBoostAdded{
		Value: v,
		Set:   true,
	}
}

// OptChatBoostAdded is optional ChatBoostAdded.
type OptChatBoostAdded struct {
	Value ChatBoostAdded
	Set   bool
}

// IsSet returns true if OptChatBoostAdded was set.
func (o OptChatBoostAdded) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatBoostAdded) Reset() {
	var v ChatBoostAdded
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatBoostAdded) SetTo(v ChatBoostAdded) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatBoostAdded) Get() (v ChatBoostAdded, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatBoostAdded) Or(d ChatBoostAdded) ChatBoostAdded {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatBoostRemoved returns new OptChatBoostRemoved with value set to v.
func NewOptChatBoostRemoved(v ChatBoostRemoved) OptChatBoostRemoved {
	return OptChatBoostRemoved{
		Value: v,
		Set:   true,
	}
}

// OptChatBoostRemoved is optional ChatBoostRemoved.
type OptChatBoostRemoved struct {
	Value ChatBoostRemoved
	Set   bool
}

// IsSet returns true if OptChatBoostRemoved was set.
func (o OptChatBoostRemoved) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatBoostRemoved) Reset() {
	var v ChatBoostRemoved
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatBoostRemoved) SetTo(v ChatBoostRemoved) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatBoostRemoved) Get() (v ChatBoostRemoved, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatBoostRemoved) Or(d ChatBoostRemoved) ChatBoostRemoved {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatBoostUpdated returns new OptChatBoostUpdated with value set to v.
func NewOptChatBoostUpdated(v ChatBoostUpdated) OptChatBoostUpdated {
	return OptChatBoostUpdated{
		Value: v,
		Set:   true,
	}
}

// OptChatBoostUpdated is optional ChatBoostUpdated.
type OptChatBoostUpdated struct {
	Value ChatBoostUpdated
	Set   bool
}

// IsSet returns true if OptChatBoostUpdated was set.
func (o OptChatBoostUpdated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatBoostUpdated) Reset() {
	var v ChatBoostUpdated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatBoostUpdated) SetTo(v ChatBoostUpdated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatBoostUpdated) Get() (v ChatBoostUpdated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatBoostUpdated) Or(d ChatBoostUpdated) ChatBoostUpdated {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatInviteLink returns new OptChatInviteLink with value set to v.
func NewOptChatInviteLink(v ChatInviteLink) OptChatInviteLink {
	return OptChatInviteLink{
		Value: v,
		Set:   true,
	}
}

// OptChatInviteLink is optional ChatInviteLink.
type OptChatInviteLink struct {
	Value ChatInviteLink
	Set   bool
}

// IsSet returns true if OptChatInviteLink was set.
func (o OptChatInviteLink) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatInviteLink) Reset() {
	var v ChatInviteLink
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatInviteLink) SetTo(v ChatInviteLink) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatInviteLink) Get() (v ChatInviteLink, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatInviteLink) Or(d ChatInviteLink) ChatInviteLink {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatJoinRequest returns new OptChatJoinRequest with value set to v.
func NewOptChatJoinRequest(v ChatJoinRequest) OptChatJoinRequest {
	return OptChatJoinRequest{
		Value: v,
		Set:   true,
	}
}

// OptChatJoinRequest is optional ChatJoinRequest.
type OptChatJoinRequest struct {
	Value ChatJoinRequest
	Set   bool
}

// IsSet returns true if OptChatJoinRequest was set.
func (o OptChatJoinRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatJoinRequest) Reset() {
	var v ChatJoinRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatJoinRequest) SetTo(v ChatJoinRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatJoinRequest) Get() (v ChatJoinRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatJoinRequest) Or(d ChatJoinRequest) ChatJoinRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatMember returns new OptChatMember with value set to v.
func NewOptChatMember(v ChatMember) OptChatMember {
	return OptChatMember{
		Value: v,
		Set:   true,
	}
}

// OptChatMember is optional ChatMember.
type OptChatMember struct {
	Value ChatMember
	Set   bool
}

// IsSet returns true if OptChatMember was set.
func (o OptChatMember) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatMember) Reset() {
	var v ChatMember
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatMember) SetTo(v ChatMember) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatMember) Get() (v ChatMember, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatMember) Or(d ChatMember) ChatMember {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatMemberUpdated returns new OptChatMemberUpdated with value set to v.
func NewOptChatMemberUpdated(v ChatMemberUpdated) OptChatMemberUpdated {
	return OptChatMemberUpdated{
		Value: v,
		Set:   true,
	}
}

// OptChatMemberUpdated is optional ChatMemberUpdated.
type OptChatMemberUpdated struct {
	Value ChatMemberUpdated
	Set   bool
}

// IsSet returns true if OptChatMemberUpdated was set.
func (o OptChatMemberUpdated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatMemberUpdated) Reset() {
	var v ChatMemberUpdated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatMemberUpdated) SetTo(v ChatMemberUpdated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatMemberUpdated) Get() (v ChatMemberUpdated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatMemberUpdated) Or(d ChatMemberUpdated) ChatMemberUpdated {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatShared returns new OptChatShared with value set to v.
func NewOptChatShared(v ChatShared) OptChatShared {
	return OptChatShared{
		Value: v,
		Set:   true,
	}
}

// OptChatShared is optional ChatShared.
type OptChatShared struct {
	Value ChatShared
	Set   bool
}

// IsSet returns true if OptChatShared was set.
func (o OptChatShared) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatShared) Reset() {
	var v ChatShared
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatShared) SetTo(v ChatShared) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatShared) Get() (v ChatShared, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatShared) Or(d ChatShared) ChatShared {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChosenInlineResult returns new OptChosenInlineResult with value set to v.
func NewOptChosenInlineResult(v ChosenInlineResult) OptChosenInlineResult {
	return OptChosenInlineResult{
		Value: v,
		Set:   true,
	}
}

// OptChosenInlineResult is optional ChosenInlineResult.
type OptChosenInlineResult struct {
	Value ChosenInlineResult
	Set   bool
}

// IsSet returns true if OptChosenInlineResult was set.
func (o OptChosenInlineResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChosenInlineResult) Reset() {
	var v ChosenInlineResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChosenInlineResult) SetTo(v ChosenInlineResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChosenInlineResult) Get() (v ChosenInlineResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChosenInlineResult) Or(d ChosenInlineResult) ChosenInlineResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptContact returns new OptContact with value set to v.
func NewOptContact(v Contact) OptContact {
	return OptContact{
		Value: v,
		Set:   true,
	}
}

// OptContact is optional Contact.
type OptContact struct {
	Value Contact
	Set   bool
}

// IsSet returns true if OptContact was set.
func (o OptContact) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptContact) Reset() {
	var v Contact
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptContact) SetTo(v Contact) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptContact) Get() (v Contact, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptContact) Or(d Contact) Contact {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeleteMyCommands returns new OptDeleteMyCommands with value set to v.
func NewOptDeleteMyCommands(v DeleteMyCommands) OptDeleteMyCommands {
	return OptDeleteMyCommands{
		Value: v,
		Set:   true,
	}
}

// OptDeleteMyCommands is optional DeleteMyCommands.
type OptDeleteMyCommands struct {
	Value DeleteMyCommands
	Set   bool
}

// IsSet returns true if OptDeleteMyCommands was set.
func (o OptDeleteMyCommands) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeleteMyCommands) Reset() {
	var v DeleteMyCommands
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeleteMyCommands) SetTo(v DeleteMyCommands) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeleteMyCommands) Get() (v DeleteMyCommands, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeleteMyCommands) Or(d DeleteMyCommands) DeleteMyCommands {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeleteWebhook returns new OptDeleteWebhook with value set to v.
func NewOptDeleteWebhook(v DeleteWebhook) OptDeleteWebhook {
	return OptDeleteWebhook{
		Value: v,
		Set:   true,
	}
}

// OptDeleteWebhook is optional DeleteWebhook.
type OptDeleteWebhook struct {
	Value DeleteWebhook
	Set   bool
}

// IsSet returns true if OptDeleteWebhook was set.
func (o OptDeleteWebhook) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeleteWebhook) Reset() {
	var v DeleteWebhook
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeleteWebhook) SetTo(v DeleteWebhook) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeleteWebhook) Get() (v DeleteWebhook, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeleteWebhook) Or(d DeleteWebhook) DeleteWebhook {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDice returns new OptDice with value set to v.
func NewOptDice(v Dice) OptDice {
	return OptDice{
		Value: v,
		Set:   true,
	}
}

// OptDice is optional Dice.
type OptDice struct {
	Value Dice
	Set   bool
}

// IsSet returns true if OptDice was set.
func (o OptDice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDice) Reset() {
	var v Dice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDice) SetTo(v Dice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDice) Get() (v Dice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDice) Or(d Dice) Dice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDocument returns new OptDocument with value set to v.
func NewOptDocument(v Document) OptDocument {
	return OptDocument{
		Value: v,
		Set:   true,
	}
}

// OptDocument is optional Document.
type OptDocument struct {
	Value Document
	Set   bool
}

// IsSet returns true if OptDocument was set.
func (o OptDocument) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDocument) Reset() {
	var v Document
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDocument) SetTo(v Document) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDocument) Get() (v Document, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDocument) Or(d Document) Document {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExternalReplyInfo returns new OptExternalReplyInfo with value set to v.
func NewOptExternalReplyInfo(v ExternalReplyInfo) OptExternalReplyInfo {
	return OptExternalReplyInfo{
		Value: v,
		Set:   true,
	}
}

// OptExternalReplyInfo is optional ExternalReplyInfo.
type OptExternalReplyInfo struct {
	Value ExternalReplyInfo
	Set   bool
}

// IsSet returns true if OptExternalReplyInfo was set.
func (o OptExternalReplyInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExternalReplyInfo) Reset() {
	var v ExternalReplyInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExternalReplyInfo) SetTo(v ExternalReplyInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExternalReplyInfo) Get() (v ExternalReplyInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExternalReplyInfo) Or(d ExternalReplyInfo) ExternalReplyInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFile returns new OptFile with value set to v.
func NewOptFile(v File) OptFile {
	return OptFile{
		Value: v,
		Set:   true,
	}
}

// OptFile is optional File.
type OptFile struct {
	Value File
	Set   bool
}

// IsSet returns true if OptFile was set.
func (o OptFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFile) Reset() {
	var v File
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFile) SetTo(v File) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFile) Get() (v File, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFile) Or(d File) File {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptForumTopicClosed returns new OptForumTopicClosed with value set to v.
func NewOptForumTopicClosed(v ForumTopicClosed) OptForumTopicClosed {
	return OptForumTopicClosed{
		Value: v,
		Set:   true,
	}
}

// OptForumTopicClosed is optional ForumTopicClosed.
type OptForumTopicClosed struct {
	Value ForumTopicClosed
	Set   bool
}

// IsSet returns true if OptForumTopicClosed was set.
func (o OptForumTopicClosed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptForumTopicClosed) Reset() {
	var v ForumTopicClosed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptForumTopicClosed) SetTo(v ForumTopicClosed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptForumTopicClosed) Get() (v ForumTopicClosed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptForumTopicClosed) Or(d ForumTopicClosed) ForumTopicClosed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptForumTopicCreated returns new OptForumTopicCreated with value set to v.
func NewOptForumTopicCreated(v ForumTopicCreated) OptForumTopicCreated {
	return OptForumTopicCreated{
		Value: v,
		Set:   true,
	}
}

// OptForumTopicCreated is optional ForumTopicCreated.
type OptForumTopicCreated struct {
	Value ForumTopicCreated
	Set   bool
}

// IsSet returns true if OptForumTopicCreated was set.
func (o OptForumTopicCreated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptForumTopicCreated) Reset() {
	var v ForumTopicCreated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptForumTopicCreated) SetTo(v ForumTopicCreated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptForumTopicCreated) Get() (v ForumTopicCreated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptForumTopicCreated) Or(d ForumTopicCreated) ForumTopicCreated {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptForumTopicEdited returns new OptForumTopicEdited with value set to v.
func NewOptForumTopicEdited(v ForumTopicEdited) OptForumTopicEdited {
	return OptForumTopicEdited{
		Value: v,
		Set:   true,
	}
}

// OptForumTopicEdited is optional ForumTopicEdited.
type OptForumTopicEdited struct {
	Value ForumTopicEdited
	Set   bool
}

// IsSet returns true if OptForumTopicEdited was set.
func (o OptForumTopicEdited) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptForumTopicEdited) Reset() {
	var v ForumTopicEdited
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptForumTopicEdited) SetTo(v ForumTopicEdited) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptForumTopicEdited) Get() (v ForumTopicEdited, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptForumTopicEdited) Or(d ForumTopicEdited) ForumTopicEdited {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptForumTopicReopened returns new OptForumTopicReopened with value set to v.
func NewOptForumTopicReopened(v ForumTopicReopened) OptForumTopicReopened {
	return OptForumTopicReopened{
		Value: v,
		Set:   true,
	}
}

// OptForumTopicReopened is optional ForumTopicReopened.
type OptForumTopicReopened struct {
	Value ForumTopicReopened
	Set   bool
}

// IsSet returns true if OptForumTopicReopened was set.
func (o OptForumTopicReopened) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptForumTopicReopened) Reset() {
	var v ForumTopicReopened
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptForumTopicReopened) SetTo(v ForumTopicReopened) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptForumTopicReopened) Get() (v ForumTopicReopened, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptForumTopicReopened) Or(d ForumTopicReopened) ForumTopicReopened {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGame returns new OptGame with value set to v.
func NewOptGame(v Game) OptGame {
	return OptGame{
		Value: v,
		Set:   true,
	}
}

// OptGame is optional Game.
type OptGame struct {
	Value Game
	Set   bool
}

// IsSet returns true if OptGame was set.
func (o OptGame) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGame) Reset() {
	var v Game
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGame) SetTo(v Game) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGame) Get() (v Game, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGame) Or(d Game) Game {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGeneralForumTopicHidden returns new OptGeneralForumTopicHidden with value set to v.
func NewOptGeneralForumTopicHidden(v GeneralForumTopicHidden) OptGeneralForumTopicHidden {
	return OptGeneralForumTopicHidden{
		Value: v,
		Set:   true,
	}
}

// OptGeneralForumTopicHidden is optional GeneralForumTopicHidden.
type OptGeneralForumTopicHidden struct {
	Value GeneralForumTopicHidden
	Set   bool
}

// IsSet returns true if OptGeneralForumTopicHidden was set.
func (o OptGeneralForumTopicHidden) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGeneralForumTopicHidden) Reset() {
	var v GeneralForumTopicHidden
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGeneralForumTopicHidden) SetTo(v GeneralForumTopicHidden) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGeneralForumTopicHidden) Get() (v GeneralForumTopicHidden, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGeneralForumTopicHidden) Or(d GeneralForumTopicHidden) GeneralForumTopicHidden {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGeneralForumTopicUnhidden returns new OptGeneralForumTopicUnhidden with value set to v.
func NewOptGeneralForumTopicUnhidden(v GeneralForumTopicUnhidden) OptGeneralForumTopicUnhidden {
	return OptGeneralForumTopicUnhidden{
		Value: v,
		Set:   true,
	}
}

// OptGeneralForumTopicUnhidden is optional GeneralForumTopicUnhidden.
type OptGeneralForumTopicUnhidden struct {
	Value GeneralForumTopicUnhidden
	Set   bool
}

// IsSet returns true if OptGeneralForumTopicUnhidden was set.
func (o OptGeneralForumTopicUnhidden) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGeneralForumTopicUnhidden) Reset() {
	var v GeneralForumTopicUnhidden
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGeneralForumTopicUnhidden) SetTo(v GeneralForumTopicUnhidden) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGeneralForumTopicUnhidden) Get() (v GeneralForumTopicUnhidden, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGeneralForumTopicUnhidden) Or(d GeneralForumTopicUnhidden) GeneralForumTopicUnhidden {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetChatMenuButton returns new OptGetChatMenuButton with value set to v.
func NewOptGetChatMenuButton(v GetChatMenuButton) OptGetChatMenuButton {
	return OptGetChatMenuButton{
		Value: v,
		Set:   true,
	}
}

// OptGetChatMenuButton is optional GetChatMenuButton.
type OptGetChatMenuButton struct {
	Value GetChatMenuButton
	Set   bool
}

// IsSet returns true if OptGetChatMenuButton was set.
func (o OptGetChatMenuButton) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetChatMenuButton) Reset() {
	var v GetChatMenuButton
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetChatMenuButton) SetTo(v GetChatMenuButton) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetChatMenuButton) Get() (v GetChatMenuButton, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetChatMenuButton) Or(d GetChatMenuButton) GetChatMenuButton {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetMyCommands returns new OptGetMyCommands with value set to v.
func NewOptGetMyCommands(v GetMyCommands) OptGetMyCommands {
	return OptGetMyCommands{
		Value: v,
		Set:   true,
	}
}

// OptGetMyCommands is optional GetMyCommands.
type OptGetMyCommands struct {
	Value GetMyCommands
	Set   bool
}

// IsSet returns true if OptGetMyCommands was set.
func (o OptGetMyCommands) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMyCommands) Reset() {
	var v GetMyCommands
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMyCommands) SetTo(v GetMyCommands) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMyCommands) Get() (v GetMyCommands, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMyCommands) Or(d GetMyCommands) GetMyCommands {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetMyDefaultAdministratorRights returns new OptGetMyDefaultAdministratorRights with value set to v.
func NewOptGetMyDefaultAdministratorRights(v GetMyDefaultAdministratorRights) OptGetMyDefaultAdministratorRights {
	return OptGetMyDefaultAdministratorRights{
		Value: v,
		Set:   true,
	}
}

// OptGetMyDefaultAdministratorRights is optional GetMyDefaultAdministratorRights.
type OptGetMyDefaultAdministratorRights struct {
	Value GetMyDefaultAdministratorRights
	Set   bool
}

// IsSet returns true if OptGetMyDefaultAdministratorRights was set.
func (o OptGetMyDefaultAdministratorRights) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMyDefaultAdministratorRights) Reset() {
	var v GetMyDefaultAdministratorRights
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMyDefaultAdministratorRights) SetTo(v GetMyDefaultAdministratorRights) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMyDefaultAdministratorRights) Get() (v GetMyDefaultAdministratorRights, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMyDefaultAdministratorRights) Or(d GetMyDefaultAdministratorRights) GetMyDefaultAdministratorRights {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetMyDescription returns new OptGetMyDescription with value set to v.
func NewOptGetMyDescription(v GetMyDescription) OptGetMyDescription {
	return OptGetMyDescription{
		Value: v,
		Set:   true,
	}
}

// OptGetMyDescription is optional GetMyDescription.
type OptGetMyDescription struct {
	Value GetMyDescription
	Set   bool
}

// IsSet returns true if OptGetMyDescription was set.
func (o OptGetMyDescription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMyDescription) Reset() {
	var v GetMyDescription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMyDescription) SetTo(v GetMyDescription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMyDescription) Get() (v GetMyDescription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMyDescription) Or(d GetMyDescription) GetMyDescription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetMyName returns new OptGetMyName with value set to v.
func NewOptGetMyName(v GetMyName) OptGetMyName {
	return OptGetMyName{
		Value: v,
		Set:   true,
	}
}

// OptGetMyName is optional GetMyName.
type OptGetMyName struct {
	Value GetMyName
	Set   bool
}

// IsSet returns true if OptGetMyName was set.
func (o OptGetMyName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMyName) Reset() {
	var v GetMyName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMyName) SetTo(v GetMyName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMyName) Get() (v GetMyName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMyName) Or(d GetMyName) GetMyName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetMyShortDescription returns new OptGetMyShortDescription with value set to v.
func NewOptGetMyShortDescription(v GetMyShortDescription) OptGetMyShortDescription {
	return OptGetMyShortDescription{
		Value: v,
		Set:   true,
	}
}

// OptGetMyShortDescription is optional GetMyShortDescription.
type OptGetMyShortDescription struct {
	Value GetMyShortDescription
	Set   bool
}

// IsSet returns true if OptGetMyShortDescription was set.
func (o OptGetMyShortDescription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetMyShortDescription) Reset() {
	var v GetMyShortDescription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetMyShortDescription) SetTo(v GetMyShortDescription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetMyShortDescription) Get() (v GetMyShortDescription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetMyShortDescription) Or(d GetMyShortDescription) GetMyShortDescription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetStarTransactions returns new OptGetStarTransactions with value set to v.
func NewOptGetStarTransactions(v GetStarTransactions) OptGetStarTransactions {
	return OptGetStarTransactions{
		Value: v,
		Set:   true,
	}
}

// OptGetStarTransactions is optional GetStarTransactions.
type OptGetStarTransactions struct {
	Value GetStarTransactions
	Set   bool
}

// IsSet returns true if OptGetStarTransactions was set.
func (o OptGetStarTransactions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetStarTransactions) Reset() {
	var v GetStarTransactions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetStarTransactions) SetTo(v GetStarTransactions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetStarTransactions) Get() (v GetStarTransactions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetStarTransactions) Or(d GetStarTransactions) GetStarTransactions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetUpdates returns new OptGetUpdates with value set to v.
func NewOptGetUpdates(v GetUpdates) OptGetUpdates {
	return OptGetUpdates{
		Value: v,
		Set:   true,
	}
}

// OptGetUpdates is optional GetUpdates.
type OptGetUpdates struct {
	Value GetUpdates
	Set   bool
}

// IsSet returns true if OptGetUpdates was set.
func (o OptGetUpdates) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetUpdates) Reset() {
	var v GetUpdates
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetUpdates) SetTo(v GetUpdates) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetUpdates) Get() (v GetUpdates, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetUpdates) Or(d GetUpdates) GetUpdates {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGiveaway returns new OptGiveaway with value set to v.
func NewOptGiveaway(v Giveaway) OptGiveaway {
	return OptGiveaway{
		Value: v,
		Set:   true,
	}
}

// OptGiveaway is optional Giveaway.
type OptGiveaway struct {
	Value Giveaway
	Set   bool
}

// IsSet returns true if OptGiveaway was set.
func (o OptGiveaway) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGiveaway) Reset() {
	var v Giveaway
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGiveaway) SetTo(v Giveaway) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGiveaway) Get() (v Giveaway, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGiveaway) Or(d Giveaway) Giveaway {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGiveawayCompleted returns new OptGiveawayCompleted with value set to v.
func NewOptGiveawayCompleted(v GiveawayCompleted) OptGiveawayCompleted {
	return OptGiveawayCompleted{
		Value: v,
		Set:   true,
	}
}

// OptGiveawayCompleted is optional GiveawayCompleted.
type OptGiveawayCompleted struct {
	Value GiveawayCompleted
	Set   bool
}

// IsSet returns true if OptGiveawayCompleted was set.
func (o OptGiveawayCompleted) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGiveawayCompleted) Reset() {
	var v GiveawayCompleted
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGiveawayCompleted) SetTo(v GiveawayCompleted) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGiveawayCompleted) Get() (v GiveawayCompleted, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGiveawayCompleted) Or(d GiveawayCompleted) GiveawayCompleted {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGiveawayCreated returns new OptGiveawayCreated with value set to v.
func NewOptGiveawayCreated(v GiveawayCreated) OptGiveawayCreated {
	return OptGiveawayCreated{
		Value: v,
		Set:   true,
	}
}

// OptGiveawayCreated is optional GiveawayCreated.
type OptGiveawayCreated struct {
	Value GiveawayCreated
	Set   bool
}

// IsSet returns true if OptGiveawayCreated was set.
func (o OptGiveawayCreated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGiveawayCreated) Reset() {
	var v GiveawayCreated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGiveawayCreated) SetTo(v GiveawayCreated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGiveawayCreated) Get() (v GiveawayCreated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGiveawayCreated) Or(d GiveawayCreated) GiveawayCreated {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGiveawayWinners returns new OptGiveawayWinners with value set to v.
func NewOptGiveawayWinners(v GiveawayWinners) OptGiveawayWinners {
	return OptGiveawayWinners{
		Value: v,
		Set:   true,
	}
}

// OptGiveawayWinners is optional GiveawayWinners.
type OptGiveawayWinners struct {
	Value GiveawayWinners
	Set   bool
}

// IsSet returns true if OptGiveawayWinners was set.
func (o OptGiveawayWinners) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGiveawayWinners) Reset() {
	var v GiveawayWinners
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGiveawayWinners) SetTo(v GiveawayWinners) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGiveawayWinners) Get() (v GiveawayWinners, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGiveawayWinners) Or(d GiveawayWinners) GiveawayWinners {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInlineKeyboardMarkup returns new OptInlineKeyboardMarkup with value set to v.
func NewOptInlineKeyboardMarkup(v InlineKeyboardMarkup) OptInlineKeyboardMarkup {
	return OptInlineKeyboardMarkup{
		Value: v,
		Set:   true,
	}
}

// OptInlineKeyboardMarkup is optional InlineKeyboardMarkup.
type OptInlineKeyboardMarkup struct {
	Value InlineKeyboardMarkup
	Set   bool
}

// IsSet returns true if OptInlineKeyboardMarkup was set.
func (o OptInlineKeyboardMarkup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineKeyboardMarkup) Reset() {
	var v InlineKeyboardMarkup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineKeyboardMarkup) SetTo(v InlineKeyboardMarkup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineKeyboardMarkup) Get() (v InlineKeyboardMarkup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInlineKeyboardMarkup) Or(d InlineKeyboardMarkup) InlineKeyboardMarkup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInlineQuery returns new OptInlineQuery with value set to v.
func NewOptInlineQuery(v InlineQuery) OptInlineQuery {
	return OptInlineQuery{
		Value: v,
		Set:   true,
	}
}

// OptInlineQuery is optional InlineQuery.
type OptInlineQuery struct {
	Value InlineQuery
	Set   bool
}

// IsSet returns true if OptInlineQuery was set.
func (o OptInlineQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineQuery) Reset() {
	var v InlineQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineQuery) SetTo(v InlineQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineQuery) Get() (v InlineQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInlineQuery) Or(d InlineQuery) InlineQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInlineQueryChatType returns new OptInlineQueryChatType with value set to v.
func NewOptInlineQueryChatType(v InlineQueryChatType) OptInlineQueryChatType {
	return OptInlineQueryChatType{
		Value: v,
		Set:   true,
	}
}

// OptInlineQueryChatType is optional InlineQueryChatType.
type OptInlineQueryChatType struct {
	Value InlineQueryChatType
	Set   bool
}

// IsSet returns true if OptInlineQueryChatType was set.
func (o OptInlineQueryChatType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineQueryChatType) Reset() {
	var v InlineQueryChatType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineQueryChatType) SetTo(v InlineQueryChatType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineQueryChatType) Get() (v InlineQueryChatType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInlineQueryChatType) Or(d InlineQueryChatType) InlineQueryChatType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInlineQueryResultsButton returns new OptInlineQueryResultsButton with value set to v.
func NewOptInlineQueryResultsButton(v InlineQueryResultsButton) OptInlineQueryResultsButton {
	return OptInlineQueryResultsButton{
		Value: v,
		Set:   true,
	}
}

// OptInlineQueryResultsButton is optional InlineQueryResultsButton.
type OptInlineQueryResultsButton struct {
	Value InlineQueryResultsButton
	Set   bool
}

// IsSet returns true if OptInlineQueryResultsButton was set.
func (o OptInlineQueryResultsButton) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInlineQueryResultsButton) Reset() {
	var v InlineQueryResultsButton
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInlineQueryResultsButton) SetTo(v InlineQueryResultsButton) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInlineQueryResultsButton) Get() (v InlineQueryResultsButton, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInlineQueryResultsButton) Or(d InlineQueryResultsButton) InlineQueryResultsButton {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInputMessageContent returns new OptInputMessageContent with value set to v.
func NewOptInputMessageContent(v InputMessageContent) OptInputMessageContent {
	return OptInputMessageContent{
		Value: v,
		Set:   true,
	}
}

// OptInputMessageContent is optional InputMessageContent.
type OptInputMessageContent struct {
	Value InputMessageContent
	Set   bool
}

// IsSet returns true if OptInputMessageContent was set.
func (o OptInputMessageContent) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInputMessageContent) Reset() {
	var v InputMessageContent
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInputMessageContent) SetTo(v InputMessageContent) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInputMessageContent) Get() (v InputMessageContent, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInputMessageContent) Or(d InputMessageContent) InputMessageContent {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInvoice returns new OptInvoice with value set to v.
func NewOptInvoice(v Invoice) OptInvoice {
	return OptInvoice{
		Value: v,
		Set:   true,
	}
}

// OptInvoice is optional Invoice.
type OptInvoice struct {
	Value Invoice
	Set   bool
}

// IsSet returns true if OptInvoice was set.
func (o OptInvoice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInvoice) Reset() {
	var v Invoice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInvoice) SetTo(v Invoice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInvoice) Get() (v Invoice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInvoice) Or(d Invoice) Invoice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKeyboardButtonPollType returns new OptKeyboardButtonPollType with value set to v.
func NewOptKeyboardButtonPollType(v KeyboardButtonPollType) OptKeyboardButtonPollType {
	return OptKeyboardButtonPollType{
		Value: v,
		Set:   true,
	}
}

// OptKeyboardButtonPollType is optional KeyboardButtonPollType.
type OptKeyboardButtonPollType struct {
	Value KeyboardButtonPollType
	Set   bool
}

// IsSet returns true if OptKeyboardButtonPollType was set.
func (o OptKeyboardButtonPollType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKeyboardButtonPollType) Reset() {
	var v KeyboardButtonPollType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKeyboardButtonPollType) SetTo(v KeyboardButtonPollType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKeyboardButtonPollType) Get() (v KeyboardButtonPollType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKeyboardButtonPollType) Or(d KeyboardButtonPollType) KeyboardButtonPollType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKeyboardButtonRequestChat returns new OptKeyboardButtonRequestChat with value set to v.
func NewOptKeyboardButtonRequestChat(v KeyboardButtonRequestChat) OptKeyboardButtonRequestChat {
	return OptKeyboardButtonRequestChat{
		Value: v,
		Set:   true,
	}
}

// OptKeyboardButtonRequestChat is optional KeyboardButtonRequestChat.
type OptKeyboardButtonRequestChat struct {
	Value KeyboardButtonRequestChat
	Set   bool
}

// IsSet returns true if OptKeyboardButtonRequestChat was set.
func (o OptKeyboardButtonRequestChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKeyboardButtonRequestChat) Reset() {
	var v KeyboardButtonRequestChat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKeyboardButtonRequestChat) SetTo(v KeyboardButtonRequestChat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKeyboardButtonRequestChat) Get() (v KeyboardButtonRequestChat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKeyboardButtonRequestChat) Or(d KeyboardButtonRequestChat) KeyboardButtonRequestChat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKeyboardButtonRequestUsers returns new OptKeyboardButtonRequestUsers with value set to v.
func NewOptKeyboardButtonRequestUsers(v KeyboardButtonRequestUsers) OptKeyboardButtonRequestUsers {
	return OptKeyboardButtonRequestUsers{
		Value: v,
		Set:   true,
	}
}

// OptKeyboardButtonRequestUsers is optional KeyboardButtonRequestUsers.
type OptKeyboardButtonRequestUsers struct {
	Value KeyboardButtonRequestUsers
	Set   bool
}

// IsSet returns true if OptKeyboardButtonRequestUsers was set.
func (o OptKeyboardButtonRequestUsers) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKeyboardButtonRequestUsers) Reset() {
	var v KeyboardButtonRequestUsers
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKeyboardButtonRequestUsers) SetTo(v KeyboardButtonRequestUsers) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKeyboardButtonRequestUsers) Get() (v KeyboardButtonRequestUsers, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKeyboardButtonRequestUsers) Or(d KeyboardButtonRequestUsers) KeyboardButtonRequestUsers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLinkPreviewOptions returns new OptLinkPreviewOptions with value set to v.
func NewOptLinkPreviewOptions(v LinkPreviewOptions) OptLinkPreviewOptions {
	return OptLinkPreviewOptions{
		Value: v,
		Set:   true,
	}
}

// OptLinkPreviewOptions is optional LinkPreviewOptions.
type OptLinkPreviewOptions struct {
	Value LinkPreviewOptions
	Set   bool
}

// IsSet returns true if OptLinkPreviewOptions was set.
func (o OptLinkPreviewOptions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLinkPreviewOptions) Reset() {
	var v LinkPreviewOptions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLinkPreviewOptions) SetTo(v LinkPreviewOptions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLinkPreviewOptions) Get() (v LinkPreviewOptions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLinkPreviewOptions) Or(d LinkPreviewOptions) LinkPreviewOptions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLocation returns new OptLocation with value set to v.
func NewOptLocation(v Location) OptLocation {
	return OptLocation{
		Value: v,
		Set:   true,
	}
}

// OptLocation is optional Location.
type OptLocation struct {
	Value Location
	Set   bool
}

// IsSet returns true if OptLocation was set.
func (o OptLocation) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLocation) Reset() {
	var v Location
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLocation) SetTo(v Location) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLocation) Get() (v Location, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLocation) Or(d Location) Location {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoginUrl returns new OptLoginUrl with value set to v.
func NewOptLoginUrl(v LoginUrl) OptLoginUrl {
	return OptLoginUrl{
		Value: v,
		Set:   true,
	}
}

// OptLoginUrl is optional LoginUrl.
type OptLoginUrl struct {
	Value LoginUrl
	Set   bool
}

// IsSet returns true if OptLoginUrl was set.
func (o OptLoginUrl) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoginUrl) Reset() {
	var v LoginUrl
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoginUrl) SetTo(v LoginUrl) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoginUrl) Get() (v LoginUrl, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoginUrl) Or(d LoginUrl) LoginUrl {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMaskPosition returns new OptMaskPosition with value set to v.
func NewOptMaskPosition(v MaskPosition) OptMaskPosition {
	return OptMaskPosition{
		Value: v,
		Set:   true,
	}
}

// OptMaskPosition is optional MaskPosition.
type OptMaskPosition struct {
	Value MaskPosition
	Set   bool
}

// IsSet returns true if OptMaskPosition was set.
func (o OptMaskPosition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMaskPosition) Reset() {
	var v MaskPosition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMaskPosition) SetTo(v MaskPosition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMaskPosition) Get() (v MaskPosition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMaskPosition) Or(d MaskPosition) MaskPosition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMaybeInaccessibleMessage returns new OptMaybeInaccessibleMessage with value set to v.
func NewOptMaybeInaccessibleMessage(v MaybeInaccessibleMessage) OptMaybeInaccessibleMessage {
	return OptMaybeInaccessibleMessage{
		Value: v,
		Set:   true,
	}
}

// OptMaybeInaccessibleMessage is optional MaybeInaccessibleMessage.
type OptMaybeInaccessibleMessage struct {
	Value MaybeInaccessibleMessage
	Set   bool
}

// IsSet returns true if OptMaybeInaccessibleMessage was set.
func (o OptMaybeInaccessibleMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMaybeInaccessibleMessage) Reset() {
	var v MaybeInaccessibleMessage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMaybeInaccessibleMessage) SetTo(v MaybeInaccessibleMessage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMaybeInaccessibleMessage) Get() (v MaybeInaccessibleMessage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMaybeInaccessibleMessage) Or(d MaybeInaccessibleMessage) MaybeInaccessibleMessage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMenuButton returns new OptMenuButton with value set to v.
func NewOptMenuButton(v MenuButton) OptMenuButton {
	return OptMenuButton{
		Value: v,
		Set:   true,
	}
}

// OptMenuButton is optional MenuButton.
type OptMenuButton struct {
	Value MenuButton
	Set   bool
}

// IsSet returns true if OptMenuButton was set.
func (o OptMenuButton) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMenuButton) Reset() {
	var v MenuButton
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMenuButton) SetTo(v MenuButton) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMenuButton) Get() (v MenuButton, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMenuButton) Or(d MenuButton) MenuButton {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessage returns new OptMessage with value set to v.
func NewOptMessage(v Message) OptMessage {
	return OptMessage{
		Value: v,
		Set:   true,
	}
}

// OptMessage is optional Message.
type OptMessage struct {
	Value Message
	Set   bool
}

// IsSet returns true if OptMessage was set.
func (o OptMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessage) Reset() {
	var v Message
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessage) SetTo(v Message) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessage) Get() (v Message, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessage) Or(d Message) Message {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageAutoDeleteTimerChanged returns new OptMessageAutoDeleteTimerChanged with value set to v.
func NewOptMessageAutoDeleteTimerChanged(v MessageAutoDeleteTimerChanged) OptMessageAutoDeleteTimerChanged {
	return OptMessageAutoDeleteTimerChanged{
		Value: v,
		Set:   true,
	}
}

// OptMessageAutoDeleteTimerChanged is optional MessageAutoDeleteTimerChanged.
type OptMessageAutoDeleteTimerChanged struct {
	Value MessageAutoDeleteTimerChanged
	Set   bool
}

// IsSet returns true if OptMessageAutoDeleteTimerChanged was set.
func (o OptMessageAutoDeleteTimerChanged) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageAutoDeleteTimerChanged) Reset() {
	var v MessageAutoDeleteTimerChanged
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageAutoDeleteTimerChanged) SetTo(v MessageAutoDeleteTimerChanged) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageAutoDeleteTimerChanged) Get() (v MessageAutoDeleteTimerChanged, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageAutoDeleteTimerChanged) Or(d MessageAutoDeleteTimerChanged) MessageAutoDeleteTimerChanged {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageId returns new OptMessageId with value set to v.
func NewOptMessageId(v MessageId) OptMessageId {
	return OptMessageId{
		Value: v,
		Set:   true,
	}
}

// OptMessageId is optional MessageId.
type OptMessageId struct {
	Value MessageId
	Set   bool
}

// IsSet returns true if OptMessageId was set.
func (o OptMessageId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageId) Reset() {
	var v MessageId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageId) SetTo(v MessageId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageId) Get() (v MessageId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageId) Or(d MessageId) MessageId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageOrigin returns new OptMessageOrigin with value set to v.
func NewOptMessageOrigin(v MessageOrigin) OptMessageOrigin {
	return OptMessageOrigin{
		Value: v,
		Set:   true,
	}
}

// OptMessageOrigin is optional MessageOrigin.
type OptMessageOrigin struct {
	Value MessageOrigin
	Set   bool
}

// IsSet returns true if OptMessageOrigin was set.
func (o OptMessageOrigin) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageOrigin) Reset() {
	var v MessageOrigin
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageOrigin) SetTo(v MessageOrigin) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageOrigin) Get() (v MessageOrigin, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageOrigin) Or(d MessageOrigin) MessageOrigin {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageReactionCountUpdated returns new OptMessageReactionCountUpdated with value set to v.
func NewOptMessageReactionCountUpdated(v MessageReactionCountUpdated) OptMessageReactionCountUpdated {
	return OptMessageReactionCountUpdated{
		Value: v,
		Set:   true,
	}
}

// OptMessageReactionCountUpdated is optional MessageReactionCountUpdated.
type OptMessageReactionCountUpdated struct {
	Value MessageReactionCountUpdated
	Set   bool
}

// IsSet returns true if OptMessageReactionCountUpdated was set.
func (o OptMessageReactionCountUpdated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageReactionCountUpdated) Reset() {
	var v MessageReactionCountUpdated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageReactionCountUpdated) SetTo(v MessageReactionCountUpdated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageReactionCountUpdated) Get() (v MessageReactionCountUpdated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageReactionCountUpdated) Or(d MessageReactionCountUpdated) MessageReactionCountUpdated {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMessageReactionUpdated returns new OptMessageReactionUpdated with value set to v.
func NewOptMessageReactionUpdated(v MessageReactionUpdated) OptMessageReactionUpdated {
	return OptMessageReactionUpdated{
		Value: v,
		Set:   true,
	}
}

// OptMessageReactionUpdated is optional MessageReactionUpdated.
type OptMessageReactionUpdated struct {
	Value MessageReactionUpdated
	Set   bool
}

// IsSet returns true if OptMessageReactionUpdated was set.
func (o OptMessageReactionUpdated) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMessageReactionUpdated) Reset() {
	var v MessageReactionUpdated
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMessageReactionUpdated) SetTo(v MessageReactionUpdated) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMessageReactionUpdated) Get() (v MessageReactionUpdated, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMessageReactionUpdated) Or(d MessageReactionUpdated) MessageReactionUpdated {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderInfo returns new OptOrderInfo with value set to v.
func NewOptOrderInfo(v OrderInfo) OptOrderInfo {
	return OptOrderInfo{
		Value: v,
		Set:   true,
	}
}

// OptOrderInfo is optional OrderInfo.
type OptOrderInfo struct {
	Value OrderInfo
	Set   bool
}

// IsSet returns true if OptOrderInfo was set.
func (o OptOrderInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderInfo) Reset() {
	var v OrderInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderInfo) SetTo(v OrderInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderInfo) Get() (v OrderInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderInfo) Or(d OrderInfo) OrderInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPassportData returns new OptPassportData with value set to v.
func NewOptPassportData(v PassportData) OptPassportData {
	return OptPassportData{
		Value: v,
		Set:   true,
	}
}

// OptPassportData is optional PassportData.
type OptPassportData struct {
	Value PassportData
	Set   bool
}

// IsSet returns true if OptPassportData was set.
func (o OptPassportData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPassportData) Reset() {
	var v PassportData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPassportData) SetTo(v PassportData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPassportData) Get() (v PassportData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPassportData) Or(d PassportData) PassportData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPassportFile returns new OptPassportFile with value set to v.
func NewOptPassportFile(v PassportFile) OptPassportFile {
	return OptPassportFile{
		Value: v,
		Set:   true,
	}
}

// OptPassportFile is optional PassportFile.
type OptPassportFile struct {
	Value PassportFile
	Set   bool
}

// IsSet returns true if OptPassportFile was set.
func (o OptPassportFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPassportFile) Reset() {
	var v PassportFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPassportFile) SetTo(v PassportFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPassportFile) Get() (v PassportFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPassportFile) Or(d PassportFile) PassportFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPhotoSize returns new OptPhotoSize with value set to v.
func NewOptPhotoSize(v PhotoSize) OptPhotoSize {
	return OptPhotoSize{
		Value: v,
		Set:   true,
	}
}

// OptPhotoSize is optional PhotoSize.
type OptPhotoSize struct {
	Value PhotoSize
	Set   bool
}

// IsSet returns true if OptPhotoSize was set.
func (o OptPhotoSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPhotoSize) Reset() {
	var v PhotoSize
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPhotoSize) SetTo(v PhotoSize) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPhotoSize) Get() (v PhotoSize, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPhotoSize) Or(d PhotoSize) PhotoSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPoll returns new OptPoll with value set to v.
func NewOptPoll(v Poll) OptPoll {
	return OptPoll{
		Value: v,
		Set:   true,
	}
}

// OptPoll is optional Poll.
type OptPoll struct {
	Value Poll
	Set   bool
}

// IsSet returns true if OptPoll was set.
func (o OptPoll) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPoll) Reset() {
	var v Poll
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPoll) SetTo(v Poll) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPoll) Get() (v Poll, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPoll) Or(d Poll) Poll {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPollAnswer returns new OptPollAnswer with value set to v.
func NewOptPollAnswer(v PollAnswer) OptPollAnswer {
	return OptPollAnswer{
		Value: v,
		Set:   true,
	}
}

// OptPollAnswer is optional PollAnswer.
type OptPollAnswer struct {
	Value PollAnswer
	Set   bool
}

// IsSet returns true if OptPollAnswer was set.
func (o OptPollAnswer) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPollAnswer) Reset() {
	var v PollAnswer
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPollAnswer) SetTo(v PollAnswer) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPollAnswer) Get() (v PollAnswer, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPollAnswer) Or(d PollAnswer) PollAnswer {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPreCheckoutQuery returns new OptPreCheckoutQuery with value set to v.
func NewOptPreCheckoutQuery(v PreCheckoutQuery) OptPreCheckoutQuery {
	return OptPreCheckoutQuery{
		Value: v,
		Set:   true,
	}
}

// OptPreCheckoutQuery is optional PreCheckoutQuery.
type OptPreCheckoutQuery struct {
	Value PreCheckoutQuery
	Set   bool
}

// IsSet returns true if OptPreCheckoutQuery was set.
func (o OptPreCheckoutQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPreCheckoutQuery) Reset() {
	var v PreCheckoutQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPreCheckoutQuery) SetTo(v PreCheckoutQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPreCheckoutQuery) Get() (v PreCheckoutQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPreCheckoutQuery) Or(d PreCheckoutQuery) PreCheckoutQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProximityAlertTriggered returns new OptProximityAlertTriggered with value set to v.
func NewOptProximityAlertTriggered(v ProximityAlertTriggered) OptProximityAlertTriggered {
	return OptProximityAlertTriggered{
		Value: v,
		Set:   true,
	}
}

// OptProximityAlertTriggered is optional ProximityAlertTriggered.
type OptProximityAlertTriggered struct {
	Value ProximityAlertTriggered
	Set   bool
}

// IsSet returns true if OptProximityAlertTriggered was set.
func (o OptProximityAlertTriggered) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProximityAlertTriggered) Reset() {
	var v ProximityAlertTriggered
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProximityAlertTriggered) SetTo(v ProximityAlertTriggered) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProximityAlertTriggered) Get() (v ProximityAlertTriggered, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProximityAlertTriggered) Or(d ProximityAlertTriggered) ProximityAlertTriggered {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReplyParameters returns new OptReplyParameters with value set to v.
func NewOptReplyParameters(v ReplyParameters) OptReplyParameters {
	return OptReplyParameters{
		Value: v,
		Set:   true,
	}
}

// OptReplyParameters is optional ReplyParameters.
type OptReplyParameters struct {
	Value ReplyParameters
	Set   bool
}

// IsSet returns true if OptReplyParameters was set.
func (o OptReplyParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReplyParameters) Reset() {
	var v ReplyParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReplyParameters) SetTo(v ReplyParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReplyParameters) Get() (v ReplyParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReplyParameters) Or(d ReplyParameters) ReplyParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseParameters returns new OptResponseParameters with value set to v.
func NewOptResponseParameters(v ResponseParameters) OptResponseParameters {
	return OptResponseParameters{
		Value: v,
		Set:   true,
	}
}

// OptResponseParameters is optional ResponseParameters.
type OptResponseParameters struct {
	Value ResponseParameters
	Set   bool
}

// IsSet returns true if OptResponseParameters was set.
func (o OptResponseParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseParameters) Reset() {
	var v ResponseParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseParameters) SetTo(v ResponseParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseParameters) Get() (v ResponseParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseParameters) Or(d ResponseParameters) ResponseParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResultMessageOrBooleanResult returns new OptResultMessageOrBooleanResult with value set to v.
func NewOptResultMessageOrBooleanResult(v ResultMessageOrBooleanResult) OptResultMessageOrBooleanResult {
	return OptResultMessageOrBooleanResult{
		Value: v,
		Set:   true,
	}
}

// OptResultMessageOrBooleanResult is optional ResultMessageOrBooleanResult.
type OptResultMessageOrBooleanResult struct {
	Value ResultMessageOrBooleanResult
	Set   bool
}

// IsSet returns true if OptResultMessageOrBooleanResult was set.
func (o OptResultMessageOrBooleanResult) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResultMessageOrBooleanResult) Reset() {
	var v ResultMessageOrBooleanResult
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResultMessageOrBooleanResult) SetTo(v ResultMessageOrBooleanResult) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResultMessageOrBooleanResult) Get() (v ResultMessageOrBooleanResult, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResultMessageOrBooleanResult) Or(d ResultMessageOrBooleanResult) ResultMessageOrBooleanResult {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSendReplyMarkup returns new OptSendReplyMarkup with value set to v.
func NewOptSendReplyMarkup(v SendReplyMarkup) OptSendReplyMarkup {
	return OptSendReplyMarkup{
		Value: v,
		Set:   true,
	}
}

// OptSendReplyMarkup is optional SendReplyMarkup.
type OptSendReplyMarkup struct {
	Value SendReplyMarkup
	Set   bool
}

// IsSet returns true if OptSendReplyMarkup was set.
func (o OptSendReplyMarkup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSendReplyMarkup) Reset() {
	var v SendReplyMarkup
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSendReplyMarkup) SetTo(v SendReplyMarkup) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSendReplyMarkup) Get() (v SendReplyMarkup, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSendReplyMarkup) Or(d SendReplyMarkup) SendReplyMarkup {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetChatMenuButton returns new OptSetChatMenuButton with value set to v.
func NewOptSetChatMenuButton(v SetChatMenuButton) OptSetChatMenuButton {
	return OptSetChatMenuButton{
		Value: v,
		Set:   true,
	}
}

// OptSetChatMenuButton is optional SetChatMenuButton.
type OptSetChatMenuButton struct {
	Value SetChatMenuButton
	Set   bool
}

// IsSet returns true if OptSetChatMenuButton was set.
func (o OptSetChatMenuButton) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetChatMenuButton) Reset() {
	var v SetChatMenuButton
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetChatMenuButton) SetTo(v SetChatMenuButton) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetChatMenuButton) Get() (v SetChatMenuButton, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetChatMenuButton) Or(d SetChatMenuButton) SetChatMenuButton {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetMyDefaultAdministratorRights returns new OptSetMyDefaultAdministratorRights with value set to v.
func NewOptSetMyDefaultAdministratorRights(v SetMyDefaultAdministratorRights) OptSetMyDefaultAdministratorRights {
	return OptSetMyDefaultAdministratorRights{
		Value: v,
		Set:   true,
	}
}

// OptSetMyDefaultAdministratorRights is optional SetMyDefaultAdministratorRights.
type OptSetMyDefaultAdministratorRights struct {
	Value SetMyDefaultAdministratorRights
	Set   bool
}

// IsSet returns true if OptSetMyDefaultAdministratorRights was set.
func (o OptSetMyDefaultAdministratorRights) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetMyDefaultAdministratorRights) Reset() {
	var v SetMyDefaultAdministratorRights
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetMyDefaultAdministratorRights) SetTo(v SetMyDefaultAdministratorRights) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetMyDefaultAdministratorRights) Get() (v SetMyDefaultAdministratorRights, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetMyDefaultAdministratorRights) Or(d SetMyDefaultAdministratorRights) SetMyDefaultAdministratorRights {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetMyDescription returns new OptSetMyDescription with value set to v.
func NewOptSetMyDescription(v SetMyDescription) OptSetMyDescription {
	return OptSetMyDescription{
		Value: v,
		Set:   true,
	}
}

// OptSetMyDescription is optional SetMyDescription.
type OptSetMyDescription struct {
	Value SetMyDescription
	Set   bool
}

// IsSet returns true if OptSetMyDescription was set.
func (o OptSetMyDescription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetMyDescription) Reset() {
	var v SetMyDescription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetMyDescription) SetTo(v SetMyDescription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetMyDescription) Get() (v SetMyDescription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetMyDescription) Or(d SetMyDescription) SetMyDescription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetMyName returns new OptSetMyName with value set to v.
func NewOptSetMyName(v SetMyName) OptSetMyName {
	return OptSetMyName{
		Value: v,
		Set:   true,
	}
}

// OptSetMyName is optional SetMyName.
type OptSetMyName struct {
	Value SetMyName
	Set   bool
}

// IsSet returns true if OptSetMyName was set.
func (o OptSetMyName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetMyName) Reset() {
	var v SetMyName
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetMyName) SetTo(v SetMyName) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetMyName) Get() (v SetMyName, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetMyName) Or(d SetMyName) SetMyName {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSetMyShortDescription returns new OptSetMyShortDescription with value set to v.
func NewOptSetMyShortDescription(v SetMyShortDescription) OptSetMyShortDescription {
	return OptSetMyShortDescription{
		Value: v,
		Set:   true,
	}
}

// OptSetMyShortDescription is optional SetMyShortDescription.
type OptSetMyShortDescription struct {
	Value SetMyShortDescription
	Set   bool
}

// IsSet returns true if OptSetMyShortDescription was set.
func (o OptSetMyShortDescription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSetMyShortDescription) Reset() {
	var v SetMyShortDescription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSetMyShortDescription) SetTo(v SetMyShortDescription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSetMyShortDescription) Get() (v SetMyShortDescription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSetMyShortDescription) Or(d SetMyShortDescription) SetMyShortDescription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShippingAddress returns new OptShippingAddress with value set to v.
func NewOptShippingAddress(v ShippingAddress) OptShippingAddress {
	return OptShippingAddress{
		Value: v,
		Set:   true,
	}
}

// OptShippingAddress is optional ShippingAddress.
type OptShippingAddress struct {
	Value ShippingAddress
	Set   bool
}

// IsSet returns true if OptShippingAddress was set.
func (o OptShippingAddress) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShippingAddress) Reset() {
	var v ShippingAddress
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShippingAddress) SetTo(v ShippingAddress) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShippingAddress) Get() (v ShippingAddress, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShippingAddress) Or(d ShippingAddress) ShippingAddress {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShippingQuery returns new OptShippingQuery with value set to v.
func NewOptShippingQuery(v ShippingQuery) OptShippingQuery {
	return OptShippingQuery{
		Value: v,
		Set:   true,
	}
}

// OptShippingQuery is optional ShippingQuery.
type OptShippingQuery struct {
	Value ShippingQuery
	Set   bool
}

// IsSet returns true if OptShippingQuery was set.
func (o OptShippingQuery) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShippingQuery) Reset() {
	var v ShippingQuery
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShippingQuery) SetTo(v ShippingQuery) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShippingQuery) Get() (v ShippingQuery, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShippingQuery) Or(d ShippingQuery) ShippingQuery {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSticker returns new OptSticker with value set to v.
func NewOptSticker(v Sticker) OptSticker {
	return OptSticker{
		Value: v,
		Set:   true,
	}
}

// OptSticker is optional Sticker.
type OptSticker struct {
	Value Sticker
	Set   bool
}

// IsSet returns true if OptSticker was set.
func (o OptSticker) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSticker) Reset() {
	var v Sticker
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSticker) SetTo(v Sticker) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSticker) Get() (v Sticker, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSticker) Or(d Sticker) Sticker {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStickerSet returns new OptStickerSet with value set to v.
func NewOptStickerSet(v StickerSet) OptStickerSet {
	return OptStickerSet{
		Value: v,
		Set:   true,
	}
}

// OptStickerSet is optional StickerSet.
type OptStickerSet struct {
	Value StickerSet
	Set   bool
}

// IsSet returns true if OptStickerSet was set.
func (o OptStickerSet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStickerSet) Reset() {
	var v StickerSet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStickerSet) SetTo(v StickerSet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStickerSet) Get() (v StickerSet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStickerSet) Or(d StickerSet) StickerSet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStory returns new OptStory with value set to v.
func NewOptStory(v Story) OptStory {
	return OptStory{
		Value: v,
		Set:   true,
	}
}

// OptStory is optional Story.
type OptStory struct {
	Value Story
	Set   bool
}

// IsSet returns true if OptStory was set.
func (o OptStory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStory) Reset() {
	var v Story
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStory) SetTo(v Story) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStory) Get() (v Story, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStory) Or(d Story) Story {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSuccessfulPayment returns new OptSuccessfulPayment with value set to v.
func NewOptSuccessfulPayment(v SuccessfulPayment) OptSuccessfulPayment {
	return OptSuccessfulPayment{
		Value: v,
		Set:   true,
	}
}

// OptSuccessfulPayment is optional SuccessfulPayment.
type OptSuccessfulPayment struct {
	Value SuccessfulPayment
	Set   bool
}

// IsSet returns true if OptSuccessfulPayment was set.
func (o OptSuccessfulPayment) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSuccessfulPayment) Reset() {
	var v SuccessfulPayment
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSuccessfulPayment) SetTo(v SuccessfulPayment) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSuccessfulPayment) Get() (v SuccessfulPayment, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSuccessfulPayment) Or(d SuccessfulPayment) SuccessfulPayment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSwitchInlineQueryChosenChat returns new OptSwitchInlineQueryChosenChat with value set to v.
func NewOptSwitchInlineQueryChosenChat(v SwitchInlineQueryChosenChat) OptSwitchInlineQueryChosenChat {
	return OptSwitchInlineQueryChosenChat{
		Value: v,
		Set:   true,
	}
}

// OptSwitchInlineQueryChosenChat is optional SwitchInlineQueryChosenChat.
type OptSwitchInlineQueryChosenChat struct {
	Value SwitchInlineQueryChosenChat
	Set   bool
}

// IsSet returns true if OptSwitchInlineQueryChosenChat was set.
func (o OptSwitchInlineQueryChosenChat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSwitchInlineQueryChosenChat) Reset() {
	var v SwitchInlineQueryChosenChat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSwitchInlineQueryChosenChat) SetTo(v SwitchInlineQueryChosenChat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSwitchInlineQueryChosenChat) Get() (v SwitchInlineQueryChosenChat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSwitchInlineQueryChosenChat) Or(d SwitchInlineQueryChosenChat) SwitchInlineQueryChosenChat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTextQuote returns new OptTextQuote with value set to v.
func NewOptTextQuote(v TextQuote) OptTextQuote {
	return OptTextQuote{
		Value: v,
		Set:   true,
	}
}

// OptTextQuote is optional TextQuote.
type OptTextQuote struct {
	Value TextQuote
	Set   bool
}

// IsSet returns true if OptTextQuote was set.
func (o OptTextQuote) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTextQuote) Reset() {
	var v TextQuote
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTextQuote) SetTo(v TextQuote) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTextQuote) Get() (v TextQuote, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTextQuote) Or(d TextQuote) TextQuote {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUser returns new OptUser with value set to v.
func NewOptUser(v User) OptUser {
	return OptUser{
		Value: v,
		Set:   true,
	}
}

// OptUser is optional User.
type OptUser struct {
	Value User
	Set   bool
}

// IsSet returns true if OptUser was set.
func (o OptUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUser) Reset() {
	var v User
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUser) SetTo(v User) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUser) Get() (v User, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUser) Or(d User) User {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserProfilePhotos returns new OptUserProfilePhotos with value set to v.
func NewOptUserProfilePhotos(v UserProfilePhotos) OptUserProfilePhotos {
	return OptUserProfilePhotos{
		Value: v,
		Set:   true,
	}
}

// OptUserProfilePhotos is optional UserProfilePhotos.
type OptUserProfilePhotos struct {
	Value UserProfilePhotos
	Set   bool
}

// IsSet returns true if OptUserProfilePhotos was set.
func (o OptUserProfilePhotos) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserProfilePhotos) Reset() {
	var v UserProfilePhotos
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserProfilePhotos) SetTo(v UserProfilePhotos) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserProfilePhotos) Get() (v UserProfilePhotos, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserProfilePhotos) Or(d UserProfilePhotos) UserProfilePhotos {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsersShared returns new OptUsersShared with value set to v.
func NewOptUsersShared(v UsersShared) OptUsersShared {
	return OptUsersShared{
		Value: v,
		Set:   true,
	}
}

// OptUsersShared is optional UsersShared.
type OptUsersShared struct {
	Value UsersShared
	Set   bool
}

// IsSet returns true if OptUsersShared was set.
func (o OptUsersShared) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsersShared) Reset() {
	var v UsersShared
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsersShared) SetTo(v UsersShared) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsersShared) Get() (v UsersShared, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsersShared) Or(d UsersShared) UsersShared {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVenue returns new OptVenue with value set to v.
func NewOptVenue(v Venue) OptVenue {
	return OptVenue{
		Value: v,
		Set:   true,
	}
}

// OptVenue is optional Venue.
type OptVenue struct {
	Value Venue
	Set   bool
}

// IsSet returns true if OptVenue was set.
func (o OptVenue) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVenue) Reset() {
	var v Venue
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVenue) SetTo(v Venue) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVenue) Get() (v Venue, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVenue) Or(d Venue) Venue {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideo returns new OptVideo with value set to v.
func NewOptVideo(v Video) OptVideo {
	return OptVideo{
		Value: v,
		Set:   true,
	}
}

// OptVideo is optional Video.
type OptVideo struct {
	Value Video
	Set   bool
}

// IsSet returns true if OptVideo was set.
func (o OptVideo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideo) Reset() {
	var v Video
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideo) SetTo(v Video) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideo) Get() (v Video, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideo) Or(d Video) Video {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideoChatEnded returns new OptVideoChatEnded with value set to v.
func NewOptVideoChatEnded(v VideoChatEnded) OptVideoChatEnded {
	return OptVideoChatEnded{
		Value: v,
		Set:   true,
	}
}

// OptVideoChatEnded is optional VideoChatEnded.
type OptVideoChatEnded struct {
	Value VideoChatEnded
	Set   bool
}

// IsSet returns true if OptVideoChatEnded was set.
func (o OptVideoChatEnded) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoChatEnded) Reset() {
	var v VideoChatEnded
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoChatEnded) SetTo(v VideoChatEnded) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoChatEnded) Get() (v VideoChatEnded, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideoChatEnded) Or(d VideoChatEnded) VideoChatEnded {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideoChatParticipantsInvited returns new OptVideoChatParticipantsInvited with value set to v.
func NewOptVideoChatParticipantsInvited(v VideoChatParticipantsInvited) OptVideoChatParticipantsInvited {
	return OptVideoChatParticipantsInvited{
		Value: v,
		Set:   true,
	}
}

// OptVideoChatParticipantsInvited is optional VideoChatParticipantsInvited.
type OptVideoChatParticipantsInvited struct {
	Value VideoChatParticipantsInvited
	Set   bool
}

// IsSet returns true if OptVideoChatParticipantsInvited was set.
func (o OptVideoChatParticipantsInvited) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoChatParticipantsInvited) Reset() {
	var v VideoChatParticipantsInvited
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoChatParticipantsInvited) SetTo(v VideoChatParticipantsInvited) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoChatParticipantsInvited) Get() (v VideoChatParticipantsInvited, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideoChatParticipantsInvited) Or(d VideoChatParticipantsInvited) VideoChatParticipantsInvited {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideoChatScheduled returns new OptVideoChatScheduled with value set to v.
func NewOptVideoChatScheduled(v VideoChatScheduled) OptVideoChatScheduled {
	return OptVideoChatScheduled{
		Value: v,
		Set:   true,
	}
}

// OptVideoChatScheduled is optional VideoChatScheduled.
type OptVideoChatScheduled struct {
	Value VideoChatScheduled
	Set   bool
}

// IsSet returns true if OptVideoChatScheduled was set.
func (o OptVideoChatScheduled) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoChatScheduled) Reset() {
	var v VideoChatScheduled
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoChatScheduled) SetTo(v VideoChatScheduled) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoChatScheduled) Get() (v VideoChatScheduled, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideoChatScheduled) Or(d VideoChatScheduled) VideoChatScheduled {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideoChatStarted returns new OptVideoChatStarted with value set to v.
func NewOptVideoChatStarted(v VideoChatStarted) OptVideoChatStarted {
	return OptVideoChatStarted{
		Value: v,
		Set:   true,
	}
}

// OptVideoChatStarted is optional VideoChatStarted.
type OptVideoChatStarted struct {
	Value VideoChatStarted
	Set   bool
}

// IsSet returns true if OptVideoChatStarted was set.
func (o OptVideoChatStarted) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoChatStarted) Reset() {
	var v VideoChatStarted
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoChatStarted) SetTo(v VideoChatStarted) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoChatStarted) Get() (v VideoChatStarted, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideoChatStarted) Or(d VideoChatStarted) VideoChatStarted {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVideoNote returns new OptVideoNote with value set to v.
func NewOptVideoNote(v VideoNote) OptVideoNote {
	return OptVideoNote{
		Value: v,
		Set:   true,
	}
}

// OptVideoNote is optional VideoNote.
type OptVideoNote struct {
	Value VideoNote
	Set   bool
}

// IsSet returns true if OptVideoNote was set.
func (o OptVideoNote) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVideoNote) Reset() {
	var v VideoNote
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVideoNote) SetTo(v VideoNote) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVideoNote) Get() (v VideoNote, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVideoNote) Or(d VideoNote) VideoNote {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVoice returns new OptVoice with value set to v.
func NewOptVoice(v Voice) OptVoice {
	return OptVoice{
		Value: v,
		Set:   true,
	}
}

// OptVoice is optional Voice.
type OptVoice struct {
	Value Voice
	Set   bool
}

// IsSet returns true if OptVoice was set.
func (o OptVoice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVoice) Reset() {
	var v Voice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVoice) SetTo(v Voice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVoice) Get() (v Voice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVoice) Or(d Voice) Voice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebAppData returns new OptWebAppData with value set to v.
func NewOptWebAppData(v WebAppData) OptWebAppData {
	return OptWebAppData{
		Value: v,
		Set:   true,
	}
}

// OptWebAppData is optional WebAppData.
type OptWebAppData struct {
	Value WebAppData
	Set   bool
}

// IsSet returns true if OptWebAppData was set.
func (o OptWebAppData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebAppData) Reset() {
	var v WebAppData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebAppData) SetTo(v WebAppData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebAppData) Get() (v WebAppData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebAppData) Or(d WebAppData) WebAppData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebAppInfo returns new OptWebAppInfo with value set to v.
func NewOptWebAppInfo(v WebAppInfo) OptWebAppInfo {
	return OptWebAppInfo{
		Value: v,
		Set:   true,
	}
}

// OptWebAppInfo is optional WebAppInfo.
type OptWebAppInfo struct {
	Value WebAppInfo
	Set   bool
}

// IsSet returns true if OptWebAppInfo was set.
func (o OptWebAppInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebAppInfo) Reset() {
	var v WebAppInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebAppInfo) SetTo(v WebAppInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebAppInfo) Get() (v WebAppInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebAppInfo) Or(d WebAppInfo) WebAppInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWebhookInfo returns new OptWebhookInfo with value set to v.
func NewOptWebhookInfo(v WebhookInfo) OptWebhookInfo {
	return OptWebhookInfo{
		Value: v,
		Set:   true,
	}
}

// OptWebhookInfo is optional WebhookInfo.
type OptWebhookInfo struct {
	Value WebhookInfo
	Set   bool
}

// IsSet returns true if OptWebhookInfo was set.
func (o OptWebhookInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWebhookInfo) Reset() {
	var v WebhookInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWebhookInfo) SetTo(v WebhookInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWebhookInfo) Get() (v WebhookInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWebhookInfo) Or(d WebhookInfo) WebhookInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWriteAccessAllowed returns new OptWriteAccessAllowed with value set to v.
func NewOptWriteAccessAllowed(v WriteAccessAllowed) OptWriteAccessAllowed {
	return OptWriteAccessAllowed{
		Value: v,
		Set:   true,
	}
}

// OptWriteAccessAllowed is optional WriteAccessAllowed.
type OptWriteAccessAllowed struct {
	Value WriteAccessAllowed
	Set   bool
}

// IsSet returns true if OptWriteAccessAllowed was set.
func (o OptWriteAccessAllowed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWriteAccessAllowed) Reset() {
	var v WriteAccessAllowed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWriteAccessAllowed) SetTo(v WriteAccessAllowed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWriteAccessAllowed) Get() (v WriteAccessAllowed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWriteAccessAllowed) Or(d WriteAccessAllowed) WriteAccessAllowed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// This object represents information about an order.
// Ref: #/components/schemas/OrderInfo
type OrderInfo struct {
	// _Optional_. User name.
	Name OptString `json:"name"`
	// _Optional_. User's phone number.
	PhoneNumber OptString `json:"phone_number"`
	// _Optional_. User email.
	Email           OptString          `json:"email"`
	ShippingAddress OptShippingAddress `json:"shipping_address"`
}

// GetName returns the value of Name.
func (s *OrderInfo) GetName() OptString {
	return s.Name
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *OrderInfo) GetPhoneNumber() OptString {
	return s.PhoneNumber
}

// GetEmail returns the value of Email.
func (s *OrderInfo) GetEmail() OptString {
	return s.Email
}

// GetShippingAddress returns the value of ShippingAddress.
func (s *OrderInfo) GetShippingAddress() OptShippingAddress {
	return s.ShippingAddress
}

// SetName sets the value of Name.
func (s *OrderInfo) SetName(val OptString) {
	s.Name = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *OrderInfo) SetPhoneNumber(val OptString) {
	s.PhoneNumber = val
}

// SetEmail sets the value of Email.
func (s *OrderInfo) SetEmail(val OptString) {
	s.Email = val
}

// SetShippingAddress sets the value of ShippingAddress.
func (s *OrderInfo) SetShippingAddress(val OptShippingAddress) {
	s.ShippingAddress = val
}

// Describes Telegram Passport data shared with the bot by the user.
// Ref: #/components/schemas/PassportData
type PassportData struct {
	// Array with information about documents and other Telegram Passport elements that was shared with
	// the bot.
	Data        []EncryptedPassportElement `json:"data"`
	Credentials EncryptedCredentials       `json:"credentials"`
}

// GetData returns the value of Data.
func (s *PassportData) GetData() []EncryptedPassportElement {
	return s.Data
}

// GetCredentials returns the value of Credentials.
func (s *PassportData) GetCredentials() EncryptedCredentials {
	return s.Credentials
}

// SetData sets the value of Data.
func (s *PassportData) SetData(val []EncryptedPassportElement) {
	s.Data = val
}

// SetCredentials sets the value of Credentials.
func (s *PassportData) SetCredentials(val EncryptedCredentials) {
	s.Credentials = val
}

// This object represents an error in the Telegram Passport element which was submitted that should
// be resolved by the user. It should be one of:.
// Ref: #/components/schemas/PassportElementError
// PassportElementError represents sum type.
type PassportElementError struct {
	Type                                 PassportElementErrorType // switch on this field
	PassportElementErrorDataField        PassportElementErrorDataField
	PassportElementErrorFrontSide        PassportElementErrorFrontSide
	PassportElementErrorReverseSide      PassportElementErrorReverseSide
	PassportElementErrorSelfie           PassportElementErrorSelfie
	PassportElementErrorFile             PassportElementErrorFile
	PassportElementErrorFiles            PassportElementErrorFiles
	PassportElementErrorTranslationFile  PassportElementErrorTranslationFile
	PassportElementErrorTranslationFiles PassportElementErrorTranslationFiles
	PassportElementErrorUnspecified      PassportElementErrorUnspecified
}

// PassportElementErrorType is oneOf type of PassportElementError.
type PassportElementErrorType string

// Possible values for PassportElementErrorType.
const (
	PassportElementErrorDataFieldPassportElementError        PassportElementErrorType = "data"
	PassportElementErrorFrontSidePassportElementError        PassportElementErrorType = "front_side"
	PassportElementErrorReverseSidePassportElementError      PassportElementErrorType = "reverse_side"
	PassportElementErrorSelfiePassportElementError           PassportElementErrorType = "selfie"
	PassportElementErrorFilePassportElementError             PassportElementErrorType = "file"
	PassportElementErrorFilesPassportElementError            PassportElementErrorType = "files"
	PassportElementErrorTranslationFilePassportElementError  PassportElementErrorType = "translation_file"
	PassportElementErrorTranslationFilesPassportElementError PassportElementErrorType = "translation_files"
	PassportElementErrorUnspecifiedPassportElementError      PassportElementErrorType = "unspecified"
)

// IsPassportElementErrorDataField reports whether PassportElementError is PassportElementErrorDataField.
func (s PassportElementError) IsPassportElementErrorDataField() bool {
	return s.Type == PassportElementErrorDataFieldPassportElementError
}

// IsPassportElementErrorFrontSide reports whether PassportElementError is PassportElementErrorFrontSide.
func (s PassportElementError) IsPassportElementErrorFrontSide() bool {
	return s.Type == PassportElementErrorFrontSidePassportElementError
}

// IsPassportElementErrorReverseSide reports whether PassportElementError is PassportElementErrorReverseSide.
func (s PassportElementError) IsPassportElementErrorReverseSide() bool {
	return s.Type == PassportElementErrorReverseSidePassportElementError
}

// IsPassportElementErrorSelfie reports whether PassportElementError is PassportElementErrorSelfie.
func (s PassportElementError) IsPassportElementErrorSelfie() bool {
	return s.Type == PassportElementErrorSelfiePassportElementError
}

// IsPassportElementErrorFile reports whether PassportElementError is PassportElementErrorFile.
func (s PassportElementError) IsPassportElementErrorFile() bool {
	return s.Type == PassportElementErrorFilePassportElementError
}

// IsPassportElementErrorFiles reports whether PassportElementError is PassportElementErrorFiles.
func (s PassportElementError) IsPassportElementErrorFiles() bool {
	return s.Type == PassportElementErrorFilesPassportElementError
}

// IsPassportElementErrorTranslationFile reports whether PassportElementError is PassportElementErrorTranslationFile.
func (s PassportElementError) IsPassportElementErrorTranslationFile() bool {
	return s.Type == PassportElementErrorTranslationFilePassportElementError
}

// IsPassportElementErrorTranslationFiles reports whether PassportElementError is PassportElementErrorTranslationFiles.
func (s PassportElementError) IsPassportElementErrorTranslationFiles() bool {
	return s.Type == PassportElementErrorTranslationFilesPassportElementError
}

// IsPassportElementErrorUnspecified reports whether PassportElementError is PassportElementErrorUnspecified.
func (s PassportElementError) IsPassportElementErrorUnspecified() bool {
	return s.Type == PassportElementErrorUnspecifiedPassportElementError
}

// SetPassportElementErrorDataField sets PassportElementError to PassportElementErrorDataField.
func (s *PassportElementError) SetPassportElementErrorDataField(v PassportElementErrorDataField) {
	s.Type = PassportElementErrorDataFieldPassportElementError
	s.PassportElementErrorDataField = v
}

// GetPassportElementErrorDataField returns PassportElementErrorDataField and true boolean if PassportElementError is PassportElementErrorDataField.
func (s PassportElementError) GetPassportElementErrorDataField() (v PassportElementErrorDataField, ok bool) {
	if !s.IsPassportElementErrorDataField() {
		return v, false
	}
	return s.PassportElementErrorDataField, true
}

// NewPassportElementErrorDataFieldPassportElementError returns new PassportElementError from PassportElementErrorDataField.
func NewPassportElementErrorDataFieldPassportElementError(v PassportElementErrorDataField) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorDataField(v)
	return s
}

// SetPassportElementErrorFrontSide sets PassportElementError to PassportElementErrorFrontSide.
func (s *PassportElementError) SetPassportElementErrorFrontSide(v PassportElementErrorFrontSide) {
	s.Type = PassportElementErrorFrontSidePassportElementError
	s.PassportElementErrorFrontSide = v
}

// GetPassportElementErrorFrontSide returns PassportElementErrorFrontSide and true boolean if PassportElementError is PassportElementErrorFrontSide.
func (s PassportElementError) GetPassportElementErrorFrontSide() (v PassportElementErrorFrontSide, ok bool) {
	if !s.IsPassportElementErrorFrontSide() {
		return v, false
	}
	return s.PassportElementErrorFrontSide, true
}

// NewPassportElementErrorFrontSidePassportElementError returns new PassportElementError from PassportElementErrorFrontSide.
func NewPassportElementErrorFrontSidePassportElementError(v PassportElementErrorFrontSide) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorFrontSide(v)
	return s
}

// SetPassportElementErrorReverseSide sets PassportElementError to PassportElementErrorReverseSide.
func (s *PassportElementError) SetPassportElementErrorReverseSide(v PassportElementErrorReverseSide) {
	s.Type = PassportElementErrorReverseSidePassportElementError
	s.PassportElementErrorReverseSide = v
}

// GetPassportElementErrorReverseSide returns PassportElementErrorReverseSide and true boolean if PassportElementError is PassportElementErrorReverseSide.
func (s PassportElementError) GetPassportElementErrorReverseSide() (v PassportElementErrorReverseSide, ok bool) {
	if !s.IsPassportElementErrorReverseSide() {
		return v, false
	}
	return s.PassportElementErrorReverseSide, true
}

// NewPassportElementErrorReverseSidePassportElementError returns new PassportElementError from PassportElementErrorReverseSide.
func NewPassportElementErrorReverseSidePassportElementError(v PassportElementErrorReverseSide) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorReverseSide(v)
	return s
}

// SetPassportElementErrorSelfie sets PassportElementError to PassportElementErrorSelfie.
func (s *PassportElementError) SetPassportElementErrorSelfie(v PassportElementErrorSelfie) {
	s.Type = PassportElementErrorSelfiePassportElementError
	s.PassportElementErrorSelfie = v
}

// GetPassportElementErrorSelfie returns PassportElementErrorSelfie and true boolean if PassportElementError is PassportElementErrorSelfie.
func (s PassportElementError) GetPassportElementErrorSelfie() (v PassportElementErrorSelfie, ok bool) {
	if !s.IsPassportElementErrorSelfie() {
		return v, false
	}
	return s.PassportElementErrorSelfie, true
}

// NewPassportElementErrorSelfiePassportElementError returns new PassportElementError from PassportElementErrorSelfie.
func NewPassportElementErrorSelfiePassportElementError(v PassportElementErrorSelfie) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorSelfie(v)
	return s
}

// SetPassportElementErrorFile sets PassportElementError to PassportElementErrorFile.
func (s *PassportElementError) SetPassportElementErrorFile(v PassportElementErrorFile) {
	s.Type = PassportElementErrorFilePassportElementError
	s.PassportElementErrorFile = v
}

// GetPassportElementErrorFile returns PassportElementErrorFile and true boolean if PassportElementError is PassportElementErrorFile.
func (s PassportElementError) GetPassportElementErrorFile() (v PassportElementErrorFile, ok bool) {
	if !s.IsPassportElementErrorFile() {
		return v, false
	}
	return s.PassportElementErrorFile, true
}

// NewPassportElementErrorFilePassportElementError returns new PassportElementError from PassportElementErrorFile.
func NewPassportElementErrorFilePassportElementError(v PassportElementErrorFile) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorFile(v)
	return s
}

// SetPassportElementErrorFiles sets PassportElementError to PassportElementErrorFiles.
func (s *PassportElementError) SetPassportElementErrorFiles(v PassportElementErrorFiles) {
	s.Type = PassportElementErrorFilesPassportElementError
	s.PassportElementErrorFiles = v
}

// GetPassportElementErrorFiles returns PassportElementErrorFiles and true boolean if PassportElementError is PassportElementErrorFiles.
func (s PassportElementError) GetPassportElementErrorFiles() (v PassportElementErrorFiles, ok bool) {
	if !s.IsPassportElementErrorFiles() {
		return v, false
	}
	return s.PassportElementErrorFiles, true
}

// NewPassportElementErrorFilesPassportElementError returns new PassportElementError from PassportElementErrorFiles.
func NewPassportElementErrorFilesPassportElementError(v PassportElementErrorFiles) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorFiles(v)
	return s
}

// SetPassportElementErrorTranslationFile sets PassportElementError to PassportElementErrorTranslationFile.
func (s *PassportElementError) SetPassportElementErrorTranslationFile(v PassportElementErrorTranslationFile) {
	s.Type = PassportElementErrorTranslationFilePassportElementError
	s.PassportElementErrorTranslationFile = v
}

// GetPassportElementErrorTranslationFile returns PassportElementErrorTranslationFile and true boolean if PassportElementError is PassportElementErrorTranslationFile.
func (s PassportElementError) GetPassportElementErrorTranslationFile() (v PassportElementErrorTranslationFile, ok bool) {
	if !s.IsPassportElementErrorTranslationFile() {
		return v, false
	}
	return s.PassportElementErrorTranslationFile, true
}

// NewPassportElementErrorTranslationFilePassportElementError returns new PassportElementError from PassportElementErrorTranslationFile.
func NewPassportElementErrorTranslationFilePassportElementError(v PassportElementErrorTranslationFile) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorTranslationFile(v)
	return s
}

// SetPassportElementErrorTranslationFiles sets PassportElementError to PassportElementErrorTranslationFiles.
func (s *PassportElementError) SetPassportElementErrorTranslationFiles(v PassportElementErrorTranslationFiles) {
	s.Type = PassportElementErrorTranslationFilesPassportElementError
	s.PassportElementErrorTranslationFiles = v
}

// GetPassportElementErrorTranslationFiles returns PassportElementErrorTranslationFiles and true boolean if PassportElementError is PassportElementErrorTranslationFiles.
func (s PassportElementError) GetPassportElementErrorTranslationFiles() (v PassportElementErrorTranslationFiles, ok bool) {
	if !s.IsPassportElementErrorTranslationFiles() {
		return v, false
	}
	return s.PassportElementErrorTranslationFiles, true
}

// NewPassportElementErrorTranslationFilesPassportElementError returns new PassportElementError from PassportElementErrorTranslationFiles.
func NewPassportElementErrorTranslationFilesPassportElementError(v PassportElementErrorTranslationFiles) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorTranslationFiles(v)
	return s
}

// SetPassportElementErrorUnspecified sets PassportElementError to PassportElementErrorUnspecified.
func (s *PassportElementError) SetPassportElementErrorUnspecified(v PassportElementErrorUnspecified) {
	s.Type = PassportElementErrorUnspecifiedPassportElementError
	s.PassportElementErrorUnspecified = v
}

// GetPassportElementErrorUnspecified returns PassportElementErrorUnspecified and true boolean if PassportElementError is PassportElementErrorUnspecified.
func (s PassportElementError) GetPassportElementErrorUnspecified() (v PassportElementErrorUnspecified, ok bool) {
	if !s.IsPassportElementErrorUnspecified() {
		return v, false
	}
	return s.PassportElementErrorUnspecified, true
}

// NewPassportElementErrorUnspecifiedPassportElementError returns new PassportElementError from PassportElementErrorUnspecified.
func NewPassportElementErrorUnspecifiedPassportElementError(v PassportElementErrorUnspecified) PassportElementError {
	var s PassportElementError
	s.SetPassportElementErrorUnspecified(v)
	return s
}

// Represents an issue in one of the data fields that was provided by the user. The error is
// considered resolved when the field's value changes.
// Ref: #/components/schemas/PassportElementErrorDataField
type PassportElementErrorDataField struct {
	// Error source, must be _data_.
	Source string `json:"source"`
	// The section of the user's Telegram Passport which has the error, one of `personal_details`,
	// `passport`, `driver_license`, `identity_card`, `internal_passport`, `address`.
	Type PassportElementErrorDataFieldType `json:"type"`
	// Name of the data field which has the error.
	FieldName string `json:"field_name"`
	// Base64-encoded data hash.
	DataHash string `json:"data_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s *PassportElementErrorDataField) GetSource() string {
	return s.Source
}

// GetType returns the value of Type.
func (s *PassportElementErrorDataField) GetType() PassportElementErrorDataFieldType {
	return s.Type
}

// GetFieldName returns the value of FieldName.
func (s *PassportElementErrorDataField) GetFieldName() string {
	return s.FieldName
}

// GetDataHash returns the value of DataHash.
func (s *PassportElementErrorDataField) GetDataHash() string {
	return s.DataHash
}

// GetMessage returns the value of Message.
func (s *PassportElementErrorDataField) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorDataField) SetSource(val string) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *PassportElementErrorDataField) SetType(val PassportElementErrorDataFieldType) {
	s.Type = val
}

// SetFieldName sets the value of FieldName.
func (s *PassportElementErrorDataField) SetFieldName(val string) {
	s.FieldName = val
}

// SetDataHash sets the value of DataHash.
func (s *PassportElementErrorDataField) SetDataHash(val string) {
	s.DataHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorDataField) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the error, one of `personal_details`,
// `passport`, `driver_license`, `identity_card`, `internal_passport`, `address`.
type PassportElementErrorDataFieldType string

const (
	PassportElementErrorDataFieldTypePersonalDetails  PassportElementErrorDataFieldType = "personal_details"
	PassportElementErrorDataFieldTypePassport         PassportElementErrorDataFieldType = "passport"
	PassportElementErrorDataFieldTypeDriverLicense    PassportElementErrorDataFieldType = "driver_license"
	PassportElementErrorDataFieldTypeIdentityCard     PassportElementErrorDataFieldType = "identity_card"
	PassportElementErrorDataFieldTypeInternalPassport PassportElementErrorDataFieldType = "internal_passport"
	PassportElementErrorDataFieldTypeAddress          PassportElementErrorDataFieldType = "address"
)

// AllValues returns all PassportElementErrorDataFieldType values.
func (PassportElementErrorDataFieldType) AllValues() []PassportElementErrorDataFieldType {
	return []PassportElementErrorDataFieldType{
		PassportElementErrorDataFieldTypePersonalDetails,
		PassportElementErrorDataFieldTypePassport,
		PassportElementErrorDataFieldTypeDriverLicense,
		PassportElementErrorDataFieldTypeIdentityCard,
		PassportElementErrorDataFieldTypeInternalPassport,
		PassportElementErrorDataFieldTypeAddress,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PassportElementErrorDataFieldType) MarshalText() ([]byte, error) {
	switch s {
	case PassportElementErrorDataFieldTypePersonalDetails:
		return []byte(s), nil
	case PassportElementErrorDataFieldTypePassport:
		return []byte(s), nil
	case PassportElementErrorDataFieldTypeDriverLicense:
		return []byte(s), nil
	case PassportElementErrorDataFieldTypeIdentityCard:
		return []byte(s), nil
	case PassportElementErrorDataFieldTypeInternalPassport:
		return []byte(s), nil
	case PassportElementErrorDataFieldTypeAddress:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PassportElementErrorDataFieldType) UnmarshalText(data []byte) error {
	switch PassportElementErrorDataFieldType(data) {
	case PassportElementErrorDataFieldTypePersonalDetails:
		*s = PassportElementErrorDataFieldTypePersonalDetails
		return nil
	case PassportElementErrorDataFieldTypePassport:
		*s = PassportElementErrorDataFieldTypePassport
		return nil
	case PassportElementErrorDataFieldTypeDriverLicense:
		*s = PassportElementErrorDataFieldTypeDriverLicense
		return nil
	case PassportElementErrorDataFieldTypeIdentityCard:
		*s = PassportElementErrorDataFieldTypeIdentityCard
		return nil
	case PassportElementErrorDataFieldTypeInternalPassport:
		*s = PassportElementErrorDataFieldTypeInternalPassport
		return nil
	case PassportElementErrorDataFieldTypeAddress:
		*s = PassportElementErrorDataFieldTypeAddress
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents an issue with a document scan. The error is considered resolved when the file with the
// document scan changes.
// Ref: #/components/schemas/PassportElementErrorFile
type PassportElementErrorFile struct {
	// Error source, must be _file_.
	Source string `json:"source"`
	// The section of the user's Telegram Passport which has the issue, one of `utility_bill`,
	// `bank_statement`, `rental_agreement`, `passport_registration`, `temporary_registration`.
	Type PassportElementErrorFileType `json:"type"`
	// Base64-encoded file hash.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s *PassportElementErrorFile) GetSource() string {
	return s.Source
}

// GetType returns the value of Type.
func (s *PassportElementErrorFile) GetType() PassportElementErrorFileType {
	return s.Type
}

// GetFileHash returns the value of FileHash.
func (s *PassportElementErrorFile) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s *PassportElementErrorFile) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorFile) SetSource(val string) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *PassportElementErrorFile) SetType(val PassportElementErrorFileType) {
	s.Type = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorFile) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorFile) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of `utility_bill`,
// `bank_statement`, `rental_agreement`, `passport_registration`, `temporary_registration`.
type PassportElementErrorFileType string

const (
	PassportElementErrorFileTypeUtilityBill           PassportElementErrorFileType = "utility_bill"
	PassportElementErrorFileTypeBankStatement         PassportElementErrorFileType = "bank_statement"
	PassportElementErrorFileTypeRentalAgreement       PassportElementErrorFileType = "rental_agreement"
	PassportElementErrorFileTypePassportRegistration  PassportElementErrorFileType = "passport_registration"
	PassportElementErrorFileTypeTemporaryRegistration PassportElementErrorFileType = "temporary_registration"
)

// AllValues returns all PassportElementErrorFileType values.
func (PassportElementErrorFileType) AllValues() []PassportElementErrorFileType {
	return []PassportElementErrorFileType{
		PassportElementErrorFileTypeUtilityBill,
		PassportElementErrorFileTypeBankStatement,
		PassportElementErrorFileTypeRentalAgreement,
		PassportElementErrorFileTypePassportRegistration,
		PassportElementErrorFileTypeTemporaryRegistration,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PassportElementErrorFileType) MarshalText() ([]byte, error) {
	switch s {
	case PassportElementErrorFileTypeUtilityBill:
		return []byte(s), nil
	case PassportElementErrorFileTypeBankStatement:
		return []byte(s), nil
	case PassportElementErrorFileTypeRentalAgreement:
		return []byte(s), nil
	case PassportElementErrorFileTypePassportRegistration:
		return []byte(s), nil
	case PassportElementErrorFileTypeTemporaryRegistration:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PassportElementErrorFileType) UnmarshalText(data []byte) error {
	switch PassportElementErrorFileType(data) {
	case PassportElementErrorFileTypeUtilityBill:
		*s = PassportElementErrorFileTypeUtilityBill
		return nil
	case PassportElementErrorFileTypeBankStatement:
		*s = PassportElementErrorFileTypeBankStatement
		return nil
	case PassportElementErrorFileTypeRentalAgreement:
		*s = PassportElementErrorFileTypeRentalAgreement
		return nil
	case PassportElementErrorFileTypePassportRegistration:
		*s = PassportElementErrorFileTypePassportRegistration
		return nil
	case PassportElementErrorFileTypeTemporaryRegistration:
		*s = PassportElementErrorFileTypeTemporaryRegistration
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents an issue with a list of scans. The error is considered resolved when the list of files
// containing the scans changes.
// Ref: #/components/schemas/PassportElementErrorFiles
type PassportElementErrorFiles struct {
	// Error source, must be _files_.
	Source string `json:"source"`
	// The section of the user's Telegram Passport which has the issue, one of `utility_bill`,
	// `bank_statement`, `rental_agreement`, `passport_registration`, `temporary_registration`.
	Type PassportElementErrorFilesType `json:"type"`
	// List of base64-encoded file hashes.
	FileHashes []string `json:"file_hashes"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s *PassportElementErrorFiles) GetSource() string {
	return s.Source
}

// GetType returns the value of Type.
func (s *PassportElementErrorFiles) GetType() PassportElementErrorFilesType {
	return s.Type
}

// GetFileHashes returns the value of FileHashes.
func (s *PassportElementErrorFiles) GetFileHashes() []string {
	return s.FileHashes
}

// GetMessage returns the value of Message.
func (s *PassportElementErrorFiles) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorFiles) SetSource(val string) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *PassportElementErrorFiles) SetType(val PassportElementErrorFilesType) {
	s.Type = val
}

// SetFileHashes sets the value of FileHashes.
func (s *PassportElementErrorFiles) SetFileHashes(val []string) {
	s.FileHashes = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorFiles) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of `utility_bill`,
// `bank_statement`, `rental_agreement`, `passport_registration`, `temporary_registration`.
type PassportElementErrorFilesType string

const (
	PassportElementErrorFilesTypeUtilityBill           PassportElementErrorFilesType = "utility_bill"
	PassportElementErrorFilesTypeBankStatement         PassportElementErrorFilesType = "bank_statement"
	PassportElementErrorFilesTypeRentalAgreement       PassportElementErrorFilesType = "rental_agreement"
	PassportElementErrorFilesTypePassportRegistration  PassportElementErrorFilesType = "passport_registration"
	PassportElementErrorFilesTypeTemporaryRegistration PassportElementErrorFilesType = "temporary_registration"
)

// AllValues returns all PassportElementErrorFilesType values.
func (PassportElementErrorFilesType) AllValues() []PassportElementErrorFilesType {
	return []PassportElementErrorFilesType{
		PassportElementErrorFilesTypeUtilityBill,
		PassportElementErrorFilesTypeBankStatement,
		PassportElementErrorFilesTypeRentalAgreement,
		PassportElementErrorFilesTypePassportRegistration,
		PassportElementErrorFilesTypeTemporaryRegistration,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PassportElementErrorFilesType) MarshalText() ([]byte, error) {
	switch s {
	case PassportElementErrorFilesTypeUtilityBill:
		return []byte(s), nil
	case PassportElementErrorFilesTypeBankStatement:
		return []byte(s), nil
	case PassportElementErrorFilesTypeRentalAgreement:
		return []byte(s), nil
	case PassportElementErrorFilesTypePassportRegistration:
		return []byte(s), nil
	case PassportElementErrorFilesTypeTemporaryRegistration:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PassportElementErrorFilesType) UnmarshalText(data []byte) error {
	switch PassportElementErrorFilesType(data) {
	case PassportElementErrorFilesTypeUtilityBill:
		*s = PassportElementErrorFilesTypeUtilityBill
		return nil
	case PassportElementErrorFilesTypeBankStatement:
		*s = PassportElementErrorFilesTypeBankStatement
		return nil
	case PassportElementErrorFilesTypeRentalAgreement:
		*s = PassportElementErrorFilesTypeRentalAgreement
		return nil
	case PassportElementErrorFilesTypePassportRegistration:
		*s = PassportElementErrorFilesTypePassportRegistration
		return nil
	case PassportElementErrorFilesTypeTemporaryRegistration:
		*s = PassportElementErrorFilesTypeTemporaryRegistration
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents an issue with the front side of a document. The error is considered resolved when the
// file with the front side of the document changes.
// Ref: #/components/schemas/PassportElementErrorFrontSide
type PassportElementErrorFrontSide struct {
	// Error source, must be _front_side_.
	Source string `json:"source"`
	// The section of the user's Telegram Passport which has the issue, one of `passport`,
	// `driver_license`, `identity_card`, `internal_passport`.
	Type PassportElementErrorFrontSideType `json:"type"`
	// Base64-encoded hash of the file with the front side of the document.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s *PassportElementErrorFrontSide) GetSource() string {
	return s.Source
}

// GetType returns the value of Type.
func (s *PassportElementErrorFrontSide) GetType() PassportElementErrorFrontSideType {
	return s.Type
}

// GetFileHash returns the value of FileHash.
func (s *PassportElementErrorFrontSide) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s *PassportElementErrorFrontSide) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorFrontSide) SetSource(val string) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *PassportElementErrorFrontSide) SetType(val PassportElementErrorFrontSideType) {
	s.Type = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorFrontSide) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorFrontSide) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of `passport`,
// `driver_license`, `identity_card`, `internal_passport`.
type PassportElementErrorFrontSideType string

const (
	PassportElementErrorFrontSideTypePassport         PassportElementErrorFrontSideType = "passport"
	PassportElementErrorFrontSideTypeDriverLicense    PassportElementErrorFrontSideType = "driver_license"
	PassportElementErrorFrontSideTypeIdentityCard     PassportElementErrorFrontSideType = "identity_card"
	PassportElementErrorFrontSideTypeInternalPassport PassportElementErrorFrontSideType = "internal_passport"
)

// AllValues returns all PassportElementErrorFrontSideType values.
func (PassportElementErrorFrontSideType) AllValues() []PassportElementErrorFrontSideType {
	return []PassportElementErrorFrontSideType{
		PassportElementErrorFrontSideTypePassport,
		PassportElementErrorFrontSideTypeDriverLicense,
		PassportElementErrorFrontSideTypeIdentityCard,
		PassportElementErrorFrontSideTypeInternalPassport,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PassportElementErrorFrontSideType) MarshalText() ([]byte, error) {
	switch s {
	case PassportElementErrorFrontSideTypePassport:
		return []byte(s), nil
	case PassportElementErrorFrontSideTypeDriverLicense:
		return []byte(s), nil
	case PassportElementErrorFrontSideTypeIdentityCard:
		return []byte(s), nil
	case PassportElementErrorFrontSideTypeInternalPassport:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PassportElementErrorFrontSideType) UnmarshalText(data []byte) error {
	switch PassportElementErrorFrontSideType(data) {
	case PassportElementErrorFrontSideTypePassport:
		*s = PassportElementErrorFrontSideTypePassport
		return nil
	case PassportElementErrorFrontSideTypeDriverLicense:
		*s = PassportElementErrorFrontSideTypeDriverLicense
		return nil
	case PassportElementErrorFrontSideTypeIdentityCard:
		*s = PassportElementErrorFrontSideTypeIdentityCard
		return nil
	case PassportElementErrorFrontSideTypeInternalPassport:
		*s = PassportElementErrorFrontSideTypeInternalPassport
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents an issue with the reverse side of a document. The error is considered resolved when the
// file with reverse side of the document changes.
// Ref: #/components/schemas/PassportElementErrorReverseSide
type PassportElementErrorReverseSide struct {
	// Error source, must be _reverse_side_.
	Source string `json:"source"`
	// The section of the user's Telegram Passport which has the issue, one of `driver_license`,
	// `identity_card`.
	Type PassportElementErrorReverseSideType `json:"type"`
	// Base64-encoded hash of the file with the reverse side of the document.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s *PassportElementErrorReverseSide) GetSource() string {
	return s.Source
}

// GetType returns the value of Type.
func (s *PassportElementErrorReverseSide) GetType() PassportElementErrorReverseSideType {
	return s.Type
}

// GetFileHash returns the value of FileHash.
func (s *PassportElementErrorReverseSide) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s *PassportElementErrorReverseSide) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorReverseSide) SetSource(val string) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *PassportElementErrorReverseSide) SetType(val PassportElementErrorReverseSideType) {
	s.Type = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorReverseSide) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorReverseSide) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of `driver_license`,
// `identity_card`.
type PassportElementErrorReverseSideType string

const (
	PassportElementErrorReverseSideTypeDriverLicense PassportElementErrorReverseSideType = "driver_license"
	PassportElementErrorReverseSideTypeIdentityCard  PassportElementErrorReverseSideType = "identity_card"
)

// AllValues returns all PassportElementErrorReverseSideType values.
func (PassportElementErrorReverseSideType) AllValues() []PassportElementErrorReverseSideType {
	return []PassportElementErrorReverseSideType{
		PassportElementErrorReverseSideTypeDriverLicense,
		PassportElementErrorReverseSideTypeIdentityCard,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PassportElementErrorReverseSideType) MarshalText() ([]byte, error) {
	switch s {
	case PassportElementErrorReverseSideTypeDriverLicense:
		return []byte(s), nil
	case PassportElementErrorReverseSideTypeIdentityCard:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PassportElementErrorReverseSideType) UnmarshalText(data []byte) error {
	switch PassportElementErrorReverseSideType(data) {
	case PassportElementErrorReverseSideTypeDriverLicense:
		*s = PassportElementErrorReverseSideTypeDriverLicense
		return nil
	case PassportElementErrorReverseSideTypeIdentityCard:
		*s = PassportElementErrorReverseSideTypeIdentityCard
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents an issue with the selfie with a document. The error is considered resolved when the
// file with the selfie changes.
// Ref: #/components/schemas/PassportElementErrorSelfie
type PassportElementErrorSelfie struct {
	// Error source, must be _selfie_.
	Source string `json:"source"`
	// The section of the user's Telegram Passport which has the issue, one of `passport`,
	// `driver_license`, `identity_card`, `internal_passport`.
	Type PassportElementErrorSelfieType `json:"type"`
	// Base64-encoded hash of the file with the selfie.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s *PassportElementErrorSelfie) GetSource() string {
	return s.Source
}

// GetType returns the value of Type.
func (s *PassportElementErrorSelfie) GetType() PassportElementErrorSelfieType {
	return s.Type
}

// GetFileHash returns the value of FileHash.
func (s *PassportElementErrorSelfie) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s *PassportElementErrorSelfie) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorSelfie) SetSource(val string) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *PassportElementErrorSelfie) SetType(val PassportElementErrorSelfieType) {
	s.Type = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorSelfie) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorSelfie) SetMessage(val string) {
	s.Message = val
}

// The section of the user's Telegram Passport which has the issue, one of `passport`,
// `driver_license`, `identity_card`, `internal_passport`.
type PassportElementErrorSelfieType string

const (
	PassportElementErrorSelfieTypePassport         PassportElementErrorSelfieType = "passport"
	PassportElementErrorSelfieTypeDriverLicense    PassportElementErrorSelfieType = "driver_license"
	PassportElementErrorSelfieTypeIdentityCard     PassportElementErrorSelfieType = "identity_card"
	PassportElementErrorSelfieTypeInternalPassport PassportElementErrorSelfieType = "internal_passport"
)

// AllValues returns all PassportElementErrorSelfieType values.
func (PassportElementErrorSelfieType) AllValues() []PassportElementErrorSelfieType {
	return []PassportElementErrorSelfieType{
		PassportElementErrorSelfieTypePassport,
		PassportElementErrorSelfieTypeDriverLicense,
		PassportElementErrorSelfieTypeIdentityCard,
		PassportElementErrorSelfieTypeInternalPassport,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PassportElementErrorSelfieType) MarshalText() ([]byte, error) {
	switch s {
	case PassportElementErrorSelfieTypePassport:
		return []byte(s), nil
	case PassportElementErrorSelfieTypeDriverLicense:
		return []byte(s), nil
	case PassportElementErrorSelfieTypeIdentityCard:
		return []byte(s), nil
	case PassportElementErrorSelfieTypeInternalPassport:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PassportElementErrorSelfieType) UnmarshalText(data []byte) error {
	switch PassportElementErrorSelfieType(data) {
	case PassportElementErrorSelfieTypePassport:
		*s = PassportElementErrorSelfieTypePassport
		return nil
	case PassportElementErrorSelfieTypeDriverLicense:
		*s = PassportElementErrorSelfieTypeDriverLicense
		return nil
	case PassportElementErrorSelfieTypeIdentityCard:
		*s = PassportElementErrorSelfieTypeIdentityCard
		return nil
	case PassportElementErrorSelfieTypeInternalPassport:
		*s = PassportElementErrorSelfieTypeInternalPassport
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents an issue with one of the files that constitute the translation of a document. The error
// is considered resolved when the file changes.
// Ref: #/components/schemas/PassportElementErrorTranslationFile
type PassportElementErrorTranslationFile struct {
	// Error source, must be _translation_file_.
	Source string `json:"source"`
	// Type of element of the user's Telegram Passport which has the issue, one of `passport`,
	// `driver_license`, `identity_card`, `internal_passport`, `utility_bill`, `bank_statement`,
	// `rental_agreement`, `passport_registration`, `temporary_registration`.
	Type PassportElementErrorTranslationFileType `json:"type"`
	// Base64-encoded file hash.
	FileHash string `json:"file_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s *PassportElementErrorTranslationFile) GetSource() string {
	return s.Source
}

// GetType returns the value of Type.
func (s *PassportElementErrorTranslationFile) GetType() PassportElementErrorTranslationFileType {
	return s.Type
}

// GetFileHash returns the value of FileHash.
func (s *PassportElementErrorTranslationFile) GetFileHash() string {
	return s.FileHash
}

// GetMessage returns the value of Message.
func (s *PassportElementErrorTranslationFile) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorTranslationFile) SetSource(val string) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *PassportElementErrorTranslationFile) SetType(val PassportElementErrorTranslationFileType) {
	s.Type = val
}

// SetFileHash sets the value of FileHash.
func (s *PassportElementErrorTranslationFile) SetFileHash(val string) {
	s.FileHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorTranslationFile) SetMessage(val string) {
	s.Message = val
}

// Type of element of the user's Telegram Passport which has the issue, one of `passport`,
// `driver_license`, `identity_card`, `internal_passport`, `utility_bill`, `bank_statement`,
// `rental_agreement`, `passport_registration`, `temporary_registration`.
type PassportElementErrorTranslationFileType string

const (
	PassportElementErrorTranslationFileTypePassport              PassportElementErrorTranslationFileType = "passport"
	PassportElementErrorTranslationFileTypeDriverLicense         PassportElementErrorTranslationFileType = "driver_license"
	PassportElementErrorTranslationFileTypeIdentityCard          PassportElementErrorTranslationFileType = "identity_card"
	PassportElementErrorTranslationFileTypeInternalPassport      PassportElementErrorTranslationFileType = "internal_passport"
	PassportElementErrorTranslationFileTypeUtilityBill           PassportElementErrorTranslationFileType = "utility_bill"
	PassportElementErrorTranslationFileTypeBankStatement         PassportElementErrorTranslationFileType = "bank_statement"
	PassportElementErrorTranslationFileTypeRentalAgreement       PassportElementErrorTranslationFileType = "rental_agreement"
	PassportElementErrorTranslationFileTypePassportRegistration  PassportElementErrorTranslationFileType = "passport_registration"
	PassportElementErrorTranslationFileTypeTemporaryRegistration PassportElementErrorTranslationFileType = "temporary_registration"
)

// AllValues returns all PassportElementErrorTranslationFileType values.
func (PassportElementErrorTranslationFileType) AllValues() []PassportElementErrorTranslationFileType {
	return []PassportElementErrorTranslationFileType{
		PassportElementErrorTranslationFileTypePassport,
		PassportElementErrorTranslationFileTypeDriverLicense,
		PassportElementErrorTranslationFileTypeIdentityCard,
		PassportElementErrorTranslationFileTypeInternalPassport,
		PassportElementErrorTranslationFileTypeUtilityBill,
		PassportElementErrorTranslationFileTypeBankStatement,
		PassportElementErrorTranslationFileTypeRentalAgreement,
		PassportElementErrorTranslationFileTypePassportRegistration,
		PassportElementErrorTranslationFileTypeTemporaryRegistration,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PassportElementErrorTranslationFileType) MarshalText() ([]byte, error) {
	switch s {
	case PassportElementErrorTranslationFileTypePassport:
		return []byte(s), nil
	case PassportElementErrorTranslationFileTypeDriverLicense:
		return []byte(s), nil
	case PassportElementErrorTranslationFileTypeIdentityCard:
		return []byte(s), nil
	case PassportElementErrorTranslationFileTypeInternalPassport:
		return []byte(s), nil
	case PassportElementErrorTranslationFileTypeUtilityBill:
		return []byte(s), nil
	case PassportElementErrorTranslationFileTypeBankStatement:
		return []byte(s), nil
	case PassportElementErrorTranslationFileTypeRentalAgreement:
		return []byte(s), nil
	case PassportElementErrorTranslationFileTypePassportRegistration:
		return []byte(s), nil
	case PassportElementErrorTranslationFileTypeTemporaryRegistration:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PassportElementErrorTranslationFileType) UnmarshalText(data []byte) error {
	switch PassportElementErrorTranslationFileType(data) {
	case PassportElementErrorTranslationFileTypePassport:
		*s = PassportElementErrorTranslationFileTypePassport
		return nil
	case PassportElementErrorTranslationFileTypeDriverLicense:
		*s = PassportElementErrorTranslationFileTypeDriverLicense
		return nil
	case PassportElementErrorTranslationFileTypeIdentityCard:
		*s = PassportElementErrorTranslationFileTypeIdentityCard
		return nil
	case PassportElementErrorTranslationFileTypeInternalPassport:
		*s = PassportElementErrorTranslationFileTypeInternalPassport
		return nil
	case PassportElementErrorTranslationFileTypeUtilityBill:
		*s = PassportElementErrorTranslationFileTypeUtilityBill
		return nil
	case PassportElementErrorTranslationFileTypeBankStatement:
		*s = PassportElementErrorTranslationFileTypeBankStatement
		return nil
	case PassportElementErrorTranslationFileTypeRentalAgreement:
		*s = PassportElementErrorTranslationFileTypeRentalAgreement
		return nil
	case PassportElementErrorTranslationFileTypePassportRegistration:
		*s = PassportElementErrorTranslationFileTypePassportRegistration
		return nil
	case PassportElementErrorTranslationFileTypeTemporaryRegistration:
		*s = PassportElementErrorTranslationFileTypeTemporaryRegistration
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents an issue with the translated version of a document. The error is considered resolved
// when a file with the document translation change.
// Ref: #/components/schemas/PassportElementErrorTranslationFiles
type PassportElementErrorTranslationFiles struct {
	// Error source, must be _translation_files_.
	Source string `json:"source"`
	// Type of element of the user's Telegram Passport which has the issue, one of `passport`,
	// `driver_license`, `identity_card`, `internal_passport`, `utility_bill`, `bank_statement`,
	// `rental_agreement`, `passport_registration`, `temporary_registration`.
	Type PassportElementErrorTranslationFilesType `json:"type"`
	// List of base64-encoded file hashes.
	FileHashes []string `json:"file_hashes"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s *PassportElementErrorTranslationFiles) GetSource() string {
	return s.Source
}

// GetType returns the value of Type.
func (s *PassportElementErrorTranslationFiles) GetType() PassportElementErrorTranslationFilesType {
	return s.Type
}

// GetFileHashes returns the value of FileHashes.
func (s *PassportElementErrorTranslationFiles) GetFileHashes() []string {
	return s.FileHashes
}

// GetMessage returns the value of Message.
func (s *PassportElementErrorTranslationFiles) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorTranslationFiles) SetSource(val string) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *PassportElementErrorTranslationFiles) SetType(val PassportElementErrorTranslationFilesType) {
	s.Type = val
}

// SetFileHashes sets the value of FileHashes.
func (s *PassportElementErrorTranslationFiles) SetFileHashes(val []string) {
	s.FileHashes = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorTranslationFiles) SetMessage(val string) {
	s.Message = val
}

// Type of element of the user's Telegram Passport which has the issue, one of `passport`,
// `driver_license`, `identity_card`, `internal_passport`, `utility_bill`, `bank_statement`,
// `rental_agreement`, `passport_registration`, `temporary_registration`.
type PassportElementErrorTranslationFilesType string

const (
	PassportElementErrorTranslationFilesTypePassport              PassportElementErrorTranslationFilesType = "passport"
	PassportElementErrorTranslationFilesTypeDriverLicense         PassportElementErrorTranslationFilesType = "driver_license"
	PassportElementErrorTranslationFilesTypeIdentityCard          PassportElementErrorTranslationFilesType = "identity_card"
	PassportElementErrorTranslationFilesTypeInternalPassport      PassportElementErrorTranslationFilesType = "internal_passport"
	PassportElementErrorTranslationFilesTypeUtilityBill           PassportElementErrorTranslationFilesType = "utility_bill"
	PassportElementErrorTranslationFilesTypeBankStatement         PassportElementErrorTranslationFilesType = "bank_statement"
	PassportElementErrorTranslationFilesTypeRentalAgreement       PassportElementErrorTranslationFilesType = "rental_agreement"
	PassportElementErrorTranslationFilesTypePassportRegistration  PassportElementErrorTranslationFilesType = "passport_registration"
	PassportElementErrorTranslationFilesTypeTemporaryRegistration PassportElementErrorTranslationFilesType = "temporary_registration"
)

// AllValues returns all PassportElementErrorTranslationFilesType values.
func (PassportElementErrorTranslationFilesType) AllValues() []PassportElementErrorTranslationFilesType {
	return []PassportElementErrorTranslationFilesType{
		PassportElementErrorTranslationFilesTypePassport,
		PassportElementErrorTranslationFilesTypeDriverLicense,
		PassportElementErrorTranslationFilesTypeIdentityCard,
		PassportElementErrorTranslationFilesTypeInternalPassport,
		PassportElementErrorTranslationFilesTypeUtilityBill,
		PassportElementErrorTranslationFilesTypeBankStatement,
		PassportElementErrorTranslationFilesTypeRentalAgreement,
		PassportElementErrorTranslationFilesTypePassportRegistration,
		PassportElementErrorTranslationFilesTypeTemporaryRegistration,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PassportElementErrorTranslationFilesType) MarshalText() ([]byte, error) {
	switch s {
	case PassportElementErrorTranslationFilesTypePassport:
		return []byte(s), nil
	case PassportElementErrorTranslationFilesTypeDriverLicense:
		return []byte(s), nil
	case PassportElementErrorTranslationFilesTypeIdentityCard:
		return []byte(s), nil
	case PassportElementErrorTranslationFilesTypeInternalPassport:
		return []byte(s), nil
	case PassportElementErrorTranslationFilesTypeUtilityBill:
		return []byte(s), nil
	case PassportElementErrorTranslationFilesTypeBankStatement:
		return []byte(s), nil
	case PassportElementErrorTranslationFilesTypeRentalAgreement:
		return []byte(s), nil
	case PassportElementErrorTranslationFilesTypePassportRegistration:
		return []byte(s), nil
	case PassportElementErrorTranslationFilesTypeTemporaryRegistration:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PassportElementErrorTranslationFilesType) UnmarshalText(data []byte) error {
	switch PassportElementErrorTranslationFilesType(data) {
	case PassportElementErrorTranslationFilesTypePassport:
		*s = PassportElementErrorTranslationFilesTypePassport
		return nil
	case PassportElementErrorTranslationFilesTypeDriverLicense:
		*s = PassportElementErrorTranslationFilesTypeDriverLicense
		return nil
	case PassportElementErrorTranslationFilesTypeIdentityCard:
		*s = PassportElementErrorTranslationFilesTypeIdentityCard
		return nil
	case PassportElementErrorTranslationFilesTypeInternalPassport:
		*s = PassportElementErrorTranslationFilesTypeInternalPassport
		return nil
	case PassportElementErrorTranslationFilesTypeUtilityBill:
		*s = PassportElementErrorTranslationFilesTypeUtilityBill
		return nil
	case PassportElementErrorTranslationFilesTypeBankStatement:
		*s = PassportElementErrorTranslationFilesTypeBankStatement
		return nil
	case PassportElementErrorTranslationFilesTypeRentalAgreement:
		*s = PassportElementErrorTranslationFilesTypeRentalAgreement
		return nil
	case PassportElementErrorTranslationFilesTypePassportRegistration:
		*s = PassportElementErrorTranslationFilesTypePassportRegistration
		return nil
	case PassportElementErrorTranslationFilesTypeTemporaryRegistration:
		*s = PassportElementErrorTranslationFilesTypeTemporaryRegistration
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents an issue in an unspecified place. The error is considered resolved when new data is
// added.
// Ref: #/components/schemas/PassportElementErrorUnspecified
type PassportElementErrorUnspecified struct {
	// Error source, must be _unspecified_.
	Source string `json:"source"`
	// Type of element of the user's Telegram Passport which has the issue.
	Type string `json:"type"`
	// Base64-encoded element hash.
	ElementHash string `json:"element_hash"`
	// Error message.
	Message string `json:"message"`
}

// GetSource returns the value of Source.
func (s *PassportElementErrorUnspecified) GetSource() string {
	return s.Source
}

// GetType returns the value of Type.
func (s *PassportElementErrorUnspecified) GetType() string {
	return s.Type
}

// GetElementHash returns the value of ElementHash.
func (s *PassportElementErrorUnspecified) GetElementHash() string {
	return s.ElementHash
}

// GetMessage returns the value of Message.
func (s *PassportElementErrorUnspecified) GetMessage() string {
	return s.Message
}

// SetSource sets the value of Source.
func (s *PassportElementErrorUnspecified) SetSource(val string) {
	s.Source = val
}

// SetType sets the value of Type.
func (s *PassportElementErrorUnspecified) SetType(val string) {
	s.Type = val
}

// SetElementHash sets the value of ElementHash.
func (s *PassportElementErrorUnspecified) SetElementHash(val string) {
	s.ElementHash = val
}

// SetMessage sets the value of Message.
func (s *PassportElementErrorUnspecified) SetMessage(val string) {
	s.Message = val
}

// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files
// are in JPEG format when decrypted and don't exceed 10MB.
// Ref: #/components/schemas/PassportFile
type PassportFile struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// File size in bytes.
	FileSize int `json:"file_size"`
	// Unix time when the file was uploaded.
	FileDate int `json:"file_date"`
}

// GetFileID returns the value of FileID.
func (s *PassportFile) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *PassportFile) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetFileSize returns the value of FileSize.
func (s *PassportFile) GetFileSize() int {
	return s.FileSize
}

// GetFileDate returns the value of FileDate.
func (s *PassportFile) GetFileDate() int {
	return s.FileDate
}

// SetFileID sets the value of FileID.
func (s *PassportFile) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *PassportFile) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetFileSize sets the value of FileSize.
func (s *PassportFile) SetFileSize(val int) {
	s.FileSize = val
}

// SetFileDate sets the value of FileDate.
func (s *PassportFile) SetFileDate(val int) {
	s.FileDate = val
}

// This object represents one size of a photo or a [file](https://core.telegram.
// org/bots/api#document) / [sticker](https://core.telegram.org/bots/api#sticker) thumbnail.
// Ref: #/components/schemas/PhotoSize
type PhotoSize struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Photo width.
	Width int `json:"width"`
	// Photo height.
	Height int `json:"height"`
	// _Optional_. File size in bytes.
	FileSize OptInt `json:"file_size"`
}

// GetFileID returns the value of FileID.
func (s *PhotoSize) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *PhotoSize) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetWidth returns the value of Width.
func (s *PhotoSize) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *PhotoSize) GetHeight() int {
	return s.Height
}

// GetFileSize returns the value of FileSize.
func (s *PhotoSize) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *PhotoSize) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *PhotoSize) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetWidth sets the value of Width.
func (s *PhotoSize) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *PhotoSize) SetHeight(val int) {
	s.Height = val
}

// SetFileSize sets the value of FileSize.
func (s *PhotoSize) SetFileSize(val OptInt) {
	s.FileSize = val
}

// Input for pinChatMessage.
// Ref: #/components/schemas/pinChatMessage
type PinChatMessage struct {
	ChatID ID `json:"chat_id"`
	// Identifier of a message to pin.
	MessageID int `json:"message_id"`
	// Pass _True_ if it is not necessary to send a notification to all chat members about the new pinned
	// message. Notifications are always disabled in channels and private chats.
	DisableNotification OptBool `json:"disable_notification"`
}

// GetChatID returns the value of ChatID.
func (s *PinChatMessage) GetChatID() ID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *PinChatMessage) GetMessageID() int {
	return s.MessageID
}

// GetDisableNotification returns the value of DisableNotification.
func (s *PinChatMessage) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// SetChatID sets the value of ChatID.
func (s *PinChatMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *PinChatMessage) SetMessageID(val int) {
	s.MessageID = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *PinChatMessage) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// This object contains information about a poll.
// Ref: #/components/schemas/Poll
type Poll struct {
	// Unique poll identifier.
	ID string `json:"id"`
	// Poll question, 1-300 characters.
	Question string `json:"question"`
	// _Optional_. Special entities that appear in the _question_. Currently, only custom emoji entities
	// are allowed in poll questions.
	QuestionEntities []MessageEntity `json:"question_entities"`
	// List of poll options.
	Options []PollOption `json:"options"`
	// Total number of users that voted in the poll.
	TotalVoterCount int `json:"total_voter_count"`
	// _True_, if the poll is closed.
	IsClosed bool `json:"is_closed"`
	// _True_, if the poll is anonymous.
	IsAnonymous bool `json:"is_anonymous"`
	// Poll type, currently can be `regular` or `quiz`.
	Type PollType `json:"type"`
	// _True_, if the poll allows multiple answers.
	AllowsMultipleAnswers bool `json:"allows_multiple_answers"`
	// _Optional_. 0-based identifier of the correct answer option. Available only for polls in the quiz
	// mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
	CorrectOptionID OptInt `json:"correct_option_id"`
	// _Optional_. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in
	// a quiz-style poll, 0-200 characters.
	Explanation OptString `json:"explanation"`
	// _Optional_. Special entities like usernames, URLs, bot commands, etc. that appear in the
	// _explanation_.
	ExplanationEntities []MessageEntity `json:"explanation_entities"`
	// _Optional_. Amount of time in seconds the poll will be active after creation.
	OpenPeriod OptInt `json:"open_period"`
	// _Optional_. Point in time (Unix timestamp) when the poll will be automatically closed.
	CloseDate OptInt `json:"close_date"`
}

// GetID returns the value of ID.
func (s *Poll) GetID() string {
	return s.ID
}

// GetQuestion returns the value of Question.
func (s *Poll) GetQuestion() string {
	return s.Question
}

// GetQuestionEntities returns the value of QuestionEntities.
func (s *Poll) GetQuestionEntities() []MessageEntity {
	return s.QuestionEntities
}

// GetOptions returns the value of Options.
func (s *Poll) GetOptions() []PollOption {
	return s.Options
}

// GetTotalVoterCount returns the value of TotalVoterCount.
func (s *Poll) GetTotalVoterCount() int {
	return s.TotalVoterCount
}

// GetIsClosed returns the value of IsClosed.
func (s *Poll) GetIsClosed() bool {
	return s.IsClosed
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s *Poll) GetIsAnonymous() bool {
	return s.IsAnonymous
}

// GetType returns the value of Type.
func (s *Poll) GetType() PollType {
	return s.Type
}

// GetAllowsMultipleAnswers returns the value of AllowsMultipleAnswers.
func (s *Poll) GetAllowsMultipleAnswers() bool {
	return s.AllowsMultipleAnswers
}

// GetCorrectOptionID returns the value of CorrectOptionID.
func (s *Poll) GetCorrectOptionID() OptInt {
	return s.CorrectOptionID
}

// GetExplanation returns the value of Explanation.
func (s *Poll) GetExplanation() OptString {
	return s.Explanation
}

// GetExplanationEntities returns the value of ExplanationEntities.
func (s *Poll) GetExplanationEntities() []MessageEntity {
	return s.ExplanationEntities
}

// GetOpenPeriod returns the value of OpenPeriod.
func (s *Poll) GetOpenPeriod() OptInt {
	return s.OpenPeriod
}

// GetCloseDate returns the value of CloseDate.
func (s *Poll) GetCloseDate() OptInt {
	return s.CloseDate
}

// SetID sets the value of ID.
func (s *Poll) SetID(val string) {
	s.ID = val
}

// SetQuestion sets the value of Question.
func (s *Poll) SetQuestion(val string) {
	s.Question = val
}

// SetQuestionEntities sets the value of QuestionEntities.
func (s *Poll) SetQuestionEntities(val []MessageEntity) {
	s.QuestionEntities = val
}

// SetOptions sets the value of Options.
func (s *Poll) SetOptions(val []PollOption) {
	s.Options = val
}

// SetTotalVoterCount sets the value of TotalVoterCount.
func (s *Poll) SetTotalVoterCount(val int) {
	s.TotalVoterCount = val
}

// SetIsClosed sets the value of IsClosed.
func (s *Poll) SetIsClosed(val bool) {
	s.IsClosed = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *Poll) SetIsAnonymous(val bool) {
	s.IsAnonymous = val
}

// SetType sets the value of Type.
func (s *Poll) SetType(val PollType) {
	s.Type = val
}

// SetAllowsMultipleAnswers sets the value of AllowsMultipleAnswers.
func (s *Poll) SetAllowsMultipleAnswers(val bool) {
	s.AllowsMultipleAnswers = val
}

// SetCorrectOptionID sets the value of CorrectOptionID.
func (s *Poll) SetCorrectOptionID(val OptInt) {
	s.CorrectOptionID = val
}

// SetExplanation sets the value of Explanation.
func (s *Poll) SetExplanation(val OptString) {
	s.Explanation = val
}

// SetExplanationEntities sets the value of ExplanationEntities.
func (s *Poll) SetExplanationEntities(val []MessageEntity) {
	s.ExplanationEntities = val
}

// SetOpenPeriod sets the value of OpenPeriod.
func (s *Poll) SetOpenPeriod(val OptInt) {
	s.OpenPeriod = val
}

// SetCloseDate sets the value of CloseDate.
func (s *Poll) SetCloseDate(val OptInt) {
	s.CloseDate = val
}

// This object represents an answer of a user in a non-anonymous poll.
// Ref: #/components/schemas/PollAnswer
type PollAnswer struct {
	// Unique poll identifier.
	PollID    string  `json:"poll_id"`
	VoterChat OptChat `json:"voter_chat"`
	User      OptUser `json:"user"`
	// 0-based identifiers of chosen answer options. May be empty if the vote was retracted.
	OptionIds []int `json:"option_ids"`
}

// GetPollID returns the value of PollID.
func (s *PollAnswer) GetPollID() string {
	return s.PollID
}

// GetVoterChat returns the value of VoterChat.
func (s *PollAnswer) GetVoterChat() OptChat {
	return s.VoterChat
}

// GetUser returns the value of User.
func (s *PollAnswer) GetUser() OptUser {
	return s.User
}

// GetOptionIds returns the value of OptionIds.
func (s *PollAnswer) GetOptionIds() []int {
	return s.OptionIds
}

// SetPollID sets the value of PollID.
func (s *PollAnswer) SetPollID(val string) {
	s.PollID = val
}

// SetVoterChat sets the value of VoterChat.
func (s *PollAnswer) SetVoterChat(val OptChat) {
	s.VoterChat = val
}

// SetUser sets the value of User.
func (s *PollAnswer) SetUser(val OptUser) {
	s.User = val
}

// SetOptionIds sets the value of OptionIds.
func (s *PollAnswer) SetOptionIds(val []int) {
	s.OptionIds = val
}

// This object contains information about one answer option in a poll.
// Ref: #/components/schemas/PollOption
type PollOption struct {
	// Option text, 1-100 characters.
	Text string `json:"text"`
	// _Optional_. Special entities that appear in the option _text_. Currently, only custom emoji
	// entities are allowed in poll option texts.
	TextEntities []MessageEntity `json:"text_entities"`
	// Number of users that voted for this option.
	VoterCount int `json:"voter_count"`
}

// GetText returns the value of Text.
func (s *PollOption) GetText() string {
	return s.Text
}

// GetTextEntities returns the value of TextEntities.
func (s *PollOption) GetTextEntities() []MessageEntity {
	return s.TextEntities
}

// GetVoterCount returns the value of VoterCount.
func (s *PollOption) GetVoterCount() int {
	return s.VoterCount
}

// SetText sets the value of Text.
func (s *PollOption) SetText(val string) {
	s.Text = val
}

// SetTextEntities sets the value of TextEntities.
func (s *PollOption) SetTextEntities(val []MessageEntity) {
	s.TextEntities = val
}

// SetVoterCount sets the value of VoterCount.
func (s *PollOption) SetVoterCount(val int) {
	s.VoterCount = val
}

// Poll type, currently can be `regular` or `quiz`.
type PollType string

const (
	PollTypeRegular PollType = "regular"
	PollTypeQuiz    PollType = "quiz"
)

// AllValues returns all PollType values.
func (PollType) AllValues() []PollType {
	return []PollType{
		PollTypeRegular,
		PollTypeQuiz,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PollType) MarshalText() ([]byte, error) {
	switch s {
	case PollTypeRegular:
		return []byte(s), nil
	case PollTypeQuiz:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PollType) UnmarshalText(data []byte) error {
	switch PollType(data) {
	case PollTypeRegular:
		*s = PollTypeRegular
		return nil
	case PollTypeQuiz:
		*s = PollTypeQuiz
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// This object contains information about an incoming pre-checkout query.
// Ref: #/components/schemas/PreCheckoutQuery
type PreCheckoutQuery struct {
	// Unique query identifier.
	ID   string `json:"id"`
	From User   `json:"from"`
	// Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies)
	// code, or `XTR` for payments in [Telegram Stars](https://t.me/BotNews/90).
	Currency string `json:"currency"`
	// Total price in the _smallest units_ of the currency (integer, **not** float/double). For example,
	// for a price of `US$ 1.45` pass `amount = 145`. See the _exp_ parameter in [currencies.
	// json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past
	// the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int `json:"total_amount"`
	// Bot specified invoice payload.
	InvoicePayload string `json:"invoice_payload"`
	// _Optional_. Identifier of the shipping option chosen by the user.
	ShippingOptionID OptString    `json:"shipping_option_id"`
	OrderInfo        OptOrderInfo `json:"order_info"`
}

// GetID returns the value of ID.
func (s *PreCheckoutQuery) GetID() string {
	return s.ID
}

// GetFrom returns the value of From.
func (s *PreCheckoutQuery) GetFrom() User {
	return s.From
}

// GetCurrency returns the value of Currency.
func (s *PreCheckoutQuery) GetCurrency() string {
	return s.Currency
}

// GetTotalAmount returns the value of TotalAmount.
func (s *PreCheckoutQuery) GetTotalAmount() int {
	return s.TotalAmount
}

// GetInvoicePayload returns the value of InvoicePayload.
func (s *PreCheckoutQuery) GetInvoicePayload() string {
	return s.InvoicePayload
}

// GetShippingOptionID returns the value of ShippingOptionID.
func (s *PreCheckoutQuery) GetShippingOptionID() OptString {
	return s.ShippingOptionID
}

// GetOrderInfo returns the value of OrderInfo.
func (s *PreCheckoutQuery) GetOrderInfo() OptOrderInfo {
	return s.OrderInfo
}

// SetID sets the value of ID.
func (s *PreCheckoutQuery) SetID(val string) {
	s.ID = val
}

// SetFrom sets the value of From.
func (s *PreCheckoutQuery) SetFrom(val User) {
	s.From = val
}

// SetCurrency sets the value of Currency.
func (s *PreCheckoutQuery) SetCurrency(val string) {
	s.Currency = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *PreCheckoutQuery) SetTotalAmount(val int) {
	s.TotalAmount = val
}

// SetInvoicePayload sets the value of InvoicePayload.
func (s *PreCheckoutQuery) SetInvoicePayload(val string) {
	s.InvoicePayload = val
}

// SetShippingOptionID sets the value of ShippingOptionID.
func (s *PreCheckoutQuery) SetShippingOptionID(val OptString) {
	s.ShippingOptionID = val
}

// SetOrderInfo sets the value of OrderInfo.
func (s *PreCheckoutQuery) SetOrderInfo(val OptOrderInfo) {
	s.OrderInfo = val
}

// Input for promoteChatMember.
// Ref: #/components/schemas/promoteChatMember
type PromoteChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// Pass _True_ if the administrator's presence in the chat is hidden.
	IsAnonymous OptBool `json:"is_anonymous"`
	// Pass _True_ if the administrator can access the chat event log, get boost list, see hidden
	// supergroup and channel members, report spam messages and ignore slow mode. Implied by any other
	// administrator privilege.
	CanManageChat OptBool `json:"can_manage_chat"`
	// Pass _True_ if the administrator can delete messages of other users.
	CanDeleteMessages OptBool `json:"can_delete_messages"`
	// Pass _True_ if the administrator can manage video chats.
	CanManageVideoChats OptBool `json:"can_manage_video_chats"`
	// Pass _True_ if the administrator can restrict, ban or unban chat members, or access supergroup
	// statistics.
	CanRestrictMembers OptBool `json:"can_restrict_members"`
	// Pass _True_ if the administrator can add new administrators with a subset of their own privileges
	// or demote administrators that they have promoted, directly or indirectly (promoted by
	// administrators that were appointed by him).
	CanPromoteMembers OptBool `json:"can_promote_members"`
	// Pass _True_ if the administrator can change chat title, photo and other settings.
	CanChangeInfo OptBool `json:"can_change_info"`
	// Pass _True_ if the administrator can invite new users to the chat.
	CanInviteUsers OptBool `json:"can_invite_users"`
	// Pass _True_ if the administrator can post stories to the chat.
	CanPostStories OptBool `json:"can_post_stories"`
	// Pass _True_ if the administrator can edit stories posted by other users, post stories to the chat
	// page, pin chat stories, and access the chat's story archive.
	CanEditStories OptBool `json:"can_edit_stories"`
	// Pass _True_ if the administrator can delete stories posted by other users.
	CanDeleteStories OptBool `json:"can_delete_stories"`
	// Pass _True_ if the administrator can post messages in the channel, or access channel statistics;
	// for channels only.
	CanPostMessages OptBool `json:"can_post_messages"`
	// Pass _True_ if the administrator can edit messages of other users and can pin messages; for
	// channels only.
	CanEditMessages OptBool `json:"can_edit_messages"`
	// Pass _True_ if the administrator can pin messages; for supergroups only.
	CanPinMessages OptBool `json:"can_pin_messages"`
	// Pass _True_ if the user is allowed to create, rename, close, and reopen forum topics; for
	// supergroups only.
	CanManageTopics OptBool `json:"can_manage_topics"`
}

// GetChatID returns the value of ChatID.
func (s *PromoteChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *PromoteChatMember) GetUserID() int64 {
	return s.UserID
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s *PromoteChatMember) GetIsAnonymous() OptBool {
	return s.IsAnonymous
}

// GetCanManageChat returns the value of CanManageChat.
func (s *PromoteChatMember) GetCanManageChat() OptBool {
	return s.CanManageChat
}

// GetCanDeleteMessages returns the value of CanDeleteMessages.
func (s *PromoteChatMember) GetCanDeleteMessages() OptBool {
	return s.CanDeleteMessages
}

// GetCanManageVideoChats returns the value of CanManageVideoChats.
func (s *PromoteChatMember) GetCanManageVideoChats() OptBool {
	return s.CanManageVideoChats
}

// GetCanRestrictMembers returns the value of CanRestrictMembers.
func (s *PromoteChatMember) GetCanRestrictMembers() OptBool {
	return s.CanRestrictMembers
}

// GetCanPromoteMembers returns the value of CanPromoteMembers.
func (s *PromoteChatMember) GetCanPromoteMembers() OptBool {
	return s.CanPromoteMembers
}

// GetCanChangeInfo returns the value of CanChangeInfo.
func (s *PromoteChatMember) GetCanChangeInfo() OptBool {
	return s.CanChangeInfo
}

// GetCanInviteUsers returns the value of CanInviteUsers.
func (s *PromoteChatMember) GetCanInviteUsers() OptBool {
	return s.CanInviteUsers
}

// GetCanPostStories returns the value of CanPostStories.
func (s *PromoteChatMember) GetCanPostStories() OptBool {
	return s.CanPostStories
}

// GetCanEditStories returns the value of CanEditStories.
func (s *PromoteChatMember) GetCanEditStories() OptBool {
	return s.CanEditStories
}

// GetCanDeleteStories returns the value of CanDeleteStories.
func (s *PromoteChatMember) GetCanDeleteStories() OptBool {
	return s.CanDeleteStories
}

// GetCanPostMessages returns the value of CanPostMessages.
func (s *PromoteChatMember) GetCanPostMessages() OptBool {
	return s.CanPostMessages
}

// GetCanEditMessages returns the value of CanEditMessages.
func (s *PromoteChatMember) GetCanEditMessages() OptBool {
	return s.CanEditMessages
}

// GetCanPinMessages returns the value of CanPinMessages.
func (s *PromoteChatMember) GetCanPinMessages() OptBool {
	return s.CanPinMessages
}

// GetCanManageTopics returns the value of CanManageTopics.
func (s *PromoteChatMember) GetCanManageTopics() OptBool {
	return s.CanManageTopics
}

// SetChatID sets the value of ChatID.
func (s *PromoteChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *PromoteChatMember) SetUserID(val int64) {
	s.UserID = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *PromoteChatMember) SetIsAnonymous(val OptBool) {
	s.IsAnonymous = val
}

// SetCanManageChat sets the value of CanManageChat.
func (s *PromoteChatMember) SetCanManageChat(val OptBool) {
	s.CanManageChat = val
}

// SetCanDeleteMessages sets the value of CanDeleteMessages.
func (s *PromoteChatMember) SetCanDeleteMessages(val OptBool) {
	s.CanDeleteMessages = val
}

// SetCanManageVideoChats sets the value of CanManageVideoChats.
func (s *PromoteChatMember) SetCanManageVideoChats(val OptBool) {
	s.CanManageVideoChats = val
}

// SetCanRestrictMembers sets the value of CanRestrictMembers.
func (s *PromoteChatMember) SetCanRestrictMembers(val OptBool) {
	s.CanRestrictMembers = val
}

// SetCanPromoteMembers sets the value of CanPromoteMembers.
func (s *PromoteChatMember) SetCanPromoteMembers(val OptBool) {
	s.CanPromoteMembers = val
}

// SetCanChangeInfo sets the value of CanChangeInfo.
func (s *PromoteChatMember) SetCanChangeInfo(val OptBool) {
	s.CanChangeInfo = val
}

// SetCanInviteUsers sets the value of CanInviteUsers.
func (s *PromoteChatMember) SetCanInviteUsers(val OptBool) {
	s.CanInviteUsers = val
}

// SetCanPostStories sets the value of CanPostStories.
func (s *PromoteChatMember) SetCanPostStories(val OptBool) {
	s.CanPostStories = val
}

// SetCanEditStories sets the value of CanEditStories.
func (s *PromoteChatMember) SetCanEditStories(val OptBool) {
	s.CanEditStories = val
}

// SetCanDeleteStories sets the value of CanDeleteStories.
func (s *PromoteChatMember) SetCanDeleteStories(val OptBool) {
	s.CanDeleteStories = val
}

// SetCanPostMessages sets the value of CanPostMessages.
func (s *PromoteChatMember) SetCanPostMessages(val OptBool) {
	s.CanPostMessages = val
}

// SetCanEditMessages sets the value of CanEditMessages.
func (s *PromoteChatMember) SetCanEditMessages(val OptBool) {
	s.CanEditMessages = val
}

// SetCanPinMessages sets the value of CanPinMessages.
func (s *PromoteChatMember) SetCanPinMessages(val OptBool) {
	s.CanPinMessages = val
}

// SetCanManageTopics sets the value of CanManageTopics.
func (s *PromoteChatMember) SetCanManageTopics(val OptBool) {
	s.CanManageTopics = val
}

// This object represents the content of a service message, sent whenever a user in the chat triggers
// a proximity alert set by another user.
// Ref: #/components/schemas/ProximityAlertTriggered
type ProximityAlertTriggered struct {
	Traveler User `json:"traveler"`
	Watcher  User `json:"watcher"`
	// The distance between the users.
	Distance int `json:"distance"`
}

// GetTraveler returns the value of Traveler.
func (s *ProximityAlertTriggered) GetTraveler() User {
	return s.Traveler
}

// GetWatcher returns the value of Watcher.
func (s *ProximityAlertTriggered) GetWatcher() User {
	return s.Watcher
}

// GetDistance returns the value of Distance.
func (s *ProximityAlertTriggered) GetDistance() int {
	return s.Distance
}

// SetTraveler sets the value of Traveler.
func (s *ProximityAlertTriggered) SetTraveler(val User) {
	s.Traveler = val
}

// SetWatcher sets the value of Watcher.
func (s *ProximityAlertTriggered) SetWatcher(val User) {
	s.Watcher = val
}

// SetDistance sets the value of Distance.
func (s *ProximityAlertTriggered) SetDistance(val int) {
	s.Distance = val
}

// Represents a reaction added to a message along with the number of times it was added.
// Ref: #/components/schemas/ReactionCount
type ReactionCount struct {
	Type ReactionType `json:"type"`
	// Number of times the reaction was added.
	TotalCount int `json:"total_count"`
}

// GetType returns the value of Type.
func (s *ReactionCount) GetType() ReactionType {
	return s.Type
}

// GetTotalCount returns the value of TotalCount.
func (s *ReactionCount) GetTotalCount() int {
	return s.TotalCount
}

// SetType sets the value of Type.
func (s *ReactionCount) SetType(val ReactionType) {
	s.Type = val
}

// SetTotalCount sets the value of TotalCount.
func (s *ReactionCount) SetTotalCount(val int) {
	s.TotalCount = val
}

// This object describes the type of a reaction. Currently, it can be one of.
// Ref: #/components/schemas/ReactionType
// ReactionType represents sum type.
type ReactionType struct {
	Type                    ReactionTypeType // switch on this field
	ReactionTypeEmoji       ReactionTypeEmoji
	ReactionTypeCustomEmoji ReactionTypeCustomEmoji
}

// ReactionTypeType is oneOf type of ReactionType.
type ReactionTypeType string

// Possible values for ReactionTypeType.
const (
	ReactionTypeEmojiReactionType       ReactionTypeType = "ReactionTypeEmoji"
	ReactionTypeCustomEmojiReactionType ReactionTypeType = "ReactionTypeCustomEmoji"
)

// IsReactionTypeEmoji reports whether ReactionType is ReactionTypeEmoji.
func (s ReactionType) IsReactionTypeEmoji() bool { return s.Type == ReactionTypeEmojiReactionType }

// IsReactionTypeCustomEmoji reports whether ReactionType is ReactionTypeCustomEmoji.
func (s ReactionType) IsReactionTypeCustomEmoji() bool {
	return s.Type == ReactionTypeCustomEmojiReactionType
}

// SetReactionTypeEmoji sets ReactionType to ReactionTypeEmoji.
func (s *ReactionType) SetReactionTypeEmoji(v ReactionTypeEmoji) {
	s.Type = ReactionTypeEmojiReactionType
	s.ReactionTypeEmoji = v
}

// GetReactionTypeEmoji returns ReactionTypeEmoji and true boolean if ReactionType is ReactionTypeEmoji.
func (s ReactionType) GetReactionTypeEmoji() (v ReactionTypeEmoji, ok bool) {
	if !s.IsReactionTypeEmoji() {
		return v, false
	}
	return s.ReactionTypeEmoji, true
}

// NewReactionTypeEmojiReactionType returns new ReactionType from ReactionTypeEmoji.
func NewReactionTypeEmojiReactionType(v ReactionTypeEmoji) ReactionType {
	var s ReactionType
	s.SetReactionTypeEmoji(v)
	return s
}

// SetReactionTypeCustomEmoji sets ReactionType to ReactionTypeCustomEmoji.
func (s *ReactionType) SetReactionTypeCustomEmoji(v ReactionTypeCustomEmoji) {
	s.Type = ReactionTypeCustomEmojiReactionType
	s.ReactionTypeCustomEmoji = v
}

// GetReactionTypeCustomEmoji returns ReactionTypeCustomEmoji and true boolean if ReactionType is ReactionTypeCustomEmoji.
func (s ReactionType) GetReactionTypeCustomEmoji() (v ReactionTypeCustomEmoji, ok bool) {
	if !s.IsReactionTypeCustomEmoji() {
		return v, false
	}
	return s.ReactionTypeCustomEmoji, true
}

// NewReactionTypeCustomEmojiReactionType returns new ReactionType from ReactionTypeCustomEmoji.
func NewReactionTypeCustomEmojiReactionType(v ReactionTypeCustomEmoji) ReactionType {
	var s ReactionType
	s.SetReactionTypeCustomEmoji(v)
	return s
}

// The reaction is based on a custom emoji.
// Ref: #/components/schemas/ReactionTypeCustomEmoji
type ReactionTypeCustomEmoji struct {
	// Type of the reaction, always `custom_emoji`.
	Type string `json:"type"`
	// Custom emoji identifier.
	CustomEmojiID string `json:"custom_emoji_id"`
}

// GetType returns the value of Type.
func (s *ReactionTypeCustomEmoji) GetType() string {
	return s.Type
}

// GetCustomEmojiID returns the value of CustomEmojiID.
func (s *ReactionTypeCustomEmoji) GetCustomEmojiID() string {
	return s.CustomEmojiID
}

// SetType sets the value of Type.
func (s *ReactionTypeCustomEmoji) SetType(val string) {
	s.Type = val
}

// SetCustomEmojiID sets the value of CustomEmojiID.
func (s *ReactionTypeCustomEmoji) SetCustomEmojiID(val string) {
	s.CustomEmojiID = val
}

// The reaction is based on an emoji.
// Ref: #/components/schemas/ReactionTypeEmoji
type ReactionTypeEmoji struct {
	// Type of the reaction, always `emoji`.
	Type string `json:"type"`
	// Reaction emoji. Currently, it can be one of "👍", "👎", "❤", "🔥", "🥰", "👏", "😁",
	// "🤔", "🤯", "😱", "🤬", "😢", "🎉", "🤩", "🤮", "💩", "🙏", "👌", "🕊",
	// "🤡", "🥱", "🥴", "😍", "🐳", "❤‍🔥", "🌚", "🌭", "💯", "🤣", "⚡",
	// "🍌", "🏆", "💔", "🤨", "😐", "🍓", "🍾", "💋", "🖕", "😈", "😴", "😭",
	// "🤓", "👻", "👨‍💻", "👀", "🎃", "🙈", "😇", "😨", "🤝", "✍", "🤗",
	// "🫡", "🎅", "🎄", "☃", "💅", "🤪", "🗿", "🆒", "💘", "🙉", "🦄", "😘",
	// "💊", "🙊", "😎", "👾", "🤷‍♂", "🤷", "🤷‍♀", "😡".
	Emoji string `json:"emoji"`
}

// GetType returns the value of Type.
func (s *ReactionTypeEmoji) GetType() string {
	return s.Type
}

// GetEmoji returns the value of Emoji.
func (s *ReactionTypeEmoji) GetEmoji() string {
	return s.Emoji
}

// SetType sets the value of Type.
func (s *ReactionTypeEmoji) SetType(val string) {
	s.Type = val
}

// SetEmoji sets the value of Emoji.
func (s *ReactionTypeEmoji) SetEmoji(val string) {
	s.Emoji = val
}

// Input for refundStarPayment.
// Ref: #/components/schemas/refundStarPayment
type RefundStarPayment struct {
	// Identifier of the user whose payment will be refunded.
	UserID int64 `json:"user_id"`
	// Telegram payment identifier.
	TelegramPaymentChargeID string `json:"telegram_payment_charge_id"`
}

// GetUserID returns the value of UserID.
func (s *RefundStarPayment) GetUserID() int64 {
	return s.UserID
}

// GetTelegramPaymentChargeID returns the value of TelegramPaymentChargeID.
func (s *RefundStarPayment) GetTelegramPaymentChargeID() string {
	return s.TelegramPaymentChargeID
}

// SetUserID sets the value of UserID.
func (s *RefundStarPayment) SetUserID(val int64) {
	s.UserID = val
}

// SetTelegramPaymentChargeID sets the value of TelegramPaymentChargeID.
func (s *RefundStarPayment) SetTelegramPaymentChargeID(val string) {
	s.TelegramPaymentChargeID = val
}

// Input for reopenForumTopic.
// Ref: #/components/schemas/reopenForumTopic
type ReopenForumTopic struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread of the forum topic.
	MessageThreadID int `json:"message_thread_id"`
}

// GetChatID returns the value of ChatID.
func (s *ReopenForumTopic) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *ReopenForumTopic) GetMessageThreadID() int {
	return s.MessageThreadID
}

// SetChatID sets the value of ChatID.
func (s *ReopenForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *ReopenForumTopic) SetMessageThreadID(val int) {
	s.MessageThreadID = val
}

// Input for reopenGeneralForumTopic.
// Ref: #/components/schemas/reopenGeneralForumTopic
type ReopenGeneralForumTopic struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *ReopenGeneralForumTopic) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *ReopenGeneralForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// Input for replaceStickerInSet.
// Ref: #/components/schemas/replaceStickerInSet
type ReplaceStickerInSet struct {
	// User identifier of the sticker set owner.
	UserID int64 `json:"user_id"`
	// Sticker set name.
	Name string `json:"name"`
	// File identifier of the replaced sticker.
	OldSticker string       `json:"old_sticker"`
	Sticker    InputSticker `json:"sticker"`
}

// GetUserID returns the value of UserID.
func (s *ReplaceStickerInSet) GetUserID() int64 {
	return s.UserID
}

// GetName returns the value of Name.
func (s *ReplaceStickerInSet) GetName() string {
	return s.Name
}

// GetOldSticker returns the value of OldSticker.
func (s *ReplaceStickerInSet) GetOldSticker() string {
	return s.OldSticker
}

// GetSticker returns the value of Sticker.
func (s *ReplaceStickerInSet) GetSticker() InputSticker {
	return s.Sticker
}

// SetUserID sets the value of UserID.
func (s *ReplaceStickerInSet) SetUserID(val int64) {
	s.UserID = val
}

// SetName sets the value of Name.
func (s *ReplaceStickerInSet) SetName(val string) {
	s.Name = val
}

// SetOldSticker sets the value of OldSticker.
func (s *ReplaceStickerInSet) SetOldSticker(val string) {
	s.OldSticker = val
}

// SetSticker sets the value of Sticker.
func (s *ReplaceStickerInSet) SetSticker(val InputSticker) {
	s.Sticker = val
}

// This object represents a [custom keyboard](https://core.telegram.org/bots/features#keyboards) with
// reply options (see [Introduction to bots](https://core.telegram.org/bots/features#keyboards) for
// details and examples). Not supported in channels and for messages sent on behalf of a Telegram
// Business account.
// Ref: #/components/schemas/ReplyKeyboardMarkup
type ReplyKeyboardMarkup struct {
	// Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.
	// org/bots/api#keyboardbutton) objects.
	Keyboard [][]KeyboardButton `json:"keyboard"`
	// _Optional_. Requests clients to always show the keyboard when the regular keyboard is hidden.
	// Defaults to _false_, in which case the custom keyboard can be hidden and opened with a keyboard
	// icon.
	IsPersistent OptBool `json:"is_persistent"`
	// _Optional_. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the
	// keyboard smaller if there are just two rows of buttons). Defaults to _false_, in which case the
	// custom keyboard is always of the same height as the app's standard keyboard.
	ResizeKeyboard OptBool `json:"resize_keyboard"`
	// _Optional_. Requests clients to hide the keyboard as soon as it's been used. The keyboard will
	// still be available, but clients will automatically display the usual letter-keyboard in the chat -
	// the user can press a special button in the input field to see the custom keyboard again. Defaults
	// to _false_.
	OneTimeKeyboard OptBool `json:"one_time_keyboard"`
	// _Optional_. The placeholder to be shown in the input field when the keyboard is active; 1-64
	// characters.
	InputFieldPlaceholder OptString `json:"input_field_placeholder"`
	// _Optional_. Use this parameter if you want to show the keyboard to specific users only. Targets:
	// 1) users that are @mentioned in the _text_ of the [Message](https://core.telegram.
	// org/bots/api#message) object; 2) if the bot's message is a reply to a message in the same chat and
	// forum topic, sender of the original message._Example:_ A user requests to change the bot's
	// language, bot replies to the request with a keyboard to select the new language. Other users in
	// the group don't see the keyboard.
	Selective OptBool `json:"selective"`
}

// GetKeyboard returns the value of Keyboard.
func (s *ReplyKeyboardMarkup) GetKeyboard() [][]KeyboardButton {
	return s.Keyboard
}

// GetIsPersistent returns the value of IsPersistent.
func (s *ReplyKeyboardMarkup) GetIsPersistent() OptBool {
	return s.IsPersistent
}

// GetResizeKeyboard returns the value of ResizeKeyboard.
func (s *ReplyKeyboardMarkup) GetResizeKeyboard() OptBool {
	return s.ResizeKeyboard
}

// GetOneTimeKeyboard returns the value of OneTimeKeyboard.
func (s *ReplyKeyboardMarkup) GetOneTimeKeyboard() OptBool {
	return s.OneTimeKeyboard
}

// GetInputFieldPlaceholder returns the value of InputFieldPlaceholder.
func (s *ReplyKeyboardMarkup) GetInputFieldPlaceholder() OptString {
	return s.InputFieldPlaceholder
}

// GetSelective returns the value of Selective.
func (s *ReplyKeyboardMarkup) GetSelective() OptBool {
	return s.Selective
}

// SetKeyboard sets the value of Keyboard.
func (s *ReplyKeyboardMarkup) SetKeyboard(val [][]KeyboardButton) {
	s.Keyboard = val
}

// SetIsPersistent sets the value of IsPersistent.
func (s *ReplyKeyboardMarkup) SetIsPersistent(val OptBool) {
	s.IsPersistent = val
}

// SetResizeKeyboard sets the value of ResizeKeyboard.
func (s *ReplyKeyboardMarkup) SetResizeKeyboard(val OptBool) {
	s.ResizeKeyboard = val
}

// SetOneTimeKeyboard sets the value of OneTimeKeyboard.
func (s *ReplyKeyboardMarkup) SetOneTimeKeyboard(val OptBool) {
	s.OneTimeKeyboard = val
}

// SetInputFieldPlaceholder sets the value of InputFieldPlaceholder.
func (s *ReplyKeyboardMarkup) SetInputFieldPlaceholder(val OptString) {
	s.InputFieldPlaceholder = val
}

// SetSelective sets the value of Selective.
func (s *ReplyKeyboardMarkup) SetSelective(val OptBool) {
	s.Selective = val
}

// Upon receiving a message with this object, Telegram clients will remove the current custom
// keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until
// a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden
// immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.
// org/bots/api#replykeyboardmarkup)). Not supported in channels and for messages sent on behalf of a
// Telegram Business account.
// Ref: #/components/schemas/ReplyKeyboardRemove
type ReplyKeyboardRemove struct {
	// Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if
	// you want to hide the keyboard from sight but keep it accessible, use _one_time_keyboard_ in
	// [ReplyKeyboardMarkup](https://core.telegram.org/bots/api#replykeyboardmarkup)).
	RemoveKeyboard bool `json:"remove_keyboard"`
	// _Optional_. Use this parameter if you want to remove the keyboard for specific users only.
	// Targets: 1) users that are @mentioned in the _text_ of the [Message](https://core.telegram.
	// org/bots/api#message) object; 2) if the bot's message is a reply to a message in the same chat and
	// forum topic, sender of the original message._Example:_ A user votes in a poll, bot returns
	// confirmation message in reply to the vote and removes the keyboard for that user, while still
	// showing the keyboard with poll options to users who haven't voted yet.
	Selective OptBool `json:"selective"`
}

// GetRemoveKeyboard returns the value of RemoveKeyboard.
func (s *ReplyKeyboardRemove) GetRemoveKeyboard() bool {
	return s.RemoveKeyboard
}

// GetSelective returns the value of Selective.
func (s *ReplyKeyboardRemove) GetSelective() OptBool {
	return s.Selective
}

// SetRemoveKeyboard sets the value of RemoveKeyboard.
func (s *ReplyKeyboardRemove) SetRemoveKeyboard(val bool) {
	s.RemoveKeyboard = val
}

// SetSelective sets the value of Selective.
func (s *ReplyKeyboardRemove) SetSelective(val OptBool) {
	s.Selective = val
}

// Describes reply parameters for the message that is being sent.
// Ref: #/components/schemas/ReplyParameters
type ReplyParameters struct {
	// Identifier of the message that will be replied to in the current chat, or in the chat _chat_id_ if
	// it is specified.
	MessageID int   `json:"message_id"`
	ChatID    OptID `json:"chat_id"`
	// _Optional_. Pass _True_ if the message should be sent even if the specified message to be replied
	// to is not found. Always _False_ for replies in another chat or forum topic. Always _True_ for
	// messages sent on behalf of a business account.
	AllowSendingWithoutReply OptBool `json:"allow_sending_without_reply"`
	// _Optional_. Quoted part of the message to be replied to; 0-1024 characters after entities parsing.
	// The quote must be an exact substring of the message to be replied to, including _bold_, _italic_,
	// _underline_, _strikethrough_, _spoiler_, and _custom_emoji_ entities. The message will fail to
	// send if the quote isn't found in the original message.
	Quote OptString `json:"quote"`
	// _Optional_. Mode for parsing entities in the quote. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	QuoteParseMode OptString `json:"quote_parse_mode"`
	// _Optional_. A JSON-serialized list of special entities that appear in the quote. It can be
	// specified instead of _quote_parse_mode_.
	QuoteEntities []MessageEntity `json:"quote_entities"`
	// _Optional_. Position of the quote in the original message in UTF-16 code units.
	QuotePosition OptInt `json:"quote_position"`
}

// GetMessageID returns the value of MessageID.
func (s *ReplyParameters) GetMessageID() int {
	return s.MessageID
}

// GetChatID returns the value of ChatID.
func (s *ReplyParameters) GetChatID() OptID {
	return s.ChatID
}

// GetAllowSendingWithoutReply returns the value of AllowSendingWithoutReply.
func (s *ReplyParameters) GetAllowSendingWithoutReply() OptBool {
	return s.AllowSendingWithoutReply
}

// GetQuote returns the value of Quote.
func (s *ReplyParameters) GetQuote() OptString {
	return s.Quote
}

// GetQuoteParseMode returns the value of QuoteParseMode.
func (s *ReplyParameters) GetQuoteParseMode() OptString {
	return s.QuoteParseMode
}

// GetQuoteEntities returns the value of QuoteEntities.
func (s *ReplyParameters) GetQuoteEntities() []MessageEntity {
	return s.QuoteEntities
}

// GetQuotePosition returns the value of QuotePosition.
func (s *ReplyParameters) GetQuotePosition() OptInt {
	return s.QuotePosition
}

// SetMessageID sets the value of MessageID.
func (s *ReplyParameters) SetMessageID(val int) {
	s.MessageID = val
}

// SetChatID sets the value of ChatID.
func (s *ReplyParameters) SetChatID(val OptID) {
	s.ChatID = val
}

// SetAllowSendingWithoutReply sets the value of AllowSendingWithoutReply.
func (s *ReplyParameters) SetAllowSendingWithoutReply(val OptBool) {
	s.AllowSendingWithoutReply = val
}

// SetQuote sets the value of Quote.
func (s *ReplyParameters) SetQuote(val OptString) {
	s.Quote = val
}

// SetQuoteParseMode sets the value of QuoteParseMode.
func (s *ReplyParameters) SetQuoteParseMode(val OptString) {
	s.QuoteParseMode = val
}

// SetQuoteEntities sets the value of QuoteEntities.
func (s *ReplyParameters) SetQuoteEntities(val []MessageEntity) {
	s.QuoteEntities = val
}

// SetQuotePosition sets the value of QuotePosition.
func (s *ReplyParameters) SetQuotePosition(val OptInt) {
	s.QuotePosition = val
}

// Describes why a request was unsuccessful.
// Ref: #/components/schemas/ResponseParameters
type ResponseParameters struct {
	// _Optional_. The group has been migrated to a supergroup with the specified identifier. This number
	// may have more than 32 significant bits and some programming languages may have difficulty/silent
	// defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or
	// double-precision float type are safe for storing this identifier.
	MigrateToChatID OptInt64 `json:"migrate_to_chat_id"`
	// _Optional_. In case of exceeding flood control, the number of seconds left to wait before the
	// request can be repeated.
	RetryAfter OptInt `json:"retry_after"`
}

// GetMigrateToChatID returns the value of MigrateToChatID.
func (s *ResponseParameters) GetMigrateToChatID() OptInt64 {
	return s.MigrateToChatID
}

// GetRetryAfter returns the value of RetryAfter.
func (s *ResponseParameters) GetRetryAfter() OptInt {
	return s.RetryAfter
}

// SetMigrateToChatID sets the value of MigrateToChatID.
func (s *ResponseParameters) SetMigrateToChatID(val OptInt64) {
	s.MigrateToChatID = val
}

// SetRetryAfter sets the value of RetryAfter.
func (s *ResponseParameters) SetRetryAfter(val OptInt) {
	s.RetryAfter = val
}

// Input for restrictChatMember.
// Ref: #/components/schemas/restrictChatMember
type RestrictChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID      int64           `json:"user_id"`
	Permissions ChatPermissions `json:"permissions"`
	// Pass _True_ if chat permissions are set independently. Otherwise, the _can_send_other_messages_
	// and _can_add_web_page_previews_ permissions will imply the _can_send_messages_, _can_send_audios_,
	// _can_send_documents_, _can_send_photos_, _can_send_videos_, _can_send_video_notes_, and
	// _can_send_voice_notes_ permissions; the _can_send_polls_ permission will imply the
	// _can_send_messages_ permission.
	UseIndependentChatPermissions OptBool `json:"use_independent_chat_permissions"`
	// Date when restrictions will be lifted for the user; Unix time. If user is restricted for more than
	// 366 days or less than 30 seconds from the current time, they are considered to be restricted
	// forever.
	UntilDate OptInt `json:"until_date"`
}

// GetChatID returns the value of ChatID.
func (s *RestrictChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *RestrictChatMember) GetUserID() int64 {
	return s.UserID
}

// GetPermissions returns the value of Permissions.
func (s *RestrictChatMember) GetPermissions() ChatPermissions {
	return s.Permissions
}

// GetUseIndependentChatPermissions returns the value of UseIndependentChatPermissions.
func (s *RestrictChatMember) GetUseIndependentChatPermissions() OptBool {
	return s.UseIndependentChatPermissions
}

// GetUntilDate returns the value of UntilDate.
func (s *RestrictChatMember) GetUntilDate() OptInt {
	return s.UntilDate
}

// SetChatID sets the value of ChatID.
func (s *RestrictChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *RestrictChatMember) SetUserID(val int64) {
	s.UserID = val
}

// SetPermissions sets the value of Permissions.
func (s *RestrictChatMember) SetPermissions(val ChatPermissions) {
	s.Permissions = val
}

// SetUseIndependentChatPermissions sets the value of UseIndependentChatPermissions.
func (s *RestrictChatMember) SetUseIndependentChatPermissions(val OptBool) {
	s.UseIndependentChatPermissions = val
}

// SetUntilDate sets the value of UntilDate.
func (s *RestrictChatMember) SetUntilDate(val OptInt) {
	s.UntilDate = val
}

// Ref: #/components/schemas/Result
type Result struct {
	Result OptBool `json:"result"`
	Ok     bool    `json:"ok"`
}

// GetResult returns the value of Result.
func (s *Result) GetResult() OptBool {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *Result) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *Result) SetResult(val OptBool) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *Result) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfBotCommand
type ResultArrayOfBotCommand struct {
	Result []BotCommand `json:"result"`
	Ok     bool         `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultArrayOfBotCommand) GetResult() []BotCommand {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultArrayOfBotCommand) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfBotCommand) SetResult(val []BotCommand) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfBotCommand) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfChatMember
type ResultArrayOfChatMember struct {
	Result []ChatMember `json:"result"`
	Ok     bool         `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultArrayOfChatMember) GetResult() []ChatMember {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultArrayOfChatMember) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfChatMember) SetResult(val []ChatMember) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfChatMember) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfGameHighScore
type ResultArrayOfGameHighScore struct {
	Result []GameHighScore `json:"result"`
	Ok     bool            `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultArrayOfGameHighScore) GetResult() []GameHighScore {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultArrayOfGameHighScore) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfGameHighScore) SetResult(val []GameHighScore) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfGameHighScore) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfMessage
type ResultArrayOfMessage struct {
	Result []Message `json:"result"`
	Ok     bool      `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultArrayOfMessage) GetResult() []Message {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultArrayOfMessage) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfMessage) SetResult(val []Message) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfMessage) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfMessageId
type ResultArrayOfMessageId struct {
	Result []MessageId `json:"result"`
	Ok     bool        `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultArrayOfMessageId) GetResult() []MessageId {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultArrayOfMessageId) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfMessageId) SetResult(val []MessageId) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfMessageId) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfSticker
type ResultArrayOfSticker struct {
	Result []Sticker `json:"result"`
	Ok     bool      `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultArrayOfSticker) GetResult() []Sticker {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultArrayOfSticker) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfSticker) SetResult(val []Sticker) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfSticker) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultArrayOfUpdate
type ResultArrayOfUpdate struct {
	Result []Update `json:"result"`
	Ok     bool     `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultArrayOfUpdate) GetResult() []Update {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultArrayOfUpdate) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultArrayOfUpdate) SetResult(val []Update) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultArrayOfUpdate) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultChatInviteLink
type ResultChatInviteLink struct {
	Result OptChatInviteLink `json:"result"`
	Ok     bool              `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultChatInviteLink) GetResult() OptChatInviteLink {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultChatInviteLink) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultChatInviteLink) SetResult(val OptChatInviteLink) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultChatInviteLink) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultChatMember
type ResultChatMember struct {
	Result OptChatMember `json:"result"`
	Ok     bool          `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultChatMember) GetResult() OptChatMember {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultChatMember) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultChatMember) SetResult(val OptChatMember) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultChatMember) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultFile
type ResultFile struct {
	Result OptFile `json:"result"`
	Ok     bool    `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultFile) GetResult() OptFile {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultFile) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultFile) SetResult(val OptFile) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultFile) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultInt
type ResultInt struct {
	Result OptInt `json:"result"`
	Ok     bool   `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultInt) GetResult() OptInt {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultInt) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultInt) SetResult(val OptInt) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultInt) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultMessage
type ResultMessage struct {
	Result OptMessage `json:"result"`
	Ok     bool       `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultMessage) GetResult() OptMessage {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultMessage) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultMessage) SetResult(val OptMessage) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultMessage) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultMessageId
type ResultMessageId struct {
	Result OptMessageId `json:"result"`
	Ok     bool         `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultMessageId) GetResult() OptMessageId {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultMessageId) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultMessageId) SetResult(val OptMessageId) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultMessageId) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultMessageOrBoolean
type ResultMessageOrBoolean struct {
	Result OptResultMessageOrBooleanResult `json:"result"`
	Ok     bool                            `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultMessageOrBoolean) GetResult() OptResultMessageOrBooleanResult {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultMessageOrBoolean) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultMessageOrBoolean) SetResult(val OptResultMessageOrBooleanResult) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultMessageOrBoolean) SetOk(val bool) {
	s.Ok = val
}

// ResultMessageOrBooleanResult represents sum type.
type ResultMessageOrBooleanResult struct {
	Type    ResultMessageOrBooleanResultType // switch on this field
	Message Message
	Bool    bool
}

// ResultMessageOrBooleanResultType is oneOf type of ResultMessageOrBooleanResult.
type ResultMessageOrBooleanResultType string

// Possible values for ResultMessageOrBooleanResultType.
const (
	MessageResultMessageOrBooleanResult ResultMessageOrBooleanResultType = "Message"
	BoolResultMessageOrBooleanResult    ResultMessageOrBooleanResultType = "bool"
)

// IsMessage reports whether ResultMessageOrBooleanResult is Message.
func (s ResultMessageOrBooleanResult) IsMessage() bool {
	return s.Type == MessageResultMessageOrBooleanResult
}

// IsBool reports whether ResultMessageOrBooleanResult is bool.
func (s ResultMessageOrBooleanResult) IsBool() bool {
	return s.Type == BoolResultMessageOrBooleanResult
}

// SetMessage sets ResultMessageOrBooleanResult to Message.
func (s *ResultMessageOrBooleanResult) SetMessage(v Message) {
	s.Type = MessageResultMessageOrBooleanResult
	s.Message = v
}

// GetMessage returns Message and true boolean if ResultMessageOrBooleanResult is Message.
func (s ResultMessageOrBooleanResult) GetMessage() (v Message, ok bool) {
	if !s.IsMessage() {
		return v, false
	}
	return s.Message, true
}

// NewMessageResultMessageOrBooleanResult returns new ResultMessageOrBooleanResult from Message.
func NewMessageResultMessageOrBooleanResult(v Message) ResultMessageOrBooleanResult {
	var s ResultMessageOrBooleanResult
	s.SetMessage(v)
	return s
}

// SetBool sets ResultMessageOrBooleanResult to bool.
func (s *ResultMessageOrBooleanResult) SetBool(v bool) {
	s.Type = BoolResultMessageOrBooleanResult
	s.Bool = v
}

// GetBool returns bool and true boolean if ResultMessageOrBooleanResult is bool.
func (s ResultMessageOrBooleanResult) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolResultMessageOrBooleanResult returns new ResultMessageOrBooleanResult from bool.
func NewBoolResultMessageOrBooleanResult(v bool) ResultMessageOrBooleanResult {
	var s ResultMessageOrBooleanResult
	s.SetBool(v)
	return s
}

// Ref: #/components/schemas/ResultPoll
type ResultPoll struct {
	Result OptPoll `json:"result"`
	Ok     bool    `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultPoll) GetResult() OptPoll {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultPoll) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultPoll) SetResult(val OptPoll) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultPoll) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultStickerSet
type ResultStickerSet struct {
	Result OptStickerSet `json:"result"`
	Ok     bool          `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultStickerSet) GetResult() OptStickerSet {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultStickerSet) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultStickerSet) SetResult(val OptStickerSet) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultStickerSet) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultString
type ResultString struct {
	Result OptString `json:"result"`
	Ok     bool      `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultString) GetResult() OptString {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultString) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultString) SetResult(val OptString) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultString) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultUser
type ResultUser struct {
	Result OptUser `json:"result"`
	Ok     bool    `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultUser) GetResult() OptUser {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultUser) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultUser) SetResult(val OptUser) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultUser) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultUserProfilePhotos
type ResultUserProfilePhotos struct {
	Result OptUserProfilePhotos `json:"result"`
	Ok     bool                 `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultUserProfilePhotos) GetResult() OptUserProfilePhotos {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultUserProfilePhotos) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultUserProfilePhotos) SetResult(val OptUserProfilePhotos) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultUserProfilePhotos) SetOk(val bool) {
	s.Ok = val
}

// Ref: #/components/schemas/ResultWebhookInfo
type ResultWebhookInfo struct {
	Result OptWebhookInfo `json:"result"`
	Ok     bool           `json:"ok"`
}

// GetResult returns the value of Result.
func (s *ResultWebhookInfo) GetResult() OptWebhookInfo {
	return s.Result
}

// GetOk returns the value of Ok.
func (s *ResultWebhookInfo) GetOk() bool {
	return s.Ok
}

// SetResult sets the value of Result.
func (s *ResultWebhookInfo) SetResult(val OptWebhookInfo) {
	s.Result = val
}

// SetOk sets the value of Ok.
func (s *ResultWebhookInfo) SetOk(val bool) {
	s.Ok = val
}

// Input for revokeChatInviteLink.
// Ref: #/components/schemas/revokeChatInviteLink
type RevokeChatInviteLink struct {
	ChatID ID `json:"chat_id"`
	// The invite link to revoke.
	InviteLink string `json:"invite_link"`
}

// GetChatID returns the value of ChatID.
func (s *RevokeChatInviteLink) GetChatID() ID {
	return s.ChatID
}

// GetInviteLink returns the value of InviteLink.
func (s *RevokeChatInviteLink) GetInviteLink() string {
	return s.InviteLink
}

// SetChatID sets the value of ChatID.
func (s *RevokeChatInviteLink) SetChatID(val ID) {
	s.ChatID = val
}

// SetInviteLink sets the value of InviteLink.
func (s *RevokeChatInviteLink) SetInviteLink(val string) {
	s.InviteLink = val
}

// Input for sendAnimation.
// Ref: #/components/schemas/sendAnimation
type SendAnimation struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Animation to send. Pass a file_id as String to send an animation that exists on the Telegram
	// servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the
	// Internet, or upload a new animation using multipart/form-data. [More information on Sending
	// Files](https://core.telegram.org/bots/api#sending-files).
	Animation string `json:"animation"`
	// Duration of sent animation in seconds.
	Duration OptInt `json:"duration"`
	// Animation width.
	Width OptInt `json:"width"`
	// Animation height.
	Height OptInt `json:"height"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Thumbnail OptString `json:"thumbnail"`
	// Animation caption (may also be used when resending animation by _file_id_), 0-1024 characters
	// after entities parsing.
	Caption OptString `json:"caption"`
	// Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool `json:"show_caption_above_media"`
	// Pass _True_ if the animation needs to be covered with a spoiler animation.
	HasSpoiler OptBool `json:"has_spoiler"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendAnimation) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendAnimation) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendAnimation) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetAnimation returns the value of Animation.
func (s *SendAnimation) GetAnimation() string {
	return s.Animation
}

// GetDuration returns the value of Duration.
func (s *SendAnimation) GetDuration() OptInt {
	return s.Duration
}

// GetWidth returns the value of Width.
func (s *SendAnimation) GetWidth() OptInt {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *SendAnimation) GetHeight() OptInt {
	return s.Height
}

// GetThumbnail returns the value of Thumbnail.
func (s *SendAnimation) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetCaption returns the value of Caption.
func (s *SendAnimation) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *SendAnimation) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *SendAnimation) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *SendAnimation) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetHasSpoiler returns the value of HasSpoiler.
func (s *SendAnimation) GetHasSpoiler() OptBool {
	return s.HasSpoiler
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendAnimation) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendAnimation) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendAnimation) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendAnimation) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendAnimation) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendAnimation) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendAnimation) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendAnimation) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetAnimation sets the value of Animation.
func (s *SendAnimation) SetAnimation(val string) {
	s.Animation = val
}

// SetDuration sets the value of Duration.
func (s *SendAnimation) SetDuration(val OptInt) {
	s.Duration = val
}

// SetWidth sets the value of Width.
func (s *SendAnimation) SetWidth(val OptInt) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *SendAnimation) SetHeight(val OptInt) {
	s.Height = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *SendAnimation) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetCaption sets the value of Caption.
func (s *SendAnimation) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendAnimation) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendAnimation) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *SendAnimation) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetHasSpoiler sets the value of HasSpoiler.
func (s *SendAnimation) SetHasSpoiler(val OptBool) {
	s.HasSpoiler = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendAnimation) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendAnimation) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendAnimation) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendAnimation) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendAnimation) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendAudio.
// Ref: #/components/schemas/sendAudio
type SendAudio struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram
	// servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the
	// Internet, or upload a new one using multipart/form-data. [More information on Sending
	// Files](https://core.telegram.org/bots/api#sending-files).
	Audio string `json:"audio"`
	// Audio caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// Duration of the audio in seconds.
	Duration OptInt `json:"duration"`
	// Performer.
	Performer OptString `json:"performer"`
	// Track name.
	Title OptString `json:"title"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Thumbnail OptString `json:"thumbnail"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendAudio) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendAudio) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendAudio) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetAudio returns the value of Audio.
func (s *SendAudio) GetAudio() string {
	return s.Audio
}

// GetCaption returns the value of Caption.
func (s *SendAudio) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *SendAudio) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *SendAudio) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDuration returns the value of Duration.
func (s *SendAudio) GetDuration() OptInt {
	return s.Duration
}

// GetPerformer returns the value of Performer.
func (s *SendAudio) GetPerformer() OptString {
	return s.Performer
}

// GetTitle returns the value of Title.
func (s *SendAudio) GetTitle() OptString {
	return s.Title
}

// GetThumbnail returns the value of Thumbnail.
func (s *SendAudio) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendAudio) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendAudio) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendAudio) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendAudio) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendAudio) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendAudio) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendAudio) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendAudio) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetAudio sets the value of Audio.
func (s *SendAudio) SetAudio(val string) {
	s.Audio = val
}

// SetCaption sets the value of Caption.
func (s *SendAudio) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendAudio) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendAudio) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDuration sets the value of Duration.
func (s *SendAudio) SetDuration(val OptInt) {
	s.Duration = val
}

// SetPerformer sets the value of Performer.
func (s *SendAudio) SetPerformer(val OptString) {
	s.Performer = val
}

// SetTitle sets the value of Title.
func (s *SendAudio) SetTitle(val OptString) {
	s.Title = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *SendAudio) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendAudio) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendAudio) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendAudio) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendAudio) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendAudio) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendChatAction.
// Ref: #/components/schemas/sendChatAction
type SendChatAction struct {
	// Unique identifier of the business connection on behalf of which the action will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread; for supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Type of action to broadcast. Choose one, depending on what the user is about to receive: _typing_
	// for [text messages](https://core.telegram.org/bots/api#sendmessage), _upload_photo_ for
	// [photos](https://core.telegram.org/bots/api#sendphoto), _record_video_ or _upload_video_ for
	// [videos](https://core.telegram.org/bots/api#sendvideo), _record_voice_ or _upload_voice_ for
	// [voice notes](https://core.telegram.org/bots/api#sendvoice), _upload_document_ for [general
	// files](https://core.telegram.org/bots/api#senddocument), _choose_sticker_ for
	// [stickers](https://core.telegram.org/bots/api#sendsticker), _find_location_ for [location
	// data](https://core.telegram.org/bots/api#sendlocation), _record_video_note_ or _upload_video_note_
	// for [video notes](https://core.telegram.org/bots/api#sendvideonote).
	Action string `json:"action"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendChatAction) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendChatAction) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendChatAction) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetAction returns the value of Action.
func (s *SendChatAction) GetAction() string {
	return s.Action
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendChatAction) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendChatAction) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendChatAction) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetAction sets the value of Action.
func (s *SendChatAction) SetAction(val string) {
	s.Action = val
}

// Input for sendContact.
// Ref: #/components/schemas/sendContact
type SendContact struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Contact's phone number.
	PhoneNumber string `json:"phone_number"`
	// Contact's first name.
	FirstName string `json:"first_name"`
	// Contact's last name.
	LastName OptString `json:"last_name"`
	// Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard),
	// 0-2048 bytes.
	Vcard OptString `json:"vcard"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendContact) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendContact) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendContact) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetPhoneNumber returns the value of PhoneNumber.
func (s *SendContact) GetPhoneNumber() string {
	return s.PhoneNumber
}

// GetFirstName returns the value of FirstName.
func (s *SendContact) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *SendContact) GetLastName() OptString {
	return s.LastName
}

// GetVcard returns the value of Vcard.
func (s *SendContact) GetVcard() OptString {
	return s.Vcard
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendContact) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendContact) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendContact) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendContact) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendContact) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendContact) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendContact) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendContact) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetPhoneNumber sets the value of PhoneNumber.
func (s *SendContact) SetPhoneNumber(val string) {
	s.PhoneNumber = val
}

// SetFirstName sets the value of FirstName.
func (s *SendContact) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *SendContact) SetLastName(val OptString) {
	s.LastName = val
}

// SetVcard sets the value of Vcard.
func (s *SendContact) SetVcard(val OptString) {
	s.Vcard = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendContact) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendContact) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendContact) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendContact) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendContact) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendDice.
// Ref: #/components/schemas/sendDice
type SendDice struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Emoji on which the dice throw animation is based. Currently, must be one of `🎲`, `🎯`, `🏀`,
	//  `⚽`, `🎳`, or `🎰`. Dice can have values 1-6 for `🎲`, `🎯` and `🎳`, values 1-5 for
	// `🏀` and `⚽`, and values 1-64 for `🎰`. Defaults to `🎲`.
	Emoji OptString `json:"emoji"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendDice) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendDice) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendDice) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetEmoji returns the value of Emoji.
func (s *SendDice) GetEmoji() OptString {
	return s.Emoji
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendDice) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendDice) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendDice) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendDice) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendDice) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendDice) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendDice) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendDice) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetEmoji sets the value of Emoji.
func (s *SendDice) SetEmoji(val OptString) {
	s.Emoji = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendDice) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendDice) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendDice) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendDice) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendDice) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendDocument.
// Ref: #/components/schemas/sendDocument
type SendDocument struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// File to send. Pass a file_id as String to send a file that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or
	// upload a new one using multipart/form-data. [More information on Sending Files](https://core.
	// telegram.org/bots/api#sending-files).
	Document string `json:"document"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Thumbnail OptString `json:"thumbnail"`
	// Document caption (may also be used when resending documents by _file_id_), 0-1024 characters after
	// entities parsing.
	Caption OptString `json:"caption"`
	// Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// Disables automatic server-side content type detection for files uploaded using multipart/form-data.
	DisableContentTypeDetection OptBool `json:"disable_content_type_detection"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendDocument) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendDocument) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendDocument) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetDocument returns the value of Document.
func (s *SendDocument) GetDocument() string {
	return s.Document
}

// GetThumbnail returns the value of Thumbnail.
func (s *SendDocument) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetCaption returns the value of Caption.
func (s *SendDocument) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *SendDocument) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *SendDocument) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDisableContentTypeDetection returns the value of DisableContentTypeDetection.
func (s *SendDocument) GetDisableContentTypeDetection() OptBool {
	return s.DisableContentTypeDetection
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendDocument) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendDocument) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendDocument) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendDocument) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendDocument) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendDocument) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendDocument) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendDocument) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetDocument sets the value of Document.
func (s *SendDocument) SetDocument(val string) {
	s.Document = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *SendDocument) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetCaption sets the value of Caption.
func (s *SendDocument) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendDocument) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendDocument) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDisableContentTypeDetection sets the value of DisableContentTypeDetection.
func (s *SendDocument) SetDisableContentTypeDetection(val OptBool) {
	s.DisableContentTypeDetection = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendDocument) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendDocument) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendDocument) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendDocument) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendDocument) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendGame.
// Ref: #/components/schemas/sendGame
type SendGame struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	// Unique identifier for the target chat.
	ChatID int64 `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Short name of the game, serves as the unique identifier for the game. Set up your games via
	// [@BotFather](https://t.me/botfather).
	GameShortName string `json:"game_short_name"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString               `json:"message_effect_id"`
	ReplyParameters OptReplyParameters      `json:"reply_parameters"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendGame) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendGame) GetChatID() int64 {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendGame) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetGameShortName returns the value of GameShortName.
func (s *SendGame) GetGameShortName() string {
	return s.GameShortName
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendGame) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendGame) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendGame) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendGame) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendGame) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendGame) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendGame) SetChatID(val int64) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendGame) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetGameShortName sets the value of GameShortName.
func (s *SendGame) SetGameShortName(val string) {
	s.GameShortName = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendGame) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendGame) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendGame) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendGame) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendGame) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for sendInvoice.
// Ref: #/components/schemas/sendInvoice
type SendInvoice struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Product name, 1-32 characters.
	Title string `json:"title"`
	// Product description, 1-255 characters.
	Description string `json:"description"`
	// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your
	// internal processes.
	Payload string `json:"payload"`
	// Payment provider token, obtained via [@BotFather](https://t.me/botfather). Pass an empty string
	// for payments in [Telegram Stars](https://t.me/BotNews/90).
	ProviderToken OptString `json:"provider_token"`
	// Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.
	// org/bots/payments#supported-currencies). Pass `XTR` for payments in [Telegram Stars](https://t.
	// me/BotNews/90).
	Currency string `json:"currency"`
	// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery
	// cost, delivery tax, bonus, etc.). Must contain exactly one item for payments in [Telegram
	// Stars](https://t.me/BotNews/90).
	Prices []LabeledPrice `json:"prices"`
	// The maximum accepted amount for tips in the _smallest units_ of the currency (integer, **not**
	// float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`. See the
	// _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it
	// shows the number of digits past the decimal point for each currency (2 for the majority of
	// currencies). Defaults to 0. Not supported for payments in [Telegram Stars](https://t.me/BotNews/90).
	MaxTipAmount OptInt `json:"max_tip_amount"`
	// A JSON-serialized array of suggested amounts of tips in the _smallest units_ of the currency
	// (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested
	// tip amounts must be positive, passed in a strictly increased order and must not exceed
	// _max_tip_amount_.
	SuggestedTipAmounts []int64 `json:"suggested_tip_amounts"`
	// Unique deep-linking parameter. If left empty, **forwarded copies** of the sent message will have a
	// _Pay_ button, allowing multiple users to pay directly from the forwarded message, using the same
	// invoice. If non-empty, forwarded copies of the sent message will have a _URL_ button with a deep
	// link to the bot (instead of a _Pay_ button), with the value used as the start parameter.
	StartParameter OptString `json:"start_parameter"`
	// JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed
	// description of required fields should be provided by the payment provider.
	ProviderData OptString `json:"provider_data"`
	// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a
	// service. People like it better when they see what they are paying for.
	PhotoURL OptString `json:"photo_url"`
	// Photo size in bytes.
	PhotoSize OptInt `json:"photo_size"`
	// Photo width.
	PhotoWidth OptInt `json:"photo_width"`
	// Photo height.
	PhotoHeight OptInt `json:"photo_height"`
	// Pass _True_ if you require the user's full name to complete the order. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	NeedName OptBool `json:"need_name"`
	// Pass _True_ if you require the user's phone number to complete the order. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	NeedPhoneNumber OptBool `json:"need_phone_number"`
	// Pass _True_ if you require the user's email address to complete the order. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	NeedEmail OptBool `json:"need_email"`
	// Pass _True_ if you require the user's shipping address to complete the order. Ignored for payments
	// in [Telegram Stars](https://t.me/BotNews/90).
	NeedShippingAddress OptBool `json:"need_shipping_address"`
	// Pass _True_ if the user's phone number should be sent to the provider. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	SendPhoneNumberToProvider OptBool `json:"send_phone_number_to_provider"`
	// Pass _True_ if the user's email address should be sent to the provider. Ignored for payments in
	// [Telegram Stars](https://t.me/BotNews/90).
	SendEmailToProvider OptBool `json:"send_email_to_provider"`
	// Pass _True_ if the final price depends on the shipping method. Ignored for payments in [Telegram
	// Stars](https://t.me/BotNews/90).
	IsFlexible OptBool `json:"is_flexible"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString               `json:"message_effect_id"`
	ReplyParameters OptReplyParameters      `json:"reply_parameters"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetChatID returns the value of ChatID.
func (s *SendInvoice) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendInvoice) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetTitle returns the value of Title.
func (s *SendInvoice) GetTitle() string {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *SendInvoice) GetDescription() string {
	return s.Description
}

// GetPayload returns the value of Payload.
func (s *SendInvoice) GetPayload() string {
	return s.Payload
}

// GetProviderToken returns the value of ProviderToken.
func (s *SendInvoice) GetProviderToken() OptString {
	return s.ProviderToken
}

// GetCurrency returns the value of Currency.
func (s *SendInvoice) GetCurrency() string {
	return s.Currency
}

// GetPrices returns the value of Prices.
func (s *SendInvoice) GetPrices() []LabeledPrice {
	return s.Prices
}

// GetMaxTipAmount returns the value of MaxTipAmount.
func (s *SendInvoice) GetMaxTipAmount() OptInt {
	return s.MaxTipAmount
}

// GetSuggestedTipAmounts returns the value of SuggestedTipAmounts.
func (s *SendInvoice) GetSuggestedTipAmounts() []int64 {
	return s.SuggestedTipAmounts
}

// GetStartParameter returns the value of StartParameter.
func (s *SendInvoice) GetStartParameter() OptString {
	return s.StartParameter
}

// GetProviderData returns the value of ProviderData.
func (s *SendInvoice) GetProviderData() OptString {
	return s.ProviderData
}

// GetPhotoURL returns the value of PhotoURL.
func (s *SendInvoice) GetPhotoURL() OptString {
	return s.PhotoURL
}

// GetPhotoSize returns the value of PhotoSize.
func (s *SendInvoice) GetPhotoSize() OptInt {
	return s.PhotoSize
}

// GetPhotoWidth returns the value of PhotoWidth.
func (s *SendInvoice) GetPhotoWidth() OptInt {
	return s.PhotoWidth
}

// GetPhotoHeight returns the value of PhotoHeight.
func (s *SendInvoice) GetPhotoHeight() OptInt {
	return s.PhotoHeight
}

// GetNeedName returns the value of NeedName.
func (s *SendInvoice) GetNeedName() OptBool {
	return s.NeedName
}

// GetNeedPhoneNumber returns the value of NeedPhoneNumber.
func (s *SendInvoice) GetNeedPhoneNumber() OptBool {
	return s.NeedPhoneNumber
}

// GetNeedEmail returns the value of NeedEmail.
func (s *SendInvoice) GetNeedEmail() OptBool {
	return s.NeedEmail
}

// GetNeedShippingAddress returns the value of NeedShippingAddress.
func (s *SendInvoice) GetNeedShippingAddress() OptBool {
	return s.NeedShippingAddress
}

// GetSendPhoneNumberToProvider returns the value of SendPhoneNumberToProvider.
func (s *SendInvoice) GetSendPhoneNumberToProvider() OptBool {
	return s.SendPhoneNumberToProvider
}

// GetSendEmailToProvider returns the value of SendEmailToProvider.
func (s *SendInvoice) GetSendEmailToProvider() OptBool {
	return s.SendEmailToProvider
}

// GetIsFlexible returns the value of IsFlexible.
func (s *SendInvoice) GetIsFlexible() OptBool {
	return s.IsFlexible
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendInvoice) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendInvoice) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendInvoice) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendInvoice) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendInvoice) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetChatID sets the value of ChatID.
func (s *SendInvoice) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendInvoice) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetTitle sets the value of Title.
func (s *SendInvoice) SetTitle(val string) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *SendInvoice) SetDescription(val string) {
	s.Description = val
}

// SetPayload sets the value of Payload.
func (s *SendInvoice) SetPayload(val string) {
	s.Payload = val
}

// SetProviderToken sets the value of ProviderToken.
func (s *SendInvoice) SetProviderToken(val OptString) {
	s.ProviderToken = val
}

// SetCurrency sets the value of Currency.
func (s *SendInvoice) SetCurrency(val string) {
	s.Currency = val
}

// SetPrices sets the value of Prices.
func (s *SendInvoice) SetPrices(val []LabeledPrice) {
	s.Prices = val
}

// SetMaxTipAmount sets the value of MaxTipAmount.
func (s *SendInvoice) SetMaxTipAmount(val OptInt) {
	s.MaxTipAmount = val
}

// SetSuggestedTipAmounts sets the value of SuggestedTipAmounts.
func (s *SendInvoice) SetSuggestedTipAmounts(val []int64) {
	s.SuggestedTipAmounts = val
}

// SetStartParameter sets the value of StartParameter.
func (s *SendInvoice) SetStartParameter(val OptString) {
	s.StartParameter = val
}

// SetProviderData sets the value of ProviderData.
func (s *SendInvoice) SetProviderData(val OptString) {
	s.ProviderData = val
}

// SetPhotoURL sets the value of PhotoURL.
func (s *SendInvoice) SetPhotoURL(val OptString) {
	s.PhotoURL = val
}

// SetPhotoSize sets the value of PhotoSize.
func (s *SendInvoice) SetPhotoSize(val OptInt) {
	s.PhotoSize = val
}

// SetPhotoWidth sets the value of PhotoWidth.
func (s *SendInvoice) SetPhotoWidth(val OptInt) {
	s.PhotoWidth = val
}

// SetPhotoHeight sets the value of PhotoHeight.
func (s *SendInvoice) SetPhotoHeight(val OptInt) {
	s.PhotoHeight = val
}

// SetNeedName sets the value of NeedName.
func (s *SendInvoice) SetNeedName(val OptBool) {
	s.NeedName = val
}

// SetNeedPhoneNumber sets the value of NeedPhoneNumber.
func (s *SendInvoice) SetNeedPhoneNumber(val OptBool) {
	s.NeedPhoneNumber = val
}

// SetNeedEmail sets the value of NeedEmail.
func (s *SendInvoice) SetNeedEmail(val OptBool) {
	s.NeedEmail = val
}

// SetNeedShippingAddress sets the value of NeedShippingAddress.
func (s *SendInvoice) SetNeedShippingAddress(val OptBool) {
	s.NeedShippingAddress = val
}

// SetSendPhoneNumberToProvider sets the value of SendPhoneNumberToProvider.
func (s *SendInvoice) SetSendPhoneNumberToProvider(val OptBool) {
	s.SendPhoneNumberToProvider = val
}

// SetSendEmailToProvider sets the value of SendEmailToProvider.
func (s *SendInvoice) SetSendEmailToProvider(val OptBool) {
	s.SendEmailToProvider = val
}

// SetIsFlexible sets the value of IsFlexible.
func (s *SendInvoice) SetIsFlexible(val OptBool) {
	s.IsFlexible = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendInvoice) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendInvoice) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendInvoice) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendInvoice) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendInvoice) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for sendLocation.
// Ref: #/components/schemas/sendLocation
type SendLocation struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Latitude of the location.
	Latitude float64 `json:"latitude"`
	// Longitude of the location.
	Longitude float64 `json:"longitude"`
	// The radius of uncertainty for the location, measured in meters; 0-1500.
	HorizontalAccuracy OptFloat64 `json:"horizontal_accuracy"`
	// Period in seconds during which the location will be updated (see [Live Locations](https://telegram.
	// org/blog/live-locations), should be between 60 and 86400, or 0x7FFFFFFF for live locations that
	// can be edited indefinitely.
	LivePeriod OptInt `json:"live_period"`
	// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360
	// if specified.
	Heading OptInt `json:"heading"`
	// For live locations, a maximum distance for proximity alerts about approaching another chat member,
	// in meters. Must be between 1 and 100000 if specified.
	ProximityAlertRadius OptInt `json:"proximity_alert_radius"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendLocation) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendLocation) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendLocation) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetLatitude returns the value of Latitude.
func (s *SendLocation) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *SendLocation) GetLongitude() float64 {
	return s.Longitude
}

// GetHorizontalAccuracy returns the value of HorizontalAccuracy.
func (s *SendLocation) GetHorizontalAccuracy() OptFloat64 {
	return s.HorizontalAccuracy
}

// GetLivePeriod returns the value of LivePeriod.
func (s *SendLocation) GetLivePeriod() OptInt {
	return s.LivePeriod
}

// GetHeading returns the value of Heading.
func (s *SendLocation) GetHeading() OptInt {
	return s.Heading
}

// GetProximityAlertRadius returns the value of ProximityAlertRadius.
func (s *SendLocation) GetProximityAlertRadius() OptInt {
	return s.ProximityAlertRadius
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendLocation) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendLocation) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendLocation) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendLocation) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendLocation) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendLocation) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendLocation) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendLocation) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetLatitude sets the value of Latitude.
func (s *SendLocation) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *SendLocation) SetLongitude(val float64) {
	s.Longitude = val
}

// SetHorizontalAccuracy sets the value of HorizontalAccuracy.
func (s *SendLocation) SetHorizontalAccuracy(val OptFloat64) {
	s.HorizontalAccuracy = val
}

// SetLivePeriod sets the value of LivePeriod.
func (s *SendLocation) SetLivePeriod(val OptInt) {
	s.LivePeriod = val
}

// SetHeading sets the value of Heading.
func (s *SendLocation) SetHeading(val OptInt) {
	s.Heading = val
}

// SetProximityAlertRadius sets the value of ProximityAlertRadius.
func (s *SendLocation) SetProximityAlertRadius(val OptInt) {
	s.ProximityAlertRadius = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendLocation) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendLocation) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendLocation) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendLocation) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendLocation) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendMediaGroup.
// Ref: #/components/schemas/sendMediaGroup
type SendMediaGroup struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// A JSON-serialized array describing messages to be sent, must include 2-10 items.
	Media []SendMediaGroupMediaItem `json:"media"`
	// Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent messages from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendMediaGroup) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendMediaGroup) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendMediaGroup) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetMedia returns the value of Media.
func (s *SendMediaGroup) GetMedia() []SendMediaGroupMediaItem {
	return s.Media
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendMediaGroup) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendMediaGroup) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendMediaGroup) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendMediaGroup) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendMediaGroup) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendMediaGroup) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendMediaGroup) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetMedia sets the value of Media.
func (s *SendMediaGroup) SetMedia(val []SendMediaGroupMediaItem) {
	s.Media = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendMediaGroup) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendMediaGroup) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendMediaGroup) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendMediaGroup) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SendMediaGroupMediaItem represents sum type.
type SendMediaGroupMediaItem struct {
	Type               SendMediaGroupMediaItemType // switch on this field
	InputMediaAudio    InputMediaAudio
	InputMediaDocument InputMediaDocument
	InputMediaPhoto    InputMediaPhoto
	InputMediaVideo    InputMediaVideo
}

// SendMediaGroupMediaItemType is oneOf type of SendMediaGroupMediaItem.
type SendMediaGroupMediaItemType string

// Possible values for SendMediaGroupMediaItemType.
const (
	InputMediaAudioSendMediaGroupMediaItem    SendMediaGroupMediaItemType = "audio"
	InputMediaDocumentSendMediaGroupMediaItem SendMediaGroupMediaItemType = "document"
	InputMediaPhotoSendMediaGroupMediaItem    SendMediaGroupMediaItemType = "photo"
	InputMediaVideoSendMediaGroupMediaItem    SendMediaGroupMediaItemType = "video"
)

// IsInputMediaAudio reports whether SendMediaGroupMediaItem is InputMediaAudio.
func (s SendMediaGroupMediaItem) IsInputMediaAudio() bool {
	return s.Type == InputMediaAudioSendMediaGroupMediaItem
}

// IsInputMediaDocument reports whether SendMediaGroupMediaItem is InputMediaDocument.
func (s SendMediaGroupMediaItem) IsInputMediaDocument() bool {
	return s.Type == InputMediaDocumentSendMediaGroupMediaItem
}

// IsInputMediaPhoto reports whether SendMediaGroupMediaItem is InputMediaPhoto.
func (s SendMediaGroupMediaItem) IsInputMediaPhoto() bool {
	return s.Type == InputMediaPhotoSendMediaGroupMediaItem
}

// IsInputMediaVideo reports whether SendMediaGroupMediaItem is InputMediaVideo.
func (s SendMediaGroupMediaItem) IsInputMediaVideo() bool {
	return s.Type == InputMediaVideoSendMediaGroupMediaItem
}

// SetInputMediaAudio sets SendMediaGroupMediaItem to InputMediaAudio.
func (s *SendMediaGroupMediaItem) SetInputMediaAudio(v InputMediaAudio) {
	s.Type = InputMediaAudioSendMediaGroupMediaItem
	s.InputMediaAudio = v
}

// GetInputMediaAudio returns InputMediaAudio and true boolean if SendMediaGroupMediaItem is InputMediaAudio.
func (s SendMediaGroupMediaItem) GetInputMediaAudio() (v InputMediaAudio, ok bool) {
	if !s.IsInputMediaAudio() {
		return v, false
	}
	return s.InputMediaAudio, true
}

// NewInputMediaAudioSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaAudio.
func NewInputMediaAudioSendMediaGroupMediaItem(v InputMediaAudio) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaAudio(v)
	return s
}

// SetInputMediaDocument sets SendMediaGroupMediaItem to InputMediaDocument.
func (s *SendMediaGroupMediaItem) SetInputMediaDocument(v InputMediaDocument) {
	s.Type = InputMediaDocumentSendMediaGroupMediaItem
	s.InputMediaDocument = v
}

// GetInputMediaDocument returns InputMediaDocument and true boolean if SendMediaGroupMediaItem is InputMediaDocument.
func (s SendMediaGroupMediaItem) GetInputMediaDocument() (v InputMediaDocument, ok bool) {
	if !s.IsInputMediaDocument() {
		return v, false
	}
	return s.InputMediaDocument, true
}

// NewInputMediaDocumentSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaDocument.
func NewInputMediaDocumentSendMediaGroupMediaItem(v InputMediaDocument) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaDocument(v)
	return s
}

// SetInputMediaPhoto sets SendMediaGroupMediaItem to InputMediaPhoto.
func (s *SendMediaGroupMediaItem) SetInputMediaPhoto(v InputMediaPhoto) {
	s.Type = InputMediaPhotoSendMediaGroupMediaItem
	s.InputMediaPhoto = v
}

// GetInputMediaPhoto returns InputMediaPhoto and true boolean if SendMediaGroupMediaItem is InputMediaPhoto.
func (s SendMediaGroupMediaItem) GetInputMediaPhoto() (v InputMediaPhoto, ok bool) {
	if !s.IsInputMediaPhoto() {
		return v, false
	}
	return s.InputMediaPhoto, true
}

// NewInputMediaPhotoSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaPhoto.
func NewInputMediaPhotoSendMediaGroupMediaItem(v InputMediaPhoto) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaPhoto(v)
	return s
}

// SetInputMediaVideo sets SendMediaGroupMediaItem to InputMediaVideo.
func (s *SendMediaGroupMediaItem) SetInputMediaVideo(v InputMediaVideo) {
	s.Type = InputMediaVideoSendMediaGroupMediaItem
	s.InputMediaVideo = v
}

// GetInputMediaVideo returns InputMediaVideo and true boolean if SendMediaGroupMediaItem is InputMediaVideo.
func (s SendMediaGroupMediaItem) GetInputMediaVideo() (v InputMediaVideo, ok bool) {
	if !s.IsInputMediaVideo() {
		return v, false
	}
	return s.InputMediaVideo, true
}

// NewInputMediaVideoSendMediaGroupMediaItem returns new SendMediaGroupMediaItem from InputMediaVideo.
func NewInputMediaVideoSendMediaGroupMediaItem(v InputMediaVideo) SendMediaGroupMediaItem {
	var s SendMediaGroupMediaItem
	s.SetInputMediaVideo(v)
	return s
}

// Input for sendMessage.
// Ref: #/components/schemas/sendMessage
type SendMessage struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Text of the message to be sent, 1-4096 characters after entities parsing.
	Text string `json:"text"`
	// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in message text, which can be specified
	// instead of _parse_mode_.
	Entities           []MessageEntity       `json:"entities"`
	LinkPreviewOptions OptLinkPreviewOptions `json:"link_preview_options"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendMessage) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendMessage) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendMessage) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetText returns the value of Text.
func (s *SendMessage) GetText() string {
	return s.Text
}

// GetParseMode returns the value of ParseMode.
func (s *SendMessage) GetParseMode() OptString {
	return s.ParseMode
}

// GetEntities returns the value of Entities.
func (s *SendMessage) GetEntities() []MessageEntity {
	return s.Entities
}

// GetLinkPreviewOptions returns the value of LinkPreviewOptions.
func (s *SendMessage) GetLinkPreviewOptions() OptLinkPreviewOptions {
	return s.LinkPreviewOptions
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendMessage) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendMessage) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendMessage) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendMessage) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendMessage) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendMessage) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendMessage) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetText sets the value of Text.
func (s *SendMessage) SetText(val string) {
	s.Text = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendMessage) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetEntities sets the value of Entities.
func (s *SendMessage) SetEntities(val []MessageEntity) {
	s.Entities = val
}

// SetLinkPreviewOptions sets the value of LinkPreviewOptions.
func (s *SendMessage) SetLinkPreviewOptions(val OptLinkPreviewOptions) {
	s.LinkPreviewOptions = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendMessage) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendMessage) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendMessage) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendMessage) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendMessage) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendPhoto.
// Ref: #/components/schemas/sendPhoto
type SendPhoto struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or
	// upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's
	// width and height must not exceed 10000 in total. Width and height ratio must be at most 20. [More
	// information on Sending Files](https://core.telegram.org/bots/api#sending-files).
	Photo string `json:"photo"`
	// Photo caption (may also be used when resending photos by _file_id_), 0-1024 characters after
	// entities parsing.
	Caption OptString `json:"caption"`
	// Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool `json:"show_caption_above_media"`
	// Pass _True_ if the photo needs to be covered with a spoiler animation.
	HasSpoiler OptBool `json:"has_spoiler"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendPhoto) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendPhoto) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendPhoto) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetPhoto returns the value of Photo.
func (s *SendPhoto) GetPhoto() string {
	return s.Photo
}

// GetCaption returns the value of Caption.
func (s *SendPhoto) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *SendPhoto) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *SendPhoto) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *SendPhoto) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetHasSpoiler returns the value of HasSpoiler.
func (s *SendPhoto) GetHasSpoiler() OptBool {
	return s.HasSpoiler
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendPhoto) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendPhoto) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendPhoto) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendPhoto) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendPhoto) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendPhoto) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendPhoto) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendPhoto) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetPhoto sets the value of Photo.
func (s *SendPhoto) SetPhoto(val string) {
	s.Photo = val
}

// SetCaption sets the value of Caption.
func (s *SendPhoto) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendPhoto) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendPhoto) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *SendPhoto) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetHasSpoiler sets the value of HasSpoiler.
func (s *SendPhoto) SetHasSpoiler(val OptBool) {
	s.HasSpoiler = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendPhoto) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendPhoto) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendPhoto) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendPhoto) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendPhoto) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendPoll.
// Ref: #/components/schemas/sendPoll
type SendPoll struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Poll question, 1-300 characters.
	Question string `json:"question"`
	// Mode for parsing entities in the question. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details. Currently, only custom emoji entities are
	// allowed.
	QuestionParseMode OptString `json:"question_parse_mode"`
	// A JSON-serialized list of special entities that appear in the poll question. It can be specified
	// instead of _question_parse_mode_.
	QuestionEntities []MessageEntity `json:"question_entities"`
	// A JSON-serialized list of 2-10 answer options.
	Options []InputPollOption `json:"options"`
	// _True_, if the poll needs to be anonymous, defaults to _True_.
	IsAnonymous OptBool `json:"is_anonymous"`
	// Poll type, `quiz` or `regular`, defaults to `regular`.
	Type OptString `json:"type"`
	// _True_, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to _False_.
	AllowsMultipleAnswers OptBool `json:"allows_multiple_answers"`
	// 0-based identifier of the correct answer option, required for polls in quiz mode.
	CorrectOptionID OptInt `json:"correct_option_id"`
	// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a
	// quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing.
	Explanation OptString `json:"explanation"`
	// Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ExplanationParseMode OptString `json:"explanation_parse_mode"`
	// A JSON-serialized list of special entities that appear in the poll explanation. It can be
	// specified instead of _explanation_parse_mode_.
	ExplanationEntities []MessageEntity `json:"explanation_entities"`
	// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together
	// with _close_date_.
	OpenPeriod OptInt `json:"open_period"`
	// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and
	// no more than 600 seconds in the future. Can't be used together with _open_period_.
	CloseDate OptInt `json:"close_date"`
	// Pass _True_ if the poll needs to be immediately closed. This can be useful for poll preview.
	IsClosed OptBool `json:"is_closed"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendPoll) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendPoll) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendPoll) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetQuestion returns the value of Question.
func (s *SendPoll) GetQuestion() string {
	return s.Question
}

// GetQuestionParseMode returns the value of QuestionParseMode.
func (s *SendPoll) GetQuestionParseMode() OptString {
	return s.QuestionParseMode
}

// GetQuestionEntities returns the value of QuestionEntities.
func (s *SendPoll) GetQuestionEntities() []MessageEntity {
	return s.QuestionEntities
}

// GetOptions returns the value of Options.
func (s *SendPoll) GetOptions() []InputPollOption {
	return s.Options
}

// GetIsAnonymous returns the value of IsAnonymous.
func (s *SendPoll) GetIsAnonymous() OptBool {
	return s.IsAnonymous
}

// GetType returns the value of Type.
func (s *SendPoll) GetType() OptString {
	return s.Type
}

// GetAllowsMultipleAnswers returns the value of AllowsMultipleAnswers.
func (s *SendPoll) GetAllowsMultipleAnswers() OptBool {
	return s.AllowsMultipleAnswers
}

// GetCorrectOptionID returns the value of CorrectOptionID.
func (s *SendPoll) GetCorrectOptionID() OptInt {
	return s.CorrectOptionID
}

// GetExplanation returns the value of Explanation.
func (s *SendPoll) GetExplanation() OptString {
	return s.Explanation
}

// GetExplanationParseMode returns the value of ExplanationParseMode.
func (s *SendPoll) GetExplanationParseMode() OptString {
	return s.ExplanationParseMode
}

// GetExplanationEntities returns the value of ExplanationEntities.
func (s *SendPoll) GetExplanationEntities() []MessageEntity {
	return s.ExplanationEntities
}

// GetOpenPeriod returns the value of OpenPeriod.
func (s *SendPoll) GetOpenPeriod() OptInt {
	return s.OpenPeriod
}

// GetCloseDate returns the value of CloseDate.
func (s *SendPoll) GetCloseDate() OptInt {
	return s.CloseDate
}

// GetIsClosed returns the value of IsClosed.
func (s *SendPoll) GetIsClosed() OptBool {
	return s.IsClosed
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendPoll) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendPoll) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendPoll) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendPoll) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendPoll) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendPoll) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendPoll) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendPoll) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetQuestion sets the value of Question.
func (s *SendPoll) SetQuestion(val string) {
	s.Question = val
}

// SetQuestionParseMode sets the value of QuestionParseMode.
func (s *SendPoll) SetQuestionParseMode(val OptString) {
	s.QuestionParseMode = val
}

// SetQuestionEntities sets the value of QuestionEntities.
func (s *SendPoll) SetQuestionEntities(val []MessageEntity) {
	s.QuestionEntities = val
}

// SetOptions sets the value of Options.
func (s *SendPoll) SetOptions(val []InputPollOption) {
	s.Options = val
}

// SetIsAnonymous sets the value of IsAnonymous.
func (s *SendPoll) SetIsAnonymous(val OptBool) {
	s.IsAnonymous = val
}

// SetType sets the value of Type.
func (s *SendPoll) SetType(val OptString) {
	s.Type = val
}

// SetAllowsMultipleAnswers sets the value of AllowsMultipleAnswers.
func (s *SendPoll) SetAllowsMultipleAnswers(val OptBool) {
	s.AllowsMultipleAnswers = val
}

// SetCorrectOptionID sets the value of CorrectOptionID.
func (s *SendPoll) SetCorrectOptionID(val OptInt) {
	s.CorrectOptionID = val
}

// SetExplanation sets the value of Explanation.
func (s *SendPoll) SetExplanation(val OptString) {
	s.Explanation = val
}

// SetExplanationParseMode sets the value of ExplanationParseMode.
func (s *SendPoll) SetExplanationParseMode(val OptString) {
	s.ExplanationParseMode = val
}

// SetExplanationEntities sets the value of ExplanationEntities.
func (s *SendPoll) SetExplanationEntities(val []MessageEntity) {
	s.ExplanationEntities = val
}

// SetOpenPeriod sets the value of OpenPeriod.
func (s *SendPoll) SetOpenPeriod(val OptInt) {
	s.OpenPeriod = val
}

// SetCloseDate sets the value of CloseDate.
func (s *SendPoll) SetCloseDate(val OptInt) {
	s.CloseDate = val
}

// SetIsClosed sets the value of IsClosed.
func (s *SendPoll) SetIsClosed(val OptBool) {
	s.IsClosed = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendPoll) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendPoll) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendPoll) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendPoll) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendPoll) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Ref: #/components/schemas/SendReplyMarkup
// SendReplyMarkup represents sum type.
type SendReplyMarkup struct {
	Type                 SendReplyMarkupType // switch on this field
	InlineKeyboardMarkup InlineKeyboardMarkup
	ReplyKeyboardMarkup  ReplyKeyboardMarkup
	ReplyKeyboardRemove  ReplyKeyboardRemove
	ForceReply           ForceReply
}

// SendReplyMarkupType is oneOf type of SendReplyMarkup.
type SendReplyMarkupType string

// Possible values for SendReplyMarkupType.
const (
	InlineKeyboardMarkupSendReplyMarkup SendReplyMarkupType = "InlineKeyboardMarkup"
	ReplyKeyboardMarkupSendReplyMarkup  SendReplyMarkupType = "ReplyKeyboardMarkup"
	ReplyKeyboardRemoveSendReplyMarkup  SendReplyMarkupType = "ReplyKeyboardRemove"
	ForceReplySendReplyMarkup           SendReplyMarkupType = "ForceReply"
)

// IsInlineKeyboardMarkup reports whether SendReplyMarkup is InlineKeyboardMarkup.
func (s SendReplyMarkup) IsInlineKeyboardMarkup() bool {
	return s.Type == InlineKeyboardMarkupSendReplyMarkup
}

// IsReplyKeyboardMarkup reports whether SendReplyMarkup is ReplyKeyboardMarkup.
func (s SendReplyMarkup) IsReplyKeyboardMarkup() bool {
	return s.Type == ReplyKeyboardMarkupSendReplyMarkup
}

// IsReplyKeyboardRemove reports whether SendReplyMarkup is ReplyKeyboardRemove.
func (s SendReplyMarkup) IsReplyKeyboardRemove() bool {
	return s.Type == ReplyKeyboardRemoveSendReplyMarkup
}

// IsForceReply reports whether SendReplyMarkup is ForceReply.
func (s SendReplyMarkup) IsForceReply() bool { return s.Type == ForceReplySendReplyMarkup }

// SetInlineKeyboardMarkup sets SendReplyMarkup to InlineKeyboardMarkup.
func (s *SendReplyMarkup) SetInlineKeyboardMarkup(v InlineKeyboardMarkup) {
	s.Type = InlineKeyboardMarkupSendReplyMarkup
	s.InlineKeyboardMarkup = v
}

// GetInlineKeyboardMarkup returns InlineKeyboardMarkup and true boolean if SendReplyMarkup is InlineKeyboardMarkup.
func (s SendReplyMarkup) GetInlineKeyboardMarkup() (v InlineKeyboardMarkup, ok bool) {
	if !s.IsInlineKeyboardMarkup() {
		return v, false
	}
	return s.InlineKeyboardMarkup, true
}

// NewInlineKeyboardMarkupSendReplyMarkup returns new SendReplyMarkup from InlineKeyboardMarkup.
func NewInlineKeyboardMarkupSendReplyMarkup(v InlineKeyboardMarkup) SendReplyMarkup {
	var s SendReplyMarkup
	s.SetInlineKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardMarkup sets SendReplyMarkup to ReplyKeyboardMarkup.
func (s *SendReplyMarkup) SetReplyKeyboardMarkup(v ReplyKeyboardMarkup) {
	s.Type = ReplyKeyboardMarkupSendReplyMarkup
	s.ReplyKeyboardMarkup = v
}

// GetReplyKeyboardMarkup returns ReplyKeyboardMarkup and true boolean if SendReplyMarkup is ReplyKeyboardMarkup.
func (s SendReplyMarkup) GetReplyKeyboardMarkup() (v ReplyKeyboardMarkup, ok bool) {
	if !s.IsReplyKeyboardMarkup() {
		return v, false
	}
	return s.ReplyKeyboardMarkup, true
}

// NewReplyKeyboardMarkupSendReplyMarkup returns new SendReplyMarkup from ReplyKeyboardMarkup.
func NewReplyKeyboardMarkupSendReplyMarkup(v ReplyKeyboardMarkup) SendReplyMarkup {
	var s SendReplyMarkup
	s.SetReplyKeyboardMarkup(v)
	return s
}

// SetReplyKeyboardRemove sets SendReplyMarkup to ReplyKeyboardRemove.
func (s *SendReplyMarkup) SetReplyKeyboardRemove(v ReplyKeyboardRemove) {
	s.Type = ReplyKeyboardRemoveSendReplyMarkup
	s.ReplyKeyboardRemove = v
}

// GetReplyKeyboardRemove returns ReplyKeyboardRemove and true boolean if SendReplyMarkup is ReplyKeyboardRemove.
func (s SendReplyMarkup) GetReplyKeyboardRemove() (v ReplyKeyboardRemove, ok bool) {
	if !s.IsReplyKeyboardRemove() {
		return v, false
	}
	return s.ReplyKeyboardRemove, true
}

// NewReplyKeyboardRemoveSendReplyMarkup returns new SendReplyMarkup from ReplyKeyboardRemove.
func NewReplyKeyboardRemoveSendReplyMarkup(v ReplyKeyboardRemove) SendReplyMarkup {
	var s SendReplyMarkup
	s.SetReplyKeyboardRemove(v)
	return s
}

// SetForceReply sets SendReplyMarkup to ForceReply.
func (s *SendReplyMarkup) SetForceReply(v ForceReply) {
	s.Type = ForceReplySendReplyMarkup
	s.ForceReply = v
}

// GetForceReply returns ForceReply and true boolean if SendReplyMarkup is ForceReply.
func (s SendReplyMarkup) GetForceReply() (v ForceReply, ok bool) {
	if !s.IsForceReply() {
		return v, false
	}
	return s.ForceReply, true
}

// NewForceReplySendReplyMarkup returns new SendReplyMarkup from ForceReply.
func NewForceReplySendReplyMarkup(v ForceReply) SendReplyMarkup {
	var s SendReplyMarkup
	s.SetForceReply(v)
	return s
}

// Input for sendSticker.
// Ref: #/components/schemas/sendSticker
type SendSticker struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP sticker from the Internet,
	// or upload a new .WEBP, .TGS, or .WEBM sticker using multipart/form-data. [More information on
	// Sending Files](https://core.telegram.org/bots/api#sending-files). Video and animated stickers
	// can't be sent via an HTTP URL.
	Sticker string `json:"sticker"`
	// Emoji associated with the sticker; only for just uploaded stickers.
	Emoji OptString `json:"emoji"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendSticker) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendSticker) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendSticker) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetSticker returns the value of Sticker.
func (s *SendSticker) GetSticker() string {
	return s.Sticker
}

// GetEmoji returns the value of Emoji.
func (s *SendSticker) GetEmoji() OptString {
	return s.Emoji
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendSticker) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendSticker) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendSticker) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendSticker) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendSticker) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendSticker) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendSticker) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendSticker) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetSticker sets the value of Sticker.
func (s *SendSticker) SetSticker(val string) {
	s.Sticker = val
}

// SetEmoji sets the value of Emoji.
func (s *SendSticker) SetEmoji(val OptString) {
	s.Emoji = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendSticker) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendSticker) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendSticker) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendSticker) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendSticker) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendVenue.
// Ref: #/components/schemas/sendVenue
type SendVenue struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Latitude of the venue.
	Latitude float64 `json:"latitude"`
	// Longitude of the venue.
	Longitude float64 `json:"longitude"`
	// Name of the venue.
	Title string `json:"title"`
	// Address of the venue.
	Address string `json:"address"`
	// Foursquare identifier of the venue.
	FoursquareID OptString `json:"foursquare_id"`
	// Foursquare type of the venue, if known. (For example, `arts_entertainment/default`,
	// `arts_entertainment/aquarium` or `food/icecream`.).
	FoursquareType OptString `json:"foursquare_type"`
	// Google Places identifier of the venue.
	GooglePlaceID OptString `json:"google_place_id"`
	// Google Places type of the venue. (See [supported types](https://developers.google.
	// com/places/web-service/supported_types).).
	GooglePlaceType OptString `json:"google_place_type"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendVenue) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendVenue) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendVenue) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetLatitude returns the value of Latitude.
func (s *SendVenue) GetLatitude() float64 {
	return s.Latitude
}

// GetLongitude returns the value of Longitude.
func (s *SendVenue) GetLongitude() float64 {
	return s.Longitude
}

// GetTitle returns the value of Title.
func (s *SendVenue) GetTitle() string {
	return s.Title
}

// GetAddress returns the value of Address.
func (s *SendVenue) GetAddress() string {
	return s.Address
}

// GetFoursquareID returns the value of FoursquareID.
func (s *SendVenue) GetFoursquareID() OptString {
	return s.FoursquareID
}

// GetFoursquareType returns the value of FoursquareType.
func (s *SendVenue) GetFoursquareType() OptString {
	return s.FoursquareType
}

// GetGooglePlaceID returns the value of GooglePlaceID.
func (s *SendVenue) GetGooglePlaceID() OptString {
	return s.GooglePlaceID
}

// GetGooglePlaceType returns the value of GooglePlaceType.
func (s *SendVenue) GetGooglePlaceType() OptString {
	return s.GooglePlaceType
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendVenue) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendVenue) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendVenue) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendVenue) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendVenue) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendVenue) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendVenue) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendVenue) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetLatitude sets the value of Latitude.
func (s *SendVenue) SetLatitude(val float64) {
	s.Latitude = val
}

// SetLongitude sets the value of Longitude.
func (s *SendVenue) SetLongitude(val float64) {
	s.Longitude = val
}

// SetTitle sets the value of Title.
func (s *SendVenue) SetTitle(val string) {
	s.Title = val
}

// SetAddress sets the value of Address.
func (s *SendVenue) SetAddress(val string) {
	s.Address = val
}

// SetFoursquareID sets the value of FoursquareID.
func (s *SendVenue) SetFoursquareID(val OptString) {
	s.FoursquareID = val
}

// SetFoursquareType sets the value of FoursquareType.
func (s *SendVenue) SetFoursquareType(val OptString) {
	s.FoursquareType = val
}

// SetGooglePlaceID sets the value of GooglePlaceID.
func (s *SendVenue) SetGooglePlaceID(val OptString) {
	s.GooglePlaceID = val
}

// SetGooglePlaceType sets the value of GooglePlaceType.
func (s *SendVenue) SetGooglePlaceType(val OptString) {
	s.GooglePlaceType = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendVenue) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendVenue) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendVenue) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendVenue) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendVenue) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendVideo.
// Ref: #/components/schemas/sendVideo
type SendVideo struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Video to send. Pass a file_id as String to send a video that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or
	// upload a new video using multipart/form-data. [More information on Sending Files](https://core.
	// telegram.org/bots/api#sending-files).
	Video string `json:"video"`
	// Duration of sent video in seconds.
	Duration OptInt `json:"duration"`
	// Video width.
	Width OptInt `json:"width"`
	// Video height.
	Height OptInt `json:"height"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Thumbnail OptString `json:"thumbnail"`
	// Video caption (may also be used when resending videos by _file_id_), 0-1024 characters after
	// entities parsing.
	Caption OptString `json:"caption"`
	// Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.
	// org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// Pass _True_, if the caption must be shown above the message media.
	ShowCaptionAboveMedia OptBool `json:"show_caption_above_media"`
	// Pass _True_ if the video needs to be covered with a spoiler animation.
	HasSpoiler OptBool `json:"has_spoiler"`
	// Pass _True_ if the uploaded video is suitable for streaming.
	SupportsStreaming OptBool `json:"supports_streaming"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendVideo) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendVideo) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendVideo) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetVideo returns the value of Video.
func (s *SendVideo) GetVideo() string {
	return s.Video
}

// GetDuration returns the value of Duration.
func (s *SendVideo) GetDuration() OptInt {
	return s.Duration
}

// GetWidth returns the value of Width.
func (s *SendVideo) GetWidth() OptInt {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *SendVideo) GetHeight() OptInt {
	return s.Height
}

// GetThumbnail returns the value of Thumbnail.
func (s *SendVideo) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetCaption returns the value of Caption.
func (s *SendVideo) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *SendVideo) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *SendVideo) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetShowCaptionAboveMedia returns the value of ShowCaptionAboveMedia.
func (s *SendVideo) GetShowCaptionAboveMedia() OptBool {
	return s.ShowCaptionAboveMedia
}

// GetHasSpoiler returns the value of HasSpoiler.
func (s *SendVideo) GetHasSpoiler() OptBool {
	return s.HasSpoiler
}

// GetSupportsStreaming returns the value of SupportsStreaming.
func (s *SendVideo) GetSupportsStreaming() OptBool {
	return s.SupportsStreaming
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendVideo) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendVideo) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendVideo) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendVideo) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendVideo) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendVideo) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendVideo) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendVideo) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetVideo sets the value of Video.
func (s *SendVideo) SetVideo(val string) {
	s.Video = val
}

// SetDuration sets the value of Duration.
func (s *SendVideo) SetDuration(val OptInt) {
	s.Duration = val
}

// SetWidth sets the value of Width.
func (s *SendVideo) SetWidth(val OptInt) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *SendVideo) SetHeight(val OptInt) {
	s.Height = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *SendVideo) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetCaption sets the value of Caption.
func (s *SendVideo) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendVideo) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendVideo) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetShowCaptionAboveMedia sets the value of ShowCaptionAboveMedia.
func (s *SendVideo) SetShowCaptionAboveMedia(val OptBool) {
	s.ShowCaptionAboveMedia = val
}

// SetHasSpoiler sets the value of HasSpoiler.
func (s *SendVideo) SetHasSpoiler(val OptBool) {
	s.HasSpoiler = val
}

// SetSupportsStreaming sets the value of SupportsStreaming.
func (s *SendVideo) SetSupportsStreaming(val OptBool) {
	s.SupportsStreaming = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendVideo) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendVideo) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendVideo) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendVideo) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendVideo) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendVideoNote.
// Ref: #/components/schemas/sendVideoNote
type SendVideoNote struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Video note to send. Pass a file_id as String to send a video note that exists on the Telegram
	// servers (recommended) or upload a new video using multipart/form-data. [More information on
	// Sending Files](https://core.telegram.org/bots/api#sending-files). Sending video notes by a URL is
	// currently unsupported.
	VideoNote string `json:"video_note"`
	// Duration of sent video in seconds.
	Duration OptInt `json:"duration"`
	// Video width and height, i.e. diameter of the video message.
	Length OptInt `json:"length"`
	// Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
	// server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
	// width and height should not exceed 320. Ignored if the file is not uploaded using
	// multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can
	// pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under
	// <file_attach_name>. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Thumbnail OptString `json:"thumbnail"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendVideoNote) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendVideoNote) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendVideoNote) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetVideoNote returns the value of VideoNote.
func (s *SendVideoNote) GetVideoNote() string {
	return s.VideoNote
}

// GetDuration returns the value of Duration.
func (s *SendVideoNote) GetDuration() OptInt {
	return s.Duration
}

// GetLength returns the value of Length.
func (s *SendVideoNote) GetLength() OptInt {
	return s.Length
}

// GetThumbnail returns the value of Thumbnail.
func (s *SendVideoNote) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendVideoNote) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendVideoNote) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendVideoNote) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendVideoNote) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendVideoNote) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendVideoNote) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendVideoNote) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendVideoNote) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetVideoNote sets the value of VideoNote.
func (s *SendVideoNote) SetVideoNote(val string) {
	s.VideoNote = val
}

// SetDuration sets the value of Duration.
func (s *SendVideoNote) SetDuration(val OptInt) {
	s.Duration = val
}

// SetLength sets the value of Length.
func (s *SendVideoNote) SetLength(val OptInt) {
	s.Length = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *SendVideoNote) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendVideoNote) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendVideoNote) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendVideoNote) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendVideoNote) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendVideoNote) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for sendVoice.
// Ref: #/components/schemas/sendVoice
type SendVoice struct {
	// Unique identifier of the business connection on behalf of which the message will be sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Unique identifier for the target message thread (topic) of the forum; for forum supergroups only.
	MessageThreadID OptInt `json:"message_thread_id"`
	// Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers
	// (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or
	// upload a new one using multipart/form-data. [More information on Sending Files](https://core.
	// telegram.org/bots/api#sending-files).
	Voice string `json:"voice"`
	// Voice message caption, 0-1024 characters after entities parsing.
	Caption OptString `json:"caption"`
	// Mode for parsing entities in the voice message caption. See [formatting options](https://core.
	// telegram.org/bots/api#formatting-options) for more details.
	ParseMode OptString `json:"parse_mode"`
	// A JSON-serialized list of special entities that appear in the caption, which can be specified
	// instead of _parse_mode_.
	CaptionEntities []MessageEntity `json:"caption_entities"`
	// Duration of the voice message in seconds.
	Duration OptInt `json:"duration"`
	// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will
	// receive a notification with no sound.
	DisableNotification OptBool `json:"disable_notification"`
	// Protects the contents of the sent message from forwarding and saving.
	ProtectContent OptBool `json:"protect_content"`
	// Unique identifier of the message effect to be added to the message; for private chats only.
	MessageEffectID OptString          `json:"message_effect_id"`
	ReplyParameters OptReplyParameters `json:"reply_parameters"`
	ReplyMarkup     OptSendReplyMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *SendVoice) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *SendVoice) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *SendVoice) GetMessageThreadID() OptInt {
	return s.MessageThreadID
}

// GetVoice returns the value of Voice.
func (s *SendVoice) GetVoice() string {
	return s.Voice
}

// GetCaption returns the value of Caption.
func (s *SendVoice) GetCaption() OptString {
	return s.Caption
}

// GetParseMode returns the value of ParseMode.
func (s *SendVoice) GetParseMode() OptString {
	return s.ParseMode
}

// GetCaptionEntities returns the value of CaptionEntities.
func (s *SendVoice) GetCaptionEntities() []MessageEntity {
	return s.CaptionEntities
}

// GetDuration returns the value of Duration.
func (s *SendVoice) GetDuration() OptInt {
	return s.Duration
}

// GetDisableNotification returns the value of DisableNotification.
func (s *SendVoice) GetDisableNotification() OptBool {
	return s.DisableNotification
}

// GetProtectContent returns the value of ProtectContent.
func (s *SendVoice) GetProtectContent() OptBool {
	return s.ProtectContent
}

// GetMessageEffectID returns the value of MessageEffectID.
func (s *SendVoice) GetMessageEffectID() OptString {
	return s.MessageEffectID
}

// GetReplyParameters returns the value of ReplyParameters.
func (s *SendVoice) GetReplyParameters() OptReplyParameters {
	return s.ReplyParameters
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *SendVoice) GetReplyMarkup() OptSendReplyMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *SendVoice) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *SendVoice) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *SendVoice) SetMessageThreadID(val OptInt) {
	s.MessageThreadID = val
}

// SetVoice sets the value of Voice.
func (s *SendVoice) SetVoice(val string) {
	s.Voice = val
}

// SetCaption sets the value of Caption.
func (s *SendVoice) SetCaption(val OptString) {
	s.Caption = val
}

// SetParseMode sets the value of ParseMode.
func (s *SendVoice) SetParseMode(val OptString) {
	s.ParseMode = val
}

// SetCaptionEntities sets the value of CaptionEntities.
func (s *SendVoice) SetCaptionEntities(val []MessageEntity) {
	s.CaptionEntities = val
}

// SetDuration sets the value of Duration.
func (s *SendVoice) SetDuration(val OptInt) {
	s.Duration = val
}

// SetDisableNotification sets the value of DisableNotification.
func (s *SendVoice) SetDisableNotification(val OptBool) {
	s.DisableNotification = val
}

// SetProtectContent sets the value of ProtectContent.
func (s *SendVoice) SetProtectContent(val OptBool) {
	s.ProtectContent = val
}

// SetMessageEffectID sets the value of MessageEffectID.
func (s *SendVoice) SetMessageEffectID(val OptString) {
	s.MessageEffectID = val
}

// SetReplyParameters sets the value of ReplyParameters.
func (s *SendVoice) SetReplyParameters(val OptReplyParameters) {
	s.ReplyParameters = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *SendVoice) SetReplyMarkup(val OptSendReplyMarkup) {
	s.ReplyMarkup = val
}

// Input for setChatAdministratorCustomTitle.
// Ref: #/components/schemas/setChatAdministratorCustomTitle
type SetChatAdministratorCustomTitle struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// New custom title for the administrator; 0-16 characters, emoji are not allowed.
	CustomTitle string `json:"custom_title"`
}

// GetChatID returns the value of ChatID.
func (s *SetChatAdministratorCustomTitle) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *SetChatAdministratorCustomTitle) GetUserID() int64 {
	return s.UserID
}

// GetCustomTitle returns the value of CustomTitle.
func (s *SetChatAdministratorCustomTitle) GetCustomTitle() string {
	return s.CustomTitle
}

// SetChatID sets the value of ChatID.
func (s *SetChatAdministratorCustomTitle) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *SetChatAdministratorCustomTitle) SetUserID(val int64) {
	s.UserID = val
}

// SetCustomTitle sets the value of CustomTitle.
func (s *SetChatAdministratorCustomTitle) SetCustomTitle(val string) {
	s.CustomTitle = val
}

// Input for setChatDescription.
// Ref: #/components/schemas/setChatDescription
type SetChatDescription struct {
	ChatID ID `json:"chat_id"`
	// New chat description, 0-255 characters.
	Description OptString `json:"description"`
}

// GetChatID returns the value of ChatID.
func (s *SetChatDescription) GetChatID() ID {
	return s.ChatID
}

// GetDescription returns the value of Description.
func (s *SetChatDescription) GetDescription() OptString {
	return s.Description
}

// SetChatID sets the value of ChatID.
func (s *SetChatDescription) SetChatID(val ID) {
	s.ChatID = val
}

// SetDescription sets the value of Description.
func (s *SetChatDescription) SetDescription(val OptString) {
	s.Description = val
}

// Input for setChatMenuButton.
// Ref: #/components/schemas/setChatMenuButton
type SetChatMenuButton struct {
	// Unique identifier for the target private chat. If not specified, default bot's menu button will be
	// changed.
	ChatID     OptInt64      `json:"chat_id"`
	MenuButton OptMenuButton `json:"menu_button"`
}

// GetChatID returns the value of ChatID.
func (s *SetChatMenuButton) GetChatID() OptInt64 {
	return s.ChatID
}

// GetMenuButton returns the value of MenuButton.
func (s *SetChatMenuButton) GetMenuButton() OptMenuButton {
	return s.MenuButton
}

// SetChatID sets the value of ChatID.
func (s *SetChatMenuButton) SetChatID(val OptInt64) {
	s.ChatID = val
}

// SetMenuButton sets the value of MenuButton.
func (s *SetChatMenuButton) SetMenuButton(val OptMenuButton) {
	s.MenuButton = val
}

// Input for setChatPermissions.
// Ref: #/components/schemas/setChatPermissions
type SetChatPermissions struct {
	ChatID      ID              `json:"chat_id"`
	Permissions ChatPermissions `json:"permissions"`
	// Pass _True_ if chat permissions are set independently. Otherwise, the _can_send_other_messages_
	// and _can_add_web_page_previews_ permissions will imply the _can_send_messages_, _can_send_audios_,
	// _can_send_documents_, _can_send_photos_, _can_send_videos_, _can_send_video_notes_, and
	// _can_send_voice_notes_ permissions; the _can_send_polls_ permission will imply the
	// _can_send_messages_ permission.
	UseIndependentChatPermissions OptBool `json:"use_independent_chat_permissions"`
}

// GetChatID returns the value of ChatID.
func (s *SetChatPermissions) GetChatID() ID {
	return s.ChatID
}

// GetPermissions returns the value of Permissions.
func (s *SetChatPermissions) GetPermissions() ChatPermissions {
	return s.Permissions
}

// GetUseIndependentChatPermissions returns the value of UseIndependentChatPermissions.
func (s *SetChatPermissions) GetUseIndependentChatPermissions() OptBool {
	return s.UseIndependentChatPermissions
}

// SetChatID sets the value of ChatID.
func (s *SetChatPermissions) SetChatID(val ID) {
	s.ChatID = val
}

// SetPermissions sets the value of Permissions.
func (s *SetChatPermissions) SetPermissions(val ChatPermissions) {
	s.Permissions = val
}

// SetUseIndependentChatPermissions sets the value of UseIndependentChatPermissions.
func (s *SetChatPermissions) SetUseIndependentChatPermissions(val OptBool) {
	s.UseIndependentChatPermissions = val
}

// Input for setChatPhoto.
// Ref: #/components/schemas/setChatPhoto
type SetChatPhoto struct {
	ChatID ID `json:"chat_id"`
	// New chat photo, uploaded using multipart/form-data.
	Photo string `json:"photo"`
}

// GetChatID returns the value of ChatID.
func (s *SetChatPhoto) GetChatID() ID {
	return s.ChatID
}

// GetPhoto returns the value of Photo.
func (s *SetChatPhoto) GetPhoto() string {
	return s.Photo
}

// SetChatID sets the value of ChatID.
func (s *SetChatPhoto) SetChatID(val ID) {
	s.ChatID = val
}

// SetPhoto sets the value of Photo.
func (s *SetChatPhoto) SetPhoto(val string) {
	s.Photo = val
}

// Input for setChatStickerSet.
// Ref: #/components/schemas/setChatStickerSet
type SetChatStickerSet struct {
	ChatID ID `json:"chat_id"`
	// Name of the sticker set to be set as the group sticker set.
	StickerSetName string `json:"sticker_set_name"`
}

// GetChatID returns the value of ChatID.
func (s *SetChatStickerSet) GetChatID() ID {
	return s.ChatID
}

// GetStickerSetName returns the value of StickerSetName.
func (s *SetChatStickerSet) GetStickerSetName() string {
	return s.StickerSetName
}

// SetChatID sets the value of ChatID.
func (s *SetChatStickerSet) SetChatID(val ID) {
	s.ChatID = val
}

// SetStickerSetName sets the value of StickerSetName.
func (s *SetChatStickerSet) SetStickerSetName(val string) {
	s.StickerSetName = val
}

// Input for setChatTitle.
// Ref: #/components/schemas/setChatTitle
type SetChatTitle struct {
	ChatID ID `json:"chat_id"`
	// New chat title, 1-128 characters.
	Title string `json:"title"`
}

// GetChatID returns the value of ChatID.
func (s *SetChatTitle) GetChatID() ID {
	return s.ChatID
}

// GetTitle returns the value of Title.
func (s *SetChatTitle) GetTitle() string {
	return s.Title
}

// SetChatID sets the value of ChatID.
func (s *SetChatTitle) SetChatID(val ID) {
	s.ChatID = val
}

// SetTitle sets the value of Title.
func (s *SetChatTitle) SetTitle(val string) {
	s.Title = val
}

// Input for setCustomEmojiStickerSetThumbnail.
// Ref: #/components/schemas/setCustomEmojiStickerSetThumbnail
type SetCustomEmojiStickerSetThumbnail struct {
	// Sticker set name.
	Name string `json:"name"`
	// Custom emoji identifier of a sticker from the sticker set; pass an empty string to drop the
	// thumbnail and use the first sticker as the thumbnail.
	CustomEmojiID OptString `json:"custom_emoji_id"`
}

// GetName returns the value of Name.
func (s *SetCustomEmojiStickerSetThumbnail) GetName() string {
	return s.Name
}

// GetCustomEmojiID returns the value of CustomEmojiID.
func (s *SetCustomEmojiStickerSetThumbnail) GetCustomEmojiID() OptString {
	return s.CustomEmojiID
}

// SetName sets the value of Name.
func (s *SetCustomEmojiStickerSetThumbnail) SetName(val string) {
	s.Name = val
}

// SetCustomEmojiID sets the value of CustomEmojiID.
func (s *SetCustomEmojiStickerSetThumbnail) SetCustomEmojiID(val OptString) {
	s.CustomEmojiID = val
}

// Input for setGameScore.
// Ref: #/components/schemas/setGameScore
type SetGameScore struct {
	// User identifier.
	UserID int64 `json:"user_id"`
	// New score, must be non-negative.
	Score int `json:"score"`
	// Pass _True_ if the high score is allowed to decrease. This can be useful when fixing mistakes or
	// banning cheaters.
	Force OptBool `json:"force"`
	// Pass _True_ if the game message should not be automatically edited to include the current
	// scoreboard.
	DisableEditMessage OptBool `json:"disable_edit_message"`
	// Required if _inline_message_id_ is not specified. Unique identifier for the target chat.
	ChatID OptInt64 `json:"chat_id"`
	// Required if _inline_message_id_ is not specified. Identifier of the sent message.
	MessageID OptInt `json:"message_id"`
	// Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message.
	InlineMessageID OptString `json:"inline_message_id"`
}

// GetUserID returns the value of UserID.
func (s *SetGameScore) GetUserID() int64 {
	return s.UserID
}

// GetScore returns the value of Score.
func (s *SetGameScore) GetScore() int {
	return s.Score
}

// GetForce returns the value of Force.
func (s *SetGameScore) GetForce() OptBool {
	return s.Force
}

// GetDisableEditMessage returns the value of DisableEditMessage.
func (s *SetGameScore) GetDisableEditMessage() OptBool {
	return s.DisableEditMessage
}

// GetChatID returns the value of ChatID.
func (s *SetGameScore) GetChatID() OptInt64 {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *SetGameScore) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *SetGameScore) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// SetUserID sets the value of UserID.
func (s *SetGameScore) SetUserID(val int64) {
	s.UserID = val
}

// SetScore sets the value of Score.
func (s *SetGameScore) SetScore(val int) {
	s.Score = val
}

// SetForce sets the value of Force.
func (s *SetGameScore) SetForce(val OptBool) {
	s.Force = val
}

// SetDisableEditMessage sets the value of DisableEditMessage.
func (s *SetGameScore) SetDisableEditMessage(val OptBool) {
	s.DisableEditMessage = val
}

// SetChatID sets the value of ChatID.
func (s *SetGameScore) SetChatID(val OptInt64) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *SetGameScore) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *SetGameScore) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// Input for setMessageReaction.
// Ref: #/components/schemas/setMessageReaction
type SetMessageReaction struct {
	ChatID ID `json:"chat_id"`
	// Identifier of the target message. If the message belongs to a media group, the reaction is set to
	// the first non-deleted message in the group instead.
	MessageID int `json:"message_id"`
	// A JSON-serialized list of reaction types to set on the message. Currently, as non-premium users,
	// bots can set up to one reaction per message. A custom emoji reaction can be used if it is either
	// already present on the message or explicitly allowed by chat administrators.
	Reaction []ReactionType `json:"reaction"`
	// Pass _True_ to set the reaction with a big animation.
	IsBig OptBool `json:"is_big"`
}

// GetChatID returns the value of ChatID.
func (s *SetMessageReaction) GetChatID() ID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *SetMessageReaction) GetMessageID() int {
	return s.MessageID
}

// GetReaction returns the value of Reaction.
func (s *SetMessageReaction) GetReaction() []ReactionType {
	return s.Reaction
}

// GetIsBig returns the value of IsBig.
func (s *SetMessageReaction) GetIsBig() OptBool {
	return s.IsBig
}

// SetChatID sets the value of ChatID.
func (s *SetMessageReaction) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *SetMessageReaction) SetMessageID(val int) {
	s.MessageID = val
}

// SetReaction sets the value of Reaction.
func (s *SetMessageReaction) SetReaction(val []ReactionType) {
	s.Reaction = val
}

// SetIsBig sets the value of IsBig.
func (s *SetMessageReaction) SetIsBig(val OptBool) {
	s.IsBig = val
}

// Input for setMyCommands.
// Ref: #/components/schemas/setMyCommands
type SetMyCommands struct {
	// A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100
	// commands can be specified.
	Commands []BotCommand       `json:"commands"`
	Scope    OptBotCommandScope `json:"scope"`
	// A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the
	// given scope, for whose language there are no dedicated commands.
	LanguageCode OptString `json:"language_code"`
}

// GetCommands returns the value of Commands.
func (s *SetMyCommands) GetCommands() []BotCommand {
	return s.Commands
}

// GetScope returns the value of Scope.
func (s *SetMyCommands) GetScope() OptBotCommandScope {
	return s.Scope
}

// GetLanguageCode returns the value of LanguageCode.
func (s *SetMyCommands) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetCommands sets the value of Commands.
func (s *SetMyCommands) SetCommands(val []BotCommand) {
	s.Commands = val
}

// SetScope sets the value of Scope.
func (s *SetMyCommands) SetScope(val OptBotCommandScope) {
	s.Scope = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *SetMyCommands) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for setMyDefaultAdministratorRights.
// Ref: #/components/schemas/setMyDefaultAdministratorRights
type SetMyDefaultAdministratorRights struct {
	Rights OptChatAdministratorRights `json:"rights"`
	// Pass _True_ to change the default administrator rights of the bot in channels. Otherwise, the
	// default administrator rights of the bot for groups and supergroups will be changed.
	ForChannels OptBool `json:"for_channels"`
}

// GetRights returns the value of Rights.
func (s *SetMyDefaultAdministratorRights) GetRights() OptChatAdministratorRights {
	return s.Rights
}

// GetForChannels returns the value of ForChannels.
func (s *SetMyDefaultAdministratorRights) GetForChannels() OptBool {
	return s.ForChannels
}

// SetRights sets the value of Rights.
func (s *SetMyDefaultAdministratorRights) SetRights(val OptChatAdministratorRights) {
	s.Rights = val
}

// SetForChannels sets the value of ForChannels.
func (s *SetMyDefaultAdministratorRights) SetForChannels(val OptBool) {
	s.ForChannels = val
}

// Input for setMyDescription.
// Ref: #/components/schemas/setMyDescription
type SetMyDescription struct {
	// New bot description; 0-512 characters. Pass an empty string to remove the dedicated description
	// for the given language.
	Description OptString `json:"description"`
	// A two-letter ISO 639-1 language code. If empty, the description will be applied to all users for
	// whose language there is no dedicated description.
	LanguageCode OptString `json:"language_code"`
}

// GetDescription returns the value of Description.
func (s *SetMyDescription) GetDescription() OptString {
	return s.Description
}

// GetLanguageCode returns the value of LanguageCode.
func (s *SetMyDescription) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetDescription sets the value of Description.
func (s *SetMyDescription) SetDescription(val OptString) {
	s.Description = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *SetMyDescription) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for setMyName.
// Ref: #/components/schemas/setMyName
type SetMyName struct {
	// New bot name; 0-64 characters. Pass an empty string to remove the dedicated name for the given
	// language.
	Name OptString `json:"name"`
	// A two-letter ISO 639-1 language code. If empty, the name will be shown to all users for whose
	// language there is no dedicated name.
	LanguageCode OptString `json:"language_code"`
}

// GetName returns the value of Name.
func (s *SetMyName) GetName() OptString {
	return s.Name
}

// GetLanguageCode returns the value of LanguageCode.
func (s *SetMyName) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetName sets the value of Name.
func (s *SetMyName) SetName(val OptString) {
	s.Name = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *SetMyName) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for setMyShortDescription.
// Ref: #/components/schemas/setMyShortDescription
type SetMyShortDescription struct {
	// New short description for the bot; 0-120 characters. Pass an empty string to remove the dedicated
	// short description for the given language.
	ShortDescription OptString `json:"short_description"`
	// A two-letter ISO 639-1 language code. If empty, the short description will be applied to all users
	// for whose language there is no dedicated short description.
	LanguageCode OptString `json:"language_code"`
}

// GetShortDescription returns the value of ShortDescription.
func (s *SetMyShortDescription) GetShortDescription() OptString {
	return s.ShortDescription
}

// GetLanguageCode returns the value of LanguageCode.
func (s *SetMyShortDescription) GetLanguageCode() OptString {
	return s.LanguageCode
}

// SetShortDescription sets the value of ShortDescription.
func (s *SetMyShortDescription) SetShortDescription(val OptString) {
	s.ShortDescription = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *SetMyShortDescription) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// Input for setPassportDataErrors.
// Ref: #/components/schemas/setPassportDataErrors
type SetPassportDataErrors struct {
	// User identifier.
	UserID int64 `json:"user_id"`
	// A JSON-serialized array describing the errors.
	Errors []PassportElementError `json:"errors"`
}

// GetUserID returns the value of UserID.
func (s *SetPassportDataErrors) GetUserID() int64 {
	return s.UserID
}

// GetErrors returns the value of Errors.
func (s *SetPassportDataErrors) GetErrors() []PassportElementError {
	return s.Errors
}

// SetUserID sets the value of UserID.
func (s *SetPassportDataErrors) SetUserID(val int64) {
	s.UserID = val
}

// SetErrors sets the value of Errors.
func (s *SetPassportDataErrors) SetErrors(val []PassportElementError) {
	s.Errors = val
}

// Input for setStickerEmojiList.
// Ref: #/components/schemas/setStickerEmojiList
type SetStickerEmojiList struct {
	// File identifier of the sticker.
	Sticker string `json:"sticker"`
	// A JSON-serialized list of 1-20 emoji associated with the sticker.
	EmojiList []string `json:"emoji_list"`
}

// GetSticker returns the value of Sticker.
func (s *SetStickerEmojiList) GetSticker() string {
	return s.Sticker
}

// GetEmojiList returns the value of EmojiList.
func (s *SetStickerEmojiList) GetEmojiList() []string {
	return s.EmojiList
}

// SetSticker sets the value of Sticker.
func (s *SetStickerEmojiList) SetSticker(val string) {
	s.Sticker = val
}

// SetEmojiList sets the value of EmojiList.
func (s *SetStickerEmojiList) SetEmojiList(val []string) {
	s.EmojiList = val
}

// Input for setStickerKeywords.
// Ref: #/components/schemas/setStickerKeywords
type SetStickerKeywords struct {
	// File identifier of the sticker.
	Sticker string `json:"sticker"`
	// A JSON-serialized list of 0-20 search keywords for the sticker with total length of up to 64
	// characters.
	Keywords []string `json:"keywords"`
}

// GetSticker returns the value of Sticker.
func (s *SetStickerKeywords) GetSticker() string {
	return s.Sticker
}

// GetKeywords returns the value of Keywords.
func (s *SetStickerKeywords) GetKeywords() []string {
	return s.Keywords
}

// SetSticker sets the value of Sticker.
func (s *SetStickerKeywords) SetSticker(val string) {
	s.Sticker = val
}

// SetKeywords sets the value of Keywords.
func (s *SetStickerKeywords) SetKeywords(val []string) {
	s.Keywords = val
}

// Input for setStickerMaskPosition.
// Ref: #/components/schemas/setStickerMaskPosition
type SetStickerMaskPosition struct {
	// File identifier of the sticker.
	Sticker      string          `json:"sticker"`
	MaskPosition OptMaskPosition `json:"mask_position"`
}

// GetSticker returns the value of Sticker.
func (s *SetStickerMaskPosition) GetSticker() string {
	return s.Sticker
}

// GetMaskPosition returns the value of MaskPosition.
func (s *SetStickerMaskPosition) GetMaskPosition() OptMaskPosition {
	return s.MaskPosition
}

// SetSticker sets the value of Sticker.
func (s *SetStickerMaskPosition) SetSticker(val string) {
	s.Sticker = val
}

// SetMaskPosition sets the value of MaskPosition.
func (s *SetStickerMaskPosition) SetMaskPosition(val OptMaskPosition) {
	s.MaskPosition = val
}

// Input for setStickerPositionInSet.
// Ref: #/components/schemas/setStickerPositionInSet
type SetStickerPositionInSet struct {
	// File identifier of the sticker.
	Sticker string `json:"sticker"`
	// New sticker position in the set, zero-based.
	Position int `json:"position"`
}

// GetSticker returns the value of Sticker.
func (s *SetStickerPositionInSet) GetSticker() string {
	return s.Sticker
}

// GetPosition returns the value of Position.
func (s *SetStickerPositionInSet) GetPosition() int {
	return s.Position
}

// SetSticker sets the value of Sticker.
func (s *SetStickerPositionInSet) SetSticker(val string) {
	s.Sticker = val
}

// SetPosition sets the value of Position.
func (s *SetStickerPositionInSet) SetPosition(val int) {
	s.Position = val
}

// Input for setStickerSetThumbnail.
// Ref: #/components/schemas/setStickerSetThumbnail
type SetStickerSetThumbnail struct {
	// Sticker set name.
	Name string `json:"name"`
	// User identifier of the sticker set owner.
	UserID int64 `json:"user_id"`
	// A **.WEBP** or **.PNG** image with the thumbnail, must be up to 128 kilobytes in size and have a
	// width and height of exactly 100px, or a **.TGS** animation with a thumbnail up to 32 kilobytes in
	// size (see [](https://core.telegram.org/stickers#animated-sticker-requirements)[https://core.
	// telegram.org/stickers#animated-sticker-requirements](https://core.telegram.
	// org/stickers#animated-sticker-requirements) for animated sticker technical requirements), or a
	// **WEBM** video with the thumbnail up to 32 kilobytes in size; see [](https://core.telegram.
	// org/stickers#video-sticker-requirements)[https://core.telegram.
	// org/stickers#video-sticker-requirements](https://core.telegram.
	// org/stickers#video-sticker-requirements) for video sticker technical requirements. Pass a
	// _file_id_ as a String to send a file that already exists on the Telegram servers, pass an HTTP URL
	// as a String for Telegram to get a file from the Internet, or upload a new one using
	// multipart/form-data. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files). Animated and video sticker set thumbnails can't be uploaded via HTTP
	// URL. If omitted, then the thumbnail is dropped and the first sticker is used as the thumbnail.
	Thumbnail OptString `json:"thumbnail"`
	// Format of the thumbnail, must be one of `static` for a **.WEBP** or **.PNG** image, `animated` for
	// a **.TGS** animation, or `video` for a **WEBM** video.
	Format string `json:"format"`
}

// GetName returns the value of Name.
func (s *SetStickerSetThumbnail) GetName() string {
	return s.Name
}

// GetUserID returns the value of UserID.
func (s *SetStickerSetThumbnail) GetUserID() int64 {
	return s.UserID
}

// GetThumbnail returns the value of Thumbnail.
func (s *SetStickerSetThumbnail) GetThumbnail() OptString {
	return s.Thumbnail
}

// GetFormat returns the value of Format.
func (s *SetStickerSetThumbnail) GetFormat() string {
	return s.Format
}

// SetName sets the value of Name.
func (s *SetStickerSetThumbnail) SetName(val string) {
	s.Name = val
}

// SetUserID sets the value of UserID.
func (s *SetStickerSetThumbnail) SetUserID(val int64) {
	s.UserID = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *SetStickerSetThumbnail) SetThumbnail(val OptString) {
	s.Thumbnail = val
}

// SetFormat sets the value of Format.
func (s *SetStickerSetThumbnail) SetFormat(val string) {
	s.Format = val
}

// Input for setStickerSetTitle.
// Ref: #/components/schemas/setStickerSetTitle
type SetStickerSetTitle struct {
	// Sticker set name.
	Name string `json:"name"`
	// Sticker set title, 1-64 characters.
	Title string `json:"title"`
}

// GetName returns the value of Name.
func (s *SetStickerSetTitle) GetName() string {
	return s.Name
}

// GetTitle returns the value of Title.
func (s *SetStickerSetTitle) GetTitle() string {
	return s.Title
}

// SetName sets the value of Name.
func (s *SetStickerSetTitle) SetName(val string) {
	s.Name = val
}

// SetTitle sets the value of Title.
func (s *SetStickerSetTitle) SetTitle(val string) {
	s.Title = val
}

// Input for setWebhook.
// Ref: #/components/schemas/setWebhook
type SetWebhook struct {
	// HTTPS URL to send updates to. Use an empty string to remove webhook integration.
	URL string `json:"url"`
	// Upload your public key certificate so that the root certificate in use can be checked. See our
	// [self-signed guide](https://core.telegram.org/bots/self-signed) for details.
	Certificate OptString `json:"certificate"`
	// The fixed IP address which will be used to send webhook requests instead of the IP address
	// resolved through DNS.
	IPAddress OptString `json:"ip_address"`
	// The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery,
	// 1-100. Defaults to _40_. Use lower values to limit the load on your bot's server, and higher
	// values to increase your bot's throughput.
	MaxConnections OptInt `json:"max_connections"`
	// A JSON-serialized list of the update types you want your bot to receive. For example, specify
	// `["message", "edited_channel_post", "callback_query"]` to only receive updates of these types. See
	// [Update](https://core.telegram.org/bots/api#update) for a complete list of available update types.
	// Specify an empty list to receive all update types except _chat_member_, _message_reaction_, and
	// _message_reaction_count_ (default). If not specified, the previous setting will be used.Please
	// note that this parameter doesn't affect updates created before the call to the setWebhook, so
	// unwanted updates may be received for a short period of time.
	AllowedUpdates []string `json:"allowed_updates"`
	// Pass _True_ to drop all pending updates.
	DropPendingUpdates OptBool `json:"drop_pending_updates"`
	// A secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request,
	// 1-256 characters. Only characters `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed. The header is
	// useful to ensure that the request comes from a webhook set by you.
	SecretToken OptString `json:"secret_token"`
}

// GetURL returns the value of URL.
func (s *SetWebhook) GetURL() string {
	return s.URL
}

// GetCertificate returns the value of Certificate.
func (s *SetWebhook) GetCertificate() OptString {
	return s.Certificate
}

// GetIPAddress returns the value of IPAddress.
func (s *SetWebhook) GetIPAddress() OptString {
	return s.IPAddress
}

// GetMaxConnections returns the value of MaxConnections.
func (s *SetWebhook) GetMaxConnections() OptInt {
	return s.MaxConnections
}

// GetAllowedUpdates returns the value of AllowedUpdates.
func (s *SetWebhook) GetAllowedUpdates() []string {
	return s.AllowedUpdates
}

// GetDropPendingUpdates returns the value of DropPendingUpdates.
func (s *SetWebhook) GetDropPendingUpdates() OptBool {
	return s.DropPendingUpdates
}

// GetSecretToken returns the value of SecretToken.
func (s *SetWebhook) GetSecretToken() OptString {
	return s.SecretToken
}

// SetURL sets the value of URL.
func (s *SetWebhook) SetURL(val string) {
	s.URL = val
}

// SetCertificate sets the value of Certificate.
func (s *SetWebhook) SetCertificate(val OptString) {
	s.Certificate = val
}

// SetIPAddress sets the value of IPAddress.
func (s *SetWebhook) SetIPAddress(val OptString) {
	s.IPAddress = val
}

// SetMaxConnections sets the value of MaxConnections.
func (s *SetWebhook) SetMaxConnections(val OptInt) {
	s.MaxConnections = val
}

// SetAllowedUpdates sets the value of AllowedUpdates.
func (s *SetWebhook) SetAllowedUpdates(val []string) {
	s.AllowedUpdates = val
}

// SetDropPendingUpdates sets the value of DropPendingUpdates.
func (s *SetWebhook) SetDropPendingUpdates(val OptBool) {
	s.DropPendingUpdates = val
}

// SetSecretToken sets the value of SecretToken.
func (s *SetWebhook) SetSecretToken(val OptString) {
	s.SecretToken = val
}

// This object contains information about a user that was shared with the bot using a
// [KeyboardButtonRequestUsers](https://core.telegram.org/bots/api#keyboardbuttonrequestusers) button.
// Ref: #/components/schemas/SharedUser
type SharedUser struct {
	// Identifier of the shared user. This number may have more than 32 significant bits and some
	// programming languages may have difficulty/silent defects in interpreting it. But it has at most 52
	// significant bits, so 64-bit integers or double-precision float types are safe for storing these
	// identifiers. The bot may not have access to the user and could be unable to use this identifier,
	// unless the user is already known to the bot by some other means.
	UserID int64 `json:"user_id"`
	// _Optional_. First name of the user, if the name was requested by the bot.
	FirstName OptString `json:"first_name"`
	// _Optional_. Last name of the user, if the name was requested by the bot.
	LastName OptString `json:"last_name"`
	// _Optional_. Username of the user, if the username was requested by the bot.
	Username OptString `json:"username"`
	// _Optional_. Available sizes of the chat photo, if the photo was requested by the bot.
	Photo []PhotoSize `json:"photo"`
}

// GetUserID returns the value of UserID.
func (s *SharedUser) GetUserID() int64 {
	return s.UserID
}

// GetFirstName returns the value of FirstName.
func (s *SharedUser) GetFirstName() OptString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *SharedUser) GetLastName() OptString {
	return s.LastName
}

// GetUsername returns the value of Username.
func (s *SharedUser) GetUsername() OptString {
	return s.Username
}

// GetPhoto returns the value of Photo.
func (s *SharedUser) GetPhoto() []PhotoSize {
	return s.Photo
}

// SetUserID sets the value of UserID.
func (s *SharedUser) SetUserID(val int64) {
	s.UserID = val
}

// SetFirstName sets the value of FirstName.
func (s *SharedUser) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *SharedUser) SetLastName(val OptString) {
	s.LastName = val
}

// SetUsername sets the value of Username.
func (s *SharedUser) SetUsername(val OptString) {
	s.Username = val
}

// SetPhoto sets the value of Photo.
func (s *SharedUser) SetPhoto(val []PhotoSize) {
	s.Photo = val
}

// This object represents a shipping address.
// Ref: #/components/schemas/ShippingAddress
type ShippingAddress struct {
	// Two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.
	CountryCode string `json:"country_code"`
	// State, if applicable.
	State string `json:"state"`
	// City.
	City string `json:"city"`
	// First line for the address.
	StreetLine1 string `json:"street_line1"`
	// Second line for the address.
	StreetLine2 string `json:"street_line2"`
	// Address post code.
	PostCode string `json:"post_code"`
}

// GetCountryCode returns the value of CountryCode.
func (s *ShippingAddress) GetCountryCode() string {
	return s.CountryCode
}

// GetState returns the value of State.
func (s *ShippingAddress) GetState() string {
	return s.State
}

// GetCity returns the value of City.
func (s *ShippingAddress) GetCity() string {
	return s.City
}

// GetStreetLine1 returns the value of StreetLine1.
func (s *ShippingAddress) GetStreetLine1() string {
	return s.StreetLine1
}

// GetStreetLine2 returns the value of StreetLine2.
func (s *ShippingAddress) GetStreetLine2() string {
	return s.StreetLine2
}

// GetPostCode returns the value of PostCode.
func (s *ShippingAddress) GetPostCode() string {
	return s.PostCode
}

// SetCountryCode sets the value of CountryCode.
func (s *ShippingAddress) SetCountryCode(val string) {
	s.CountryCode = val
}

// SetState sets the value of State.
func (s *ShippingAddress) SetState(val string) {
	s.State = val
}

// SetCity sets the value of City.
func (s *ShippingAddress) SetCity(val string) {
	s.City = val
}

// SetStreetLine1 sets the value of StreetLine1.
func (s *ShippingAddress) SetStreetLine1(val string) {
	s.StreetLine1 = val
}

// SetStreetLine2 sets the value of StreetLine2.
func (s *ShippingAddress) SetStreetLine2(val string) {
	s.StreetLine2 = val
}

// SetPostCode sets the value of PostCode.
func (s *ShippingAddress) SetPostCode(val string) {
	s.PostCode = val
}

// This object represents one shipping option.
// Ref: #/components/schemas/ShippingOption
type ShippingOption struct {
	// Shipping option identifier.
	ID string `json:"id"`
	// Option title.
	Title string `json:"title"`
	// List of price portions.
	Prices []LabeledPrice `json:"prices"`
}

// GetID returns the value of ID.
func (s *ShippingOption) GetID() string {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *ShippingOption) GetTitle() string {
	return s.Title
}

// GetPrices returns the value of Prices.
func (s *ShippingOption) GetPrices() []LabeledPrice {
	return s.Prices
}

// SetID sets the value of ID.
func (s *ShippingOption) SetID(val string) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *ShippingOption) SetTitle(val string) {
	s.Title = val
}

// SetPrices sets the value of Prices.
func (s *ShippingOption) SetPrices(val []LabeledPrice) {
	s.Prices = val
}

// This object contains information about an incoming shipping query.
// Ref: #/components/schemas/ShippingQuery
type ShippingQuery struct {
	// Unique query identifier.
	ID   string `json:"id"`
	From User   `json:"from"`
	// Bot specified invoice payload.
	InvoicePayload  string          `json:"invoice_payload"`
	ShippingAddress ShippingAddress `json:"shipping_address"`
}

// GetID returns the value of ID.
func (s *ShippingQuery) GetID() string {
	return s.ID
}

// GetFrom returns the value of From.
func (s *ShippingQuery) GetFrom() User {
	return s.From
}

// GetInvoicePayload returns the value of InvoicePayload.
func (s *ShippingQuery) GetInvoicePayload() string {
	return s.InvoicePayload
}

// GetShippingAddress returns the value of ShippingAddress.
func (s *ShippingQuery) GetShippingAddress() ShippingAddress {
	return s.ShippingAddress
}

// SetID sets the value of ID.
func (s *ShippingQuery) SetID(val string) {
	s.ID = val
}

// SetFrom sets the value of From.
func (s *ShippingQuery) SetFrom(val User) {
	s.From = val
}

// SetInvoicePayload sets the value of InvoicePayload.
func (s *ShippingQuery) SetInvoicePayload(val string) {
	s.InvoicePayload = val
}

// SetShippingAddress sets the value of ShippingAddress.
func (s *ShippingQuery) SetShippingAddress(val ShippingAddress) {
	s.ShippingAddress = val
}

// This object represents a sticker.
// Ref: #/components/schemas/Sticker
type Sticker struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Type of the sticker, currently one of `regular`, `mask`, `custom_emoji`. The type of the sticker
	// is independent from its format, which is determined by the fields _is_animated_ and _is_video_.
	Type StickerType `json:"type"`
	// Sticker width.
	Width int `json:"width"`
	// Sticker height.
	Height int `json:"height"`
	// _True_, if the sticker is [animated](https://telegram.org/blog/animated-stickers).
	IsAnimated bool `json:"is_animated"`
	// _True_, if the sticker is a [video sticker](https://telegram.
	// org/blog/video-stickers-better-reactions).
	IsVideo   bool         `json:"is_video"`
	Thumbnail OptPhotoSize `json:"thumbnail"`
	// _Optional_. Emoji associated with the sticker.
	Emoji OptString `json:"emoji"`
	// _Optional_. Name of the sticker set to which the sticker belongs.
	SetName          OptString       `json:"set_name"`
	PremiumAnimation OptFile         `json:"premium_animation"`
	MaskPosition     OptMaskPosition `json:"mask_position"`
	// _Optional_. For custom emoji stickers, unique identifier of the custom emoji.
	CustomEmojiID OptString `json:"custom_emoji_id"`
	// _Optional_. _True_, if the sticker must be repainted to a text color in messages, the color of the
	// Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color
	// in other places.
	NeedsRepainting OptBool `json:"needs_repainting"`
	// _Optional_. File size in bytes.
	FileSize OptInt `json:"file_size"`
}

// GetFileID returns the value of FileID.
func (s *Sticker) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *Sticker) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetType returns the value of Type.
func (s *Sticker) GetType() StickerType {
	return s.Type
}

// GetWidth returns the value of Width.
func (s *Sticker) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *Sticker) GetHeight() int {
	return s.Height
}

// GetIsAnimated returns the value of IsAnimated.
func (s *Sticker) GetIsAnimated() bool {
	return s.IsAnimated
}

// GetIsVideo returns the value of IsVideo.
func (s *Sticker) GetIsVideo() bool {
	return s.IsVideo
}

// GetThumbnail returns the value of Thumbnail.
func (s *Sticker) GetThumbnail() OptPhotoSize {
	return s.Thumbnail
}

// GetEmoji returns the value of Emoji.
func (s *Sticker) GetEmoji() OptString {
	return s.Emoji
}

// GetSetName returns the value of SetName.
func (s *Sticker) GetSetName() OptString {
	return s.SetName
}

// GetPremiumAnimation returns the value of PremiumAnimation.
func (s *Sticker) GetPremiumAnimation() OptFile {
	return s.PremiumAnimation
}

// GetMaskPosition returns the value of MaskPosition.
func (s *Sticker) GetMaskPosition() OptMaskPosition {
	return s.MaskPosition
}

// GetCustomEmojiID returns the value of CustomEmojiID.
func (s *Sticker) GetCustomEmojiID() OptString {
	return s.CustomEmojiID
}

// GetNeedsRepainting returns the value of NeedsRepainting.
func (s *Sticker) GetNeedsRepainting() OptBool {
	return s.NeedsRepainting
}

// GetFileSize returns the value of FileSize.
func (s *Sticker) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Sticker) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Sticker) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetType sets the value of Type.
func (s *Sticker) SetType(val StickerType) {
	s.Type = val
}

// SetWidth sets the value of Width.
func (s *Sticker) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *Sticker) SetHeight(val int) {
	s.Height = val
}

// SetIsAnimated sets the value of IsAnimated.
func (s *Sticker) SetIsAnimated(val bool) {
	s.IsAnimated = val
}

// SetIsVideo sets the value of IsVideo.
func (s *Sticker) SetIsVideo(val bool) {
	s.IsVideo = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *Sticker) SetThumbnail(val OptPhotoSize) {
	s.Thumbnail = val
}

// SetEmoji sets the value of Emoji.
func (s *Sticker) SetEmoji(val OptString) {
	s.Emoji = val
}

// SetSetName sets the value of SetName.
func (s *Sticker) SetSetName(val OptString) {
	s.SetName = val
}

// SetPremiumAnimation sets the value of PremiumAnimation.
func (s *Sticker) SetPremiumAnimation(val OptFile) {
	s.PremiumAnimation = val
}

// SetMaskPosition sets the value of MaskPosition.
func (s *Sticker) SetMaskPosition(val OptMaskPosition) {
	s.MaskPosition = val
}

// SetCustomEmojiID sets the value of CustomEmojiID.
func (s *Sticker) SetCustomEmojiID(val OptString) {
	s.CustomEmojiID = val
}

// SetNeedsRepainting sets the value of NeedsRepainting.
func (s *Sticker) SetNeedsRepainting(val OptBool) {
	s.NeedsRepainting = val
}

// SetFileSize sets the value of FileSize.
func (s *Sticker) SetFileSize(val OptInt) {
	s.FileSize = val
}

// This object represents a sticker set.
// Ref: #/components/schemas/StickerSet
type StickerSet struct {
	// Sticker set name.
	Name string `json:"name"`
	// Sticker set title.
	Title string `json:"title"`
	// Type of stickers in the set, currently one of `regular`, `mask`, `custom_emoji`.
	StickerType string `json:"sticker_type"`
	// List of all set stickers.
	Stickers  []Sticker    `json:"stickers"`
	Thumbnail OptPhotoSize `json:"thumbnail"`
}

// GetName returns the value of Name.
func (s *StickerSet) GetName() string {
	return s.Name
}

// GetTitle returns the value of Title.
func (s *StickerSet) GetTitle() string {
	return s.Title
}

// GetStickerType returns the value of StickerType.
func (s *StickerSet) GetStickerType() string {
	return s.StickerType
}

// GetStickers returns the value of Stickers.
func (s *StickerSet) GetStickers() []Sticker {
	return s.Stickers
}

// GetThumbnail returns the value of Thumbnail.
func (s *StickerSet) GetThumbnail() OptPhotoSize {
	return s.Thumbnail
}

// SetName sets the value of Name.
func (s *StickerSet) SetName(val string) {
	s.Name = val
}

// SetTitle sets the value of Title.
func (s *StickerSet) SetTitle(val string) {
	s.Title = val
}

// SetStickerType sets the value of StickerType.
func (s *StickerSet) SetStickerType(val string) {
	s.StickerType = val
}

// SetStickers sets the value of Stickers.
func (s *StickerSet) SetStickers(val []Sticker) {
	s.Stickers = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *StickerSet) SetThumbnail(val OptPhotoSize) {
	s.Thumbnail = val
}

// Type of the sticker, currently one of `regular`, `mask`, `custom_emoji`. The type of the sticker
// is independent from its format, which is determined by the fields _is_animated_ and _is_video_.
type StickerType string

const (
	StickerTypeRegular     StickerType = "regular"
	StickerTypeMask        StickerType = "mask"
	StickerTypeCustomEmoji StickerType = "custom_emoji"
)

// AllValues returns all StickerType values.
func (StickerType) AllValues() []StickerType {
	return []StickerType{
		StickerTypeRegular,
		StickerTypeMask,
		StickerTypeCustomEmoji,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StickerType) MarshalText() ([]byte, error) {
	switch s {
	case StickerTypeRegular:
		return []byte(s), nil
	case StickerTypeMask:
		return []byte(s), nil
	case StickerTypeCustomEmoji:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StickerType) UnmarshalText(data []byte) error {
	switch StickerType(data) {
	case StickerTypeRegular:
		*s = StickerTypeRegular
		return nil
	case StickerTypeMask:
		*s = StickerTypeMask
		return nil
	case StickerTypeCustomEmoji:
		*s = StickerTypeCustomEmoji
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Input for stopMessageLiveLocation.
// Ref: #/components/schemas/stopMessageLiveLocation
type StopMessageLiveLocation struct {
	// Unique identifier of the business connection on behalf of which the message to be edited was sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               OptID     `json:"chat_id"`
	// Required if _inline_message_id_ is not specified. Identifier of the message with live location to
	// stop.
	MessageID OptInt `json:"message_id"`
	// Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message.
	InlineMessageID OptString               `json:"inline_message_id"`
	ReplyMarkup     OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *StopMessageLiveLocation) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *StopMessageLiveLocation) GetChatID() OptID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *StopMessageLiveLocation) GetMessageID() OptInt {
	return s.MessageID
}

// GetInlineMessageID returns the value of InlineMessageID.
func (s *StopMessageLiveLocation) GetInlineMessageID() OptString {
	return s.InlineMessageID
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *StopMessageLiveLocation) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *StopMessageLiveLocation) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *StopMessageLiveLocation) SetChatID(val OptID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *StopMessageLiveLocation) SetMessageID(val OptInt) {
	s.MessageID = val
}

// SetInlineMessageID sets the value of InlineMessageID.
func (s *StopMessageLiveLocation) SetInlineMessageID(val OptString) {
	s.InlineMessageID = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *StopMessageLiveLocation) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// Input for stopPoll.
// Ref: #/components/schemas/stopPoll
type StopPoll struct {
	// Unique identifier of the business connection on behalf of which the message to be edited was sent.
	BusinessConnectionID OptString `json:"business_connection_id"`
	ChatID               ID        `json:"chat_id"`
	// Identifier of the original message with the poll.
	MessageID   int                     `json:"message_id"`
	ReplyMarkup OptInlineKeyboardMarkup `json:"reply_markup"`
}

// GetBusinessConnectionID returns the value of BusinessConnectionID.
func (s *StopPoll) GetBusinessConnectionID() OptString {
	return s.BusinessConnectionID
}

// GetChatID returns the value of ChatID.
func (s *StopPoll) GetChatID() ID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *StopPoll) GetMessageID() int {
	return s.MessageID
}

// GetReplyMarkup returns the value of ReplyMarkup.
func (s *StopPoll) GetReplyMarkup() OptInlineKeyboardMarkup {
	return s.ReplyMarkup
}

// SetBusinessConnectionID sets the value of BusinessConnectionID.
func (s *StopPoll) SetBusinessConnectionID(val OptString) {
	s.BusinessConnectionID = val
}

// SetChatID sets the value of ChatID.
func (s *StopPoll) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *StopPoll) SetMessageID(val int) {
	s.MessageID = val
}

// SetReplyMarkup sets the value of ReplyMarkup.
func (s *StopPoll) SetReplyMarkup(val OptInlineKeyboardMarkup) {
	s.ReplyMarkup = val
}

// This object represents a story.
// Ref: #/components/schemas/Story
type Story struct {
	Chat Chat `json:"chat"`
	// Unique identifier for the story in the chat.
	ID int `json:"id"`
}

// GetChat returns the value of Chat.
func (s *Story) GetChat() Chat {
	return s.Chat
}

// GetID returns the value of ID.
func (s *Story) GetID() int {
	return s.ID
}

// SetChat sets the value of Chat.
func (s *Story) SetChat(val Chat) {
	s.Chat = val
}

// SetID sets the value of ID.
func (s *Story) SetID(val int) {
	s.ID = val
}

// This object contains basic information about a successful payment.
// Ref: #/components/schemas/SuccessfulPayment
type SuccessfulPayment struct {
	// Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies)
	// code, or `XTR` for payments in [Telegram Stars](https://t.me/BotNews/90).
	Currency string `json:"currency"`
	// Total price in the _smallest units_ of the currency (integer, **not** float/double). For example,
	// for a price of `US$ 1.45` pass `amount = 145`. See the _exp_ parameter in [currencies.
	// json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past
	// the decimal point for each currency (2 for the majority of currencies).
	TotalAmount int `json:"total_amount"`
	// Bot specified invoice payload.
	InvoicePayload string `json:"invoice_payload"`
	// _Optional_. Identifier of the shipping option chosen by the user.
	ShippingOptionID OptString    `json:"shipping_option_id"`
	OrderInfo        OptOrderInfo `json:"order_info"`
	// Telegram payment identifier.
	TelegramPaymentChargeID string `json:"telegram_payment_charge_id"`
	// Provider payment identifier.
	ProviderPaymentChargeID string `json:"provider_payment_charge_id"`
}

// GetCurrency returns the value of Currency.
func (s *SuccessfulPayment) GetCurrency() string {
	return s.Currency
}

// GetTotalAmount returns the value of TotalAmount.
func (s *SuccessfulPayment) GetTotalAmount() int {
	return s.TotalAmount
}

// GetInvoicePayload returns the value of InvoicePayload.
func (s *SuccessfulPayment) GetInvoicePayload() string {
	return s.InvoicePayload
}

// GetShippingOptionID returns the value of ShippingOptionID.
func (s *SuccessfulPayment) GetShippingOptionID() OptString {
	return s.ShippingOptionID
}

// GetOrderInfo returns the value of OrderInfo.
func (s *SuccessfulPayment) GetOrderInfo() OptOrderInfo {
	return s.OrderInfo
}

// GetTelegramPaymentChargeID returns the value of TelegramPaymentChargeID.
func (s *SuccessfulPayment) GetTelegramPaymentChargeID() string {
	return s.TelegramPaymentChargeID
}

// GetProviderPaymentChargeID returns the value of ProviderPaymentChargeID.
func (s *SuccessfulPayment) GetProviderPaymentChargeID() string {
	return s.ProviderPaymentChargeID
}

// SetCurrency sets the value of Currency.
func (s *SuccessfulPayment) SetCurrency(val string) {
	s.Currency = val
}

// SetTotalAmount sets the value of TotalAmount.
func (s *SuccessfulPayment) SetTotalAmount(val int) {
	s.TotalAmount = val
}

// SetInvoicePayload sets the value of InvoicePayload.
func (s *SuccessfulPayment) SetInvoicePayload(val string) {
	s.InvoicePayload = val
}

// SetShippingOptionID sets the value of ShippingOptionID.
func (s *SuccessfulPayment) SetShippingOptionID(val OptString) {
	s.ShippingOptionID = val
}

// SetOrderInfo sets the value of OrderInfo.
func (s *SuccessfulPayment) SetOrderInfo(val OptOrderInfo) {
	s.OrderInfo = val
}

// SetTelegramPaymentChargeID sets the value of TelegramPaymentChargeID.
func (s *SuccessfulPayment) SetTelegramPaymentChargeID(val string) {
	s.TelegramPaymentChargeID = val
}

// SetProviderPaymentChargeID sets the value of ProviderPaymentChargeID.
func (s *SuccessfulPayment) SetProviderPaymentChargeID(val string) {
	s.ProviderPaymentChargeID = val
}

// This object represents an inline button that switches the current user to inline mode in a chosen
// chat, with an optional default inline query.
// Ref: #/components/schemas/SwitchInlineQueryChosenChat
type SwitchInlineQueryChosenChat struct {
	// _Optional_. The default inline query to be inserted in the input field. If left empty, only the
	// bot's username will be inserted.
	Query OptString `json:"query"`
	// _Optional_. True, if private chats with users can be chosen.
	AllowUserChats OptBool `json:"allow_user_chats"`
	// _Optional_. True, if private chats with bots can be chosen.
	AllowBotChats OptBool `json:"allow_bot_chats"`
	// _Optional_. True, if group and supergroup chats can be chosen.
	AllowGroupChats OptBool `json:"allow_group_chats"`
	// _Optional_. True, if channel chats can be chosen.
	AllowChannelChats OptBool `json:"allow_channel_chats"`
}

// GetQuery returns the value of Query.
func (s *SwitchInlineQueryChosenChat) GetQuery() OptString {
	return s.Query
}

// GetAllowUserChats returns the value of AllowUserChats.
func (s *SwitchInlineQueryChosenChat) GetAllowUserChats() OptBool {
	return s.AllowUserChats
}

// GetAllowBotChats returns the value of AllowBotChats.
func (s *SwitchInlineQueryChosenChat) GetAllowBotChats() OptBool {
	return s.AllowBotChats
}

// GetAllowGroupChats returns the value of AllowGroupChats.
func (s *SwitchInlineQueryChosenChat) GetAllowGroupChats() OptBool {
	return s.AllowGroupChats
}

// GetAllowChannelChats returns the value of AllowChannelChats.
func (s *SwitchInlineQueryChosenChat) GetAllowChannelChats() OptBool {
	return s.AllowChannelChats
}

// SetQuery sets the value of Query.
func (s *SwitchInlineQueryChosenChat) SetQuery(val OptString) {
	s.Query = val
}

// SetAllowUserChats sets the value of AllowUserChats.
func (s *SwitchInlineQueryChosenChat) SetAllowUserChats(val OptBool) {
	s.AllowUserChats = val
}

// SetAllowBotChats sets the value of AllowBotChats.
func (s *SwitchInlineQueryChosenChat) SetAllowBotChats(val OptBool) {
	s.AllowBotChats = val
}

// SetAllowGroupChats sets the value of AllowGroupChats.
func (s *SwitchInlineQueryChosenChat) SetAllowGroupChats(val OptBool) {
	s.AllowGroupChats = val
}

// SetAllowChannelChats sets the value of AllowChannelChats.
func (s *SwitchInlineQueryChosenChat) SetAllowChannelChats(val OptBool) {
	s.AllowChannelChats = val
}

// This object contains information about the quoted part of a message that is replied to by the
// given message.
// Ref: #/components/schemas/TextQuote
type TextQuote struct {
	// Text of the quoted part of a message that is replied to by the given message.
	Text string `json:"text"`
	// _Optional_. Special entities that appear in the quote. Currently, only _bold_, _italic_,
	// _underline_, _strikethrough_, _spoiler_, and _custom_emoji_ entities are kept in quotes.
	Entities []MessageEntity `json:"entities"`
	// Approximate quote position in the original message in UTF-16 code units as specified by the sender.
	Position int `json:"position"`
	// _Optional_. True, if the quote was chosen manually by the message sender. Otherwise, the quote was
	// added automatically by the server.
	IsManual OptBool `json:"is_manual"`
}

// GetText returns the value of Text.
func (s *TextQuote) GetText() string {
	return s.Text
}

// GetEntities returns the value of Entities.
func (s *TextQuote) GetEntities() []MessageEntity {
	return s.Entities
}

// GetPosition returns the value of Position.
func (s *TextQuote) GetPosition() int {
	return s.Position
}

// GetIsManual returns the value of IsManual.
func (s *TextQuote) GetIsManual() OptBool {
	return s.IsManual
}

// SetText sets the value of Text.
func (s *TextQuote) SetText(val string) {
	s.Text = val
}

// SetEntities sets the value of Entities.
func (s *TextQuote) SetEntities(val []MessageEntity) {
	s.Entities = val
}

// SetPosition sets the value of Position.
func (s *TextQuote) SetPosition(val int) {
	s.Position = val
}

// SetIsManual sets the value of IsManual.
func (s *TextQuote) SetIsManual(val OptBool) {
	s.IsManual = val
}

// Input for unbanChatMember.
// Ref: #/components/schemas/unbanChatMember
type UnbanChatMember struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target user.
	UserID int64 `json:"user_id"`
	// Do nothing if the user is not banned.
	OnlyIfBanned OptBool `json:"only_if_banned"`
}

// GetChatID returns the value of ChatID.
func (s *UnbanChatMember) GetChatID() ID {
	return s.ChatID
}

// GetUserID returns the value of UserID.
func (s *UnbanChatMember) GetUserID() int64 {
	return s.UserID
}

// GetOnlyIfBanned returns the value of OnlyIfBanned.
func (s *UnbanChatMember) GetOnlyIfBanned() OptBool {
	return s.OnlyIfBanned
}

// SetChatID sets the value of ChatID.
func (s *UnbanChatMember) SetChatID(val ID) {
	s.ChatID = val
}

// SetUserID sets the value of UserID.
func (s *UnbanChatMember) SetUserID(val int64) {
	s.UserID = val
}

// SetOnlyIfBanned sets the value of OnlyIfBanned.
func (s *UnbanChatMember) SetOnlyIfBanned(val OptBool) {
	s.OnlyIfBanned = val
}

// Input for unbanChatSenderChat.
// Ref: #/components/schemas/unbanChatSenderChat
type UnbanChatSenderChat struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier of the target sender chat.
	SenderChatID int64 `json:"sender_chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *UnbanChatSenderChat) GetChatID() ID {
	return s.ChatID
}

// GetSenderChatID returns the value of SenderChatID.
func (s *UnbanChatSenderChat) GetSenderChatID() int64 {
	return s.SenderChatID
}

// SetChatID sets the value of ChatID.
func (s *UnbanChatSenderChat) SetChatID(val ID) {
	s.ChatID = val
}

// SetSenderChatID sets the value of SenderChatID.
func (s *UnbanChatSenderChat) SetSenderChatID(val int64) {
	s.SenderChatID = val
}

// Input for unhideGeneralForumTopic.
// Ref: #/components/schemas/unhideGeneralForumTopic
type UnhideGeneralForumTopic struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *UnhideGeneralForumTopic) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *UnhideGeneralForumTopic) SetChatID(val ID) {
	s.ChatID = val
}

// Input for unpinAllChatMessages.
// Ref: #/components/schemas/unpinAllChatMessages
type UnpinAllChatMessages struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *UnpinAllChatMessages) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *UnpinAllChatMessages) SetChatID(val ID) {
	s.ChatID = val
}

// Input for unpinAllForumTopicMessages.
// Ref: #/components/schemas/unpinAllForumTopicMessages
type UnpinAllForumTopicMessages struct {
	ChatID ID `json:"chat_id"`
	// Unique identifier for the target message thread of the forum topic.
	MessageThreadID int `json:"message_thread_id"`
}

// GetChatID returns the value of ChatID.
func (s *UnpinAllForumTopicMessages) GetChatID() ID {
	return s.ChatID
}

// GetMessageThreadID returns the value of MessageThreadID.
func (s *UnpinAllForumTopicMessages) GetMessageThreadID() int {
	return s.MessageThreadID
}

// SetChatID sets the value of ChatID.
func (s *UnpinAllForumTopicMessages) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageThreadID sets the value of MessageThreadID.
func (s *UnpinAllForumTopicMessages) SetMessageThreadID(val int) {
	s.MessageThreadID = val
}

// Input for unpinAllGeneralForumTopicMessages.
// Ref: #/components/schemas/unpinAllGeneralForumTopicMessages
type UnpinAllGeneralForumTopicMessages struct {
	ChatID ID `json:"chat_id"`
}

// GetChatID returns the value of ChatID.
func (s *UnpinAllGeneralForumTopicMessages) GetChatID() ID {
	return s.ChatID
}

// SetChatID sets the value of ChatID.
func (s *UnpinAllGeneralForumTopicMessages) SetChatID(val ID) {
	s.ChatID = val
}

// Input for unpinChatMessage.
// Ref: #/components/schemas/unpinChatMessage
type UnpinChatMessage struct {
	ChatID ID `json:"chat_id"`
	// Identifier of a message to unpin. If not specified, the most recent pinned message (by sending
	// date) will be unpinned.
	MessageID OptInt `json:"message_id"`
}

// GetChatID returns the value of ChatID.
func (s *UnpinChatMessage) GetChatID() ID {
	return s.ChatID
}

// GetMessageID returns the value of MessageID.
func (s *UnpinChatMessage) GetMessageID() OptInt {
	return s.MessageID
}

// SetChatID sets the value of ChatID.
func (s *UnpinChatMessage) SetChatID(val ID) {
	s.ChatID = val
}

// SetMessageID sets the value of MessageID.
func (s *UnpinChatMessage) SetMessageID(val OptInt) {
	s.MessageID = val
}

// This [object](https://core.telegram.org/bots/api#available-types) represents an incoming update.At
// most **one** of the optional parameters can be present in any given update.
// Ref: #/components/schemas/Update
type Update struct {
	// The update's unique identifier. Update identifiers start from a certain positive number and
	// increase sequentially. This identifier becomes especially handy if you're using
	// [webhooks](https://core.telegram.org/bots/api#setwebhook), since it allows you to ignore repeated
	// updates or to restore the correct update sequence, should they get out of order. If there are no
	// new updates for at least a week, then identifier of the next update will be chosen randomly
	// instead of sequentially.
	UpdateID                int                            `json:"update_id"`
	Message                 OptMessage                     `json:"message"`
	EditedMessage           OptMessage                     `json:"edited_message"`
	ChannelPost             OptMessage                     `json:"channel_post"`
	EditedChannelPost       OptMessage                     `json:"edited_channel_post"`
	BusinessConnection      OptBusinessConnection          `json:"business_connection"`
	BusinessMessage         OptMessage                     `json:"business_message"`
	EditedBusinessMessage   OptMessage                     `json:"edited_business_message"`
	DeletedBusinessMessages OptBusinessMessagesDeleted     `json:"deleted_business_messages"`
	MessageReaction         OptMessageReactionUpdated      `json:"message_reaction"`
	MessageReactionCount    OptMessageReactionCountUpdated `json:"message_reaction_count"`
	InlineQuery             OptInlineQuery                 `json:"inline_query"`
	ChosenInlineResult      OptChosenInlineResult          `json:"chosen_inline_result"`
	CallbackQuery           OptCallbackQuery               `json:"callback_query"`
	ShippingQuery           OptShippingQuery               `json:"shipping_query"`
	PreCheckoutQuery        OptPreCheckoutQuery            `json:"pre_checkout_query"`
	Poll                    OptPoll                        `json:"poll"`
	PollAnswer              OptPollAnswer                  `json:"poll_answer"`
	MyChatMember            OptChatMemberUpdated           `json:"my_chat_member"`
	ChatMember              OptChatMemberUpdated           `json:"chat_member"`
	ChatJoinRequest         OptChatJoinRequest             `json:"chat_join_request"`
	ChatBoost               OptChatBoostUpdated            `json:"chat_boost"`
	RemovedChatBoost        OptChatBoostRemoved            `json:"removed_chat_boost"`
}

// GetUpdateID returns the value of UpdateID.
func (s *Update) GetUpdateID() int {
	return s.UpdateID
}

// GetMessage returns the value of Message.
func (s *Update) GetMessage() OptMessage {
	return s.Message
}

// GetEditedMessage returns the value of EditedMessage.
func (s *Update) GetEditedMessage() OptMessage {
	return s.EditedMessage
}

// GetChannelPost returns the value of ChannelPost.
func (s *Update) GetChannelPost() OptMessage {
	return s.ChannelPost
}

// GetEditedChannelPost returns the value of EditedChannelPost.
func (s *Update) GetEditedChannelPost() OptMessage {
	return s.EditedChannelPost
}

// GetBusinessConnection returns the value of BusinessConnection.
func (s *Update) GetBusinessConnection() OptBusinessConnection {
	return s.BusinessConnection
}

// GetBusinessMessage returns the value of BusinessMessage.
func (s *Update) GetBusinessMessage() OptMessage {
	return s.BusinessMessage
}

// GetEditedBusinessMessage returns the value of EditedBusinessMessage.
func (s *Update) GetEditedBusinessMessage() OptMessage {
	return s.EditedBusinessMessage
}

// GetDeletedBusinessMessages returns the value of DeletedBusinessMessages.
func (s *Update) GetDeletedBusinessMessages() OptBusinessMessagesDeleted {
	return s.DeletedBusinessMessages
}

// GetMessageReaction returns the value of MessageReaction.
func (s *Update) GetMessageReaction() OptMessageReactionUpdated {
	return s.MessageReaction
}

// GetMessageReactionCount returns the value of MessageReactionCount.
func (s *Update) GetMessageReactionCount() OptMessageReactionCountUpdated {
	return s.MessageReactionCount
}

// GetInlineQuery returns the value of InlineQuery.
func (s *Update) GetInlineQuery() OptInlineQuery {
	return s.InlineQuery
}

// GetChosenInlineResult returns the value of ChosenInlineResult.
func (s *Update) GetChosenInlineResult() OptChosenInlineResult {
	return s.ChosenInlineResult
}

// GetCallbackQuery returns the value of CallbackQuery.
func (s *Update) GetCallbackQuery() OptCallbackQuery {
	return s.CallbackQuery
}

// GetShippingQuery returns the value of ShippingQuery.
func (s *Update) GetShippingQuery() OptShippingQuery {
	return s.ShippingQuery
}

// GetPreCheckoutQuery returns the value of PreCheckoutQuery.
func (s *Update) GetPreCheckoutQuery() OptPreCheckoutQuery {
	return s.PreCheckoutQuery
}

// GetPoll returns the value of Poll.
func (s *Update) GetPoll() OptPoll {
	return s.Poll
}

// GetPollAnswer returns the value of PollAnswer.
func (s *Update) GetPollAnswer() OptPollAnswer {
	return s.PollAnswer
}

// GetMyChatMember returns the value of MyChatMember.
func (s *Update) GetMyChatMember() OptChatMemberUpdated {
	return s.MyChatMember
}

// GetChatMember returns the value of ChatMember.
func (s *Update) GetChatMember() OptChatMemberUpdated {
	return s.ChatMember
}

// GetChatJoinRequest returns the value of ChatJoinRequest.
func (s *Update) GetChatJoinRequest() OptChatJoinRequest {
	return s.ChatJoinRequest
}

// GetChatBoost returns the value of ChatBoost.
func (s *Update) GetChatBoost() OptChatBoostUpdated {
	return s.ChatBoost
}

// GetRemovedChatBoost returns the value of RemovedChatBoost.
func (s *Update) GetRemovedChatBoost() OptChatBoostRemoved {
	return s.RemovedChatBoost
}

// SetUpdateID sets the value of UpdateID.
func (s *Update) SetUpdateID(val int) {
	s.UpdateID = val
}

// SetMessage sets the value of Message.
func (s *Update) SetMessage(val OptMessage) {
	s.Message = val
}

// SetEditedMessage sets the value of EditedMessage.
func (s *Update) SetEditedMessage(val OptMessage) {
	s.EditedMessage = val
}

// SetChannelPost sets the value of ChannelPost.
func (s *Update) SetChannelPost(val OptMessage) {
	s.ChannelPost = val
}

// SetEditedChannelPost sets the value of EditedChannelPost.
func (s *Update) SetEditedChannelPost(val OptMessage) {
	s.EditedChannelPost = val
}

// SetBusinessConnection sets the value of BusinessConnection.
func (s *Update) SetBusinessConnection(val OptBusinessConnection) {
	s.BusinessConnection = val
}

// SetBusinessMessage sets the value of BusinessMessage.
func (s *Update) SetBusinessMessage(val OptMessage) {
	s.BusinessMessage = val
}

// SetEditedBusinessMessage sets the value of EditedBusinessMessage.
func (s *Update) SetEditedBusinessMessage(val OptMessage) {
	s.EditedBusinessMessage = val
}

// SetDeletedBusinessMessages sets the value of DeletedBusinessMessages.
func (s *Update) SetDeletedBusinessMessages(val OptBusinessMessagesDeleted) {
	s.DeletedBusinessMessages = val
}

// SetMessageReaction sets the value of MessageReaction.
func (s *Update) SetMessageReaction(val OptMessageReactionUpdated) {
	s.MessageReaction = val
}

// SetMessageReactionCount sets the value of MessageReactionCount.
func (s *Update) SetMessageReactionCount(val OptMessageReactionCountUpdated) {
	s.MessageReactionCount = val
}

// SetInlineQuery sets the value of InlineQuery.
func (s *Update) SetInlineQuery(val OptInlineQuery) {
	s.InlineQuery = val
}

// SetChosenInlineResult sets the value of ChosenInlineResult.
func (s *Update) SetChosenInlineResult(val OptChosenInlineResult) {
	s.ChosenInlineResult = val
}

// SetCallbackQuery sets the value of CallbackQuery.
func (s *Update) SetCallbackQuery(val OptCallbackQuery) {
	s.CallbackQuery = val
}

// SetShippingQuery sets the value of ShippingQuery.
func (s *Update) SetShippingQuery(val OptShippingQuery) {
	s.ShippingQuery = val
}

// SetPreCheckoutQuery sets the value of PreCheckoutQuery.
func (s *Update) SetPreCheckoutQuery(val OptPreCheckoutQuery) {
	s.PreCheckoutQuery = val
}

// SetPoll sets the value of Poll.
func (s *Update) SetPoll(val OptPoll) {
	s.Poll = val
}

// SetPollAnswer sets the value of PollAnswer.
func (s *Update) SetPollAnswer(val OptPollAnswer) {
	s.PollAnswer = val
}

// SetMyChatMember sets the value of MyChatMember.
func (s *Update) SetMyChatMember(val OptChatMemberUpdated) {
	s.MyChatMember = val
}

// SetChatMember sets the value of ChatMember.
func (s *Update) SetChatMember(val OptChatMemberUpdated) {
	s.ChatMember = val
}

// SetChatJoinRequest sets the value of ChatJoinRequest.
func (s *Update) SetChatJoinRequest(val OptChatJoinRequest) {
	s.ChatJoinRequest = val
}

// SetChatBoost sets the value of ChatBoost.
func (s *Update) SetChatBoost(val OptChatBoostUpdated) {
	s.ChatBoost = val
}

// SetRemovedChatBoost sets the value of RemovedChatBoost.
func (s *Update) SetRemovedChatBoost(val OptChatBoostRemoved) {
	s.RemovedChatBoost = val
}

// Input for uploadStickerFile.
// Ref: #/components/schemas/uploadStickerFile
type UploadStickerFile struct {
	// User identifier of sticker file owner.
	UserID int64 `json:"user_id"`
	// A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. See [](https://core.telegram.
	// org/stickers)[https://core.telegram.org/stickers](https://core.telegram.org/stickers) for
	// technical requirements. [More information on Sending Files](https://core.telegram.
	// org/bots/api#sending-files).
	Sticker string `json:"sticker"`
	// Format of the sticker, must be one of `static`, `animated`, `video`.
	StickerFormat string `json:"sticker_format"`
}

// GetUserID returns the value of UserID.
func (s *UploadStickerFile) GetUserID() int64 {
	return s.UserID
}

// GetSticker returns the value of Sticker.
func (s *UploadStickerFile) GetSticker() string {
	return s.Sticker
}

// GetStickerFormat returns the value of StickerFormat.
func (s *UploadStickerFile) GetStickerFormat() string {
	return s.StickerFormat
}

// SetUserID sets the value of UserID.
func (s *UploadStickerFile) SetUserID(val int64) {
	s.UserID = val
}

// SetSticker sets the value of Sticker.
func (s *UploadStickerFile) SetSticker(val string) {
	s.Sticker = val
}

// SetStickerFormat sets the value of StickerFormat.
func (s *UploadStickerFile) SetStickerFormat(val string) {
	s.StickerFormat = val
}

// This object represents a Telegram user or bot.
// Ref: #/components/schemas/User
type User struct {
	// Unique identifier for this user or bot. This number may have more than 32 significant bits and
	// some programming languages may have difficulty/silent defects in interpreting it. But it has at
	// most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing
	// this identifier.
	ID int64 `json:"id"`
	// _True_, if this user is a bot.
	IsBot bool `json:"is_bot"`
	// User's or bot's first name.
	FirstName string `json:"first_name"`
	// _Optional_. User's or bot's last name.
	LastName OptString `json:"last_name"`
	// _Optional_. User's or bot's username.
	Username OptString `json:"username"`
	// _Optional_. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's
	// language.
	LanguageCode OptString `json:"language_code"`
	// _Optional_. _True_, if this user is a Telegram Premium user.
	IsPremium OptBool `json:"is_premium"`
	// _Optional_. _True_, if this user added the bot to the attachment menu.
	AddedToAttachmentMenu OptBool `json:"added_to_attachment_menu"`
	// _Optional_. _True_, if the bot can be invited to groups. Returned only in [getMe](https://core.
	// telegram.org/bots/api#getme).
	CanJoinGroups OptBool `json:"can_join_groups"`
	// _Optional_. _True_, if [privacy mode](https://core.telegram.org/bots/features#privacy-mode) is
	// disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api#getme).
	CanReadAllGroupMessages OptBool `json:"can_read_all_group_messages"`
	// _Optional_. _True_, if the bot supports inline queries. Returned only in [getMe](https://core.
	// telegram.org/bots/api#getme).
	SupportsInlineQueries OptBool `json:"supports_inline_queries"`
	// _Optional_. _True_, if the bot can be connected to a Telegram Business account to receive its
	// messages. Returned only in [getMe](https://core.telegram.org/bots/api#getme).
	CanConnectToBusiness OptBool `json:"can_connect_to_business"`
}

// GetID returns the value of ID.
func (s *User) GetID() int64 {
	return s.ID
}

// GetIsBot returns the value of IsBot.
func (s *User) GetIsBot() bool {
	return s.IsBot
}

// GetFirstName returns the value of FirstName.
func (s *User) GetFirstName() string {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *User) GetLastName() OptString {
	return s.LastName
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() OptString {
	return s.Username
}

// GetLanguageCode returns the value of LanguageCode.
func (s *User) GetLanguageCode() OptString {
	return s.LanguageCode
}

// GetIsPremium returns the value of IsPremium.
func (s *User) GetIsPremium() OptBool {
	return s.IsPremium
}

// GetAddedToAttachmentMenu returns the value of AddedToAttachmentMenu.
func (s *User) GetAddedToAttachmentMenu() OptBool {
	return s.AddedToAttachmentMenu
}

// GetCanJoinGroups returns the value of CanJoinGroups.
func (s *User) GetCanJoinGroups() OptBool {
	return s.CanJoinGroups
}

// GetCanReadAllGroupMessages returns the value of CanReadAllGroupMessages.
func (s *User) GetCanReadAllGroupMessages() OptBool {
	return s.CanReadAllGroupMessages
}

// GetSupportsInlineQueries returns the value of SupportsInlineQueries.
func (s *User) GetSupportsInlineQueries() OptBool {
	return s.SupportsInlineQueries
}

// GetCanConnectToBusiness returns the value of CanConnectToBusiness.
func (s *User) GetCanConnectToBusiness() OptBool {
	return s.CanConnectToBusiness
}

// SetID sets the value of ID.
func (s *User) SetID(val int64) {
	s.ID = val
}

// SetIsBot sets the value of IsBot.
func (s *User) SetIsBot(val bool) {
	s.IsBot = val
}

// SetFirstName sets the value of FirstName.
func (s *User) SetFirstName(val string) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val OptString) {
	s.LastName = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val OptString) {
	s.Username = val
}

// SetLanguageCode sets the value of LanguageCode.
func (s *User) SetLanguageCode(val OptString) {
	s.LanguageCode = val
}

// SetIsPremium sets the value of IsPremium.
func (s *User) SetIsPremium(val OptBool) {
	s.IsPremium = val
}

// SetAddedToAttachmentMenu sets the value of AddedToAttachmentMenu.
func (s *User) SetAddedToAttachmentMenu(val OptBool) {
	s.AddedToAttachmentMenu = val
}

// SetCanJoinGroups sets the value of CanJoinGroups.
func (s *User) SetCanJoinGroups(val OptBool) {
	s.CanJoinGroups = val
}

// SetCanReadAllGroupMessages sets the value of CanReadAllGroupMessages.
func (s *User) SetCanReadAllGroupMessages(val OptBool) {
	s.CanReadAllGroupMessages = val
}

// SetSupportsInlineQueries sets the value of SupportsInlineQueries.
func (s *User) SetSupportsInlineQueries(val OptBool) {
	s.SupportsInlineQueries = val
}

// SetCanConnectToBusiness sets the value of CanConnectToBusiness.
func (s *User) SetCanConnectToBusiness(val OptBool) {
	s.CanConnectToBusiness = val
}

// This object represent a user's profile pictures.
// Ref: #/components/schemas/UserProfilePhotos
type UserProfilePhotos struct {
	// Total number of profile pictures the target user has.
	TotalCount int `json:"total_count"`
	// Requested profile pictures (in up to 4 sizes each).
	Photos [][]PhotoSize `json:"photos"`
}

// GetTotalCount returns the value of TotalCount.
func (s *UserProfilePhotos) GetTotalCount() int {
	return s.TotalCount
}

// GetPhotos returns the value of Photos.
func (s *UserProfilePhotos) GetPhotos() [][]PhotoSize {
	return s.Photos
}

// SetTotalCount sets the value of TotalCount.
func (s *UserProfilePhotos) SetTotalCount(val int) {
	s.TotalCount = val
}

// SetPhotos sets the value of Photos.
func (s *UserProfilePhotos) SetPhotos(val [][]PhotoSize) {
	s.Photos = val
}

// This object contains information about the users whose identifiers were shared with the bot using
// a [KeyboardButtonRequestUsers](https://core.telegram.org/bots/api#keyboardbuttonrequestusers)
// button.
// Ref: #/components/schemas/UsersShared
type UsersShared struct {
	// Identifier of the request.
	RequestID int `json:"request_id"`
	// Information about users shared with the bot.
	Users []SharedUser `json:"users"`
}

// GetRequestID returns the value of RequestID.
func (s *UsersShared) GetRequestID() int {
	return s.RequestID
}

// GetUsers returns the value of Users.
func (s *UsersShared) GetUsers() []SharedUser {
	return s.Users
}

// SetRequestID sets the value of RequestID.
func (s *UsersShared) SetRequestID(val int) {
	s.RequestID = val
}

// SetUsers sets the value of Users.
func (s *UsersShared) SetUsers(val []SharedUser) {
	s.Users = val
}

// This object represents a venue.
// Ref: #/components/schemas/Venue
type Venue struct {
	Location Location `json:"location"`
	// Name of the venue.
	Title string `json:"title"`
	// Address of the venue.
	Address string `json:"address"`
	// _Optional_. Foursquare identifier of the venue.
	FoursquareID OptString `json:"foursquare_id"`
	// _Optional_. Foursquare type of the venue. (For example, `arts_entertainment/default`,
	// `arts_entertainment/aquarium` or `food/icecream`.).
	FoursquareType OptString `json:"foursquare_type"`
	// _Optional_. Google Places identifier of the venue.
	GooglePlaceID OptString `json:"google_place_id"`
	// _Optional_. Google Places type of the venue. (See [supported types](https://developers.google.
	// com/places/web-service/supported_types).).
	GooglePlaceType OptString `json:"google_place_type"`
}

// GetLocation returns the value of Location.
func (s *Venue) GetLocation() Location {
	return s.Location
}

// GetTitle returns the value of Title.
func (s *Venue) GetTitle() string {
	return s.Title
}

// GetAddress returns the value of Address.
func (s *Venue) GetAddress() string {
	return s.Address
}

// GetFoursquareID returns the value of FoursquareID.
func (s *Venue) GetFoursquareID() OptString {
	return s.FoursquareID
}

// GetFoursquareType returns the value of FoursquareType.
func (s *Venue) GetFoursquareType() OptString {
	return s.FoursquareType
}

// GetGooglePlaceID returns the value of GooglePlaceID.
func (s *Venue) GetGooglePlaceID() OptString {
	return s.GooglePlaceID
}

// GetGooglePlaceType returns the value of GooglePlaceType.
func (s *Venue) GetGooglePlaceType() OptString {
	return s.GooglePlaceType
}

// SetLocation sets the value of Location.
func (s *Venue) SetLocation(val Location) {
	s.Location = val
}

// SetTitle sets the value of Title.
func (s *Venue) SetTitle(val string) {
	s.Title = val
}

// SetAddress sets the value of Address.
func (s *Venue) SetAddress(val string) {
	s.Address = val
}

// SetFoursquareID sets the value of FoursquareID.
func (s *Venue) SetFoursquareID(val OptString) {
	s.FoursquareID = val
}

// SetFoursquareType sets the value of FoursquareType.
func (s *Venue) SetFoursquareType(val OptString) {
	s.FoursquareType = val
}

// SetGooglePlaceID sets the value of GooglePlaceID.
func (s *Venue) SetGooglePlaceID(val OptString) {
	s.GooglePlaceID = val
}

// SetGooglePlaceType sets the value of GooglePlaceType.
func (s *Venue) SetGooglePlaceType(val OptString) {
	s.GooglePlaceType = val
}

// This object represents a video file.
// Ref: #/components/schemas/Video
type Video struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Video width as defined by sender.
	Width int `json:"width"`
	// Video height as defined by sender.
	Height int `json:"height"`
	// Duration of the video in seconds as defined by sender.
	Duration  int          `json:"duration"`
	Thumbnail OptPhotoSize `json:"thumbnail"`
	// _Optional_. Original filename as defined by sender.
	FileName OptString `json:"file_name"`
	// _Optional_. MIME type of the file as defined by sender.
	MimeType OptString `json:"mime_type"`
	// _Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have
	// difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed
	// 64-bit integer or double-precision float type are safe for storing this value.
	FileSize OptInt `json:"file_size"`
}

// GetFileID returns the value of FileID.
func (s *Video) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *Video) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetWidth returns the value of Width.
func (s *Video) GetWidth() int {
	return s.Width
}

// GetHeight returns the value of Height.
func (s *Video) GetHeight() int {
	return s.Height
}

// GetDuration returns the value of Duration.
func (s *Video) GetDuration() int {
	return s.Duration
}

// GetThumbnail returns the value of Thumbnail.
func (s *Video) GetThumbnail() OptPhotoSize {
	return s.Thumbnail
}

// GetFileName returns the value of FileName.
func (s *Video) GetFileName() OptString {
	return s.FileName
}

// GetMimeType returns the value of MimeType.
func (s *Video) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s *Video) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Video) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Video) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetWidth sets the value of Width.
func (s *Video) SetWidth(val int) {
	s.Width = val
}

// SetHeight sets the value of Height.
func (s *Video) SetHeight(val int) {
	s.Height = val
}

// SetDuration sets the value of Duration.
func (s *Video) SetDuration(val int) {
	s.Duration = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *Video) SetThumbnail(val OptPhotoSize) {
	s.Thumbnail = val
}

// SetFileName sets the value of FileName.
func (s *Video) SetFileName(val OptString) {
	s.FileName = val
}

// SetMimeType sets the value of MimeType.
func (s *Video) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Video) SetFileSize(val OptInt) {
	s.FileSize = val
}

// This object represents a service message about a video chat ended in the chat.
// Ref: #/components/schemas/VideoChatEnded
type VideoChatEnded struct {
	// Video chat duration in seconds.
	Duration int `json:"duration"`
}

// GetDuration returns the value of Duration.
func (s *VideoChatEnded) GetDuration() int {
	return s.Duration
}

// SetDuration sets the value of Duration.
func (s *VideoChatEnded) SetDuration(val int) {
	s.Duration = val
}

// This object represents a service message about new members invited to a video chat.
// Ref: #/components/schemas/VideoChatParticipantsInvited
type VideoChatParticipantsInvited struct {
	// New members that were invited to the video chat.
	Users []User `json:"users"`
}

// GetUsers returns the value of Users.
func (s *VideoChatParticipantsInvited) GetUsers() []User {
	return s.Users
}

// SetUsers sets the value of Users.
func (s *VideoChatParticipantsInvited) SetUsers(val []User) {
	s.Users = val
}

// This object represents a service message about a video chat scheduled in the chat.
// Ref: #/components/schemas/VideoChatScheduled
type VideoChatScheduled struct {
	// Point in time (Unix timestamp) when the video chat is supposed to be started by a chat
	// administrator.
	StartDate int `json:"start_date"`
}

// GetStartDate returns the value of StartDate.
func (s *VideoChatScheduled) GetStartDate() int {
	return s.StartDate
}

// SetStartDate sets the value of StartDate.
func (s *VideoChatScheduled) SetStartDate(val int) {
	s.StartDate = val
}

// This object represents a service message about a video chat started in the chat. Currently holds
// no information.
// Ref: #/components/schemas/VideoChatStarted
type VideoChatStarted map[string]jx.Raw

func (s *VideoChatStarted) init() VideoChatStarted {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope)
// (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
// Ref: #/components/schemas/VideoNote
type VideoNote struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Video width and height (diameter of the video message) as defined by sender.
	Length int `json:"length"`
	// Duration of the video in seconds as defined by sender.
	Duration  int          `json:"duration"`
	Thumbnail OptPhotoSize `json:"thumbnail"`
	// _Optional_. File size in bytes.
	FileSize OptInt `json:"file_size"`
}

// GetFileID returns the value of FileID.
func (s *VideoNote) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *VideoNote) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetLength returns the value of Length.
func (s *VideoNote) GetLength() int {
	return s.Length
}

// GetDuration returns the value of Duration.
func (s *VideoNote) GetDuration() int {
	return s.Duration
}

// GetThumbnail returns the value of Thumbnail.
func (s *VideoNote) GetThumbnail() OptPhotoSize {
	return s.Thumbnail
}

// GetFileSize returns the value of FileSize.
func (s *VideoNote) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *VideoNote) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *VideoNote) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetLength sets the value of Length.
func (s *VideoNote) SetLength(val int) {
	s.Length = val
}

// SetDuration sets the value of Duration.
func (s *VideoNote) SetDuration(val int) {
	s.Duration = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *VideoNote) SetThumbnail(val OptPhotoSize) {
	s.Thumbnail = val
}

// SetFileSize sets the value of FileSize.
func (s *VideoNote) SetFileSize(val OptInt) {
	s.FileSize = val
}

// This object represents a voice note.
// Ref: #/components/schemas/Voice
type Voice struct {
	// Identifier for this file, which can be used to download or reuse the file.
	FileID string `json:"file_id"`
	// Unique identifier for this file, which is supposed to be the same over time and for different bots.
	//  Can't be used to download or reuse the file.
	FileUniqueID string `json:"file_unique_id"`
	// Duration of the audio in seconds as defined by sender.
	Duration int `json:"duration"`
	// _Optional_. MIME type of the file as defined by sender.
	MimeType OptString `json:"mime_type"`
	// _Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have
	// difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed
	// 64-bit integer or double-precision float type are safe for storing this value.
	FileSize OptInt `json:"file_size"`
}

// GetFileID returns the value of FileID.
func (s *Voice) GetFileID() string {
	return s.FileID
}

// GetFileUniqueID returns the value of FileUniqueID.
func (s *Voice) GetFileUniqueID() string {
	return s.FileUniqueID
}

// GetDuration returns the value of Duration.
func (s *Voice) GetDuration() int {
	return s.Duration
}

// GetMimeType returns the value of MimeType.
func (s *Voice) GetMimeType() OptString {
	return s.MimeType
}

// GetFileSize returns the value of FileSize.
func (s *Voice) GetFileSize() OptInt {
	return s.FileSize
}

// SetFileID sets the value of FileID.
func (s *Voice) SetFileID(val string) {
	s.FileID = val
}

// SetFileUniqueID sets the value of FileUniqueID.
func (s *Voice) SetFileUniqueID(val string) {
	s.FileUniqueID = val
}

// SetDuration sets the value of Duration.
func (s *Voice) SetDuration(val int) {
	s.Duration = val
}

// SetMimeType sets the value of MimeType.
func (s *Voice) SetMimeType(val OptString) {
	s.MimeType = val
}

// SetFileSize sets the value of FileSize.
func (s *Voice) SetFileSize(val OptInt) {
	s.FileSize = val
}

// Describes data sent from a [Web App](https://core.telegram.org/bots/webapps) to the bot.
// Ref: #/components/schemas/WebAppData
type WebAppData struct {
	// The data. Be aware that a bad client can send arbitrary data in this field.
	Data string `json:"data"`
	// Text of the _web_app_ keyboard button from which the Web App was opened. Be aware that a bad
	// client can send arbitrary data in this field.
	ButtonText string `json:"button_text"`
}

// GetData returns the value of Data.
func (s *WebAppData) GetData() string {
	return s.Data
}

// GetButtonText returns the value of ButtonText.
func (s *WebAppData) GetButtonText() string {
	return s.ButtonText
}

// SetData sets the value of Data.
func (s *WebAppData) SetData(val string) {
	s.Data = val
}

// SetButtonText sets the value of ButtonText.
func (s *WebAppData) SetButtonText(val string) {
	s.ButtonText = val
}

// Describes a [Web App](https://core.telegram.org/bots/webapps).
// Ref: #/components/schemas/WebAppInfo
type WebAppInfo struct {
	// An HTTPS URL of a Web App to be opened with additional data as specified in [Initializing Web
	// Apps](https://core.telegram.org/bots/webapps#initializing-mini-apps).
	URL string `json:"url"`
}

// GetURL returns the value of URL.
func (s *WebAppInfo) GetURL() string {
	return s.URL
}

// SetURL sets the value of URL.
func (s *WebAppInfo) SetURL(val string) {
	s.URL = val
}

// Describes the current status of a webhook.
// Ref: #/components/schemas/WebhookInfo
type WebhookInfo struct {
	// Webhook URL, may be empty if webhook is not set up.
	URL string `json:"url"`
	// _True_, if a custom certificate was provided for webhook certificate checks.
	HasCustomCertificate bool `json:"has_custom_certificate"`
	// Number of updates awaiting delivery.
	PendingUpdateCount int `json:"pending_update_count"`
	// _Optional_. Currently used webhook IP address.
	IPAddress OptString `json:"ip_address"`
	// _Optional_. Unix time for the most recent error that happened when trying to deliver an update via
	// webhook.
	LastErrorDate OptInt `json:"last_error_date"`
	// _Optional_. Error message in human-readable format for the most recent error that happened when
	// trying to deliver an update via webhook.
	LastErrorMessage OptString `json:"last_error_message"`
	// _Optional_. Unix time of the most recent error that happened when trying to synchronize available
	// updates with Telegram datacenters.
	LastSynchronizationErrorDate OptInt `json:"last_synchronization_error_date"`
	// _Optional_. The maximum allowed number of simultaneous HTTPS connections to the webhook for update
	// delivery.
	MaxConnections OptInt `json:"max_connections"`
	// _Optional_. A list of update types the bot is subscribed to. Defaults to all update types except
	// _chat_member_.
	AllowedUpdates []string `json:"allowed_updates"`
}

// GetURL returns the value of URL.
func (s *WebhookInfo) GetURL() string {
	return s.URL
}

// GetHasCustomCertificate returns the value of HasCustomCertificate.
func (s *WebhookInfo) GetHasCustomCertificate() bool {
	return s.HasCustomCertificate
}

// GetPendingUpdateCount returns the value of PendingUpdateCount.
func (s *WebhookInfo) GetPendingUpdateCount() int {
	return s.PendingUpdateCount
}

// GetIPAddress returns the value of IPAddress.
func (s *WebhookInfo) GetIPAddress() OptString {
	return s.IPAddress
}

// GetLastErrorDate returns the value of LastErrorDate.
func (s *WebhookInfo) GetLastErrorDate() OptInt {
	return s.LastErrorDate
}

// GetLastErrorMessage returns the value of LastErrorMessage.
func (s *WebhookInfo) GetLastErrorMessage() OptString {
	return s.LastErrorMessage
}

// GetLastSynchronizationErrorDate returns the value of LastSynchronizationErrorDate.
func (s *WebhookInfo) GetLastSynchronizationErrorDate() OptInt {
	return s.LastSynchronizationErrorDate
}

// GetMaxConnections returns the value of MaxConnections.
func (s *WebhookInfo) GetMaxConnections() OptInt {
	return s.MaxConnections
}

// GetAllowedUpdates returns the value of AllowedUpdates.
func (s *WebhookInfo) GetAllowedUpdates() []string {
	return s.AllowedUpdates
}

// SetURL sets the value of URL.
func (s *WebhookInfo) SetURL(val string) {
	s.URL = val
}

// SetHasCustomCertificate sets the value of HasCustomCertificate.
func (s *WebhookInfo) SetHasCustomCertificate(val bool) {
	s.HasCustomCertificate = val
}

// SetPendingUpdateCount sets the value of PendingUpdateCount.
func (s *WebhookInfo) SetPendingUpdateCount(val int) {
	s.PendingUpdateCount = val
}

// SetIPAddress sets the value of IPAddress.
func (s *WebhookInfo) SetIPAddress(val OptString) {
	s.IPAddress = val
}

// SetLastErrorDate sets the value of LastErrorDate.
func (s *WebhookInfo) SetLastErrorDate(val OptInt) {
	s.LastErrorDate = val
}

// SetLastErrorMessage sets the value of LastErrorMessage.
func (s *WebhookInfo) SetLastErrorMessage(val OptString) {
	s.LastErrorMessage = val
}

// SetLastSynchronizationErrorDate sets the value of LastSynchronizationErrorDate.
func (s *WebhookInfo) SetLastSynchronizationErrorDate(val OptInt) {
	s.LastSynchronizationErrorDate = val
}

// SetMaxConnections sets the value of MaxConnections.
func (s *WebhookInfo) SetMaxConnections(val OptInt) {
	s.MaxConnections = val
}

// SetAllowedUpdates sets the value of AllowedUpdates.
func (s *WebhookInfo) SetAllowedUpdates(val []string) {
	s.AllowedUpdates = val
}

// This object represents a service message about a user allowing a bot to write messages after
// adding it to the attachment menu, launching a Web App from a link, or accepting an explicit
// request from a Web App sent by the method [requestWriteAccess](https://core.telegram.
// org/bots/webapps#initializing-mini-apps).
// Ref: #/components/schemas/WriteAccessAllowed
type WriteAccessAllowed struct {
	// _Optional_. True, if the access was granted after the user accepted an explicit request from a Web
	// App sent by the method [requestWriteAccess](https://core.telegram.
	// org/bots/webapps#initializing-mini-apps).
	FromRequest OptBool `json:"from_request"`
	// _Optional_. Name of the Web App, if the access was granted when the Web App was launched from a
	// link.
	WebAppName OptString `json:"web_app_name"`
	// _Optional_. True, if the access was granted when the bot was added to the attachment or side menu.
	FromAttachmentMenu OptBool `json:"from_attachment_menu"`
}

// GetFromRequest returns the value of FromRequest.
func (s *WriteAccessAllowed) GetFromRequest() OptBool {
	return s.FromRequest
}

// GetWebAppName returns the value of WebAppName.
func (s *WriteAccessAllowed) GetWebAppName() OptString {
	return s.WebAppName
}

// GetFromAttachmentMenu returns the value of FromAttachmentMenu.
func (s *WriteAccessAllowed) GetFromAttachmentMenu() OptBool {
	return s.FromAttachmentMenu
}

// SetFromRequest sets the value of FromRequest.
func (s *WriteAccessAllowed) SetFromRequest(val OptBool) {
	s.FromRequest = val
}

// SetWebAppName sets the value of WebAppName.
func (s *WriteAccessAllowed) SetWebAppName(val OptString) {
	s.WebAppName = val
}

// SetFromAttachmentMenu sets the value of FromAttachmentMenu.
func (s *WriteAccessAllowed) SetFromAttachmentMenu(val OptBool) {
	s.FromAttachmentMenu = val
}
