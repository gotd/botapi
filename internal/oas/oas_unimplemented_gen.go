// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AddStickerToSet implements addStickerToSet operation.
//
// Use this method to add a new sticker to a set created by the bot. The format of the added sticker
// must match the format of the other stickers in the set. Emoji sticker sets can have up to 200
// stickers. Animated and video sticker sets can have up to 50 stickers. Static sticker sets can have
// up to 120 stickers. Returns _True_ on success.
//
// POST /addStickerToSet
func (UnimplementedHandler) AddStickerToSet(ctx context.Context, req *AddStickerToSet) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// AnswerCallbackQuery implements answerCallbackQuery operation.
//
// Use this method to send answers to callback queries sent from [inline keyboards](https://core.
// telegram.org/bots/features#inline-keyboards). The answer will be displayed to the user as a
// notification at the top of the chat screen or as an alert. On success, _True_ is returned.
//
// POST /answerCallbackQuery
func (UnimplementedHandler) AnswerCallbackQuery(ctx context.Context, req *AnswerCallbackQuery) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// AnswerInlineQuery implements answerInlineQuery operation.
//
// Use this method to send answers to an inline query. On success, _True_ is returned.No more than
// **50** results per query are allowed.
//
// POST /answerInlineQuery
func (UnimplementedHandler) AnswerInlineQuery(ctx context.Context, req *AnswerInlineQuery) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// AnswerPreCheckoutQuery implements answerPreCheckoutQuery operation.
//
// Once the user has confirmed their payment and shipping details, the Bot API sends the final
// confirmation in the form of an [Update](https://core.telegram.org/bots/api#update) with the field
// _pre_checkout_query_. Use this method to respond to such pre-checkout queries. On success, _True_
// is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout
// query was sent.
//
// POST /answerPreCheckoutQuery
func (UnimplementedHandler) AnswerPreCheckoutQuery(ctx context.Context, req *AnswerPreCheckoutQuery) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// AnswerShippingQuery implements answerShippingQuery operation.
//
// If you sent an invoice requesting a shipping address and the parameter _is_flexible_ was specified,
//
//	the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a
//
// _shipping_query_ field to the bot. Use this method to reply to shipping queries. On success,
// _True_ is returned.
//
// POST /answerShippingQuery
func (UnimplementedHandler) AnswerShippingQuery(ctx context.Context, req *AnswerShippingQuery) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// AnswerWebAppQuery implements answerWebAppQuery operation.
//
// Use this method to set the result of an interaction with a [Web App](https://core.telegram.
// org/bots/webapps) and send a corresponding message on behalf of the user to the chat from which
// the query originated. On success, a [SentWebAppMessage](https://core.telegram.
// org/bots/api#sentwebappmessage) object is returned.
//
// POST /answerWebAppQuery
func (UnimplementedHandler) AnswerWebAppQuery(ctx context.Context, req *AnswerWebAppQuery) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// ApproveChatJoinRequest implements approveChatJoinRequest operation.
//
// Use this method to approve a chat join request. The bot must be an administrator in the chat for
// this to work and must have the _can_invite_users_ administrator right. Returns _True_ on success.
//
// POST /approveChatJoinRequest
func (UnimplementedHandler) ApproveChatJoinRequest(ctx context.Context, req *ApproveChatJoinRequest) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// BanChatMember implements banChatMember operation.
//
// Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups
// and channels, the user will not be able to return to the chat on their own using invite links, etc.
// , unless [unbanned](https://core.telegram.org/bots/api#unbanchatmember) first. The bot must be an
// administrator in the chat for this to work and must have the appropriate administrator rights.
// Returns _True_ on success.
//
// POST /banChatMember
func (UnimplementedHandler) BanChatMember(ctx context.Context, req *BanChatMember) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// BanChatSenderChat implements banChatSenderChat operation.
//
// Use this method to ban a channel chat in a supergroup or a channel. Until the chat is
// [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat
// won't be able to send messages on behalf of **any of their channels**. The bot must be an
// administrator in the supergroup or channel for this to work and must have the appropriate
// administrator rights. Returns _True_ on success.
//
// POST /banChatSenderChat
func (UnimplementedHandler) BanChatSenderChat(ctx context.Context, req *BanChatSenderChat) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// Close implements close operation.
//
// Use this method to close the bot instance before moving it from one local server to another. You
// need to delete the webhook before calling this method to ensure that the bot isn't launched again
// after server restart. The method will return error 429 in the first 10 minutes after the bot is
// launched. Returns _True_ on success. Requires no parameters.
//
// POST /close
func (UnimplementedHandler) Close(ctx context.Context) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// CloseForumTopic implements closeForumTopic operation.
//
// Use this method to close an open topic in a forum supergroup chat. The bot must be an
// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
// rights, unless it is the creator of the topic. Returns _True_ on success.
//
// POST /closeForumTopic
func (UnimplementedHandler) CloseForumTopic(ctx context.Context, req *CloseForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// CloseGeneralForumTopic implements closeGeneralForumTopic operation.
//
// Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an
// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
// rights. Returns _True_ on success.
//
// POST /closeGeneralForumTopic
func (UnimplementedHandler) CloseGeneralForumTopic(ctx context.Context, req *CloseGeneralForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// CopyMessage implements copyMessage operation.
//
// Use this method to copy messages of any kind. Service messages and invoice messages can't be
// copied. A quiz [poll](https://core.telegram.org/bots/api#poll) can be copied only if the value of
// the field _correct_option_id_ is known to the bot. The method is analogous to the method
// [forwardMessage](https://core.telegram.org/bots/api#forwardmessage), but the copied message
// doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.
// org/bots/api#messageid) of the sent message on success.
//
// POST /copyMessage
func (UnimplementedHandler) CopyMessage(ctx context.Context, req *CopyMessage) (r *ResultMessageId, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateChatInviteLink implements createChatInviteLink operation.
//
// Use this method to create an additional invite link for a chat. The bot must be an administrator
// in the chat for this to work and must have the appropriate administrator rights. The link can be
// revoked using the method [revokeChatInviteLink](https://core.telegram.
// org/bots/api#revokechatinvitelink). Returns the new invite link as [ChatInviteLink](https://core.
// telegram.org/bots/api#chatinvitelink) object.
//
// POST /createChatInviteLink
func (UnimplementedHandler) CreateChatInviteLink(ctx context.Context, req *CreateChatInviteLink) (r *ResultChatInviteLink, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateForumTopic implements createForumTopic operation.
//
// Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in
// the chat for this to work and must have the _can_manage_topics_ administrator rights. Returns
// information about the created topic as a [ForumTopic](https://core.telegram.
// org/bots/api#forumtopic) object.
//
// POST /createForumTopic
func (UnimplementedHandler) CreateForumTopic(ctx context.Context, req *CreateForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateInvoiceLink implements createInvoiceLink operation.
//
// Use this method to create a link for an invoice. Returns the created invoice link as _String_ on
// success.
//
// POST /createInvoiceLink
func (UnimplementedHandler) CreateInvoiceLink(ctx context.Context, req *CreateInvoiceLink) (r *ResultString, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateNewStickerSet implements createNewStickerSet operation.
//
// Use this method to create a new sticker set owned by a user. The bot will be able to edit the
// sticker set thus created. Returns _True_ on success.
//
// POST /createNewStickerSet
func (UnimplementedHandler) CreateNewStickerSet(ctx context.Context, req *CreateNewStickerSet) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// DeclineChatJoinRequest implements declineChatJoinRequest operation.
//
// Use this method to decline a chat join request. The bot must be an administrator in the chat for
// this to work and must have the _can_invite_users_ administrator right. Returns _True_ on success.
//
// POST /declineChatJoinRequest
func (UnimplementedHandler) DeclineChatJoinRequest(ctx context.Context, req *DeclineChatJoinRequest) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteChatPhoto implements deleteChatPhoto operation.
//
// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be
// an administrator in the chat for this to work and must have the appropriate administrator rights.
// Returns _True_ on success.
//
// POST /deleteChatPhoto
func (UnimplementedHandler) DeleteChatPhoto(ctx context.Context, req *DeleteChatPhoto) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteChatStickerSet implements deleteChatStickerSet operation.
//
// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator
// in the chat for this to work and must have the appropriate administrator rights. Use the field
// _can_set_sticker_set_ optionally returned in [getChat](https://core.telegram.org/bots/api#getchat)
// requests to check if the bot can use this method. Returns _True_ on success.
//
// POST /deleteChatStickerSet
func (UnimplementedHandler) DeleteChatStickerSet(ctx context.Context, req *DeleteChatStickerSet) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteForumTopic implements deleteForumTopic operation.
//
// Use this method to delete a forum topic along with all its messages in a forum supergroup chat.
// The bot must be an administrator in the chat for this to work and must have the
// _can_delete_messages_ administrator rights. Returns _True_ on success.
//
// POST /deleteForumTopic
func (UnimplementedHandler) DeleteForumTopic(ctx context.Context, req *DeleteForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteMessage implements deleteMessage operation.
//
// Use this method to delete a message, including service messages, with the following limitations:-
// A message can only be deleted if it was sent less than 48 hours ago.- Service messages about a
// supergroup, channel, or forum topic creation can't be deleted.- A dice message in a private chat
// can only be deleted if it was sent more than 24 hours ago.- Bots can delete outgoing messages in
// private chats, groups, and supergroups.- Bots can delete incoming messages in private chats.- Bots
// granted _can_post_messages_ permissions can delete outgoing messages in channels.- If the bot is
// an administrator of a group, it can delete any message there.- If the bot has
// _can_delete_messages_ permission in a supergroup or a channel, it can delete any message there.
// Returns _True_ on success.
//
// POST /deleteMessage
func (UnimplementedHandler) DeleteMessage(ctx context.Context, req *DeleteMessage) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteMyCommands implements deleteMyCommands operation.
//
// Use this method to delete the list of the bot's commands for the given scope and user language.
// After deletion, [higher level commands](https://core.telegram.
// org/bots/api#determining-list-of-commands) will be shown to affected users. Returns _True_ on
// success.
//
// POST /deleteMyCommands
func (UnimplementedHandler) DeleteMyCommands(ctx context.Context, req OptDeleteMyCommands) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteStickerFromSet implements deleteStickerFromSet operation.
//
// Use this method to delete a sticker from a set created by the bot. Returns _True_ on success.
//
// POST /deleteStickerFromSet
func (UnimplementedHandler) DeleteStickerFromSet(ctx context.Context, req *DeleteStickerFromSet) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteStickerSet implements deleteStickerSet operation.
//
// Use this method to delete a sticker set that was created by the bot. Returns _True_ on success.
//
// POST /deleteStickerSet
func (UnimplementedHandler) DeleteStickerSet(ctx context.Context, req *DeleteStickerSet) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteWebhook implements deleteWebhook operation.
//
// Use this method to remove webhook integration if you decide to switch back to
// [getUpdates](https://core.telegram.org/bots/api#getupdates). Returns _True_ on success.
//
// POST /deleteWebhook
func (UnimplementedHandler) DeleteWebhook(ctx context.Context, req OptDeleteWebhook) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// EditChatInviteLink implements editChatInviteLink operation.
//
// Use this method to edit a non-primary invite link created by the bot. The bot must be an
// administrator in the chat for this to work and must have the appropriate administrator rights.
// Returns the edited invite link as a [ChatInviteLink](https://core.telegram.
// org/bots/api#chatinvitelink) object.
//
// POST /editChatInviteLink
func (UnimplementedHandler) EditChatInviteLink(ctx context.Context, req *EditChatInviteLink) (r *ResultChatInviteLink, _ error) {
	return r, ht.ErrNotImplemented
}

// EditForumTopic implements editForumTopic operation.
//
// Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an
// administrator in the chat for this to work and must have _can_manage_topics_ administrator rights,
// unless it is the creator of the topic. Returns _True_ on success.
//
// POST /editForumTopic
func (UnimplementedHandler) EditForumTopic(ctx context.Context, req *EditForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// EditGeneralForumTopic implements editGeneralForumTopic operation.
//
// Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must
// be an administrator in the chat for this to work and must have _can_manage_topics_ administrator
// rights. Returns _True_ on success.
//
// POST /editGeneralForumTopic
func (UnimplementedHandler) EditGeneralForumTopic(ctx context.Context, req *EditGeneralForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// EditMessageCaption implements editMessageCaption operation.
//
// Use this method to edit captions of messages. On success, if the edited message is not an inline
// message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise
// _True_ is returned.
//
// POST /editMessageCaption
func (UnimplementedHandler) EditMessageCaption(ctx context.Context, req *EditMessageCaption) (r *ResultMessageOrBoolean, _ error) {
	return r, ht.ErrNotImplemented
}

// EditMessageLiveLocation implements editMessageLiveLocation operation.
//
// Use this method to edit live location messages. A location can be edited until its _live_period_
// expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.
// telegram.org/bots/api#stopmessagelivelocation). On success, if the edited message is not an inline
// message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise
// _True_ is returned.
//
// POST /editMessageLiveLocation
func (UnimplementedHandler) EditMessageLiveLocation(ctx context.Context, req *EditMessageLiveLocation) (r *ResultMessageOrBoolean, _ error) {
	return r, ht.ErrNotImplemented
}

// EditMessageMedia implements editMessageMedia operation.
//
// Use this method to edit animation, audio, document, photo, or video messages. If a message is part
// of a message album, then it can be edited only to an audio for audio albums, only to a document
// for document albums and to a photo or a video otherwise. When an inline message is edited, a new
// file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On
// success, if the edited message is not an inline message, the edited [Message](https://core.
// telegram.org/bots/api#message) is returned, otherwise _True_ is returned.
//
// POST /editMessageMedia
func (UnimplementedHandler) EditMessageMedia(ctx context.Context, req *EditMessageMedia) (r *ResultMessageOrBoolean, _ error) {
	return r, ht.ErrNotImplemented
}

// EditMessageReplyMarkup implements editMessageReplyMarkup operation.
//
// Use this method to edit only the reply markup of messages. On success, if the edited message is
// not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is
// returned, otherwise _True_ is returned.
//
// POST /editMessageReplyMarkup
func (UnimplementedHandler) EditMessageReplyMarkup(ctx context.Context, req *EditMessageReplyMarkup) (r *ResultMessageOrBoolean, _ error) {
	return r, ht.ErrNotImplemented
}

// EditMessageText implements editMessageText operation.
//
// Use this method to edit text and [game](https://core.telegram.org/bots/api#games) messages. On
// success, if the edited message is not an inline message, the edited [Message](https://core.
// telegram.org/bots/api#message) is returned, otherwise _True_ is returned.
//
// POST /editMessageText
func (UnimplementedHandler) EditMessageText(ctx context.Context, req *EditMessageText) (r *ResultMessageOrBoolean, _ error) {
	return r, ht.ErrNotImplemented
}

// ExportChatInviteLink implements exportChatInviteLink operation.
//
// Use this method to generate a new primary invite link for a chat; any previously generated primary
// link is revoked. The bot must be an administrator in the chat for this to work and must have the
// appropriate administrator rights. Returns the new invite link as _String_ on success.
//
// POST /exportChatInviteLink
func (UnimplementedHandler) ExportChatInviteLink(ctx context.Context, req *ExportChatInviteLink) (r *ResultString, _ error) {
	return r, ht.ErrNotImplemented
}

// ForwardMessage implements forwardMessage operation.
//
// Use this method to forward messages of any kind. Service messages can't be forwarded. On success,
// the sent [Message](https://core.telegram.org/bots/api#message) is returned.
//
// POST /forwardMessage
func (UnimplementedHandler) ForwardMessage(ctx context.Context, req *ForwardMessage) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// GetChat implements getChat operation.
//
// Use this method to get up to date information about the chat (current name of the user for
// one-on-one conversations, current username of a user, group or channel, etc.). Returns a
// [Chat](https://core.telegram.org/bots/api#chat) object on success.
//
// POST /getChat
func (UnimplementedHandler) GetChat(ctx context.Context, req *GetChat) (r *ResultChat, _ error) {
	return r, ht.ErrNotImplemented
}

// GetChatAdministrators implements getChatAdministrators operation.
//
// Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of
// [ChatMember](https://core.telegram.org/bots/api#chatmember) objects.
//
// POST /getChatAdministrators
func (UnimplementedHandler) GetChatAdministrators(ctx context.Context, req *GetChatAdministrators) (r *ResultArrayOfChatMember, _ error) {
	return r, ht.ErrNotImplemented
}

// GetChatMember implements getChatMember operation.
//
// Use this method to get information about a member of a chat. The method is only guaranteed to work
// for other users if the bot is an administrator in the chat. Returns a [ChatMember](https://core.
// telegram.org/bots/api#chatmember) object on success.
//
// POST /getChatMember
func (UnimplementedHandler) GetChatMember(ctx context.Context, req *GetChatMember) (r *ResultChatMember, _ error) {
	return r, ht.ErrNotImplemented
}

// GetChatMemberCount implements getChatMemberCount operation.
//
// Use this method to get the number of members in a chat. Returns _Int_ on success.
//
// POST /getChatMemberCount
func (UnimplementedHandler) GetChatMemberCount(ctx context.Context, req *GetChatMemberCount) (r *ResultInt, _ error) {
	return r, ht.ErrNotImplemented
}

// GetChatMenuButton implements getChatMenuButton operation.
//
// Use this method to get the current value of the bot's menu button in a private chat, or the
// default menu button. Returns [MenuButton](https://core.telegram.org/bots/api#menubutton) on
// success.
//
// POST /getChatMenuButton
func (UnimplementedHandler) GetChatMenuButton(ctx context.Context, req OptGetChatMenuButton) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCustomEmojiStickers implements getCustomEmojiStickers operation.
//
// Use this method to get information about custom emoji stickers by their identifiers. Returns an
// Array of [Sticker](https://core.telegram.org/bots/api#sticker) objects.
//
// POST /getCustomEmojiStickers
func (UnimplementedHandler) GetCustomEmojiStickers(ctx context.Context, req *GetCustomEmojiStickers) (r *ResultArrayOfSticker, _ error) {
	return r, ht.ErrNotImplemented
}

// GetFile implements getFile operation.
//
// Use this method to get basic information about a file and prepare it for downloading. For the
// moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.
// org/bots/api#file) object is returned. The file can then be downloaded via the link `https://api.
// telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is
// guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can
// be requested by calling [getFile](https://core.telegram.org/bots/api#getfile) again.
//
// POST /getFile
func (UnimplementedHandler) GetFile(ctx context.Context, req *GetFile) (r *ResultFile, _ error) {
	return r, ht.ErrNotImplemented
}

// GetForumTopicIconStickers implements getForumTopicIconStickers operation.
//
// Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user.
// Requires no parameters. Returns an Array of [Sticker](https://core.telegram.org/bots/api#sticker)
// objects.
//
// POST /getForumTopicIconStickers
func (UnimplementedHandler) GetForumTopicIconStickers(ctx context.Context) (r *ResultArrayOfSticker, _ error) {
	return r, ht.ErrNotImplemented
}

// GetGameHighScores implements getGameHighScores operation.
//
// Use this method to get data for high score tables. Will return the score of the specified user and
// several of their neighbors in a game. Returns an Array of [GameHighScore](https://core.telegram.
// org/bots/api#gamehighscore) objects.
//
// POST /getGameHighScores
func (UnimplementedHandler) GetGameHighScores(ctx context.Context, req *GetGameHighScores) (r *ResultArrayOfGameHighScore, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMe implements getMe operation.
//
// A simple method for testing your bot's authentication token. Requires no parameters. Returns basic
// information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.
//
// POST /getMe
func (UnimplementedHandler) GetMe(ctx context.Context) (r *ResultUser, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMyCommands implements getMyCommands operation.
//
// Use this method to get the current list of the bot's commands for the given scope and user
// language. Returns an Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) objects.
// If commands aren't set, an empty list is returned.
//
// POST /getMyCommands
func (UnimplementedHandler) GetMyCommands(ctx context.Context, req OptGetMyCommands) (r *ResultArrayOfBotCommand, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMyDefaultAdministratorRights implements getMyDefaultAdministratorRights operation.
//
// Use this method to get the current default administrator rights of the bot. Returns
// [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success.
//
// POST /getMyDefaultAdministratorRights
func (UnimplementedHandler) GetMyDefaultAdministratorRights(ctx context.Context, req OptGetMyDefaultAdministratorRights) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMyDescription implements getMyDescription operation.
//
// Use this method to get the current bot description for the given user language. Returns
// [BotDescription](https://core.telegram.org/bots/api#botdescription) on success.
//
// POST /getMyDescription
func (UnimplementedHandler) GetMyDescription(ctx context.Context, req OptGetMyDescription) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMyName implements getMyName operation.
//
// Use this method to get the current bot name for the given user language. Returns
// [BotName](https://core.telegram.org/bots/api#botname) on success.
//
// POST /getMyName
func (UnimplementedHandler) GetMyName(ctx context.Context, req OptGetMyName) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMyShortDescription implements getMyShortDescription operation.
//
// Use this method to get the current bot short description for the given user language. Returns
// [BotShortDescription](https://core.telegram.org/bots/api#botshortdescription) on success.
//
// POST /getMyShortDescription
func (UnimplementedHandler) GetMyShortDescription(ctx context.Context, req OptGetMyShortDescription) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// GetStickerSet implements getStickerSet operation.
//
// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.
// org/bots/api#stickerset) object is returned.
//
// POST /getStickerSet
func (UnimplementedHandler) GetStickerSet(ctx context.Context, req *GetStickerSet) (r *ResultStickerSet, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUpdates implements getUpdates operation.
//
// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.
// org/wiki/Push_technology#Long_polling)). Returns an Array of [Update](https://core.telegram.
// org/bots/api#update) objects.
//
// POST /getUpdates
func (UnimplementedHandler) GetUpdates(ctx context.Context, req OptGetUpdates) (r *ResultArrayOfUpdate, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserProfilePhotos implements getUserProfilePhotos operation.
//
// Use this method to get a list of profile pictures for a user. Returns a
// [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.
//
// POST /getUserProfilePhotos
func (UnimplementedHandler) GetUserProfilePhotos(ctx context.Context, req *GetUserProfilePhotos) (r *ResultUserProfilePhotos, _ error) {
	return r, ht.ErrNotImplemented
}

// GetWebhookInfo implements getWebhookInfo operation.
//
// Use this method to get current webhook status. Requires no parameters. On success, returns a
// [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object. If the bot is using
// [getUpdates](https://core.telegram.org/bots/api#getupdates), will return an object with the _url_
// field empty.
//
// POST /getWebhookInfo
func (UnimplementedHandler) GetWebhookInfo(ctx context.Context) (r *ResultWebhookInfo, _ error) {
	return r, ht.ErrNotImplemented
}

// HideGeneralForumTopic implements hideGeneralForumTopic operation.
//
// Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an
// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
// rights. The topic will be automatically closed if it was open. Returns _True_ on success.
//
// POST /hideGeneralForumTopic
func (UnimplementedHandler) HideGeneralForumTopic(ctx context.Context, req *HideGeneralForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// LeaveChat implements leaveChat operation.
//
// Use this method for your bot to leave a group, supergroup or channel. Returns _True_ on success.
//
// POST /leaveChat
func (UnimplementedHandler) LeaveChat(ctx context.Context, req *LeaveChat) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// LogOut implements logOut operation.
//
// Use this method to log out from the cloud Bot API server before launching the bot locally. You
// **must** log out the bot before running it locally, otherwise there is no guarantee that the bot
// will receive updates. After a successful call, you can immediately log in on a local server, but
// will not be able to log in back to the cloud Bot API server for 10 minutes. Returns _True_ on
// success. Requires no parameters.
//
// POST /logOut
func (UnimplementedHandler) LogOut(ctx context.Context) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// PinChatMessage implements pinChatMessage operation.
//
// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a
// private chat, the bot must be an administrator in the chat for this to work and must have the
// 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right
// in a channel. Returns _True_ on success.
//
// POST /pinChatMessage
func (UnimplementedHandler) PinChatMessage(ctx context.Context, req *PinChatMessage) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// PromoteChatMember implements promoteChatMember operation.
//
// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an
// administrator in the chat for this to work and must have the appropriate administrator rights.
// Pass _False_ for all boolean parameters to demote a user. Returns _True_ on success.
//
// POST /promoteChatMember
func (UnimplementedHandler) PromoteChatMember(ctx context.Context, req *PromoteChatMember) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// ReopenForumTopic implements reopenForumTopic operation.
//
// Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an
// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
// rights, unless it is the creator of the topic. Returns _True_ on success.
//
// POST /reopenForumTopic
func (UnimplementedHandler) ReopenForumTopic(ctx context.Context, req *ReopenForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// ReopenGeneralForumTopic implements reopenGeneralForumTopic operation.
//
// Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an
// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
// rights. The topic will be automatically unhidden if it was hidden. Returns _True_ on success.
//
// POST /reopenGeneralForumTopic
func (UnimplementedHandler) ReopenGeneralForumTopic(ctx context.Context, req *ReopenGeneralForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// RestrictChatMember implements restrictChatMember operation.
//
// Use this method to restrict a user in a supergroup. The bot must be an administrator in the
// supergroup for this to work and must have the appropriate administrator rights. Pass _True_ for
// all permissions to lift restrictions from a user. Returns _True_ on success.
//
// POST /restrictChatMember
func (UnimplementedHandler) RestrictChatMember(ctx context.Context, req *RestrictChatMember) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// RevokeChatInviteLink implements revokeChatInviteLink operation.
//
// Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new
// link is automatically generated. The bot must be an administrator in the chat for this to work and
// must have the appropriate administrator rights. Returns the revoked invite link as
// [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object.
//
// POST /revokeChatInviteLink
func (UnimplementedHandler) RevokeChatInviteLink(ctx context.Context, req *RevokeChatInviteLink) (r *ResultChatInviteLink, _ error) {
	return r, ht.ErrNotImplemented
}

// SendAnimation implements sendAnimation operation.
//
// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success,
// the sent [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently
// send animation files of up to 50 MB in size, this limit may be changed in the future.
//
// POST /sendAnimation
func (UnimplementedHandler) SendAnimation(ctx context.Context, req *SendAnimation) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendAudio implements sendAudio operation.
//
// For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api#sendvoice)
// method instead.
//
// POST /sendAudio
func (UnimplementedHandler) SendAudio(ctx context.Context, req *SendAudio) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendChatAction implements sendChatAction operation.
//
// We only recommend using this method when a response from the bot will take a **noticeable** amount
// of time to arrive.
//
// POST /sendChatAction
func (UnimplementedHandler) SendChatAction(ctx context.Context, req *SendChatAction) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SendContact implements sendContact operation.
//
// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.
// org/bots/api#message) is returned.
//
// POST /sendContact
func (UnimplementedHandler) SendContact(ctx context.Context, req *SendContact) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendDice implements sendDice operation.
//
// Use this method to send an animated emoji that will display a random value. On success, the sent
// [Message](https://core.telegram.org/bots/api#message) is returned.
//
// POST /sendDice
func (UnimplementedHandler) SendDice(ctx context.Context, req *SendDice) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendDocument implements sendDocument operation.
//
// Use this method to send general files. On success, the sent [Message](https://core.telegram.
// org/bots/api#message) is returned. Bots can currently send files of any type of up to 50 MB in
// size, this limit may be changed in the future.
//
// POST /sendDocument
func (UnimplementedHandler) SendDocument(ctx context.Context, req *SendDocument) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendGame implements sendGame operation.
//
// Use this method to send a game. On success, the sent [Message](https://core.telegram.
// org/bots/api#message) is returned.
//
// POST /sendGame
func (UnimplementedHandler) SendGame(ctx context.Context, req *SendGame) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendInvoice implements sendInvoice operation.
//
// Use this method to send invoices. On success, the sent [Message](https://core.telegram.
// org/bots/api#message) is returned.
//
// POST /sendInvoice
func (UnimplementedHandler) SendInvoice(ctx context.Context, req *SendInvoice) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendLocation implements sendLocation operation.
//
// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.
// org/bots/api#message) is returned.
//
// POST /sendLocation
func (UnimplementedHandler) SendLocation(ctx context.Context, req *SendLocation) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendMediaGroup implements sendMediaGroup operation.
//
// Use this method to send a group of photos, videos, documents or audios as an album. Documents and
// audio files can be only grouped in an album with messages of the same type. On success, an array
// of [Messages](https://core.telegram.org/bots/api#message) that were sent is returned.
//
// POST /sendMediaGroup
func (UnimplementedHandler) SendMediaGroup(ctx context.Context, req *SendMediaGroup) (r *ResultArrayOfMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendMessage implements sendMessage operation.
//
// Use this method to send text messages. On success, the sent [Message](https://core.telegram.
// org/bots/api#message) is returned.
//
// POST /sendMessage
func (UnimplementedHandler) SendMessage(ctx context.Context, req *SendMessage) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendPhoto implements sendPhoto operation.
//
// Use this method to send photos. On success, the sent [Message](https://core.telegram.
// org/bots/api#message) is returned.
//
// POST /sendPhoto
func (UnimplementedHandler) SendPhoto(ctx context.Context, req *SendPhoto) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendPoll implements sendPoll operation.
//
// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.
// org/bots/api#message) is returned.
//
// POST /sendPoll
func (UnimplementedHandler) SendPoll(ctx context.Context, req *SendPoll) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendSticker implements sendSticker operation.
//
// Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS,
//
//	or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers. On success,
//
// the sent [Message](https://core.telegram.org/bots/api#message) is returned.
//
// POST /sendSticker
func (UnimplementedHandler) SendSticker(ctx context.Context, req *SendSticker) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendVenue implements sendVenue operation.
//
// Use this method to send information about a venue. On success, the sent [Message](https://core.
// telegram.org/bots/api#message) is returned.
//
// POST /sendVenue
func (UnimplementedHandler) SendVenue(ctx context.Context, req *SendVenue) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendVideo implements sendVideo operation.
//
// Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be
// sent as [Document](https://core.telegram.org/bots/api#document)). On success, the sent
// [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently send video
// files of up to 50 MB in size, this limit may be changed in the future.
//
// POST /sendVideo
func (UnimplementedHandler) SendVideo(ctx context.Context, req *SendVideo) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendVideoNote implements sendVideoNote operation.
//
// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support
// rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On
// success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.
//
// POST /sendVideoNote
func (UnimplementedHandler) SendVideoNote(ctx context.Context, req *SendVideoNote) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SendVoice implements sendVoice operation.
//
// Use this method to send audio files, if you want Telegram clients to display the file as a
// playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS
// (other formats may be sent as [Audio](https://core.telegram.org/bots/api#audio) or
// [Document](https://core.telegram.org/bots/api#document)). On success, the sent
// [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently send voice
// messages of up to 50 MB in size, this limit may be changed in the future.
//
// POST /sendVoice
func (UnimplementedHandler) SendVoice(ctx context.Context, req *SendVoice) (r *ResultMessage, _ error) {
	return r, ht.ErrNotImplemented
}

// SetChatAdministratorCustomTitle implements setChatAdministratorCustomTitle operation.
//
// Use this method to set a custom title for an administrator in a supergroup promoted by the bot.
// Returns _True_ on success.
//
// POST /setChatAdministratorCustomTitle
func (UnimplementedHandler) SetChatAdministratorCustomTitle(ctx context.Context, req *SetChatAdministratorCustomTitle) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetChatDescription implements setChatDescription operation.
//
// Use this method to change the description of a group, a supergroup or a channel. The bot must be
// an administrator in the chat for this to work and must have the appropriate administrator rights.
// Returns _True_ on success.
//
// POST /setChatDescription
func (UnimplementedHandler) SetChatDescription(ctx context.Context, req *SetChatDescription) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetChatMenuButton implements setChatMenuButton operation.
//
// Use this method to change the bot's menu button in a private chat, or the default menu button.
// Returns _True_ on success.
//
// POST /setChatMenuButton
func (UnimplementedHandler) SetChatMenuButton(ctx context.Context, req OptSetChatMenuButton) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetChatPermissions implements setChatPermissions operation.
//
// Use this method to set default chat permissions for all members. The bot must be an administrator
// in the group or a supergroup for this to work and must have the _can_restrict_members_
// administrator rights. Returns _True_ on success.
//
// POST /setChatPermissions
func (UnimplementedHandler) SetChatPermissions(ctx context.Context, req *SetChatPermissions) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetChatPhoto implements setChatPhoto operation.
//
// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats.
//
//	The bot must be an administrator in the chat for this to work and must have the appropriate
//
// administrator rights. Returns _True_ on success.
//
// POST /setChatPhoto
func (UnimplementedHandler) SetChatPhoto(ctx context.Context, req *SetChatPhoto) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetChatStickerSet implements setChatStickerSet operation.
//
// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator
// in the chat for this to work and must have the appropriate administrator rights. Use the field
// _can_set_sticker_set_ optionally returned in [getChat](https://core.telegram.org/bots/api#getchat)
// requests to check if the bot can use this method. Returns _True_ on success.
//
// POST /setChatStickerSet
func (UnimplementedHandler) SetChatStickerSet(ctx context.Context, req *SetChatStickerSet) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetChatTitle implements setChatTitle operation.
//
// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot
// must be an administrator in the chat for this to work and must have the appropriate administrator
// rights. Returns _True_ on success.
//
// POST /setChatTitle
func (UnimplementedHandler) SetChatTitle(ctx context.Context, req *SetChatTitle) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetCustomEmojiStickerSetThumbnail implements setCustomEmojiStickerSetThumbnail operation.
//
// Use this method to set the thumbnail of a custom emoji sticker set. Returns _True_ on success.
//
// POST /setCustomEmojiStickerSetThumbnail
func (UnimplementedHandler) SetCustomEmojiStickerSetThumbnail(ctx context.Context, req *SetCustomEmojiStickerSetThumbnail) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetGameScore implements setGameScore operation.
//
// Use this method to set the score of the specified user in a game message. On success, if the
// message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is
// returned, otherwise _True_ is returned. Returns an error, if the new score is not greater than the
// user's current score in the chat and _force_ is _False_.
//
// POST /setGameScore
func (UnimplementedHandler) SetGameScore(ctx context.Context, req *SetGameScore) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetMyCommands implements setMyCommands operation.
//
// Use this method to change the list of the bot's commands. See [this manual](https://core.telegram.
// org/bots/features#commands) for more details about bot commands. Returns _True_ on success.
//
// POST /setMyCommands
func (UnimplementedHandler) SetMyCommands(ctx context.Context, req *SetMyCommands) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetMyDefaultAdministratorRights implements setMyDefaultAdministratorRights operation.
//
// Use this method to change the default administrator rights requested by the bot when it's added as
// an administrator to groups or channels. These rights will be suggested to users, but they are free
// to modify the list before adding the bot. Returns _True_ on success.
//
// POST /setMyDefaultAdministratorRights
func (UnimplementedHandler) SetMyDefaultAdministratorRights(ctx context.Context, req OptSetMyDefaultAdministratorRights) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetMyDescription implements setMyDescription operation.
//
// Use this method to change the bot's description, which is shown in the chat with the bot if the
// chat is empty. Returns _True_ on success.
//
// POST /setMyDescription
func (UnimplementedHandler) SetMyDescription(ctx context.Context, req OptSetMyDescription) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetMyName implements setMyName operation.
//
// Use this method to change the bot's name. Returns _True_ on success.
//
// POST /setMyName
func (UnimplementedHandler) SetMyName(ctx context.Context, req OptSetMyName) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetMyShortDescription implements setMyShortDescription operation.
//
// Use this method to change the bot's short description, which is shown on the bot's profile page
// and is sent together with the link when users share the bot. Returns _True_ on success.
//
// POST /setMyShortDescription
func (UnimplementedHandler) SetMyShortDescription(ctx context.Context, req OptSetMyShortDescription) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetPassportDataErrors implements setPassportDataErrors operation.
//
// Use this if the data submitted by the user doesn't satisfy the standards your service requires for
// any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan
// shows evidence of tampering, etc. Supply some details in the error message to make sure the user
// knows how to correct the issues.
//
// POST /setPassportDataErrors
func (UnimplementedHandler) SetPassportDataErrors(ctx context.Context, req *SetPassportDataErrors) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetStickerEmojiList implements setStickerEmojiList operation.
//
// Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The
// sticker must belong to a sticker set created by the bot. Returns _True_ on success.
//
// POST /setStickerEmojiList
func (UnimplementedHandler) SetStickerEmojiList(ctx context.Context, req *SetStickerEmojiList) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetStickerKeywords implements setStickerKeywords operation.
//
// Use this method to change search keywords assigned to a regular or custom emoji sticker. The
// sticker must belong to a sticker set created by the bot. Returns _True_ on success.
//
// POST /setStickerKeywords
func (UnimplementedHandler) SetStickerKeywords(ctx context.Context, req *SetStickerKeywords) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetStickerMaskPosition implements setStickerMaskPosition operation.
//
// Use this method to change the [mask position](https://core.telegram.org/bots/api#maskposition) of
// a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns
// _True_ on success.
//
// POST /setStickerMaskPosition
func (UnimplementedHandler) SetStickerMaskPosition(ctx context.Context, req *SetStickerMaskPosition) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetStickerPositionInSet implements setStickerPositionInSet operation.
//
// Use this method to move a sticker in a set created by the bot to a specific position. Returns
// _True_ on success.
//
// POST /setStickerPositionInSet
func (UnimplementedHandler) SetStickerPositionInSet(ctx context.Context, req *SetStickerPositionInSet) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetStickerSetThumbnail implements setStickerSetThumbnail operation.
//
// Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail
// file must match the format of the stickers in the set. Returns _True_ on success.
//
// POST /setStickerSetThumbnail
func (UnimplementedHandler) SetStickerSetThumbnail(ctx context.Context, req *SetStickerSetThumbnail) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetStickerSetTitle implements setStickerSetTitle operation.
//
// Use this method to set the title of a created sticker set. Returns _True_ on success.
//
// POST /setStickerSetTitle
func (UnimplementedHandler) SetStickerSetTitle(ctx context.Context, req *SetStickerSetTitle) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// SetWebhook implements setWebhook operation.
//
// If you'd like to make sure that the webhook was set by you, you can specify secret data in the
// parameter _secret_token_. If specified, the request will contain a header
// `X-Telegram-Bot-Api-Secret-Token` with the secret token as content.
//
// POST /setWebhook
func (UnimplementedHandler) SetWebhook(ctx context.Context, req *SetWebhook) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// StopMessageLiveLocation implements stopMessageLiveLocation operation.
//
// Use this method to stop updating a live location message before _live_period_ expires. On success,
// if the message is not an inline message, the edited [Message](https://core.telegram.
// org/bots/api#message) is returned, otherwise _True_ is returned.
//
// POST /stopMessageLiveLocation
func (UnimplementedHandler) StopMessageLiveLocation(ctx context.Context, req *StopMessageLiveLocation) (r *ResultMessageOrBoolean, _ error) {
	return r, ht.ErrNotImplemented
}

// StopPoll implements stopPoll operation.
//
// Use this method to stop a poll which was sent by the bot. On success, the stopped
// [Poll](https://core.telegram.org/bots/api#poll) is returned.
//
// POST /stopPoll
func (UnimplementedHandler) StopPoll(ctx context.Context, req *StopPoll) (r *ResultPoll, _ error) {
	return r, ht.ErrNotImplemented
}

// UnbanChatMember implements unbanChatMember operation.
//
// Use this method to unban a previously banned user in a supergroup or channel. The user will
// **not** return to the group or channel automatically, but will be able to join via link, etc. The
// bot must be an administrator for this to work. By default, this method guarantees that after the
// call the user is not a member of the chat, but will be able to join it. So if the user is a member
// of the chat they will also be **removed** from the chat. If you don't want this, use the parameter
// _only_if_banned_. Returns _True_ on success.
//
// POST /unbanChatMember
func (UnimplementedHandler) UnbanChatMember(ctx context.Context, req *UnbanChatMember) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// UnbanChatSenderChat implements unbanChatSenderChat operation.
//
// Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must
// be an administrator for this to work and must have the appropriate administrator rights. Returns
// _True_ on success.
//
// POST /unbanChatSenderChat
func (UnimplementedHandler) UnbanChatSenderChat(ctx context.Context, req *UnbanChatSenderChat) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// UnhideGeneralForumTopic implements unhideGeneralForumTopic operation.
//
// Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an
// administrator in the chat for this to work and must have the _can_manage_topics_ administrator
// rights. Returns _True_ on success.
//
// POST /unhideGeneralForumTopic
func (UnimplementedHandler) UnhideGeneralForumTopic(ctx context.Context, req *UnhideGeneralForumTopic) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// UnpinAllChatMessages implements unpinAllChatMessages operation.
//
// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat,
// the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages'
// administrator right in a supergroup or 'can_edit_messages' administrator right in a channel.
// Returns _True_ on success.
//
// POST /unpinAllChatMessages
func (UnimplementedHandler) UnpinAllChatMessages(ctx context.Context, req *UnpinAllChatMessages) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// UnpinAllForumTopicMessages implements unpinAllForumTopicMessages operation.
//
// Use this method to clear the list of pinned messages in a forum topic. The bot must be an
// administrator in the chat for this to work and must have the _can_pin_messages_ administrator
// right in the supergroup. Returns _True_ on success.
//
// POST /unpinAllForumTopicMessages
func (UnimplementedHandler) UnpinAllForumTopicMessages(ctx context.Context, req *UnpinAllForumTopicMessages) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// UnpinChatMessage implements unpinChatMessage operation.
//
// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not
// a private chat, the bot must be an administrator in the chat for this to work and must have the
// 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right
// in a channel. Returns _True_ on success.
//
// POST /unpinChatMessage
func (UnimplementedHandler) UnpinChatMessage(ctx context.Context, req *UnpinChatMessage) (r *Result, _ error) {
	return r, ht.ErrNotImplemented
}

// UploadStickerFile implements uploadStickerFile operation.
//
// Use this method to upload a file with a sticker for later use in the
// [createNewStickerSet](https://core.telegram.org/bots/api#createnewstickerset) and
// [addStickerToSet](https://core.telegram.org/bots/api#addstickertoset) methods (the file can be
// used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api#file) on
// success.
//
// POST /uploadStickerFile
func (UnimplementedHandler) UploadStickerFile(ctx context.Context, req *UploadStickerFile) (r *ResultFile, _ error) {
	return r, ht.ErrNotImplemented
}

// NewError creates *ErrorStatusCode from error returned by handler.
//
// Used for common default response.
func (UnimplementedHandler) NewError(ctx context.Context, err error) (r *ErrorStatusCode) {
	r = new(ErrorStatusCode)
	return r
}
