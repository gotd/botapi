{
	"components": {
		"responses": {
			"Error": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Error"
						}
					}
				},
				"description": "Method invocation error"
			},
			"Result": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Result"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultArrayOfBotCommand": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultArrayOfBotCommand"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultArrayOfChatMember": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultArrayOfChatMember"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultArrayOfGameHighScore": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultArrayOfGameHighScore"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultArrayOfMessage": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultArrayOfMessage"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultArrayOfUpdate": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultArrayOfUpdate"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultBotCommand": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultBotCommand"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultChat": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultChat"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultChatInviteLink": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultChatInviteLink"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultChatMember": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultChatMember"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultFile": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultFile"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultGameHighScore": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultGameHighScore"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultInt": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultInt"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultMessage": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultMessage"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultMessageId": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultMessageId"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultMessageOrBoolean": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultMessageOrBoolean"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultPoll": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultPoll"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultStickerSet": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultStickerSet"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultString": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultString"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultUpdate": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultUpdate"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultUser": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultUser"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultUserProfilePhotos": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultUserProfilePhotos"
						}
					}
				},
				"description": "Result of method invocation"
			},
			"ResultWebhookInfo": {
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/ResultWebhookInfo"
						}
					}
				},
				"description": "Result of method invocation"
			}
		},
		"schemas": {
			"Animation": {
				"description": "This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#animation"
				},
				"properties": {
					"duration": {
						"description": "Duration of the video in seconds as defined by sender",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_name": {
						"description": "_Optional_. Original animation filename as defined by sender",
						"type": "string"
					},
					"file_size": {
						"description": "_Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					},
					"height": {
						"description": "Video height as defined by sender",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"mime_type": {
						"description": "_Optional_. MIME type of the file as defined by sender",
						"type": "string"
					},
					"thumb": {
						"$ref": "#/components/schemas/PhotoSize"
					},
					"width": {
						"description": "Video width as defined by sender",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"file_id",
					"file_unique_id",
					"width",
					"height",
					"duration"
				],
				"type": "object"
			},
			"Audio": {
				"description": "This object represents an audio file to be treated as music by the Telegram clients.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#audio"
				},
				"properties": {
					"duration": {
						"description": "Duration of the audio in seconds as defined by sender",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_name": {
						"description": "_Optional_. Original filename as defined by sender",
						"type": "string"
					},
					"file_size": {
						"description": "_Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					},
					"mime_type": {
						"description": "_Optional_. MIME type of the file as defined by sender",
						"type": "string"
					},
					"performer": {
						"description": "_Optional_. Performer of the audio as defined by sender or by audio tags",
						"type": "string"
					},
					"thumb": {
						"$ref": "#/components/schemas/PhotoSize"
					},
					"title": {
						"description": "_Optional_. Title of the audio as defined by sender or by audio tags",
						"type": "string"
					}
				},
				"required": [
					"file_id",
					"file_unique_id",
					"duration"
				],
				"type": "object"
			},
			"BotCommand": {
				"description": "This object represents a bot command.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#botcommand"
				},
				"properties": {
					"command": {
						"description": "Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores",
						"maxLength": 32,
						"minLength": 1,
						"type": "string"
					},
					"description": {
						"description": "Description of the command; 1-256 characters",
						"maxLength": 256,
						"minLength": 1,
						"type": "string"
					}
				},
				"required": [
					"command",
					"description"
				],
				"type": "object"
			},
			"BotCommandScope": {
				"description": "This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported:",
				"discriminator": {
					"mapping": {
						"all_chat_administrators": "BotCommandScopeAllChatAdministrators",
						"all_group_chats": "BotCommandScopeAllGroupChats",
						"all_private_chats": "BotCommandScopeAllPrivateChats",
						"chat": "BotCommandScopeChat",
						"chat_administrators": "BotCommandScopeChatAdministrators",
						"chat_member": "BotCommandScopeChatMember",
						"default": "BotCommandScopeDefault"
					},
					"propertyName": "type"
				},
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#botcommandscope"
				},
				"oneOf": [
					{
						"$ref": "#/components/schemas/BotCommandScopeDefault"
					},
					{
						"$ref": "#/components/schemas/BotCommandScopeAllPrivateChats"
					},
					{
						"$ref": "#/components/schemas/BotCommandScopeAllGroupChats"
					},
					{
						"$ref": "#/components/schemas/BotCommandScopeAllChatAdministrators"
					},
					{
						"$ref": "#/components/schemas/BotCommandScopeChat"
					},
					{
						"$ref": "#/components/schemas/BotCommandScopeChatAdministrators"
					},
					{
						"$ref": "#/components/schemas/BotCommandScopeChatMember"
					}
				]
			},
			"BotCommandScopeAllChatAdministrators": {
				"description": "Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands, covering all group and supergroup chat administrators.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#botcommandscopeallchatadministrators"
				},
				"properties": {
					"type": {
						"default": "all_chat_administrators",
						"description": "Scope type, must be _all_chat_administrators_",
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object"
			},
			"BotCommandScopeAllGroupChats": {
				"description": "Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands, covering all group and supergroup chats.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#botcommandscopeallgroupchats"
				},
				"properties": {
					"type": {
						"default": "all_group_chats",
						"description": "Scope type, must be _all_group_chats_",
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object"
			},
			"BotCommandScopeAllPrivateChats": {
				"description": "Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands, covering all private chats.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#botcommandscopeallprivatechats"
				},
				"properties": {
					"type": {
						"default": "all_private_chats",
						"description": "Scope type, must be _all_private_chats_",
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object"
			},
			"BotCommandScopeChat": {
				"description": "Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands, covering a specific chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#botcommandscopechat"
				},
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"type": {
						"default": "chat",
						"description": "Scope type, must be _chat_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"chat_id"
				],
				"type": "object"
			},
			"BotCommandScopeChatAdministrators": {
				"description": "Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands, covering all administrators of a specific group or supergroup chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#botcommandscopechatadministrators"
				},
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"type": {
						"default": "chat_administrators",
						"description": "Scope type, must be _chat_administrators_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"chat_id"
				],
				"type": "object"
			},
			"BotCommandScopeChatMember": {
				"description": "Represents the [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands, covering a specific member of a group or supergroup chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#botcommandscopechatmember"
				},
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"type": {
						"default": "chat_member",
						"description": "Scope type, must be _chat_member_",
						"type": "string"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"type",
					"chat_id",
					"user_id"
				],
				"type": "object"
			},
			"BotCommandScopeDefault": {
				"description": "Represents the default [scope](https://core.telegram.org/bots/api#botcommandscope) of bot commands. Default commands are used if no commands with a [narrower scope](https://core.telegram.org/bots/api#determining-list-of-commands) are specified for the user.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#botcommandscopedefault"
				},
				"properties": {
					"type": {
						"default": "default",
						"description": "Scope type, must be _default_",
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object"
			},
			"CallbackGame": {
				"description": "A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#callbackgame"
				},
				"type": "object"
			},
			"CallbackQuery": {
				"description": "This object represents an incoming callback query from a callback button in an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field _message_ will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api#inline-mode)), the field _inline_message_id_ will be present. Exactly one of the fields _data_ or _game_short_name_ will be present.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#callbackquery"
				},
				"properties": {
					"chat_instance": {
						"description": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api#games)",
						"type": "string"
					},
					"data": {
						"description": "_Optional_. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data",
						"type": "string"
					},
					"from": {
						"$ref": "#/components/schemas/User"
					},
					"game_short_name": {
						"description": "_Optional_. Short name of a [Game](https://core.telegram.org/bots/api#games) to be returned, serves as the unique identifier for the game",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this query",
						"type": "string"
					},
					"inline_message_id": {
						"description": "_Optional_. Identifier of the message sent via the bot in inline mode, that originated the query",
						"type": "string"
					},
					"message": {
						"$ref": "#/components/schemas/Message"
					}
				},
				"required": [
					"id",
					"from",
					"chat_instance"
				],
				"type": "object"
			},
			"Chat": {
				"description": "This object represents a chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chat"
				},
				"properties": {
					"all_members_are_administrators": {
						"type": "boolean"
					},
					"bio": {
						"description": "_Optional_. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "string"
					},
					"can_set_sticker_set": {
						"description": "_Optional_. _True_, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "boolean"
					},
					"description": {
						"description": "_Optional_. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "string"
					},
					"first_name": {
						"description": "_Optional_. First name of the other party in a private chat",
						"type": "string"
					},
					"has_private_forwards": {
						"description": "_Optional_. _True_, if privacy settings of the other party in the private chat allows to use `tg://user?id=<user_id>` links only in chats with the user. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "boolean"
					},
					"has_protected_content": {
						"description": "_Optional_. _True_, if messages from the chat can't be forwarded to other chats. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "boolean"
					},
					"id": {
						"description": "Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier",
						"format": "int64",
						"type": "integer"
					},
					"invite_link": {
						"description": "_Optional_. Primary invite link, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "string"
					},
					"join_by_request": {
						"description": "_Optional_. _True_, if all users directly joining the supergroup need to be approved by supergroup administrators. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "boolean"
					},
					"join_to_send_messages": {
						"description": "_Optional_. _True_, if users need to join the supergroup before they can send messages. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "boolean"
					},
					"last_name": {
						"description": "_Optional_. Last name of the other party in a private chat",
						"type": "string"
					},
					"linked_chat_id": {
						"description": "_Optional_. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"format": "int64",
						"type": "integer"
					},
					"location": {
						"$ref": "#/components/schemas/ChatLocation"
					},
					"message_auto_delete_time": {
						"description": "_Optional_. The time after which all messages sent to the chat will be automatically deleted; in seconds. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "integer"
					},
					"permissions": {
						"$ref": "#/components/schemas/ChatPermissions"
					},
					"photo": {
						"$ref": "#/components/schemas/ChatPhoto"
					},
					"pinned_message": {
						"$ref": "#/components/schemas/Message"
					},
					"slow_mode_delay": {
						"description": "_Optional_. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "integer"
					},
					"sticker_set_name": {
						"description": "_Optional_. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api#getchat)",
						"type": "string"
					},
					"title": {
						"description": "_Optional_. Title, for supergroups, channels and group chats",
						"type": "string"
					},
					"type": {
						"description": "Type of chat, can be either `private`, `group`, `supergroup` or `channel`",
						"enum": [
							"private",
							"group",
							"supergroup",
							"channel"
						],
						"type": "string"
					},
					"username": {
						"description": "_Optional_. Username, for private chats, supergroups and channels if available",
						"type": "string"
					}
				},
				"required": [
					"id",
					"type"
				],
				"type": "object"
			},
			"ChatAdministratorRights": {
				"description": "Represents the rights of an administrator in a chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatadministratorrights"
				},
				"properties": {
					"can_change_info": {
						"description": "_True_, if the user is allowed to change the chat title, photo and other settings",
						"type": "boolean"
					},
					"can_delete_messages": {
						"description": "_True_, if the administrator can delete messages of other users",
						"type": "boolean"
					},
					"can_edit_messages": {
						"description": "_Optional_. _True_, if the administrator can edit messages of other users and can pin messages; channels only",
						"type": "boolean"
					},
					"can_invite_users": {
						"description": "_True_, if the user is allowed to invite new users to the chat",
						"type": "boolean"
					},
					"can_manage_chat": {
						"description": "_True_, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege",
						"type": "boolean"
					},
					"can_manage_video_chats": {
						"description": "_True_, if the administrator can manage video chats",
						"type": "boolean"
					},
					"can_pin_messages": {
						"description": "_Optional_. _True_, if the user is allowed to pin messages; groups and supergroups only",
						"type": "boolean"
					},
					"can_post_messages": {
						"description": "_Optional_. _True_, if the administrator can post in the channel; channels only",
						"type": "boolean"
					},
					"can_promote_members": {
						"description": "_True_, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)",
						"type": "boolean"
					},
					"can_restrict_members": {
						"description": "_True_, if the administrator can restrict, ban or unban chat members",
						"type": "boolean"
					},
					"is_anonymous": {
						"description": "_True_, if the user's presence in the chat is hidden",
						"type": "boolean"
					}
				},
				"required": [
					"is_anonymous",
					"can_manage_chat",
					"can_delete_messages",
					"can_manage_video_chats",
					"can_restrict_members",
					"can_promote_members",
					"can_change_info",
					"can_invite_users"
				],
				"type": "object"
			},
			"ChatInviteLink": {
				"description": "Represents an invite link for a chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatinvitelink"
				},
				"properties": {
					"creates_join_request": {
						"description": "_True_, if users joining the chat via the link need to be approved by chat administrators",
						"type": "boolean"
					},
					"creator": {
						"$ref": "#/components/schemas/User"
					},
					"expire_date": {
						"description": "_Optional_. Point in time (Unix timestamp) when the link will expire or has been expired",
						"type": "integer"
					},
					"invite_link": {
						"description": "The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with `...`",
						"type": "string"
					},
					"is_primary": {
						"description": "_True_, if the link is primary",
						"type": "boolean"
					},
					"is_revoked": {
						"description": "_True_, if the link is revoked",
						"type": "boolean"
					},
					"member_limit": {
						"description": "_Optional_. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999",
						"maximum": 99999,
						"minimum": 1,
						"type": "integer"
					},
					"name": {
						"description": "_Optional_. Invite link name",
						"type": "string"
					},
					"pending_join_request_count": {
						"description": "_Optional_. Number of pending join requests created using this link",
						"type": "integer"
					}
				},
				"required": [
					"invite_link",
					"creator",
					"creates_join_request",
					"is_primary",
					"is_revoked"
				],
				"type": "object"
			},
			"ChatJoinRequest": {
				"description": "Represents a join request sent to a chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatjoinrequest"
				},
				"properties": {
					"bio": {
						"description": "_Optional_. Bio of the user",
						"type": "string"
					},
					"chat": {
						"$ref": "#/components/schemas/Chat"
					},
					"date": {
						"description": "Date the request was sent in Unix time",
						"type": "integer"
					},
					"from": {
						"$ref": "#/components/schemas/User"
					},
					"invite_link": {
						"$ref": "#/components/schemas/ChatInviteLink"
					}
				},
				"required": [
					"chat",
					"from",
					"date"
				],
				"type": "object"
			},
			"ChatLocation": {
				"description": "Represents a location to which a chat is connected.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatlocation"
				},
				"properties": {
					"address": {
						"description": "Location address; 1-64 characters, as defined by the chat owner",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"location": {
						"$ref": "#/components/schemas/Location"
					}
				},
				"required": [
					"location",
					"address"
				],
				"type": "object"
			},
			"ChatMember": {
				"description": "This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported:",
				"discriminator": {
					"propertyName": "status"
				},
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatmember"
				},
				"oneOf": [
					{
						"$ref": "#/components/schemas/ChatMemberOwner"
					},
					{
						"$ref": "#/components/schemas/ChatMemberAdministrator"
					},
					{
						"$ref": "#/components/schemas/ChatMemberMember"
					},
					{
						"$ref": "#/components/schemas/ChatMemberRestricted"
					},
					{
						"$ref": "#/components/schemas/ChatMemberLeft"
					},
					{
						"$ref": "#/components/schemas/ChatMemberBanned"
					}
				]
			},
			"ChatMemberAdministrator": {
				"description": "Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that has some additional privileges.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatmemberadministrator"
				},
				"properties": {
					"can_be_edited": {
						"description": "_True_, if the bot is allowed to edit administrator privileges of that user",
						"type": "boolean"
					},
					"can_change_info": {
						"description": "_True_, if the user is allowed to change the chat title, photo and other settings",
						"type": "boolean"
					},
					"can_delete_messages": {
						"description": "_True_, if the administrator can delete messages of other users",
						"type": "boolean"
					},
					"can_edit_messages": {
						"description": "_Optional_. _True_, if the administrator can edit messages of other users and can pin messages; channels only",
						"type": "boolean"
					},
					"can_invite_users": {
						"description": "_True_, if the user is allowed to invite new users to the chat",
						"type": "boolean"
					},
					"can_manage_chat": {
						"description": "_True_, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege",
						"type": "boolean"
					},
					"can_manage_video_chats": {
						"description": "_True_, if the administrator can manage video chats",
						"type": "boolean"
					},
					"can_pin_messages": {
						"description": "_Optional_. _True_, if the user is allowed to pin messages; groups and supergroups only",
						"type": "boolean"
					},
					"can_post_messages": {
						"description": "_Optional_. _True_, if the administrator can post in the channel; channels only",
						"type": "boolean"
					},
					"can_promote_members": {
						"description": "_True_, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)",
						"type": "boolean"
					},
					"can_restrict_members": {
						"description": "_True_, if the administrator can restrict, ban or unban chat members",
						"type": "boolean"
					},
					"custom_title": {
						"description": "_Optional_. Custom title for this user",
						"type": "string"
					},
					"is_anonymous": {
						"description": "_True_, if the user's presence in the chat is hidden",
						"type": "boolean"
					},
					"status": {
						"description": "The member's status in the chat, always `administrator`",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"status",
					"user",
					"can_be_edited",
					"is_anonymous",
					"can_manage_chat",
					"can_delete_messages",
					"can_manage_video_chats",
					"can_restrict_members",
					"can_promote_members",
					"can_change_info",
					"can_invite_users"
				],
				"type": "object"
			},
			"ChatMemberBanned": {
				"description": "Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that was banned in the chat and can't return to the chat or view chat messages.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatmemberbanned"
				},
				"properties": {
					"status": {
						"description": "The member's status in the chat, always `kicked`",
						"type": "string"
					},
					"until_date": {
						"description": "Date when restrictions will be lifted for this user; unix time. If 0, then the user is banned forever",
						"type": "integer"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"status",
					"user",
					"until_date"
				],
				"type": "object"
			},
			"ChatMemberLeft": {
				"description": "Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that isn't currently a member of the chat, but may join it themselves.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatmemberleft"
				},
				"properties": {
					"status": {
						"description": "The member's status in the chat, always `left`",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"status",
					"user"
				],
				"type": "object"
			},
			"ChatMemberMember": {
				"description": "Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that has no additional privileges or restrictions.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatmembermember"
				},
				"properties": {
					"status": {
						"description": "The member's status in the chat, always `member`",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"status",
					"user"
				],
				"type": "object"
			},
			"ChatMemberOwner": {
				"description": "Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that owns the chat and has all administrator privileges.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatmemberowner"
				},
				"properties": {
					"custom_title": {
						"description": "_Optional_. Custom title for this user",
						"type": "string"
					},
					"is_anonymous": {
						"description": "_True_, if the user's presence in the chat is hidden",
						"type": "boolean"
					},
					"status": {
						"description": "The member's status in the chat, always `creator`",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"status",
					"user",
					"is_anonymous"
				],
				"type": "object"
			},
			"ChatMemberRestricted": {
				"description": "Represents a [chat member](https://core.telegram.org/bots/api#chatmember) that is under certain restrictions in the chat. Supergroups only.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatmemberrestricted"
				},
				"properties": {
					"can_add_web_page_previews": {
						"description": "_True_, if the user is allowed to add web page previews to their messages",
						"type": "boolean"
					},
					"can_change_info": {
						"description": "_True_, if the user is allowed to change the chat title, photo and other settings",
						"type": "boolean"
					},
					"can_invite_users": {
						"description": "_True_, if the user is allowed to invite new users to the chat",
						"type": "boolean"
					},
					"can_pin_messages": {
						"description": "_True_, if the user is allowed to pin messages",
						"type": "boolean"
					},
					"can_send_media_messages": {
						"description": "_True_, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes",
						"type": "boolean"
					},
					"can_send_messages": {
						"description": "_True_, if the user is allowed to send text messages, contacts, locations and venues",
						"type": "boolean"
					},
					"can_send_other_messages": {
						"description": "_True_, if the user is allowed to send animations, games, stickers and use inline bots",
						"type": "boolean"
					},
					"can_send_polls": {
						"description": "_True_, if the user is allowed to send polls",
						"type": "boolean"
					},
					"is_member": {
						"description": "_True_, if the user is a member of the chat at the moment of the request",
						"type": "boolean"
					},
					"status": {
						"description": "The member's status in the chat, always `restricted`",
						"type": "string"
					},
					"until_date": {
						"description": "Date when restrictions will be lifted for this user; unix time. If 0, then the user is restricted forever",
						"type": "integer"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"status",
					"user",
					"is_member",
					"can_change_info",
					"can_invite_users",
					"can_pin_messages",
					"can_send_messages",
					"can_send_media_messages",
					"can_send_polls",
					"can_send_other_messages",
					"can_add_web_page_previews",
					"until_date"
				],
				"type": "object"
			},
			"ChatMemberUpdated": {
				"description": "This object represents changes in the status of a chat member.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatmemberupdated"
				},
				"properties": {
					"chat": {
						"$ref": "#/components/schemas/Chat"
					},
					"date": {
						"description": "Date the change was done in Unix time",
						"type": "integer"
					},
					"from": {
						"$ref": "#/components/schemas/User"
					},
					"invite_link": {
						"$ref": "#/components/schemas/ChatInviteLink"
					},
					"new_chat_member": {
						"$ref": "#/components/schemas/ChatMember"
					},
					"old_chat_member": {
						"$ref": "#/components/schemas/ChatMember"
					}
				},
				"required": [
					"chat",
					"from",
					"date",
					"old_chat_member",
					"new_chat_member"
				],
				"type": "object"
			},
			"ChatPermissions": {
				"description": "Describes actions that a non-administrator user is allowed to take in a chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatpermissions"
				},
				"properties": {
					"can_add_web_page_previews": {
						"description": "_Optional_. _True_, if the user is allowed to add web page previews to their messages, implies can_send_media_messages",
						"type": "boolean"
					},
					"can_change_info": {
						"description": "_Optional_. _True_, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups",
						"type": "boolean"
					},
					"can_invite_users": {
						"description": "_Optional_. _True_, if the user is allowed to invite new users to the chat",
						"type": "boolean"
					},
					"can_pin_messages": {
						"description": "_Optional_. _True_, if the user is allowed to pin messages. Ignored in public supergroups",
						"type": "boolean"
					},
					"can_send_media_messages": {
						"description": "_Optional_. _True_, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages",
						"type": "boolean"
					},
					"can_send_messages": {
						"description": "_Optional_. _True_, if the user is allowed to send text messages, contacts, locations and venues",
						"type": "boolean"
					},
					"can_send_other_messages": {
						"description": "_Optional_. _True_, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages",
						"type": "boolean"
					},
					"can_send_polls": {
						"description": "_Optional_. _True_, if the user is allowed to send polls, implies can_send_messages",
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"ChatPhoto": {
				"description": "This object represents a chat photo.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#chatphoto"
				},
				"properties": {
					"big_file_id": {
						"description": "File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed",
						"type": "string"
					},
					"big_file_unique_id": {
						"description": "Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					},
					"small_file_id": {
						"description": "File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed",
						"type": "string"
					},
					"small_file_unique_id": {
						"description": "Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					}
				},
				"required": [
					"small_file_id",
					"small_file_unique_id",
					"big_file_id",
					"big_file_unique_id"
				],
				"type": "object"
			},
			"ChosenInlineResult": {
				"description": "Represents a [result](https://core.telegram.org/bots/api#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#choseninlineresult"
				},
				"properties": {
					"from": {
						"$ref": "#/components/schemas/User"
					},
					"inline_message_id": {
						"description": "_Optional_. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api#updating-messages) the message",
						"type": "string"
					},
					"location": {
						"$ref": "#/components/schemas/Location"
					},
					"query": {
						"description": "The query that was used to obtain the result",
						"type": "string"
					},
					"result_id": {
						"description": "The unique identifier for the result that was chosen",
						"type": "string"
					}
				},
				"required": [
					"result_id",
					"from",
					"query"
				],
				"type": "object"
			},
			"Contact": {
				"description": "This object represents a phone contact.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#contact"
				},
				"properties": {
					"first_name": {
						"description": "Contact's first name",
						"type": "string"
					},
					"last_name": {
						"description": "_Optional_. Contact's last name",
						"type": "string"
					},
					"phone_number": {
						"description": "Contact's phone number",
						"type": "string"
					},
					"user_id": {
						"description": "_Optional_. Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier",
						"format": "int64",
						"type": "integer"
					},
					"vcard": {
						"description": "_Optional_. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)",
						"type": "string"
					}
				},
				"required": [
					"phone_number",
					"first_name"
				],
				"type": "object"
			},
			"Dice": {
				"description": "This object represents an animated emoji that displays a random value.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#dice"
				},
				"properties": {
					"emoji": {
						"description": "Emoji on which the dice throw animation is based",
						"type": "string"
					},
					"value": {
						"description": "Value of the dice, 1-6 for `🎲`, `🎯` and `🎳` base emoji, 1-5 for `🏀` and `⚽` base emoji, 1-64 for `🎰` base emoji",
						"type": "integer"
					}
				},
				"required": [
					"emoji",
					"value"
				],
				"type": "object"
			},
			"Document": {
				"description": "This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api#photosize), [voice messages](https://core.telegram.org/bots/api#voice) and [audio files](https://core.telegram.org/bots/api#audio)).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#document"
				},
				"properties": {
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_name": {
						"description": "_Optional_. Original filename as defined by sender",
						"type": "string"
					},
					"file_size": {
						"description": "_Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					},
					"mime_type": {
						"description": "_Optional_. MIME type of the file as defined by sender",
						"type": "string"
					},
					"thumb": {
						"$ref": "#/components/schemas/PhotoSize"
					}
				},
				"required": [
					"file_id",
					"file_unique_id"
				],
				"type": "object"
			},
			"EncryptedCredentials": {
				"description": "Describes data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#encryptedcredentials"
				},
				"properties": {
					"data": {
						"description": "Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api#encryptedpassportelement) decryption and authentication",
						"type": "string"
					},
					"hash": {
						"description": "Base64-encoded data hash for data authentication",
						"type": "string"
					},
					"secret": {
						"description": "Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption",
						"type": "string"
					}
				},
				"required": [
					"data",
					"hash",
					"secret"
				],
				"type": "object"
			},
			"EncryptedPassportElement": {
				"description": "Describes documents or other Telegram Passport elements shared with the bot by the user.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#encryptedpassportelement"
				},
				"properties": {
					"data": {
						"description": "_Optional_. Base64-encoded encrypted Telegram Passport element data provided by the user, available for `personal_details`, `passport`, `driver_license`, `identity_card`, `internal_passport` and `address` types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api#encryptedcredentials)",
						"type": "string"
					},
					"email": {
						"description": "_Optional_. User's verified email address, available only for `email` type",
						"type": "string"
					},
					"files": {
						"description": "_Optional_. Array of encrypted files with documents provided by the user, available for `utility_bill`, `bank_statement`, `rental_agreement`, `passport_registration` and `temporary_registration` types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api#encryptedcredentials)",
						"items": {
							"$ref": "#/components/schemas/PassportFile"
						},
						"type": "array"
					},
					"front_side": {
						"$ref": "#/components/schemas/PassportFile"
					},
					"hash": {
						"description": "Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api#passportelementerrorunspecified)",
						"type": "string"
					},
					"phone_number": {
						"description": "_Optional_. User's verified phone number, available only for `phone_number` type",
						"type": "string"
					},
					"reverse_side": {
						"$ref": "#/components/schemas/PassportFile"
					},
					"selfie": {
						"$ref": "#/components/schemas/PassportFile"
					},
					"translation": {
						"description": "_Optional_. Array of encrypted files with translated versions of documents provided by the user. Available if requested for `passport`, `driver_license`, `identity_card`, `internal_passport`, `utility_bill`, `bank_statement`, `rental_agreement`, `passport_registration` and `temporary_registration` types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api#encryptedcredentials)",
						"items": {
							"$ref": "#/components/schemas/PassportFile"
						},
						"type": "array"
					},
					"type": {
						"description": "Element type. One of `personal_details`, `passport`, `driver_license`, `identity_card`, `internal_passport`, `address`, `utility_bill`, `bank_statement`, `rental_agreement`, `passport_registration`, `temporary_registration`, `phone_number`, `email`",
						"enum": [
							"personal_details",
							"passport",
							"driver_license",
							"identity_card",
							"internal_passport",
							"address",
							"utility_bill",
							"bank_statement",
							"rental_agreement",
							"passport_registration",
							"temporary_registration",
							"phone_number",
							"email"
						],
						"type": "string"
					}
				},
				"required": [
					"type",
					"hash"
				],
				"type": "object"
			},
			"Error": {
				"properties": {
					"description": {
						"type": "string"
					},
					"error_code": {
						"type": "integer"
					},
					"ok": {
						"default": false,
						"type": "boolean"
					},
					"parameters": {
						"$ref": "#/components/schemas/ResponseParameters"
					}
				},
				"required": [
					"ok",
					"error_code",
					"description"
				],
				"type": "object"
			},
			"File": {
				"description": "This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api#getfile).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#file"
				},
				"properties": {
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_path": {
						"description": "_Optional_. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file",
						"type": "string"
					},
					"file_size": {
						"description": "_Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					}
				},
				"required": [
					"file_id",
					"file_unique_id"
				],
				"type": "object"
			},
			"ForceReply": {
				"description": "Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](https://core.telegram.org/bots#privacy-mode).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#forcereply"
				},
				"properties": {
					"force_reply": {
						"description": "Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'",
						"type": "boolean"
					},
					"input_field_placeholder": {
						"description": "_Optional_. The placeholder to be shown in the input field when the reply is active; 1-64 characters",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"selective": {
						"description": "_Optional_. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the _text_ of the [Message](https://core.telegram.org/bots/api#message) object; 2) if the bot's message is a reply (has _reply_to_message_id_), sender of the original message",
						"type": "boolean"
					}
				},
				"required": [
					"force_reply"
				],
				"type": "object"
			},
			"Game": {
				"description": "This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#game"
				},
				"properties": {
					"animation": {
						"$ref": "#/components/schemas/Animation"
					},
					"description": {
						"description": "Description of the game",
						"type": "string"
					},
					"photo": {
						"description": "Photo that will be displayed in the game message in chats",
						"items": {
							"$ref": "#/components/schemas/PhotoSize"
						},
						"type": "array"
					},
					"text": {
						"description": "_Optional_. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api#editmessagetext). 0-4096 characters",
						"maxLength": 4096,
						"type": "string"
					},
					"text_entities": {
						"description": "_Optional_. Special entities that appear in _text_, such as usernames, URLs, bot commands, etc",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"title": {
						"description": "Title of the game",
						"type": "string"
					}
				},
				"required": [
					"title",
					"description",
					"photo"
				],
				"type": "object"
			},
			"GameHighScore": {
				"description": "This object represents one row of the high scores table for a game.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#gamehighscore"
				},
				"properties": {
					"position": {
						"description": "Position in high score table for the game",
						"type": "integer"
					},
					"score": {
						"description": "Score",
						"type": "integer"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"position",
					"user",
					"score"
				],
				"type": "object"
			},
			"ID": {
				"oneOf": [
					{
						"type": "string"
					},
					{
						"format": "int64",
						"type": "integer"
					}
				]
			},
			"InlineKeyboardButton": {
				"description": "This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinekeyboardbutton"
				},
				"properties": {
					"callback_data": {
						"description": "_Optional_. Data to be sent in a [callback query](https://core.telegram.org/bots/api#callbackquery) to the bot when button is pressed, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"callback_game": {
						"$ref": "#/components/schemas/CallbackGame"
					},
					"login_url": {
						"$ref": "#/components/schemas/LoginUrl"
					},
					"pay": {
						"description": "_Optional_. Specify _True_, to send a [Pay button](https://core.telegram.org/bots/api#payments).**NOTE:** This type of button **must** always be the first button in the first row and can only be used in invoice messages",
						"type": "boolean"
					},
					"switch_inline_query": {
						"description": "_Optional_. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted.**Note:** This offers an easy way for users to start using your bot in [inline mode](https://core.telegram.org/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [_switch_pm..._](https://core.telegram.org/bots/api#answerinlinequery) actions - in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen",
						"type": "string"
					},
					"switch_inline_query_current_chat": {
						"description": "_Optional_. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted.This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options",
						"type": "string"
					},
					"text": {
						"description": "Label text on the button",
						"type": "string"
					},
					"url": {
						"description": "_Optional_. HTTP or tg:// URL to be opened when the button is pressed. Links `tg://user?id=<user_id>` can be used to mention a user by their ID without using a username, if this is allowed by their privacy settings",
						"type": "string"
					},
					"web_app": {
						"$ref": "#/components/schemas/WebAppInfo"
					}
				},
				"required": [
					"text"
				],
				"type": "object"
			},
			"InlineKeyboardMarkup": {
				"description": "This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinekeyboardmarkup"
				},
				"properties": {
					"inline_keyboard": {
						"description": "Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api#inlinekeyboardbutton) objects",
						"items": {
							"items": {
								"$ref": "#/components/schemas/InlineKeyboardButton"
							},
							"type": "array"
						},
						"type": "array"
					}
				},
				"required": [
					"inline_keyboard"
				],
				"type": "object"
			},
			"InlineQuery": {
				"description": "This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequery"
				},
				"properties": {
					"chat_type": {
						"description": "_Optional_. Type of the chat from which the inline query was sent. Can be either `sender` for a private chat with the inline query sender, `private`, `group`, `supergroup`, or `channel`. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat",
						"enum": [
							"sender",
							"private",
							"group",
							"supergroup",
							"channel"
						],
						"type": "string"
					},
					"from": {
						"$ref": "#/components/schemas/User"
					},
					"id": {
						"description": "Unique identifier for this query",
						"type": "string"
					},
					"location": {
						"$ref": "#/components/schemas/Location"
					},
					"offset": {
						"description": "Offset of the results to be returned, can be controlled by the bot",
						"type": "string"
					},
					"query": {
						"description": "Text of the query (up to 256 characters)",
						"type": "string"
					}
				},
				"required": [
					"id",
					"from",
					"query",
					"offset"
				],
				"type": "object"
			},
			"InlineQueryResult": {
				"description": "This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:",
				"discriminator": {
					"mapping": {
						"article": "InlineQueryResultArticle",
						"audio": "InlineQueryResultAudio",
						"contact": "InlineQueryResultContact",
						"document": "InlineQueryResultDocument",
						"game": "InlineQueryResultGame",
						"gif": "InlineQueryResultGif",
						"location": "InlineQueryResultLocation",
						"mpeg4_gif": "InlineQueryResultMpeg4Gif",
						"photo": "InlineQueryResultPhoto",
						"sticker": "InlineQueryResultCachedSticker",
						"venue": "InlineQueryResultVenue",
						"video": "InlineQueryResultVideo",
						"voice": "InlineQueryResultVoice"
					},
					"propertyName": "type"
				},
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresult"
				},
				"oneOf": [
					{
						"$ref": "#/components/schemas/InlineQueryResultCachedAudio"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultCachedDocument"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultCachedGif"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultCachedMpeg4Gif"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultCachedPhoto"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultCachedSticker"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultCachedVideo"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultCachedVoice"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultArticle"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultAudio"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultContact"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultGame"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultDocument"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultGif"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultLocation"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultMpeg4Gif"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultPhoto"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultVenue"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultVideo"
					},
					{
						"$ref": "#/components/schemas/InlineQueryResultVoice"
					}
				]
			},
			"InlineQueryResultArticle": {
				"description": "Represents a link to an article or web page.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultarticle"
				},
				"properties": {
					"description": {
						"description": "_Optional_. Short description of the result",
						"type": "string"
					},
					"hide_url": {
						"description": "_Optional_. Pass _True_, if you don't want the URL to be shown in the message",
						"type": "boolean"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 Bytes",
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"thumb_height": {
						"description": "_Optional_. Thumbnail height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"thumb_url": {
						"description": "_Optional_. URL of the thumbnail for the result",
						"type": "string"
					},
					"thumb_width": {
						"description": "_Optional_. Thumbnail width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"title": {
						"description": "Title of the result",
						"type": "string"
					},
					"type": {
						"default": "article",
						"description": "Type of the result, must be _article_",
						"type": "string"
					},
					"url": {
						"description": "_Optional_. URL of the result",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"title",
					"input_message_content"
				],
				"type": "object"
			},
			"InlineQueryResultAudio": {
				"description": "Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the audio.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultaudio"
				},
				"properties": {
					"audio_duration": {
						"description": "_Optional_. Audio duration in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"audio_url": {
						"description": "A valid URL for the audio file",
						"type": "string"
					},
					"caption": {
						"description": "_Optional_. Caption, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"performer": {
						"description": "_Optional_. Performer",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"title": {
						"description": "Title",
						"type": "string"
					},
					"type": {
						"default": "audio",
						"description": "Type of the result, must be _audio_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"audio_url",
					"title"
				],
				"type": "object"
			},
			"InlineQueryResultCachedAudio": {
				"description": "Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the audio.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultcachedaudio"
				},
				"properties": {
					"audio_file_id": {
						"description": "A valid file identifier for the audio file",
						"type": "string"
					},
					"caption": {
						"description": "_Optional_. Caption, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"type": {
						"default": "audio",
						"description": "Type of the result, must be _audio_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"audio_file_id"
				],
				"type": "object"
			},
			"InlineQueryResultCachedDocument": {
				"description": "Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the file.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultcacheddocument"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the document to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"description": {
						"description": "_Optional_. Short description of the result",
						"type": "string"
					},
					"document_file_id": {
						"description": "A valid file identifier for the file",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"title": {
						"description": "Title for the result",
						"type": "string"
					},
					"type": {
						"default": "document",
						"description": "Type of the result, must be _document_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"title",
					"document_file_id"
				],
				"type": "object"
			},
			"InlineQueryResultCachedGif": {
				"description": "Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use _input_message_content_ to send a message with specified content instead of the animation.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultcachedgif"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the GIF file to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"gif_file_id": {
						"description": "A valid file identifier for the GIF file",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"title": {
						"description": "_Optional_. Title for the result",
						"type": "string"
					},
					"type": {
						"default": "gif",
						"description": "Type of the result, must be _gif_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"gif_file_id"
				],
				"type": "object"
			},
			"InlineQueryResultCachedMpeg4Gif": {
				"description": "Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the animation.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultcachedmpeg4gif"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"mpeg4_file_id": {
						"description": "A valid file identifier for the MPEG4 file",
						"type": "string"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"title": {
						"description": "_Optional_. Title for the result",
						"type": "string"
					},
					"type": {
						"default": "mpeg4_gif",
						"description": "Type of the result, must be _mpeg4_gif_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"mpeg4_file_id"
				],
				"type": "object"
			},
			"InlineQueryResultCachedPhoto": {
				"description": "Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the photo.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultcachedphoto"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the photo to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"description": {
						"description": "_Optional_. Short description of the result",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"photo_file_id": {
						"description": "A valid file identifier of the photo",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"title": {
						"description": "_Optional_. Title for the result",
						"type": "string"
					},
					"type": {
						"default": "photo",
						"description": "Type of the result, must be _photo_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"photo_file_id"
				],
				"type": "object"
			},
			"InlineQueryResultCachedSticker": {
				"description": "Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the sticker.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultcachedsticker"
				},
				"properties": {
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"sticker_file_id": {
						"description": "A valid file identifier of the sticker",
						"type": "string"
					},
					"type": {
						"default": "sticker",
						"description": "Type of the result, must be _sticker_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"sticker_file_id"
				],
				"type": "object"
			},
			"InlineQueryResultCachedVideo": {
				"description": "Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the video.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultcachedvideo"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the video to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"description": {
						"description": "_Optional_. Short description of the result",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"title": {
						"description": "Title for the result",
						"type": "string"
					},
					"type": {
						"default": "video",
						"description": "Type of the result, must be _video_",
						"type": "string"
					},
					"video_file_id": {
						"description": "A valid file identifier for the video file",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"video_file_id",
					"title"
				],
				"type": "object"
			},
			"InlineQueryResultCachedVoice": {
				"description": "Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the voice message.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultcachedvoice"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"title": {
						"description": "Voice message title",
						"type": "string"
					},
					"type": {
						"default": "voice",
						"description": "Type of the result, must be _voice_",
						"type": "string"
					},
					"voice_file_id": {
						"description": "A valid file identifier for the voice message",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"voice_file_id",
					"title"
				],
				"type": "object"
			},
			"InlineQueryResultContact": {
				"description": "Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the contact.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultcontact"
				},
				"properties": {
					"first_name": {
						"description": "Contact's first name",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 Bytes",
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"last_name": {
						"description": "_Optional_. Contact's last name",
						"type": "string"
					},
					"phone_number": {
						"description": "Contact's phone number",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"thumb_height": {
						"description": "_Optional_. Thumbnail height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"thumb_url": {
						"description": "_Optional_. URL of the thumbnail for the result",
						"type": "string"
					},
					"thumb_width": {
						"description": "_Optional_. Thumbnail width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"type": {
						"default": "contact",
						"description": "Type of the result, must be _contact_",
						"type": "string"
					},
					"vcard": {
						"description": "_Optional_. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes",
						"maxLength": 2048,
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"phone_number",
					"first_name"
				],
				"type": "object"
			},
			"InlineQueryResultDocument": {
				"description": "Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultdocument"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the document to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"description": {
						"description": "_Optional_. Short description of the result",
						"type": "string"
					},
					"document_url": {
						"description": "A valid URL for the file",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"mime_type": {
						"description": "MIME type of the content of the file, either `application/pdf` or `application/zip`",
						"type": "string"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"thumb_height": {
						"description": "_Optional_. Thumbnail height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"thumb_url": {
						"description": "_Optional_. URL of the thumbnail (JPEG only) for the file",
						"type": "string"
					},
					"thumb_width": {
						"description": "_Optional_. Thumbnail width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"title": {
						"description": "Title for the result",
						"type": "string"
					},
					"type": {
						"default": "document",
						"description": "Type of the result, must be _document_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"title",
					"document_url",
					"mime_type"
				],
				"type": "object"
			},
			"InlineQueryResultGame": {
				"description": "Represents a [Game](https://core.telegram.org/bots/api#games).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultgame"
				},
				"properties": {
					"game_short_name": {
						"description": "Short name of the game",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"type": {
						"default": "game",
						"description": "Type of the result, must be _game_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"game_short_name"
				],
				"type": "object"
			},
			"InlineQueryResultGif": {
				"description": "Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the animation.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultgif"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the GIF file to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"gif_duration": {
						"description": "_Optional_. Duration of the GIF in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"gif_height": {
						"description": "_Optional_. Height of the GIF",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"gif_url": {
						"description": "A valid URL for the GIF file. File size must not exceed 1MB",
						"type": "string"
					},
					"gif_width": {
						"description": "_Optional_. Width of the GIF",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"thumb_mime_type": {
						"description": "_Optional_. MIME type of the thumbnail, must be one of `image/jpeg`, `image/gif`, or `video/mp4`. Defaults to `image/jpeg`",
						"type": "string"
					},
					"thumb_url": {
						"description": "URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result",
						"type": "string"
					},
					"title": {
						"description": "_Optional_. Title for the result",
						"type": "string"
					},
					"type": {
						"default": "gif",
						"description": "Type of the result, must be _gif_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"gif_url",
					"thumb_url"
				],
				"type": "object"
			},
			"InlineQueryResultLocation": {
				"description": "Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the location.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultlocation"
				},
				"properties": {
					"heading": {
						"description": "_Optional_. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified",
						"maximum": 360,
						"minimum": 1,
						"type": "integer"
					},
					"horizontal_accuracy": {
						"description": "_Optional_. The radius of uncertainty for the location, measured in meters; 0-1500",
						"type": "number"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 Bytes",
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"latitude": {
						"description": "Location latitude in degrees",
						"type": "number"
					},
					"live_period": {
						"description": "_Optional_. Period in seconds for which the location can be updated, should be between 60 and 86400",
						"maximum": 86400,
						"minimum": 60,
						"type": "integer"
					},
					"longitude": {
						"description": "Location longitude in degrees",
						"type": "number"
					},
					"proximity_alert_radius": {
						"description": "_Optional_. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified",
						"maximum": 100000,
						"minimum": 1,
						"type": "integer"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"thumb_height": {
						"description": "_Optional_. Thumbnail height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"thumb_url": {
						"description": "_Optional_. URL of the thumbnail for the result",
						"type": "string"
					},
					"thumb_width": {
						"description": "_Optional_. Thumbnail width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"title": {
						"description": "Location title",
						"type": "string"
					},
					"type": {
						"default": "location",
						"description": "Type of the result, must be _location_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"latitude",
					"longitude",
					"title"
				],
				"type": "object"
			},
			"InlineQueryResultMpeg4Gif": {
				"description": "Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the animation.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultmpeg4gif"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"mpeg4_duration": {
						"description": "_Optional_. Video duration in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"mpeg4_height": {
						"description": "_Optional_. Video height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"mpeg4_url": {
						"description": "A valid URL for the MPEG4 file. File size must not exceed 1MB",
						"type": "string"
					},
					"mpeg4_width": {
						"description": "_Optional_. Video width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"thumb_mime_type": {
						"description": "_Optional_. MIME type of the thumbnail, must be one of `image/jpeg`, `image/gif`, or `video/mp4`. Defaults to `image/jpeg`",
						"type": "string"
					},
					"thumb_url": {
						"description": "URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result",
						"type": "string"
					},
					"title": {
						"description": "_Optional_. Title for the result",
						"type": "string"
					},
					"type": {
						"default": "mpeg4_gif",
						"description": "Type of the result, must be _mpeg4_gif_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"mpeg4_url",
					"thumb_url"
				],
				"type": "object"
			},
			"InlineQueryResultPhoto": {
				"description": "Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the photo.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultphoto"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the photo to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"description": {
						"description": "_Optional_. Short description of the result",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"photo_height": {
						"description": "_Optional_. Height of the photo",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"photo_url": {
						"description": "A valid URL of the photo. Photo must be in **JPEG** format. Photo size must not exceed 5MB",
						"type": "string"
					},
					"photo_width": {
						"description": "_Optional_. Width of the photo",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"thumb_url": {
						"description": "URL of the thumbnail for the photo",
						"type": "string"
					},
					"title": {
						"description": "_Optional_. Title for the result",
						"type": "string"
					},
					"type": {
						"default": "photo",
						"description": "Type of the result, must be _photo_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"photo_url",
					"thumb_url"
				],
				"type": "object"
			},
			"InlineQueryResultVenue": {
				"description": "Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the venue.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultvenue"
				},
				"properties": {
					"address": {
						"description": "Address of the venue",
						"type": "string"
					},
					"foursquare_id": {
						"description": "_Optional_. Foursquare identifier of the venue if known",
						"type": "string"
					},
					"foursquare_type": {
						"description": "_Optional_. Foursquare type of the venue, if known. (For example, `arts_entertainment/default`, `arts_entertainment/aquarium` or `food/icecream`.)",
						"type": "string"
					},
					"google_place_id": {
						"description": "_Optional_. Google Places identifier of the venue",
						"type": "string"
					},
					"google_place_type": {
						"description": "_Optional_. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 Bytes",
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"latitude": {
						"description": "Latitude of the venue location in degrees",
						"type": "number"
					},
					"longitude": {
						"description": "Longitude of the venue location in degrees",
						"type": "number"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"thumb_height": {
						"description": "_Optional_. Thumbnail height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"thumb_url": {
						"description": "_Optional_. URL of the thumbnail for the result",
						"type": "string"
					},
					"thumb_width": {
						"description": "_Optional_. Thumbnail width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"title": {
						"description": "Title of the venue",
						"type": "string"
					},
					"type": {
						"default": "venue",
						"description": "Type of the result, must be _venue_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"latitude",
					"longitude",
					"title",
					"address"
				],
				"type": "object"
			},
			"InlineQueryResultVideo": {
				"description": "Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the video.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultvideo"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the video to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"description": {
						"description": "_Optional_. Short description of the result",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"mime_type": {
						"description": "MIME type of the content of the video URL, `text/html` or `video/mp4`",
						"type": "string"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"thumb_url": {
						"description": "URL of the thumbnail (JPEG only) for the video",
						"type": "string"
					},
					"title": {
						"description": "Title for the result",
						"type": "string"
					},
					"type": {
						"default": "video",
						"description": "Type of the result, must be _video_",
						"type": "string"
					},
					"video_duration": {
						"description": "_Optional_. Video duration in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"video_height": {
						"description": "_Optional_. Video height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"video_url": {
						"description": "A valid URL for the embedded video player or video file",
						"type": "string"
					},
					"video_width": {
						"description": "_Optional_. Video width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"type",
					"id",
					"video_url",
					"mime_type",
					"thumb_url",
					"title"
				],
				"type": "object"
			},
			"InlineQueryResultVoice": {
				"description": "Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use _input_message_content_ to send a message with the specified content instead of the the voice message.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inlinequeryresultvoice"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"id": {
						"description": "Unique identifier for this result, 1-64 bytes",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"input_message_content": {
						"$ref": "#/components/schemas/InputMessageContent"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"title": {
						"description": "Recording title",
						"type": "string"
					},
					"type": {
						"default": "voice",
						"description": "Type of the result, must be _voice_",
						"type": "string"
					},
					"voice_duration": {
						"description": "_Optional_. Recording duration in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"voice_url": {
						"description": "A valid URL for the voice recording",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id",
					"voice_url",
					"title"
				],
				"type": "object"
			},
			"InputContactMessageContent": {
				"description": "Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of a contact message to be sent as the result of an inline query.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputcontactmessagecontent"
				},
				"properties": {
					"first_name": {
						"description": "Contact's first name",
						"type": "string"
					},
					"last_name": {
						"description": "_Optional_. Contact's last name",
						"type": "string"
					},
					"phone_number": {
						"description": "Contact's phone number",
						"type": "string"
					},
					"vcard": {
						"description": "_Optional_. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes",
						"maxLength": 2048,
						"type": "string"
					}
				},
				"required": [
					"phone_number",
					"first_name"
				],
				"type": "object"
			},
			"InputInvoiceMessageContent": {
				"description": "Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of an invoice message to be sent as the result of an inline query.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputinvoicemessagecontent"
				},
				"properties": {
					"currency": {
						"description": "Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies)",
						"type": "string"
					},
					"description": {
						"description": "Product description, 1-255 characters",
						"maxLength": 255,
						"minLength": 1,
						"type": "string"
					},
					"is_flexible": {
						"description": "_Optional_. Pass _True_, if the final price depends on the shipping method",
						"type": "boolean"
					},
					"max_tip_amount": {
						"description": "_Optional_. The maximum accepted amount for tips in the _smallest units_ of the currency (integer, **not** float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`. See the _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0",
						"type": "integer"
					},
					"need_email": {
						"description": "_Optional_. Pass _True_, if you require the user's email address to complete the order",
						"type": "boolean"
					},
					"need_name": {
						"description": "_Optional_. Pass _True_, if you require the user's full name to complete the order",
						"type": "boolean"
					},
					"need_phone_number": {
						"description": "_Optional_. Pass _True_, if you require the user's phone number to complete the order",
						"type": "boolean"
					},
					"need_shipping_address": {
						"description": "_Optional_. Pass _True_, if you require the user's shipping address to complete the order",
						"type": "boolean"
					},
					"payload": {
						"description": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes",
						"maxLength": 128,
						"minLength": 1,
						"type": "string"
					},
					"photo_height": {
						"description": "_Optional_. Photo height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"photo_size": {
						"description": "_Optional_. Photo size in bytes",
						"type": "integer"
					},
					"photo_url": {
						"description": "_Optional_. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service",
						"type": "string"
					},
					"photo_width": {
						"description": "_Optional_. Photo width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"prices": {
						"description": "Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)",
						"items": {
							"$ref": "#/components/schemas/LabeledPrice"
						},
						"type": "array"
					},
					"provider_data": {
						"description": "_Optional_. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider",
						"type": "string"
					},
					"provider_token": {
						"description": "Payment provider token, obtained via [@BotFather](https://t.me/botfather)",
						"type": "string"
					},
					"send_email_to_provider": {
						"description": "_Optional_. Pass _True_, if the user's email address should be sent to provider",
						"type": "boolean"
					},
					"send_phone_number_to_provider": {
						"description": "_Optional_. Pass _True_, if the user's phone number should be sent to provider",
						"type": "boolean"
					},
					"suggested_tip_amounts": {
						"description": "_Optional_. A JSON-serialized array of suggested amounts of tip in the _smallest units_ of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed _max_tip_amount_",
						"items": {
							"format": "int64",
							"type": "integer"
						},
						"type": "array"
					},
					"title": {
						"description": "Product name, 1-32 characters",
						"maxLength": 32,
						"minLength": 1,
						"type": "string"
					}
				},
				"required": [
					"title",
					"description",
					"payload",
					"provider_token",
					"currency",
					"prices"
				],
				"type": "object"
			},
			"InputLocationMessageContent": {
				"description": "Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of a location message to be sent as the result of an inline query.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputlocationmessagecontent"
				},
				"properties": {
					"heading": {
						"description": "_Optional_. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified",
						"maximum": 360,
						"minimum": 1,
						"type": "integer"
					},
					"horizontal_accuracy": {
						"description": "_Optional_. The radius of uncertainty for the location, measured in meters; 0-1500",
						"type": "number"
					},
					"latitude": {
						"description": "Latitude of the location in degrees",
						"type": "number"
					},
					"live_period": {
						"description": "_Optional_. Period in seconds for which the location can be updated, should be between 60 and 86400",
						"maximum": 86400,
						"minimum": 60,
						"type": "integer"
					},
					"longitude": {
						"description": "Longitude of the location in degrees",
						"type": "number"
					},
					"proximity_alert_radius": {
						"description": "_Optional_. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified",
						"maximum": 100000,
						"minimum": 1,
						"type": "integer"
					}
				},
				"required": [
					"latitude",
					"longitude"
				],
				"type": "object"
			},
			"InputMedia": {
				"description": "This object represents the content of a media message to be sent. It should be one of",
				"discriminator": {
					"mapping": {
						"animation": "InputMediaAnimation",
						"audio": "InputMediaAudio",
						"document": "InputMediaDocument",
						"photo": "InputMediaPhoto",
						"video": "InputMediaVideo"
					},
					"propertyName": "type"
				},
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputmedia"
				},
				"oneOf": [
					{
						"$ref": "#/components/schemas/InputMediaAnimation"
					},
					{
						"$ref": "#/components/schemas/InputMediaDocument"
					},
					{
						"$ref": "#/components/schemas/InputMediaAudio"
					},
					{
						"$ref": "#/components/schemas/InputMediaPhoto"
					},
					{
						"$ref": "#/components/schemas/InputMediaVideo"
					}
				]
			},
			"InputMediaAnimation": {
				"description": "Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputmediaanimation"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the animation to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"duration": {
						"description": "_Optional_. Animation duration in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"height": {
						"description": "_Optional_. Animation height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"media": {
						"description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under <file_attach_name> name. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"thumb": {
						"description": "_Optional_. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"type": {
						"default": "animation",
						"description": "Type of the result, must be _animation_",
						"type": "string"
					},
					"width": {
						"description": "_Optional_. Animation width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"type",
					"media"
				],
				"type": "object"
			},
			"InputMediaAudio": {
				"description": "Represents an audio file to be treated as music to be sent.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputmediaaudio"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the audio to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"duration": {
						"description": "_Optional_. Duration of the audio in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"media": {
						"description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under <file_attach_name> name. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"performer": {
						"description": "_Optional_. Performer of the audio",
						"type": "string"
					},
					"thumb": {
						"description": "_Optional_. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"title": {
						"description": "_Optional_. Title of the audio",
						"type": "string"
					},
					"type": {
						"default": "audio",
						"description": "Type of the result, must be _audio_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"media"
				],
				"type": "object"
			},
			"InputMediaDocument": {
				"description": "Represents a general file to be sent.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputmediadocument"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the document to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"disable_content_type_detection": {
						"description": "_Optional_. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always _True_, if the document is sent as part of an album",
						"type": "boolean"
					},
					"media": {
						"description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under <file_attach_name> name. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"thumb": {
						"description": "_Optional_. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"type": {
						"default": "document",
						"description": "Type of the result, must be _document_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"media"
				],
				"type": "object"
			},
			"InputMediaPhoto": {
				"description": "Represents a photo to be sent.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputmediaphoto"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the photo to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"media": {
						"description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under <file_attach_name> name. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"type": {
						"default": "photo",
						"description": "Type of the result, must be _photo_",
						"type": "string"
					}
				},
				"required": [
					"type",
					"media"
				],
				"type": "object"
			},
			"InputMediaVideo": {
				"description": "Represents a video to be sent.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputmediavideo"
				},
				"properties": {
					"caption": {
						"description": "_Optional_. Caption of the video to be sent, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. List of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"duration": {
						"description": "_Optional_. Video duration in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"height": {
						"description": "_Optional_. Video height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"media": {
						"description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass `attach://<file_attach_name>` to upload a new one using multipart/form-data under <file_attach_name> name. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"supports_streaming": {
						"description": "_Optional_. Pass _True_, if the uploaded video is suitable for streaming",
						"type": "boolean"
					},
					"thumb": {
						"description": "_Optional_. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"type": {
						"default": "video",
						"description": "Type of the result, must be _video_",
						"type": "string"
					},
					"width": {
						"description": "_Optional_. Video width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"type",
					"media"
				],
				"type": "object"
			},
			"InputMessageContent": {
				"description": "This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types:",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputmessagecontent"
				},
				"oneOf": [
					{
						"$ref": "#/components/schemas/InputTextMessageContent"
					},
					{
						"$ref": "#/components/schemas/InputLocationMessageContent"
					},
					{
						"$ref": "#/components/schemas/InputVenueMessageContent"
					},
					{
						"$ref": "#/components/schemas/InputContactMessageContent"
					},
					{
						"$ref": "#/components/schemas/InputInvoiceMessageContent"
					}
				]
			},
			"InputTextMessageContent": {
				"description": "Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of a text message to be sent as the result of an inline query.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputtextmessagecontent"
				},
				"properties": {
					"disable_web_page_preview": {
						"description": "_Optional_. Disables link previews for links in the sent message",
						"type": "boolean"
					},
					"entities": {
						"description": "_Optional_. List of special entities that appear in message text, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"message_text": {
						"description": "Text of the message to be sent, 1-4096 characters",
						"maxLength": 4096,
						"minLength": 1,
						"type": "string"
					},
					"parse_mode": {
						"description": "_Optional_. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					}
				},
				"required": [
					"message_text"
				],
				"type": "object"
			},
			"InputVenueMessageContent": {
				"description": "Represents the [content](https://core.telegram.org/bots/api#inputmessagecontent) of a venue message to be sent as the result of an inline query.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#inputvenuemessagecontent"
				},
				"properties": {
					"address": {
						"description": "Address of the venue",
						"type": "string"
					},
					"foursquare_id": {
						"description": "_Optional_. Foursquare identifier of the venue, if known",
						"type": "string"
					},
					"foursquare_type": {
						"description": "_Optional_. Foursquare type of the venue, if known. (For example, `arts_entertainment/default`, `arts_entertainment/aquarium` or `food/icecream`.)",
						"type": "string"
					},
					"google_place_id": {
						"description": "_Optional_. Google Places identifier of the venue",
						"type": "string"
					},
					"google_place_type": {
						"description": "_Optional_. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)",
						"type": "string"
					},
					"latitude": {
						"description": "Latitude of the venue in degrees",
						"type": "number"
					},
					"longitude": {
						"description": "Longitude of the venue in degrees",
						"type": "number"
					},
					"title": {
						"description": "Name of the venue",
						"type": "string"
					}
				},
				"required": [
					"latitude",
					"longitude",
					"title",
					"address"
				],
				"type": "object"
			},
			"Invoice": {
				"description": "This object contains basic information about an invoice.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#invoice"
				},
				"properties": {
					"currency": {
						"description": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code",
						"type": "string"
					},
					"description": {
						"description": "Product description",
						"type": "string"
					},
					"start_parameter": {
						"description": "Unique bot deep-linking parameter that can be used to generate this invoice",
						"type": "string"
					},
					"title": {
						"description": "Product name",
						"type": "string"
					},
					"total_amount": {
						"description": "Total price in the _smallest units_ of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)",
						"type": "integer"
					}
				},
				"required": [
					"title",
					"description",
					"start_parameter",
					"currency",
					"total_amount"
				],
				"type": "object"
			},
			"KeyboardButton": {
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#keyboardbutton"
				},
				"oneOf": [
					{
						"type": "string"
					},
					{
						"$ref": "#/components/schemas/KeyboardButtonObject"
					}
				]
			},
			"KeyboardButtonObject": {
				"description": "This object represents one button of the reply keyboard. For simple text buttons _String_ can be used instead of this object to specify text of the button. Optional fields _web_app_, _request_contact_, _request_location_, and _request_poll_ are mutually exclusive.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#keyboardbuttonobject"
				},
				"properties": {
					"request_contact": {
						"description": "_Optional_. If _True_, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only",
						"type": "boolean"
					},
					"request_location": {
						"description": "_Optional_. If _True_, the user's current location will be sent when the button is pressed. Available in private chats only",
						"type": "boolean"
					},
					"request_poll": {
						"$ref": "#/components/schemas/KeyboardButtonPollType"
					},
					"text": {
						"description": "Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed",
						"type": "string"
					},
					"web_app": {
						"$ref": "#/components/schemas/WebAppInfo"
					}
				},
				"required": [
					"text"
				],
				"type": "object"
			},
			"KeyboardButtonPollType": {
				"description": "This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#keyboardbuttonpolltype"
				},
				"properties": {
					"type": {
						"description": "_Optional_. If _quiz_ is passed, the user will be allowed to create only polls in the quiz mode. If _regular_ is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type",
						"type": "string"
					}
				},
				"type": "object"
			},
			"LabeledPrice": {
				"description": "This object represents a portion of the price for goods or services.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#labeledprice"
				},
				"properties": {
					"amount": {
						"description": "Price of the product in the _smallest units_ of the [currency](https://core.telegram.org/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)",
						"type": "integer"
					},
					"label": {
						"description": "Portion label",
						"type": "string"
					}
				},
				"required": [
					"label",
					"amount"
				],
				"type": "object"
			},
			"Location": {
				"description": "This object represents a point on the map.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#location"
				},
				"properties": {
					"heading": {
						"description": "_Optional_. The direction in which user is moving, in degrees; 1-360. For active live locations only",
						"maximum": 360,
						"minimum": 1,
						"type": "integer"
					},
					"horizontal_accuracy": {
						"description": "_Optional_. The radius of uncertainty for the location, measured in meters; 0-1500",
						"type": "number"
					},
					"latitude": {
						"description": "Latitude as defined by sender",
						"type": "number"
					},
					"live_period": {
						"description": "_Optional_. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only",
						"type": "integer"
					},
					"longitude": {
						"description": "Longitude as defined by sender",
						"type": "number"
					},
					"proximity_alert_radius": {
						"description": "_Optional_. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only",
						"type": "integer"
					}
				},
				"required": [
					"longitude",
					"latitude"
				],
				"type": "object"
			},
			"LoginUrl": {
				"description": "Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#loginurl"
				},
				"properties": {
					"bot_username": {
						"description": "_Optional_. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The _url_'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details",
						"type": "string"
					},
					"forward_text": {
						"description": "_Optional_. New text of the button in forwarded messages",
						"type": "string"
					},
					"request_write_access": {
						"description": "_Optional_. Pass _True_ to request the permission for your bot to send messages to the user",
						"type": "boolean"
					},
					"url": {
						"description": "An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).**NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization)",
						"type": "string"
					}
				},
				"required": [
					"url"
				],
				"type": "object"
			},
			"MaskPosition": {
				"description": "This object describes the position on faces where a mask should be placed by default.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#maskposition"
				},
				"properties": {
					"point": {
						"description": "The part of the face relative to which the mask should be placed. One of `forehead`, `eyes`, `mouth`, or `chin`",
						"type": "string"
					},
					"scale": {
						"description": "Mask scaling coefficient. For example, 2.0 means double size",
						"type": "number"
					},
					"x_shift": {
						"description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position",
						"type": "number"
					},
					"y_shift": {
						"description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position",
						"type": "number"
					}
				},
				"required": [
					"point",
					"x_shift",
					"y_shift",
					"scale"
				],
				"type": "object"
			},
			"MenuButton": {
				"description": "This object describes the bot's menu button in a private chat. It should be one of",
				"discriminator": {
					"mapping": {
						"commands": "MenuButtonCommands",
						"default": "MenuButtonDefault",
						"web_app": "MenuButtonWebApp"
					},
					"propertyName": "type"
				},
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#menubutton"
				},
				"oneOf": [
					{
						"$ref": "#/components/schemas/MenuButtonCommands"
					},
					{
						"$ref": "#/components/schemas/MenuButtonWebApp"
					},
					{
						"$ref": "#/components/schemas/MenuButtonDefault"
					}
				]
			},
			"MenuButtonCommands": {
				"description": "Represents a menu button, which opens the bot's list of commands.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#menubuttoncommands"
				},
				"properties": {
					"type": {
						"default": "commands",
						"description": "Type of the button, must be _commands_",
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object"
			},
			"MenuButtonDefault": {
				"description": "Describes that no specific value for the menu button was set.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#menubuttondefault"
				},
				"properties": {
					"type": {
						"default": "default",
						"description": "Type of the button, must be _default_",
						"type": "string"
					}
				},
				"required": [
					"type"
				],
				"type": "object"
			},
			"MenuButtonWebApp": {
				"description": "Represents a menu button, which launches a [Web App](https://core.telegram.org/bots/webapps).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#menubuttonwebapp"
				},
				"properties": {
					"text": {
						"description": "Text on the button",
						"type": "string"
					},
					"type": {
						"default": "web_app",
						"description": "Type of the button, must be _web_app_",
						"type": "string"
					},
					"web_app": {
						"$ref": "#/components/schemas/WebAppInfo"
					}
				},
				"required": [
					"type",
					"text",
					"web_app"
				],
				"type": "object"
			},
			"Message": {
				"description": "This object represents a message.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#message"
				},
				"properties": {
					"animation": {
						"$ref": "#/components/schemas/Animation"
					},
					"audio": {
						"$ref": "#/components/schemas/Audio"
					},
					"author_signature": {
						"description": "_Optional_. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator",
						"type": "string"
					},
					"caption": {
						"description": "_Optional_. Caption for the animation, audio, document, photo, video or voice",
						"type": "string"
					},
					"caption_entities": {
						"description": "_Optional_. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"channel_chat_created": {
						"description": "_Optional_. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel",
						"type": "boolean"
					},
					"chat": {
						"$ref": "#/components/schemas/Chat"
					},
					"connected_website": {
						"description": "_Optional_. The domain name of the website on which the user has logged in. [More about Telegram Login](https://core.telegram.org/widgets/login)",
						"type": "string"
					},
					"contact": {
						"$ref": "#/components/schemas/Contact"
					},
					"date": {
						"description": "Date the message was sent in Unix time",
						"type": "integer"
					},
					"delete_chat_photo": {
						"description": "_Optional_. Service message: the chat photo was deleted",
						"type": "boolean"
					},
					"dice": {
						"$ref": "#/components/schemas/Dice"
					},
					"document": {
						"$ref": "#/components/schemas/Document"
					},
					"edit_date": {
						"description": "_Optional_. Date the message was last edited in Unix time",
						"type": "integer"
					},
					"entities": {
						"description": "_Optional_. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"forward_date": {
						"description": "_Optional_. For forwarded messages, date the original message was sent in Unix time",
						"type": "integer"
					},
					"forward_from": {
						"$ref": "#/components/schemas/User"
					},
					"forward_from_chat": {
						"$ref": "#/components/schemas/Chat"
					},
					"forward_from_message_id": {
						"description": "_Optional_. For messages forwarded from channels, identifier of the original message in the channel",
						"type": "integer"
					},
					"forward_sender_name": {
						"description": "_Optional_. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages",
						"type": "string"
					},
					"forward_signature": {
						"description": "_Optional_. For forwarded messages that were originally sent in channels or by an anonymous chat administrator, signature of the message sender if present",
						"type": "string"
					},
					"from": {
						"$ref": "#/components/schemas/User"
					},
					"game": {
						"$ref": "#/components/schemas/Game"
					},
					"group_chat_created": {
						"description": "_Optional_. Service message: the group has been created",
						"type": "boolean"
					},
					"has_protected_content": {
						"description": "_Optional_. _True_, if the message can't be forwarded",
						"type": "boolean"
					},
					"invoice": {
						"$ref": "#/components/schemas/Invoice"
					},
					"is_automatic_forward": {
						"description": "_Optional_. _True_, if the message is a channel post that was automatically forwarded to the connected discussion group",
						"type": "boolean"
					},
					"left_chat_member": {
						"$ref": "#/components/schemas/User"
					},
					"left_chat_participant": {
						"$ref": "#/components/schemas/User"
					},
					"location": {
						"$ref": "#/components/schemas/Location"
					},
					"media_group_id": {
						"description": "_Optional_. The unique identifier of a media message group this message belongs to",
						"type": "string"
					},
					"message_auto_delete_timer_changed": {
						"$ref": "#/components/schemas/MessageAutoDeleteTimerChanged"
					},
					"message_id": {
						"description": "Unique message identifier inside this chat",
						"type": "integer"
					},
					"migrate_from_chat_id": {
						"description": "_Optional_. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier",
						"format": "int64",
						"type": "integer"
					},
					"migrate_to_chat_id": {
						"description": "_Optional_. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier",
						"format": "int64",
						"type": "integer"
					},
					"new_chat_member": {
						"$ref": "#/components/schemas/User"
					},
					"new_chat_members": {
						"description": "_Optional_. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)",
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					},
					"new_chat_participant": {
						"$ref": "#/components/schemas/User"
					},
					"new_chat_photo": {
						"description": "_Optional_. A chat photo was change to this value",
						"items": {
							"$ref": "#/components/schemas/PhotoSize"
						},
						"type": "array"
					},
					"new_chat_title": {
						"description": "_Optional_. A chat title was changed to this value",
						"type": "string"
					},
					"passport_data": {
						"$ref": "#/components/schemas/PassportData"
					},
					"photo": {
						"description": "_Optional_. Message is a photo, available sizes of the photo",
						"items": {
							"$ref": "#/components/schemas/PhotoSize"
						},
						"type": "array"
					},
					"pinned_message": {
						"$ref": "#/components/schemas/Message"
					},
					"poll": {
						"$ref": "#/components/schemas/Poll"
					},
					"proximity_alert_triggered": {
						"$ref": "#/components/schemas/ProximityAlertTriggered"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"reply_to_message": {
						"$ref": "#/components/schemas/Message"
					},
					"sender_chat": {
						"$ref": "#/components/schemas/Chat"
					},
					"sticker": {
						"$ref": "#/components/schemas/Sticker"
					},
					"successful_payment": {
						"$ref": "#/components/schemas/SuccessfulPayment"
					},
					"supergroup_chat_created": {
						"description": "_Optional_. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup",
						"type": "boolean"
					},
					"text": {
						"description": "_Optional_. For text messages, the actual UTF-8 text of the message",
						"type": "string"
					},
					"venue": {
						"$ref": "#/components/schemas/Venue"
					},
					"via_bot": {
						"$ref": "#/components/schemas/User"
					},
					"video": {
						"$ref": "#/components/schemas/Video"
					},
					"video_chat_ended": {
						"$ref": "#/components/schemas/VideoChatEnded"
					},
					"video_chat_participants_invited": {
						"$ref": "#/components/schemas/VideoChatParticipantsInvited"
					},
					"video_chat_scheduled": {
						"$ref": "#/components/schemas/VideoChatScheduled"
					},
					"video_chat_started": {
						"$ref": "#/components/schemas/VideoChatStarted"
					},
					"video_note": {
						"$ref": "#/components/schemas/VideoNote"
					},
					"voice": {
						"$ref": "#/components/schemas/Voice"
					},
					"web_app_data": {
						"$ref": "#/components/schemas/WebAppData"
					}
				},
				"required": [
					"message_id",
					"date",
					"chat"
				],
				"type": "object"
			},
			"MessageAutoDeleteTimerChanged": {
				"description": "This object represents a service message about a change in auto-delete timer settings.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#messageautodeletetimerchanged"
				},
				"properties": {
					"message_auto_delete_time": {
						"description": "New auto-delete time for messages in the chat; in seconds",
						"type": "integer"
					}
				},
				"required": [
					"message_auto_delete_time"
				],
				"type": "object"
			},
			"MessageEntity": {
				"description": "This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#messageentity"
				},
				"properties": {
					"language": {
						"description": "_Optional_. For `pre` only, the programming language of the entity text",
						"type": "string"
					},
					"length": {
						"description": "Length of the entity in UTF-16 code units",
						"type": "integer"
					},
					"offset": {
						"default": 0,
						"description": "Offset in UTF-16 code units to the start of the entity",
						"type": "integer"
					},
					"type": {
						"description": "Type of the entity. Currently, can be `mention` (`@username`), `hashtag` (`#hashtag`), `cashtag` (`$USD`), `bot_command` (`/start@jobs_bot`), `url` (`https://telegram.org`), `email` (`do-not-reply@telegram.org`), `phone_number` (`+1-212-555-0123`), `bold` (**bold text**), `italic` (_italic text_), `underline` (underlined text), `strikethrough` (strikethrough text), `spoiler` (spoiler message), `code` (monowidth string), `pre` (monowidth block), `text_link` (for clickable text URLs), `text_mention` (for users [without usernames](https://telegram.org/blog/edit#new-mentions))",
						"enum": [
							"mention",
							"hashtag",
							"cashtag",
							"bot_command",
							"url",
							"email",
							"phone_number",
							"bold",
							"italic",
							"underline",
							"strikethrough",
							"spoiler",
							"code",
							"pre",
							"text_link",
							"text_mention"
						],
						"type": "string"
					},
					"url": {
						"description": "_Optional_. For `text_link` only, URL that will be opened after user taps on the text",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"type",
					"offset",
					"length"
				],
				"type": "object"
			},
			"MessageId": {
				"description": "This object represents a unique message identifier.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#messageid"
				},
				"properties": {
					"message_id": {
						"description": "Unique message identifier",
						"type": "integer"
					}
				},
				"required": [
					"message_id"
				],
				"type": "object"
			},
			"OrderInfo": {
				"description": "This object represents information about an order.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#orderinfo"
				},
				"properties": {
					"email": {
						"description": "_Optional_. User email",
						"type": "string"
					},
					"name": {
						"description": "_Optional_. User name",
						"type": "string"
					},
					"phone_number": {
						"description": "_Optional_. User's phone number",
						"type": "string"
					},
					"shipping_address": {
						"$ref": "#/components/schemas/ShippingAddress"
					}
				},
				"type": "object"
			},
			"PassportData": {
				"description": "Describes Telegram Passport data shared with the bot by the user.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportdata"
				},
				"properties": {
					"credentials": {
						"$ref": "#/components/schemas/EncryptedCredentials"
					},
					"data": {
						"description": "Array with information about documents and other Telegram Passport elements that was shared with the bot",
						"items": {
							"$ref": "#/components/schemas/EncryptedPassportElement"
						},
						"type": "array"
					}
				},
				"required": [
					"data",
					"credentials"
				],
				"type": "object"
			},
			"PassportElementError": {
				"description": "This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:",
				"discriminator": {
					"mapping": {
						"data": "PassportElementErrorDataField",
						"file": "PassportElementErrorFile",
						"files": "PassportElementErrorFiles",
						"front_side": "PassportElementErrorFrontSide",
						"reverse_side": "PassportElementErrorReverseSide",
						"selfie": "PassportElementErrorSelfie",
						"translation_file": "PassportElementErrorTranslationFile",
						"translation_files": "PassportElementErrorTranslationFiles",
						"unspecified": "PassportElementErrorUnspecified"
					},
					"propertyName": "type"
				},
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerror"
				},
				"oneOf": [
					{
						"$ref": "#/components/schemas/PassportElementErrorDataField"
					},
					{
						"$ref": "#/components/schemas/PassportElementErrorFrontSide"
					},
					{
						"$ref": "#/components/schemas/PassportElementErrorReverseSide"
					},
					{
						"$ref": "#/components/schemas/PassportElementErrorSelfie"
					},
					{
						"$ref": "#/components/schemas/PassportElementErrorFile"
					},
					{
						"$ref": "#/components/schemas/PassportElementErrorFiles"
					},
					{
						"$ref": "#/components/schemas/PassportElementErrorTranslationFile"
					},
					{
						"$ref": "#/components/schemas/PassportElementErrorTranslationFiles"
					},
					{
						"$ref": "#/components/schemas/PassportElementErrorUnspecified"
					}
				]
			},
			"PassportElementErrorDataField": {
				"description": "Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerrordatafield"
				},
				"properties": {
					"data_hash": {
						"description": "Base64-encoded data hash",
						"type": "string"
					},
					"field_name": {
						"description": "Name of the data field which has the error",
						"type": "string"
					},
					"message": {
						"description": "Error message",
						"type": "string"
					},
					"source": {
						"default": "data",
						"description": "Error source, must be _data_",
						"type": "string"
					},
					"type": {
						"description": "The section of the user's Telegram Passport which has the error, one of `personal_details`, `passport`, `driver_license`, `identity_card`, `internal_passport`, `address`",
						"enum": [
							"personal_details",
							"passport",
							"driver_license",
							"identity_card",
							"internal_passport",
							"address"
						],
						"type": "string"
					}
				},
				"required": [
					"source",
					"type",
					"field_name",
					"data_hash",
					"message"
				],
				"type": "object"
			},
			"PassportElementErrorFile": {
				"description": "Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerrorfile"
				},
				"properties": {
					"file_hash": {
						"description": "Base64-encoded file hash",
						"type": "string"
					},
					"message": {
						"description": "Error message",
						"type": "string"
					},
					"source": {
						"default": "file",
						"description": "Error source, must be _file_",
						"type": "string"
					},
					"type": {
						"description": "The section of the user's Telegram Passport which has the issue, one of `utility_bill`, `bank_statement`, `rental_agreement`, `passport_registration`, `temporary_registration`",
						"enum": [
							"utility_bill",
							"bank_statement",
							"rental_agreement",
							"passport_registration",
							"temporary_registration"
						],
						"type": "string"
					}
				},
				"required": [
					"source",
					"type",
					"file_hash",
					"message"
				],
				"type": "object"
			},
			"PassportElementErrorFiles": {
				"description": "Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerrorfiles"
				},
				"properties": {
					"file_hashes": {
						"description": "List of base64-encoded file hashes",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"message": {
						"description": "Error message",
						"type": "string"
					},
					"source": {
						"default": "files",
						"description": "Error source, must be _files_",
						"type": "string"
					},
					"type": {
						"description": "The section of the user's Telegram Passport which has the issue, one of `utility_bill`, `bank_statement`, `rental_agreement`, `passport_registration`, `temporary_registration`",
						"enum": [
							"utility_bill",
							"bank_statement",
							"rental_agreement",
							"passport_registration",
							"temporary_registration"
						],
						"type": "string"
					}
				},
				"required": [
					"source",
					"type",
					"file_hashes",
					"message"
				],
				"type": "object"
			},
			"PassportElementErrorFrontSide": {
				"description": "Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerrorfrontside"
				},
				"properties": {
					"file_hash": {
						"description": "Base64-encoded hash of the file with the front side of the document",
						"type": "string"
					},
					"message": {
						"description": "Error message",
						"type": "string"
					},
					"source": {
						"default": "front_side",
						"description": "Error source, must be _front_side_",
						"type": "string"
					},
					"type": {
						"description": "The section of the user's Telegram Passport which has the issue, one of `passport`, `driver_license`, `identity_card`, `internal_passport`",
						"enum": [
							"passport",
							"driver_license",
							"identity_card",
							"internal_passport"
						],
						"type": "string"
					}
				},
				"required": [
					"source",
					"type",
					"file_hash",
					"message"
				],
				"type": "object"
			},
			"PassportElementErrorReverseSide": {
				"description": "Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerrorreverseside"
				},
				"properties": {
					"file_hash": {
						"description": "Base64-encoded hash of the file with the reverse side of the document",
						"type": "string"
					},
					"message": {
						"description": "Error message",
						"type": "string"
					},
					"source": {
						"default": "reverse_side",
						"description": "Error source, must be _reverse_side_",
						"type": "string"
					},
					"type": {
						"description": "The section of the user's Telegram Passport which has the issue, one of `driver_license`, `identity_card`",
						"enum": [
							"driver_license",
							"identity_card"
						],
						"type": "string"
					}
				},
				"required": [
					"source",
					"type",
					"file_hash",
					"message"
				],
				"type": "object"
			},
			"PassportElementErrorSelfie": {
				"description": "Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerrorselfie"
				},
				"properties": {
					"file_hash": {
						"description": "Base64-encoded hash of the file with the selfie",
						"type": "string"
					},
					"message": {
						"description": "Error message",
						"type": "string"
					},
					"source": {
						"default": "selfie",
						"description": "Error source, must be _selfie_",
						"type": "string"
					},
					"type": {
						"description": "The section of the user's Telegram Passport which has the issue, one of `passport`, `driver_license`, `identity_card`, `internal_passport`",
						"enum": [
							"passport",
							"driver_license",
							"identity_card",
							"internal_passport"
						],
						"type": "string"
					}
				},
				"required": [
					"source",
					"type",
					"file_hash",
					"message"
				],
				"type": "object"
			},
			"PassportElementErrorTranslationFile": {
				"description": "Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerrortranslationfile"
				},
				"properties": {
					"file_hash": {
						"description": "Base64-encoded file hash",
						"type": "string"
					},
					"message": {
						"description": "Error message",
						"type": "string"
					},
					"source": {
						"default": "translation_file",
						"description": "Error source, must be _translation_file_",
						"type": "string"
					},
					"type": {
						"description": "Type of element of the user's Telegram Passport which has the issue, one of `passport`, `driver_license`, `identity_card`, `internal_passport`, `utility_bill`, `bank_statement`, `rental_agreement`, `passport_registration`, `temporary_registration`",
						"enum": [
							"passport",
							"driver_license",
							"identity_card",
							"internal_passport",
							"utility_bill",
							"bank_statement",
							"rental_agreement",
							"passport_registration",
							"temporary_registration"
						],
						"type": "string"
					}
				},
				"required": [
					"source",
					"type",
					"file_hash",
					"message"
				],
				"type": "object"
			},
			"PassportElementErrorTranslationFiles": {
				"description": "Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerrortranslationfiles"
				},
				"properties": {
					"file_hashes": {
						"description": "List of base64-encoded file hashes",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"message": {
						"description": "Error message",
						"type": "string"
					},
					"source": {
						"default": "translation_files",
						"description": "Error source, must be _translation_files_",
						"type": "string"
					},
					"type": {
						"description": "Type of element of the user's Telegram Passport which has the issue, one of `passport`, `driver_license`, `identity_card`, `internal_passport`, `utility_bill`, `bank_statement`, `rental_agreement`, `passport_registration`, `temporary_registration`",
						"enum": [
							"passport",
							"driver_license",
							"identity_card",
							"internal_passport",
							"utility_bill",
							"bank_statement",
							"rental_agreement",
							"passport_registration",
							"temporary_registration"
						],
						"type": "string"
					}
				},
				"required": [
					"source",
					"type",
					"file_hashes",
					"message"
				],
				"type": "object"
			},
			"PassportElementErrorUnspecified": {
				"description": "Represents an issue in an unspecified place. The error is considered resolved when new data is added.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportelementerrorunspecified"
				},
				"properties": {
					"element_hash": {
						"description": "Base64-encoded element hash",
						"type": "string"
					},
					"message": {
						"description": "Error message",
						"type": "string"
					},
					"source": {
						"default": "unspecified",
						"description": "Error source, must be _unspecified_",
						"type": "string"
					},
					"type": {
						"description": "Type of element of the user's Telegram Passport which has the issue",
						"type": "string"
					}
				},
				"required": [
					"source",
					"type",
					"element_hash",
					"message"
				],
				"type": "object"
			},
			"PassportFile": {
				"description": "This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#passportfile"
				},
				"properties": {
					"file_date": {
						"description": "Unix time when the file was uploaded",
						"type": "integer"
					},
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_size": {
						"description": "File size in bytes",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					}
				},
				"required": [
					"file_id",
					"file_unique_id",
					"file_size",
					"file_date"
				],
				"type": "object"
			},
			"PhotoSize": {
				"description": "This object represents one size of a photo or a [file](https://core.telegram.org/bots/api#document) / [sticker](https://core.telegram.org/bots/api#sticker) thumbnail.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#photosize"
				},
				"properties": {
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_size": {
						"description": "_Optional_. File size in bytes",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					},
					"height": {
						"description": "Photo height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"width": {
						"description": "Photo width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"file_id",
					"file_unique_id",
					"width",
					"height"
				],
				"type": "object"
			},
			"Poll": {
				"description": "This object contains information about a poll.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#poll"
				},
				"properties": {
					"allows_multiple_answers": {
						"description": "_True_, if the poll allows multiple answers",
						"type": "boolean"
					},
					"close_date": {
						"description": "_Optional_. Point in time (Unix timestamp) when the poll will be automatically closed",
						"type": "integer"
					},
					"correct_option_id": {
						"description": "_Optional_. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot",
						"type": "integer"
					},
					"explanation": {
						"description": "_Optional_. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters",
						"maxLength": 200,
						"type": "string"
					},
					"explanation_entities": {
						"description": "_Optional_. Special entities like usernames, URLs, bot commands, etc. that appear in the _explanation_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"id": {
						"description": "Unique poll identifier",
						"type": "string"
					},
					"is_anonymous": {
						"description": "_True_, if the poll is anonymous",
						"type": "boolean"
					},
					"is_closed": {
						"description": "_True_, if the poll is closed",
						"type": "boolean"
					},
					"open_period": {
						"description": "_Optional_. Amount of time in seconds the poll will be active after creation",
						"type": "integer"
					},
					"options": {
						"description": "List of poll options",
						"items": {
							"$ref": "#/components/schemas/PollOption"
						},
						"type": "array"
					},
					"question": {
						"description": "Poll question, 1-300 characters",
						"maxLength": 300,
						"minLength": 1,
						"type": "string"
					},
					"total_voter_count": {
						"description": "Total number of users that voted in the poll",
						"type": "integer"
					},
					"type": {
						"description": "Poll type, currently can be `regular` or `quiz`",
						"enum": [
							"regular",
							"quiz"
						],
						"type": "string"
					}
				},
				"required": [
					"id",
					"question",
					"options",
					"total_voter_count",
					"is_closed",
					"is_anonymous",
					"type",
					"allows_multiple_answers"
				],
				"type": "object"
			},
			"PollAnswer": {
				"description": "This object represents an answer of a user in a non-anonymous poll.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#pollanswer"
				},
				"properties": {
					"option_ids": {
						"description": "0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote",
						"items": {
							"type": "integer"
						},
						"type": "array"
					},
					"poll_id": {
						"description": "Unique poll identifier",
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"poll_id",
					"user",
					"option_ids"
				],
				"type": "object"
			},
			"PollOption": {
				"description": "This object contains information about one answer option in a poll.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#polloption"
				},
				"properties": {
					"text": {
						"description": "Option text, 1-100 characters",
						"maxLength": 100,
						"minLength": 1,
						"type": "string"
					},
					"voter_count": {
						"description": "Number of users that voted for this option",
						"type": "integer"
					}
				},
				"required": [
					"text",
					"voter_count"
				],
				"type": "object"
			},
			"PreCheckoutQuery": {
				"description": "This object contains information about an incoming pre-checkout query.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#precheckoutquery"
				},
				"properties": {
					"currency": {
						"description": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code",
						"type": "string"
					},
					"from": {
						"$ref": "#/components/schemas/User"
					},
					"id": {
						"description": "Unique query identifier",
						"type": "string"
					},
					"invoice_payload": {
						"description": "Bot specified invoice payload",
						"type": "string"
					},
					"order_info": {
						"$ref": "#/components/schemas/OrderInfo"
					},
					"shipping_option_id": {
						"description": "_Optional_. Identifier of the shipping option chosen by the user",
						"type": "string"
					},
					"total_amount": {
						"description": "Total price in the _smallest units_ of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)",
						"type": "integer"
					}
				},
				"required": [
					"id",
					"from",
					"currency",
					"total_amount",
					"invoice_payload"
				],
				"type": "object"
			},
			"ProximityAlertTriggered": {
				"description": "This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#proximityalerttriggered"
				},
				"properties": {
					"distance": {
						"description": "The distance between the users",
						"type": "integer"
					},
					"traveler": {
						"$ref": "#/components/schemas/User"
					},
					"watcher": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"traveler",
					"watcher",
					"distance"
				],
				"type": "object"
			},
			"ReplyKeyboardMarkup": {
				"description": "This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#replykeyboardmarkup"
				},
				"properties": {
					"input_field_placeholder": {
						"description": "_Optional_. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"keyboard": {
						"description": "Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api#keyboardbutton) objects",
						"items": {
							"items": {
								"$ref": "#/components/schemas/KeyboardButton"
							},
							"type": "array"
						},
						"type": "array"
					},
					"one_time_keyboard": {
						"description": "_Optional_. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to _false_",
						"type": "boolean"
					},
					"resize_keyboard": {
						"description": "_Optional_. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to _false_, in which case the custom keyboard is always of the same height as the app's standard keyboard",
						"type": "boolean"
					},
					"selective": {
						"description": "_Optional_. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the _text_ of the [Message](https://core.telegram.org/bots/api#message) object; 2) if the bot's message is a reply (has _reply_to_message_id_), sender of the original message._Example:_ A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard",
						"type": "boolean"
					}
				},
				"required": [
					"keyboard"
				],
				"type": "object"
			},
			"ReplyKeyboardRemove": {
				"description": "Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api#replykeyboardmarkup)).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#replykeyboardremove"
				},
				"properties": {
					"remove_keyboard": {
						"description": "Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use _one_time_keyboard_ in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api#replykeyboardmarkup))",
						"type": "boolean"
					},
					"selective": {
						"description": "_Optional_. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the _text_ of the [Message](https://core.telegram.org/bots/api#message) object; 2) if the bot's message is a reply (has _reply_to_message_id_), sender of the original message._Example:_ A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet",
						"type": "boolean"
					}
				},
				"required": [
					"remove_keyboard"
				],
				"type": "object"
			},
			"ResponseParameters": {
				"description": "Describes why a request was unsuccessful.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#responseparameters"
				},
				"properties": {
					"migrate_to_chat_id": {
						"description": "_Optional_. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier",
						"format": "int64",
						"type": "integer"
					},
					"retry_after": {
						"description": "_Optional_. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"Result": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"type": "boolean"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultArrayOfBotCommand": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"items": {
							"$ref": "#/components/schemas/BotCommand"
						},
						"type": "array"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultArrayOfChatMember": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"items": {
							"$ref": "#/components/schemas/ChatMember"
						},
						"type": "array"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultArrayOfGameHighScore": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"items": {
							"$ref": "#/components/schemas/GameHighScore"
						},
						"type": "array"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultArrayOfMessage": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"items": {
							"$ref": "#/components/schemas/Message"
						},
						"type": "array"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultArrayOfUpdate": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"items": {
							"$ref": "#/components/schemas/Update"
						},
						"type": "array"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultBotCommand": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/BotCommand"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultChat": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/Chat"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultChatInviteLink": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/ChatInviteLink"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultChatMember": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/ChatMember"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultFile": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/File"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultGameHighScore": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/GameHighScore"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultInt": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"type": "integer"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultMessage": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/Message"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultMessageId": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/MessageId"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultMessageOrBoolean": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/Message"
							},
							{
								"type": "boolean"
							}
						]
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultPoll": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/Poll"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultStickerSet": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/StickerSet"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultString": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"type": "string"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultUpdate": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/Update"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultUser": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/User"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultUserProfilePhotos": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/UserProfilePhotos"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"ResultWebhookInfo": {
				"properties": {
					"ok": {
						"default": true,
						"type": "boolean"
					},
					"result": {
						"$ref": "#/components/schemas/WebhookInfo"
					}
				},
				"required": [
					"ok"
				],
				"type": "object"
			},
			"SendReplyMarkup": {
				"oneOf": [
					{
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					{
						"$ref": "#/components/schemas/ReplyKeyboardMarkup"
					},
					{
						"$ref": "#/components/schemas/ReplyKeyboardRemove"
					},
					{
						"$ref": "#/components/schemas/ForceReply"
					}
				]
			},
			"SentWebAppMessage": {
				"description": "Describes an inline message sent by a [Web App](https://core.telegram.org/bots/webapps) on behalf of a user.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sentwebappmessage"
				},
				"properties": {
					"inline_message_id": {
						"description": "_Optional_. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api#inlinekeyboardmarkup) attached to the message",
						"type": "string"
					}
				},
				"type": "object"
			},
			"ShippingAddress": {
				"description": "This object represents a shipping address.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#shippingaddress"
				},
				"properties": {
					"city": {
						"description": "City",
						"type": "string"
					},
					"country_code": {
						"description": "Two-letter ISO 3166-1 alpha-2 country code",
						"type": "string"
					},
					"post_code": {
						"description": "Address post code",
						"type": "string"
					},
					"state": {
						"description": "State, if applicable",
						"type": "string"
					},
					"street_line1": {
						"description": "First line for the address",
						"type": "string"
					},
					"street_line2": {
						"description": "Second line for the address",
						"type": "string"
					}
				},
				"required": [
					"country_code",
					"state",
					"city",
					"street_line1",
					"street_line2",
					"post_code"
				],
				"type": "object"
			},
			"ShippingOption": {
				"description": "This object represents one shipping option.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#shippingoption"
				},
				"properties": {
					"id": {
						"description": "Shipping option identifier",
						"type": "string"
					},
					"prices": {
						"description": "List of price portions",
						"items": {
							"$ref": "#/components/schemas/LabeledPrice"
						},
						"type": "array"
					},
					"title": {
						"description": "Option title",
						"type": "string"
					}
				},
				"required": [
					"id",
					"title",
					"prices"
				],
				"type": "object"
			},
			"ShippingQuery": {
				"description": "This object contains information about an incoming shipping query.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#shippingquery"
				},
				"properties": {
					"from": {
						"$ref": "#/components/schemas/User"
					},
					"id": {
						"description": "Unique query identifier",
						"type": "string"
					},
					"invoice_payload": {
						"description": "Bot specified invoice payload",
						"type": "string"
					},
					"shipping_address": {
						"$ref": "#/components/schemas/ShippingAddress"
					}
				},
				"required": [
					"id",
					"from",
					"invoice_payload",
					"shipping_address"
				],
				"type": "object"
			},
			"Sticker": {
				"description": "This object represents a sticker.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sticker"
				},
				"properties": {
					"emoji": {
						"description": "_Optional_. Emoji associated with the sticker",
						"type": "string"
					},
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_size": {
						"description": "_Optional_. File size in bytes",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					},
					"height": {
						"description": "Sticker height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"is_animated": {
						"description": "_True_, if the sticker is [animated](https://telegram.org/blog/animated-stickers)",
						"type": "boolean"
					},
					"is_video": {
						"description": "_True_, if the sticker is a [video sticker](https://telegram.org/blog/video-stickers-better-reactions)",
						"type": "boolean"
					},
					"mask_position": {
						"$ref": "#/components/schemas/MaskPosition"
					},
					"premium_animation": {
						"$ref": "#/components/schemas/File"
					},
					"set_name": {
						"description": "_Optional_. Name of the sticker set to which the sticker belongs",
						"type": "string"
					},
					"thumb": {
						"$ref": "#/components/schemas/PhotoSize"
					},
					"width": {
						"description": "Sticker width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"file_id",
					"file_unique_id",
					"width",
					"height",
					"is_animated",
					"is_video"
				],
				"type": "object"
			},
			"StickerSet": {
				"description": "This object represents a sticker set.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#stickerset"
				},
				"properties": {
					"contains_masks": {
						"description": "_True_, if the sticker set contains masks",
						"type": "boolean"
					},
					"is_animated": {
						"description": "_True_, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)",
						"type": "boolean"
					},
					"is_video": {
						"description": "_True_, if the sticker set contains [video stickers](https://telegram.org/blog/video-stickers-better-reactions)",
						"type": "boolean"
					},
					"name": {
						"description": "Sticker set name",
						"type": "string"
					},
					"stickers": {
						"description": "List of all set stickers",
						"items": {
							"$ref": "#/components/schemas/Sticker"
						},
						"type": "array"
					},
					"thumb": {
						"$ref": "#/components/schemas/PhotoSize"
					},
					"title": {
						"description": "Sticker set title",
						"type": "string"
					}
				},
				"required": [
					"name",
					"title",
					"is_animated",
					"is_video",
					"contains_masks",
					"stickers"
				],
				"type": "object"
			},
			"SuccessfulPayment": {
				"description": "This object contains basic information about a successful payment.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#successfulpayment"
				},
				"properties": {
					"currency": {
						"description": "Three-letter ISO 4217 [currency](https://core.telegram.org/bots/payments#supported-currencies) code",
						"type": "string"
					},
					"invoice_payload": {
						"description": "Bot specified invoice payload",
						"type": "string"
					},
					"order_info": {
						"$ref": "#/components/schemas/OrderInfo"
					},
					"provider_payment_charge_id": {
						"description": "Provider payment identifier",
						"type": "string"
					},
					"shipping_option_id": {
						"description": "_Optional_. Identifier of the shipping option chosen by the user",
						"type": "string"
					},
					"telegram_payment_charge_id": {
						"description": "Telegram payment identifier",
						"type": "string"
					},
					"total_amount": {
						"description": "Total price in the _smallest units_ of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)",
						"type": "integer"
					}
				},
				"required": [
					"currency",
					"total_amount",
					"invoice_payload",
					"telegram_payment_charge_id",
					"provider_payment_charge_id"
				],
				"type": "object"
			},
			"Update": {
				"description": "This [object](https://core.telegram.org/bots/api#available-types) represents an incoming update.At most **one** of the optional parameters can be present in any given update.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#update"
				},
				"properties": {
					"callback_query": {
						"$ref": "#/components/schemas/CallbackQuery"
					},
					"channel_post": {
						"$ref": "#/components/schemas/Message"
					},
					"chat_join_request": {
						"$ref": "#/components/schemas/ChatJoinRequest"
					},
					"chat_member": {
						"$ref": "#/components/schemas/ChatMemberUpdated"
					},
					"chosen_inline_result": {
						"$ref": "#/components/schemas/ChosenInlineResult"
					},
					"edited_channel_post": {
						"$ref": "#/components/schemas/Message"
					},
					"edited_message": {
						"$ref": "#/components/schemas/Message"
					},
					"inline_query": {
						"$ref": "#/components/schemas/InlineQuery"
					},
					"message": {
						"$ref": "#/components/schemas/Message"
					},
					"my_chat_member": {
						"$ref": "#/components/schemas/ChatMemberUpdated"
					},
					"poll": {
						"$ref": "#/components/schemas/Poll"
					},
					"poll_answer": {
						"$ref": "#/components/schemas/PollAnswer"
					},
					"pre_checkout_query": {
						"$ref": "#/components/schemas/PreCheckoutQuery"
					},
					"shipping_query": {
						"$ref": "#/components/schemas/ShippingQuery"
					},
					"update_id": {
						"description": "The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [webhooks](https://core.telegram.org/bots/api#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially",
						"type": "integer"
					}
				},
				"required": [
					"update_id"
				],
				"type": "object"
			},
			"User": {
				"description": "This object represents a Telegram user or bot.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#user"
				},
				"properties": {
					"added_to_attachment_menu": {
						"description": "_Optional_. _True_, if this user added the bot to the attachment menu",
						"type": "boolean"
					},
					"can_join_groups": {
						"description": "_Optional_. _True_, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api#getme)",
						"type": "boolean"
					},
					"can_read_all_group_messages": {
						"description": "_Optional_. _True_, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api#getme)",
						"type": "boolean"
					},
					"first_name": {
						"description": "User's or bot's first name",
						"type": "string"
					},
					"id": {
						"description": "Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier",
						"format": "int64",
						"type": "integer"
					},
					"is_bot": {
						"description": "_True_, if this user is a bot",
						"type": "boolean"
					},
					"is_premium": {
						"description": "_Optional_. _True_, if this user is a Telegram Premium user",
						"type": "boolean"
					},
					"language_code": {
						"description": "_Optional_. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language",
						"type": "string"
					},
					"last_name": {
						"description": "_Optional_. User's or bot's last name",
						"type": "string"
					},
					"supports_inline_queries": {
						"description": "_Optional_. _True_, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api#getme)",
						"type": "boolean"
					},
					"username": {
						"description": "_Optional_. User's or bot's username",
						"type": "string"
					}
				},
				"required": [
					"id",
					"is_bot",
					"first_name"
				],
				"type": "object"
			},
			"UserProfilePhotos": {
				"description": "This object represent a user's profile pictures.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#userprofilephotos"
				},
				"properties": {
					"photos": {
						"description": "Requested profile pictures (in up to 4 sizes each)",
						"items": {
							"items": {
								"$ref": "#/components/schemas/PhotoSize"
							},
							"type": "array"
						},
						"type": "array"
					},
					"total_count": {
						"description": "Total number of profile pictures the target user has",
						"type": "integer"
					}
				},
				"required": [
					"total_count",
					"photos"
				],
				"type": "object"
			},
			"Venue": {
				"description": "This object represents a venue.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#venue"
				},
				"properties": {
					"address": {
						"description": "Address of the venue",
						"type": "string"
					},
					"foursquare_id": {
						"description": "_Optional_. Foursquare identifier of the venue",
						"type": "string"
					},
					"foursquare_type": {
						"description": "_Optional_. Foursquare type of the venue. (For example, `arts_entertainment/default`, `arts_entertainment/aquarium` or `food/icecream`.)",
						"type": "string"
					},
					"google_place_id": {
						"description": "_Optional_. Google Places identifier of the venue",
						"type": "string"
					},
					"google_place_type": {
						"description": "_Optional_. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)",
						"type": "string"
					},
					"location": {
						"$ref": "#/components/schemas/Location"
					},
					"title": {
						"description": "Name of the venue",
						"type": "string"
					}
				},
				"required": [
					"location",
					"title",
					"address"
				],
				"type": "object"
			},
			"Video": {
				"description": "This object represents a video file.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#video"
				},
				"properties": {
					"duration": {
						"description": "Duration of the video in seconds as defined by sender",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_name": {
						"description": "_Optional_. Original filename as defined by sender",
						"type": "string"
					},
					"file_size": {
						"description": "_Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					},
					"height": {
						"description": "Video height as defined by sender",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"mime_type": {
						"description": "_Optional_. MIME type of the file as defined by sender",
						"type": "string"
					},
					"thumb": {
						"$ref": "#/components/schemas/PhotoSize"
					},
					"width": {
						"description": "Video width as defined by sender",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"file_id",
					"file_unique_id",
					"width",
					"height",
					"duration"
				],
				"type": "object"
			},
			"VideoChatEnded": {
				"description": "This object represents a service message about a video chat ended in the chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#videochatended"
				},
				"properties": {
					"duration": {
						"description": "Video chat duration in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"duration"
				],
				"type": "object"
			},
			"VideoChatParticipantsInvited": {
				"description": "This object represents a service message about new members invited to a video chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#videochatparticipantsinvited"
				},
				"properties": {
					"users": {
						"description": "New members that were invited to the video chat",
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					}
				},
				"required": [
					"users"
				],
				"type": "object"
			},
			"VideoChatScheduled": {
				"description": "This object represents a service message about a video chat scheduled in the chat.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#videochatscheduled"
				},
				"properties": {
					"start_date": {
						"description": "Point in time (Unix timestamp) when the video chat is supposed to be started by a chat administrator",
						"type": "integer"
					}
				},
				"required": [
					"start_date"
				],
				"type": "object"
			},
			"VideoChatStarted": {
				"description": "This object represents a service message about a video chat started in the chat. Currently holds no information.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#videochatstarted"
				},
				"type": "object"
			},
			"VideoNote": {
				"description": "This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#videonote"
				},
				"properties": {
					"duration": {
						"description": "Duration of the video in seconds as defined by sender",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_size": {
						"description": "_Optional_. File size in bytes",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					},
					"length": {
						"description": "Video width and height (diameter of the video message) as defined by sender",
						"type": "integer"
					},
					"thumb": {
						"$ref": "#/components/schemas/PhotoSize"
					}
				},
				"required": [
					"file_id",
					"file_unique_id",
					"length",
					"duration"
				],
				"type": "object"
			},
			"Voice": {
				"description": "This object represents a voice note.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#voice"
				},
				"properties": {
					"duration": {
						"description": "Duration of the audio in seconds as defined by sender",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"file_id": {
						"description": "Identifier for this file, which can be used to download or reuse the file",
						"type": "string"
					},
					"file_size": {
						"description": "_Optional_. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value",
						"type": "integer"
					},
					"file_unique_id": {
						"description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
						"type": "string"
					},
					"mime_type": {
						"description": "_Optional_. MIME type of the file as defined by sender",
						"type": "string"
					}
				},
				"required": [
					"file_id",
					"file_unique_id",
					"duration"
				],
				"type": "object"
			},
			"WebAppData": {
				"description": "Describes data sent from a [Web App](https://core.telegram.org/bots/webapps) to the bot.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#webappdata"
				},
				"properties": {
					"button_text": {
						"description": "Text of the _web_app_ keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field",
						"type": "string"
					},
					"data": {
						"description": "The data. Be aware that a bad client can send arbitrary data in this field",
						"type": "string"
					}
				},
				"required": [
					"data",
					"button_text"
				],
				"type": "object"
			},
			"WebAppInfo": {
				"description": "Describes a [Web App](https://core.telegram.org/bots/webapps).",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#webappinfo"
				},
				"properties": {
					"url": {
						"description": "An HTTPS URL of a Web App to be opened with additional data as specified in [Initializing Web Apps](https://core.telegram.org/bots/webapps#initializing-web-apps)",
						"type": "string"
					}
				},
				"required": [
					"url"
				],
				"type": "object"
			},
			"WebhookInfo": {
				"description": "Describes the current status of a webhook.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#webhookinfo"
				},
				"properties": {
					"allowed_updates": {
						"description": "_Optional_. A list of update types the bot is subscribed to. Defaults to all update types except _chat_member_",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"has_custom_certificate": {
						"description": "_True_, if a custom certificate was provided for webhook certificate checks",
						"type": "boolean"
					},
					"ip_address": {
						"description": "_Optional_. Currently used webhook IP address",
						"type": "string"
					},
					"last_error_date": {
						"description": "_Optional_. Unix time for the most recent error that happened when trying to deliver an update via webhook",
						"type": "integer"
					},
					"last_error_message": {
						"description": "_Optional_. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook",
						"type": "string"
					},
					"last_synchronization_error_date": {
						"description": "_Optional_. Unix time of the most recent error that happened when trying to synchronize available updates with Telegram datacenters",
						"type": "integer"
					},
					"max_connections": {
						"description": "_Optional_. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery",
						"type": "integer"
					},
					"pending_update_count": {
						"description": "Number of updates awaiting delivery",
						"type": "integer"
					},
					"url": {
						"description": "Webhook URL, may be empty if webhook is not set up",
						"type": "string"
					}
				},
				"required": [
					"url",
					"has_custom_certificate",
					"pending_update_count"
				],
				"type": "object"
			},
			"addStickerToSet": {
				"description": "Input for addStickerToSet",
				"properties": {
					"emojis": {
						"description": "One or more emoji corresponding to the sticker",
						"type": "string"
					},
					"mask_position": {
						"$ref": "#/components/schemas/MaskPosition"
					},
					"name": {
						"description": "Sticker set name",
						"type": "string"
					},
					"png_sticker": {
						"description": "**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a _file_id_ as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"tgs_sticker": {
						"description": "**TGS** animation with the sticker, uploaded using multipart/form-data. See [](https://core.telegram.org/stickers#animated-sticker-requirements)[https://core.telegram.org/stickers#animated-sticker-requirements](https://core.telegram.org/stickers#animated-sticker-requirements) for technical requirements",
						"type": "string"
					},
					"user_id": {
						"description": "User identifier of sticker set owner",
						"format": "int64",
						"type": "integer"
					},
					"webm_sticker": {
						"description": "**WEBM** video with the sticker, uploaded using multipart/form-data. See [](https://core.telegram.org/stickers#video-sticker-requirements)[https://core.telegram.org/stickers#video-sticker-requirements](https://core.telegram.org/stickers#video-sticker-requirements) for technical requirements",
						"type": "string"
					}
				},
				"required": [
					"user_id",
					"name",
					"emojis"
				],
				"type": "object"
			},
			"answerCallbackQuery": {
				"description": "Input for answerCallbackQuery",
				"properties": {
					"cache_time": {
						"description": "The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0",
						"type": "integer"
					},
					"callback_query_id": {
						"description": "Unique identifier for the query to be answered",
						"type": "string"
					},
					"show_alert": {
						"description": "If _True_, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to _false_",
						"type": "boolean"
					},
					"text": {
						"description": "Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters",
						"maxLength": 200,
						"type": "string"
					},
					"url": {
						"description": "URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api#game) and accepted the conditions via [@BotFather](https://t.me/botfather), specify the URL that opens your game - note that this will only work if the query comes from a [_callback_game_](https://core.telegram.org/bots/api#inlinekeyboardbutton) button.Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter",
						"type": "string"
					}
				},
				"required": [
					"callback_query_id"
				],
				"type": "object"
			},
			"answerInlineQuery": {
				"description": "Input for answerInlineQuery",
				"properties": {
					"cache_time": {
						"description": "The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300",
						"type": "integer"
					},
					"inline_query_id": {
						"description": "Unique identifier for the answered query",
						"type": "string"
					},
					"is_personal": {
						"description": "Pass _True_, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query",
						"type": "boolean"
					},
					"next_offset": {
						"description": "Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes",
						"type": "string"
					},
					"results": {
						"description": "A JSON-serialized array of results for the inline query",
						"items": {
							"$ref": "#/components/schemas/InlineQueryResult"
						},
						"type": "array"
					},
					"switch_pm_parameter": {
						"description": "[Deep-linking](https://core.telegram.org/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed._Example:_ An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a [_switch_inline_](https://core.telegram.org/bots/api#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"switch_pm_text": {
						"description": "If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter _switch_pm_parameter_",
						"type": "string"
					}
				},
				"required": [
					"inline_query_id",
					"results"
				],
				"type": "object"
			},
			"answerPreCheckoutQuery": {
				"description": "Input for answerPreCheckoutQuery",
				"properties": {
					"error_message": {
						"description": "Required if _ok_ is _False_. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user",
						"type": "string"
					},
					"ok": {
						"description": "Specify _True_ if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use _False_ if there are any problems",
						"type": "boolean"
					},
					"pre_checkout_query_id": {
						"description": "Unique identifier for the query to be answered",
						"type": "string"
					}
				},
				"required": [
					"pre_checkout_query_id",
					"ok"
				],
				"type": "object"
			},
			"answerShippingQuery": {
				"description": "Input for answerShippingQuery",
				"properties": {
					"error_message": {
						"description": "Required if _ok_ is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user",
						"type": "string"
					},
					"ok": {
						"description": "Specify _True_ if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)",
						"type": "boolean"
					},
					"shipping_options": {
						"description": "Required if _ok_ is _True_. A JSON-serialized array of available shipping options",
						"items": {
							"$ref": "#/components/schemas/ShippingOption"
						},
						"type": "array"
					},
					"shipping_query_id": {
						"description": "Unique identifier for the query to be answered",
						"type": "string"
					}
				},
				"required": [
					"shipping_query_id",
					"ok"
				],
				"type": "object"
			},
			"answerWebAppQuery": {
				"description": "Input for answerWebAppQuery",
				"properties": {
					"result": {
						"$ref": "#/components/schemas/InlineQueryResult"
					},
					"web_app_query_id": {
						"description": "Unique identifier for the query to be answered",
						"type": "string"
					}
				},
				"required": [
					"web_app_query_id",
					"result"
				],
				"type": "object"
			},
			"approveChatJoinRequest": {
				"description": "Input for approveChatJoinRequest",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"user_id"
				],
				"type": "object"
			},
			"banChatMember": {
				"description": "Input for banChatMember",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"revoke_messages": {
						"description": "Pass _True_ to delete all messages from the chat for the user that is being removed. If _False_, the user will be able to see messages in the group that were sent before the user was removed. Always _True_ for supergroups and channels",
						"type": "boolean"
					},
					"until_date": {
						"description": "Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only",
						"type": "integer"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"user_id"
				],
				"type": "object"
			},
			"banChatSenderChat": {
				"description": "Input for banChatSenderChat",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"sender_chat_id": {
						"description": "Unique identifier of the target sender chat",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"sender_chat_id"
				],
				"type": "object"
			},
			"copyMessage": {
				"description": "Input for copyMessage",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"caption": {
						"description": "New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "A JSON-serialized list of special entities that appear in the new caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"from_chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"message_id": {
						"description": "Message identifier in the chat specified in _from_chat_id_",
						"type": "integer"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"from_chat_id",
					"message_id"
				],
				"type": "object"
			},
			"createChatInviteLink": {
				"description": "Input for createChatInviteLink",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"creates_join_request": {
						"description": "_True_, if users joining the chat via the link need to be approved by chat administrators. If _True_, _member_limit_ can't be specified",
						"type": "boolean"
					},
					"expire_date": {
						"description": "Point in time (Unix timestamp) when the link will expire",
						"type": "integer"
					},
					"member_limit": {
						"description": "The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999",
						"maximum": 99999,
						"minimum": 1,
						"type": "integer"
					},
					"name": {
						"description": "Invite link name; 0-32 characters",
						"maxLength": 32,
						"type": "string"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"createInvoiceLink": {
				"description": "Input for createInvoiceLink",
				"properties": {
					"currency": {
						"description": "Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies)",
						"type": "string"
					},
					"description": {
						"description": "Product description, 1-255 characters",
						"maxLength": 255,
						"minLength": 1,
						"type": "string"
					},
					"is_flexible": {
						"description": "Pass _True_, if the final price depends on the shipping method",
						"type": "boolean"
					},
					"max_tip_amount": {
						"description": "The maximum accepted amount for tips in the _smallest units_ of the currency (integer, **not** float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`. See the _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0",
						"type": "integer"
					},
					"need_email": {
						"description": "Pass _True_, if you require the user's email address to complete the order",
						"type": "boolean"
					},
					"need_name": {
						"description": "Pass _True_, if you require the user's full name to complete the order",
						"type": "boolean"
					},
					"need_phone_number": {
						"description": "Pass _True_, if you require the user's phone number to complete the order",
						"type": "boolean"
					},
					"need_shipping_address": {
						"description": "Pass _True_, if you require the user's shipping address to complete the order",
						"type": "boolean"
					},
					"payload": {
						"description": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes",
						"maxLength": 128,
						"minLength": 1,
						"type": "string"
					},
					"photo_height": {
						"description": "Photo height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"photo_size": {
						"description": "Photo size in bytes",
						"type": "integer"
					},
					"photo_url": {
						"description": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service",
						"type": "string"
					},
					"photo_width": {
						"description": "Photo width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"prices": {
						"description": "Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)",
						"items": {
							"$ref": "#/components/schemas/LabeledPrice"
						},
						"type": "array"
					},
					"provider_data": {
						"description": "JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider",
						"type": "string"
					},
					"provider_token": {
						"description": "Payment provider token, obtained via [BotFather](https://t.me/botfather)",
						"type": "string"
					},
					"send_email_to_provider": {
						"description": "Pass _True_, if the user's email address should be sent to the provider",
						"type": "boolean"
					},
					"send_phone_number_to_provider": {
						"description": "Pass _True_, if the user's phone number should be sent to the provider",
						"type": "boolean"
					},
					"suggested_tip_amounts": {
						"description": "A JSON-serialized array of suggested amounts of tips in the _smallest units_ of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed _max_tip_amount_",
						"items": {
							"type": "integer"
						},
						"type": "array"
					},
					"title": {
						"description": "Product name, 1-32 characters",
						"maxLength": 32,
						"minLength": 1,
						"type": "string"
					}
				},
				"required": [
					"title",
					"description",
					"payload",
					"provider_token",
					"currency",
					"prices"
				],
				"type": "object"
			},
			"createNewStickerSet": {
				"description": "Input for createNewStickerSet",
				"properties": {
					"contains_masks": {
						"description": "Pass _True_, if a set of mask stickers should be created",
						"type": "boolean"
					},
					"emojis": {
						"description": "One or more emoji corresponding to the sticker",
						"type": "string"
					},
					"mask_position": {
						"$ref": "#/components/schemas/MaskPosition"
					},
					"name": {
						"description": "Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., _animals_). Can contain only English letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in `\"_by_<bot_username>\"`. `<bot_username>` is case insensitive. 1-64 characters",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"png_sticker": {
						"description": "**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a _file_id_ as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"tgs_sticker": {
						"description": "**TGS** animation with the sticker, uploaded using multipart/form-data. See [](https://core.telegram.org/stickers#animated-sticker-requirements)[https://core.telegram.org/stickers#animated-sticker-requirements](https://core.telegram.org/stickers#animated-sticker-requirements) for technical requirements",
						"type": "string"
					},
					"title": {
						"description": "Sticker set title, 1-64 characters",
						"maxLength": 64,
						"minLength": 1,
						"type": "string"
					},
					"user_id": {
						"description": "User identifier of created sticker set owner",
						"format": "int64",
						"type": "integer"
					},
					"webm_sticker": {
						"description": "**WEBM** video with the sticker, uploaded using multipart/form-data. See [](https://core.telegram.org/stickers#video-sticker-requirements)[https://core.telegram.org/stickers#video-sticker-requirements](https://core.telegram.org/stickers#video-sticker-requirements) for technical requirements",
						"type": "string"
					}
				},
				"required": [
					"user_id",
					"name",
					"title",
					"emojis"
				],
				"type": "object"
			},
			"declineChatJoinRequest": {
				"description": "Input for declineChatJoinRequest",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"user_id"
				],
				"type": "object"
			},
			"deleteChatPhoto": {
				"description": "Input for deleteChatPhoto",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"deleteChatStickerSet": {
				"description": "Input for deleteChatStickerSet",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"deleteMessage": {
				"description": "Input for deleteMessage",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"message_id": {
						"description": "Identifier of the message to delete",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"message_id"
				],
				"type": "object"
			},
			"deleteMyCommands": {
				"description": "Input for deleteMyCommands",
				"properties": {
					"language_code": {
						"description": "A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands",
						"type": "string"
					},
					"scope": {
						"$ref": "#/components/schemas/BotCommandScope"
					}
				},
				"type": "object"
			},
			"deleteStickerFromSet": {
				"description": "Input for deleteStickerFromSet",
				"properties": {
					"sticker": {
						"description": "File identifier of the sticker",
						"type": "string"
					}
				},
				"required": [
					"sticker"
				],
				"type": "object"
			},
			"deleteWebhook": {
				"description": "Input for deleteWebhook",
				"properties": {
					"drop_pending_updates": {
						"description": "Pass _True_ to drop all pending updates",
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"editChatInviteLink": {
				"description": "Input for editChatInviteLink",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"creates_join_request": {
						"description": "_True_, if users joining the chat via the link need to be approved by chat administrators. If _True_, _member_limit_ can't be specified",
						"type": "boolean"
					},
					"expire_date": {
						"description": "Point in time (Unix timestamp) when the link will expire",
						"type": "integer"
					},
					"invite_link": {
						"description": "The invite link to edit",
						"type": "string"
					},
					"member_limit": {
						"description": "The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999",
						"maximum": 99999,
						"minimum": 1,
						"type": "integer"
					},
					"name": {
						"description": "Invite link name; 0-32 characters",
						"maxLength": 32,
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"invite_link"
				],
				"type": "object"
			},
			"editMessageCaption": {
				"description": "Input for editMessageCaption",
				"properties": {
					"caption": {
						"description": "New caption of the message, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "A JSON-serialized list of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"inline_message_id": {
						"description": "Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message",
						"type": "string"
					},
					"message_id": {
						"description": "Required if _inline_message_id_ is not specified. Identifier of the message to edit",
						"type": "integer"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					}
				},
				"type": "object"
			},
			"editMessageLiveLocation": {
				"description": "Input for editMessageLiveLocation",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"heading": {
						"description": "Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified",
						"maximum": 360,
						"minimum": 1,
						"type": "integer"
					},
					"horizontal_accuracy": {
						"description": "The radius of uncertainty for the location, measured in meters; 0-1500",
						"type": "number"
					},
					"inline_message_id": {
						"description": "Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message",
						"type": "string"
					},
					"latitude": {
						"description": "Latitude of new location",
						"type": "number"
					},
					"longitude": {
						"description": "Longitude of new location",
						"type": "number"
					},
					"message_id": {
						"description": "Required if _inline_message_id_ is not specified. Identifier of the message to edit",
						"type": "integer"
					},
					"proximity_alert_radius": {
						"description": "The maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified",
						"maximum": 100000,
						"minimum": 1,
						"type": "integer"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					}
				},
				"required": [
					"latitude",
					"longitude"
				],
				"type": "object"
			},
			"editMessageMedia": {
				"description": "Input for editMessageMedia",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"inline_message_id": {
						"description": "Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message",
						"type": "string"
					},
					"media": {
						"$ref": "#/components/schemas/InputMedia"
					},
					"message_id": {
						"description": "Required if _inline_message_id_ is not specified. Identifier of the message to edit",
						"type": "integer"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					}
				},
				"required": [
					"media"
				],
				"type": "object"
			},
			"editMessageReplyMarkup": {
				"description": "Input for editMessageReplyMarkup",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"inline_message_id": {
						"description": "Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message",
						"type": "string"
					},
					"message_id": {
						"description": "Required if _inline_message_id_ is not specified. Identifier of the message to edit",
						"type": "integer"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					}
				},
				"type": "object"
			},
			"editMessageText": {
				"description": "Input for editMessageText",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_web_page_preview": {
						"description": "Disables link previews for links in this message",
						"type": "boolean"
					},
					"entities": {
						"description": "A JSON-serialized list of special entities that appear in message text, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"inline_message_id": {
						"description": "Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message",
						"type": "string"
					},
					"message_id": {
						"description": "Required if _inline_message_id_ is not specified. Identifier of the message to edit",
						"type": "integer"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"text": {
						"description": "New text of the message, 1-4096 characters after entities parsing",
						"maxLength": 4096,
						"minLength": 1,
						"type": "string"
					}
				},
				"required": [
					"text"
				],
				"type": "object"
			},
			"exportChatInviteLink": {
				"description": "Input for exportChatInviteLink",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"forwardMessage": {
				"description": "Input for forwardMessage",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"from_chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"message_id": {
						"description": "Message identifier in the chat specified in _from_chat_id_",
						"type": "integer"
					},
					"protect_content": {
						"description": "Protects the contents of the forwarded message from forwarding and saving",
						"type": "boolean"
					}
				},
				"required": [
					"chat_id",
					"from_chat_id",
					"message_id"
				],
				"type": "object"
			},
			"getChat": {
				"description": "Input for getChat",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"getChatAdministrators": {
				"description": "Input for getChatAdministrators",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"getChatMember": {
				"description": "Input for getChatMember",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"user_id"
				],
				"type": "object"
			},
			"getChatMemberCount": {
				"description": "Input for getChatMemberCount",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"getChatMenuButton": {
				"description": "Input for getChatMenuButton",
				"properties": {
					"chat_id": {
						"description": "Unique identifier for the target private chat. If not specified, default bot's menu button will be returned",
						"format": "int64",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"getFile": {
				"description": "Input for getFile",
				"properties": {
					"file_id": {
						"description": "File identifier to get information about",
						"type": "string"
					}
				},
				"required": [
					"file_id"
				],
				"type": "object"
			},
			"getGameHighScores": {
				"description": "Input for getGameHighScores",
				"properties": {
					"chat_id": {
						"description": "Required if _inline_message_id_ is not specified. Unique identifier for the target chat",
						"format": "int64",
						"type": "integer"
					},
					"inline_message_id": {
						"description": "Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message",
						"type": "string"
					},
					"message_id": {
						"description": "Required if _inline_message_id_ is not specified. Identifier of the sent message",
						"type": "integer"
					},
					"user_id": {
						"description": "Target user id",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"user_id"
				],
				"type": "object"
			},
			"getMyCommands": {
				"description": "Input for getMyCommands",
				"properties": {
					"language_code": {
						"description": "A two-letter ISO 639-1 language code or an empty string",
						"type": "string"
					},
					"scope": {
						"$ref": "#/components/schemas/BotCommandScope"
					}
				},
				"type": "object"
			},
			"getMyDefaultAdministratorRights": {
				"description": "Input for getMyDefaultAdministratorRights",
				"properties": {
					"for_channels": {
						"description": "Pass _True_ to get default administrator rights of the bot in channels. Otherwise, default administrator rights of the bot for groups and supergroups will be returned",
						"type": "boolean"
					}
				},
				"type": "object"
			},
			"getStickerSet": {
				"description": "Input for getStickerSet",
				"properties": {
					"name": {
						"description": "Name of the sticker set",
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object"
			},
			"getUpdates": {
				"description": "Input for getUpdates",
				"properties": {
					"allowed_updates": {
						"description": "A JSON-serialized list of the update types you want your bot to receive. For example, specify [`message`, `edited_channel_post`, `callback_query`] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api#update) for a complete list of available update types. Specify an empty list to receive all update types except _chat_member_ (default). If not specified, the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"limit": {
						"description": "Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100",
						"maximum": 100,
						"minimum": 1,
						"type": "integer"
					},
					"offset": {
						"default": 0,
						"description": "Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api#getupdates) is called with an _offset_ higher than its _update_id_. The negative offset can be specified to retrieve updates starting from _-offset_ update from the end of the updates queue. All previous updates will forgotten",
						"type": "integer"
					},
					"timeout": {
						"description": "Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only",
						"type": "integer"
					}
				},
				"type": "object"
			},
			"getUserProfilePhotos": {
				"description": "Input for getUserProfilePhotos",
				"properties": {
					"limit": {
						"description": "Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100",
						"maximum": 100,
						"minimum": 1,
						"type": "integer"
					},
					"offset": {
						"default": 0,
						"description": "Sequential number of the first photo to be returned. By default, all photos are returned",
						"type": "integer"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"user_id"
				],
				"type": "object"
			},
			"leaveChat": {
				"description": "Input for leaveChat",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"pinChatMessage": {
				"description": "Input for pinChatMessage",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Pass _True_, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats",
						"type": "boolean"
					},
					"message_id": {
						"description": "Identifier of a message to pin",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"message_id"
				],
				"type": "object"
			},
			"promoteChatMember": {
				"description": "Input for promoteChatMember",
				"properties": {
					"can_change_info": {
						"description": "Pass _True_, if the administrator can change chat title, photo and other settings",
						"type": "boolean"
					},
					"can_delete_messages": {
						"description": "Pass _True_, if the administrator can delete messages of other users",
						"type": "boolean"
					},
					"can_edit_messages": {
						"description": "Pass _True_, if the administrator can edit messages of other users and can pin messages, channels only",
						"type": "boolean"
					},
					"can_invite_users": {
						"description": "Pass _True_, if the administrator can invite new users to the chat",
						"type": "boolean"
					},
					"can_manage_chat": {
						"description": "Pass _True_, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege",
						"type": "boolean"
					},
					"can_manage_video_chats": {
						"description": "Pass _True_, if the administrator can manage video chats",
						"type": "boolean"
					},
					"can_pin_messages": {
						"description": "Pass _True_, if the administrator can pin messages, supergroups only",
						"type": "boolean"
					},
					"can_post_messages": {
						"description": "Pass _True_, if the administrator can create channel posts, channels only",
						"type": "boolean"
					},
					"can_promote_members": {
						"description": "Pass _True_, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)",
						"type": "boolean"
					},
					"can_restrict_members": {
						"description": "Pass _True_, if the administrator can restrict, ban or unban chat members",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"is_anonymous": {
						"description": "Pass _True_, if the administrator's presence in the chat is hidden",
						"type": "boolean"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"user_id"
				],
				"type": "object"
			},
			"restrictChatMember": {
				"description": "Input for restrictChatMember",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"permissions": {
						"$ref": "#/components/schemas/ChatPermissions"
					},
					"until_date": {
						"description": "Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever",
						"type": "integer"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"user_id",
					"permissions"
				],
				"type": "object"
			},
			"revokeChatInviteLink": {
				"description": "Input for revokeChatInviteLink",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"invite_link": {
						"description": "The invite link to revoke",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"invite_link"
				],
				"type": "object"
			},
			"sendAnimation": {
				"description": "Input for sendAnimation",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"animation": {
						"description": "Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"caption": {
						"description": "Animation caption (may also be used when resending animation by _file_id_), 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "A JSON-serialized list of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"duration": {
						"description": "Duration of sent animation in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"height": {
						"description": "Animation height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"thumb": {
						"description": "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"width": {
						"description": "Animation width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"animation"
				],
				"type": "object"
			},
			"sendAudio": {
				"description": "Input for sendAudio",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"audio": {
						"description": "Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"caption": {
						"description": "Audio caption, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "A JSON-serialized list of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"duration": {
						"description": "Duration of the audio in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"performer": {
						"description": "Performer",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"thumb": {
						"description": "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"title": {
						"description": "Track name",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"audio"
				],
				"type": "object"
			},
			"sendChatAction": {
				"description": "Input for sendChatAction",
				"properties": {
					"action": {
						"description": "Type of action to broadcast. Choose one, depending on what the user is about to receive: _typing_ for [text messages](https://core.telegram.org/bots/api#sendmessage), _upload_photo_ for [photos](https://core.telegram.org/bots/api#sendphoto), _record_video_ or _upload_video_ for [videos](https://core.telegram.org/bots/api#sendvideo), _record_voice_ or _upload_voice_ for [voice notes](https://core.telegram.org/bots/api#sendvoice), _upload_document_ for [general files](https://core.telegram.org/bots/api#senddocument), _choose_sticker_ for [stickers](https://core.telegram.org/bots/api#sendsticker), _find_location_ for [location data](https://core.telegram.org/bots/api#sendlocation), _record_video_note_ or _upload_video_note_ for [video notes](https://core.telegram.org/bots/api#sendvideonote)",
						"type": "string"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					}
				},
				"required": [
					"chat_id",
					"action"
				],
				"type": "object"
			},
			"sendContact": {
				"description": "Input for sendContact",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"first_name": {
						"description": "Contact's first name",
						"type": "string"
					},
					"last_name": {
						"description": "Contact's last name",
						"type": "string"
					},
					"phone_number": {
						"description": "Contact's phone number",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"vcard": {
						"description": "Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes",
						"maxLength": 2048,
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"phone_number",
					"first_name"
				],
				"type": "object"
			},
			"sendDice": {
				"description": "Input for sendDice",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"emoji": {
						"description": "Emoji on which the dice throw animation is based. Currently, must be one of `🎲`, `🎯`, `🏀`, `⚽`, `🎳`, or `🎰`. Dice can have values 1-6 for `🎲`, `🎯` and `🎳`, values 1-5 for `🏀` and `⚽`, and values 1-64 for `🎰`. Defaults to `🎲`",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"sendDocument": {
				"description": "Input for sendDocument",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"caption": {
						"description": "Document caption (may also be used when resending documents by _file_id_), 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "A JSON-serialized list of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_content_type_detection": {
						"description": "Disables automatic server-side content type detection for files uploaded using multipart/form-data",
						"type": "boolean"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"document": {
						"description": "File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"thumb": {
						"description": "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"document"
				],
				"type": "object"
			},
			"sendGame": {
				"description": "Input for sendGame",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"description": "Unique identifier for the target chat",
						"format": "int64",
						"type": "integer"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"game_short_name": {
						"description": "Short name of the game, serves as the unique identifier for the game. Set up your games via [@BotFather](https://t.me/botfather)",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"game_short_name"
				],
				"type": "object"
			},
			"sendInvoice": {
				"description": "Input for sendInvoice",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"currency": {
						"description": "Three-letter ISO 4217 currency code, see [more on currencies](https://core.telegram.org/bots/payments#supported-currencies)",
						"type": "string"
					},
					"description": {
						"description": "Product description, 1-255 characters",
						"maxLength": 255,
						"minLength": 1,
						"type": "string"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"is_flexible": {
						"description": "Pass _True_, if the final price depends on the shipping method",
						"type": "boolean"
					},
					"max_tip_amount": {
						"description": "The maximum accepted amount for tips in the _smallest units_ of the currency (integer, **not** float/double). For example, for a maximum tip of `US$ 1.45` pass `max_tip_amount = 145`. See the _exp_ parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0",
						"type": "integer"
					},
					"need_email": {
						"description": "Pass _True_, if you require the user's email address to complete the order",
						"type": "boolean"
					},
					"need_name": {
						"description": "Pass _True_, if you require the user's full name to complete the order",
						"type": "boolean"
					},
					"need_phone_number": {
						"description": "Pass _True_, if you require the user's phone number to complete the order",
						"type": "boolean"
					},
					"need_shipping_address": {
						"description": "Pass _True_, if you require the user's shipping address to complete the order",
						"type": "boolean"
					},
					"payload": {
						"description": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes",
						"maxLength": 128,
						"minLength": 1,
						"type": "string"
					},
					"photo_height": {
						"description": "Photo height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"photo_size": {
						"description": "Photo size in bytes",
						"type": "integer"
					},
					"photo_url": {
						"description": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for",
						"type": "string"
					},
					"photo_width": {
						"description": "Photo width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"prices": {
						"description": "Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)",
						"items": {
							"$ref": "#/components/schemas/LabeledPrice"
						},
						"type": "array"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"provider_data": {
						"description": "JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider",
						"type": "string"
					},
					"provider_token": {
						"description": "Payment provider token, obtained via [@BotFather](https://t.me/botfather)",
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"send_email_to_provider": {
						"description": "Pass _True_, if the user's email address should be sent to provider",
						"type": "boolean"
					},
					"send_phone_number_to_provider": {
						"description": "Pass _True_, if the user's phone number should be sent to provider",
						"type": "boolean"
					},
					"start_parameter": {
						"description": "Unique deep-linking parameter. If left empty, **forwarded copies** of the sent message will have a _Pay_ button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a _URL_ button with a deep link to the bot (instead of a _Pay_ button), with the value used as the start parameter",
						"type": "string"
					},
					"suggested_tip_amounts": {
						"description": "A JSON-serialized array of suggested amounts of tips in the _smallest units_ of the currency (integer, **not** float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed _max_tip_amount_",
						"items": {
							"format": "int64",
							"type": "integer"
						},
						"type": "array"
					},
					"title": {
						"description": "Product name, 1-32 characters",
						"maxLength": 32,
						"minLength": 1,
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"title",
					"description",
					"payload",
					"provider_token",
					"currency",
					"prices"
				],
				"type": "object"
			},
			"sendLocation": {
				"description": "Input for sendLocation",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"heading": {
						"description": "For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified",
						"maximum": 360,
						"minimum": 1,
						"type": "integer"
					},
					"horizontal_accuracy": {
						"description": "The radius of uncertainty for the location, measured in meters; 0-1500",
						"type": "number"
					},
					"latitude": {
						"description": "Latitude of the location",
						"type": "number"
					},
					"live_period": {
						"description": "Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400",
						"maximum": 86400,
						"minimum": 60,
						"type": "integer"
					},
					"longitude": {
						"description": "Longitude of the location",
						"type": "number"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"proximity_alert_radius": {
						"description": "For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified",
						"maximum": 100000,
						"minimum": 1,
						"type": "integer"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"latitude",
					"longitude"
				],
				"type": "object"
			},
			"sendMediaGroup": {
				"description": "Input for sendMediaGroup",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"media": {
						"description": "A JSON-serialized array describing messages to be sent, must include 2-10 items",
						"items": {
							"discriminator": {
								"mapping": {
									"audio": "InputMediaAudio",
									"document": "InputMediaDocument",
									"photo": "InputMediaPhoto",
									"video": "InputMediaVideo"
								},
								"propertyName": "type"
							},
							"oneOf": [
								{
									"$ref": "#/components/schemas/InputMediaAudio"
								},
								{
									"$ref": "#/components/schemas/InputMediaDocument"
								},
								{
									"$ref": "#/components/schemas/InputMediaPhoto"
								},
								{
									"$ref": "#/components/schemas/InputMediaVideo"
								}
							]
						},
						"type": "array"
					},
					"protect_content": {
						"description": "Protects the contents of the sent messages from forwarding and saving",
						"type": "boolean"
					},
					"reply_to_message_id": {
						"description": "If the messages are a reply, ID of the original message",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"media"
				],
				"type": "object"
			},
			"sendMessage": {
				"description": "Input for sendMessage",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"disable_web_page_preview": {
						"description": "Disables link previews for links in this message",
						"type": "boolean"
					},
					"entities": {
						"description": "A JSON-serialized list of special entities that appear in message text, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"text": {
						"description": "Text of the message to be sent, 1-4096 characters after entities parsing",
						"maxLength": 4096,
						"minLength": 1,
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"text"
				],
				"type": "object"
			},
			"sendPhoto": {
				"description": "Input for sendPhoto",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"caption": {
						"description": "Photo caption (may also be used when resending photos by _file_id_), 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "A JSON-serialized list of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"photo": {
						"description": "Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"photo"
				],
				"type": "object"
			},
			"sendPoll": {
				"description": "Input for sendPoll",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"allows_multiple_answers": {
						"description": "_True_, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to _False_",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"close_date": {
						"description": "Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with _open_period_",
						"type": "integer"
					},
					"correct_option_id": {
						"description": "0-based identifier of the correct answer option, required for polls in quiz mode",
						"type": "integer"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"explanation": {
						"description": "Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing",
						"maxLength": 200,
						"type": "string"
					},
					"explanation_entities": {
						"description": "A JSON-serialized list of special entities that appear in the poll explanation, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"explanation_parse_mode": {
						"description": "Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"is_anonymous": {
						"description": "_True_, if the poll needs to be anonymous, defaults to _True_",
						"type": "boolean"
					},
					"is_closed": {
						"description": "Pass _True_, if the poll needs to be immediately closed. This can be useful for poll preview",
						"type": "boolean"
					},
					"open_period": {
						"description": "Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with _close_date_",
						"type": "integer"
					},
					"options": {
						"description": "A JSON-serialized list of answer options, 2-10 strings 1-100 characters each",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"question": {
						"description": "Poll question, 1-300 characters",
						"maxLength": 300,
						"minLength": 1,
						"type": "string"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"type": {
						"description": "Poll type, `quiz` or `regular`, defaults to `regular`",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"question",
					"options"
				],
				"type": "object"
			},
			"sendSticker": {
				"description": "Input for sendSticker",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"sticker": {
						"description": "Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"sticker"
				],
				"type": "object"
			},
			"sendVenue": {
				"description": "Input for sendVenue",
				"properties": {
					"address": {
						"description": "Address of the venue",
						"type": "string"
					},
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"foursquare_id": {
						"description": "Foursquare identifier of the venue",
						"type": "string"
					},
					"foursquare_type": {
						"description": "Foursquare type of the venue, if known. (For example, `arts_entertainment/default`, `arts_entertainment/aquarium` or `food/icecream`.)",
						"type": "string"
					},
					"google_place_id": {
						"description": "Google Places identifier of the venue",
						"type": "string"
					},
					"google_place_type": {
						"description": "Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)",
						"type": "string"
					},
					"latitude": {
						"description": "Latitude of the venue",
						"type": "number"
					},
					"longitude": {
						"description": "Longitude of the venue",
						"type": "number"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"title": {
						"description": "Name of the venue",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"latitude",
					"longitude",
					"title",
					"address"
				],
				"type": "object"
			},
			"sendVideo": {
				"description": "Input for sendVideo",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"caption": {
						"description": "Video caption (may also be used when resending videos by _file_id_), 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "A JSON-serialized list of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"duration": {
						"description": "Duration of sent video in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"height": {
						"description": "Video height",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"supports_streaming": {
						"description": "Pass _True_, if the uploaded video is suitable for streaming",
						"type": "boolean"
					},
					"thumb": {
						"description": "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"video": {
						"description": "Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"width": {
						"description": "Video width",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"video"
				],
				"type": "object"
			},
			"sendVideoNote": {
				"description": "Input for sendVideoNote",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"duration": {
						"description": "Duration of sent video in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"length": {
						"description": "Video width and height, i.e. diameter of the video message",
						"type": "integer"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"thumb": {
						"description": "Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass `attach://<file_attach_name>` if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"video_note": {
						"description": "Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files). Sending video notes by a URL is currently unsupported",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"video_note"
				],
				"type": "object"
			},
			"sendVoice": {
				"description": "Input for sendVoice",
				"properties": {
					"allow_sending_without_reply": {
						"description": "Pass _True_, if the message should be sent even if the specified replied-to message is not found",
						"type": "boolean"
					},
					"caption": {
						"description": "Voice message caption, 0-1024 characters after entities parsing",
						"maxLength": 1024,
						"type": "string"
					},
					"caption_entities": {
						"description": "A JSON-serialized list of special entities that appear in the caption, which can be specified instead of _parse_mode_",
						"items": {
							"$ref": "#/components/schemas/MessageEntity"
						},
						"type": "array"
					},
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"disable_notification": {
						"description": "Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound",
						"type": "boolean"
					},
					"duration": {
						"description": "Duration of the voice message in seconds",
						"exclusiveMinimum": true,
						"minimum": 0,
						"type": "integer"
					},
					"parse_mode": {
						"description": "Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api#formatting-options) for more details",
						"type": "string"
					},
					"protect_content": {
						"description": "Protects the contents of the sent message from forwarding and saving",
						"type": "boolean"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/SendReplyMarkup"
					},
					"reply_to_message_id": {
						"description": "If the message is a reply, ID of the original message",
						"type": "integer"
					},
					"voice": {
						"description": "Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"voice"
				],
				"type": "object"
			},
			"setChatAdministratorCustomTitle": {
				"description": "Input for setChatAdministratorCustomTitle",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"custom_title": {
						"description": "New custom title for the administrator; 0-16 characters, emoji are not allowed",
						"maxLength": 16,
						"type": "string"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"user_id",
					"custom_title"
				],
				"type": "object"
			},
			"setChatDescription": {
				"description": "Input for setChatDescription",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"description": {
						"description": "New chat description, 0-255 characters",
						"maxLength": 255,
						"type": "string"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"setChatMenuButton": {
				"description": "Input for setChatMenuButton",
				"properties": {
					"chat_id": {
						"description": "Unique identifier for the target private chat. If not specified, default bot's menu button will be changed",
						"format": "int64",
						"type": "integer"
					},
					"menu_button": {
						"$ref": "#/components/schemas/MenuButton"
					}
				},
				"type": "object"
			},
			"setChatPermissions": {
				"description": "Input for setChatPermissions",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"permissions": {
						"$ref": "#/components/schemas/ChatPermissions"
					}
				},
				"required": [
					"chat_id",
					"permissions"
				],
				"type": "object"
			},
			"setChatPhoto": {
				"description": "Input for setChatPhoto",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"photo": {
						"description": "New chat photo, uploaded using multipart/form-data",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"photo"
				],
				"type": "object"
			},
			"setChatStickerSet": {
				"description": "Input for setChatStickerSet",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"sticker_set_name": {
						"description": "Name of the sticker set to be set as the group sticker set",
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"sticker_set_name"
				],
				"type": "object"
			},
			"setChatTitle": {
				"description": "Input for setChatTitle",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"title": {
						"description": "New chat title, 1-255 characters",
						"maxLength": 255,
						"minLength": 1,
						"type": "string"
					}
				},
				"required": [
					"chat_id",
					"title"
				],
				"type": "object"
			},
			"setGameScore": {
				"description": "Input for setGameScore",
				"properties": {
					"chat_id": {
						"description": "Required if _inline_message_id_ is not specified. Unique identifier for the target chat",
						"format": "int64",
						"type": "integer"
					},
					"disable_edit_message": {
						"description": "Pass _True_, if the game message should not be automatically edited to include the current scoreboard",
						"type": "boolean"
					},
					"force": {
						"description": "Pass _True_, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters",
						"type": "boolean"
					},
					"inline_message_id": {
						"description": "Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message",
						"type": "string"
					},
					"message_id": {
						"description": "Required if _inline_message_id_ is not specified. Identifier of the sent message",
						"type": "integer"
					},
					"score": {
						"description": "New score, must be non-negative",
						"type": "integer"
					},
					"user_id": {
						"description": "User identifier",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"user_id",
					"score"
				],
				"type": "object"
			},
			"setMyCommands": {
				"description": "Input for setMyCommands",
				"properties": {
					"commands": {
						"description": "A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified",
						"items": {
							"$ref": "#/components/schemas/BotCommand"
						},
						"type": "array"
					},
					"language_code": {
						"description": "A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands",
						"type": "string"
					},
					"scope": {
						"$ref": "#/components/schemas/BotCommandScope"
					}
				},
				"required": [
					"commands"
				],
				"type": "object"
			},
			"setMyDefaultAdministratorRights": {
				"description": "Input for setMyDefaultAdministratorRights",
				"properties": {
					"for_channels": {
						"description": "Pass _True_ to change the default administrator rights of the bot in channels. Otherwise, the default administrator rights of the bot for groups and supergroups will be changed",
						"type": "boolean"
					},
					"rights": {
						"$ref": "#/components/schemas/ChatAdministratorRights"
					}
				},
				"type": "object"
			},
			"setPassportDataErrors": {
				"description": "Input for setPassportDataErrors",
				"properties": {
					"errors": {
						"description": "A JSON-serialized array describing the errors",
						"items": {
							"$ref": "#/components/schemas/PassportElementError"
						},
						"type": "array"
					},
					"user_id": {
						"description": "User identifier",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"user_id",
					"errors"
				],
				"type": "object"
			},
			"setStickerPositionInSet": {
				"description": "Input for setStickerPositionInSet",
				"properties": {
					"position": {
						"description": "New sticker position in the set, zero-based",
						"type": "integer"
					},
					"sticker": {
						"description": "File identifier of the sticker",
						"type": "string"
					}
				},
				"required": [
					"sticker",
					"position"
				],
				"type": "object"
			},
			"setStickerSetThumb": {
				"description": "Input for setStickerSetThumb",
				"properties": {
					"name": {
						"description": "Sticker set name",
						"type": "string"
					},
					"thumb": {
						"description": "A **PNG** image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a **TGS** animation with the thumbnail up to 32 kilobytes in size; see [](https://core.telegram.org/stickers#animated-sticker-requirements)[https://core.telegram.org/stickers#animated-sticker-requirements](https://core.telegram.org/stickers#animated-sticker-requirements) for animated sticker technical requirements, or a **WEBM** video with the thumbnail up to 32 kilobytes in size; see [](https://core.telegram.org/stickers#video-sticker-requirements)[https://core.telegram.org/stickers#video-sticker-requirements](https://core.telegram.org/stickers#video-sticker-requirements) for video sticker technical requirements. Pass a _file_id_ as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files). Animated sticker set thumbnails can't be uploaded via HTTP URL",
						"type": "string"
					},
					"user_id": {
						"description": "User identifier of the sticker set owner",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"name",
					"user_id"
				],
				"type": "object"
			},
			"setWebhook": {
				"description": "Input for setWebhook",
				"properties": {
					"allowed_updates": {
						"description": "A JSON-serialized list of the update types you want your bot to receive. For example, specify [`message`, `edited_channel_post`, `callback_query`] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api#update) for a complete list of available update types. Specify an empty list to receive all update types except _chat_member_ (default). If not specified, the previous setting will be used.Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time",
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"certificate": {
						"description": "Upload your public key certificate so that the root certificate in use can be checked. See our [self-signed guide](https://core.telegram.org/bots/self-signed) for details",
						"type": "string"
					},
					"drop_pending_updates": {
						"description": "Pass _True_ to drop all pending updates",
						"type": "boolean"
					},
					"ip_address": {
						"description": "The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS",
						"type": "string"
					},
					"max_connections": {
						"description": "The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to _40_. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput",
						"type": "integer"
					},
					"secret_token": {
						"description": "A secret token to be sent in a header `X-Telegram-Bot-Api-Secret-Token` in every webhook request, 1-256 characters. Only characters `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed. The header is useful to ensure that the request comes from a webhook set by you",
						"maxLength": 256,
						"minLength": 1,
						"type": "string"
					},
					"url": {
						"description": "HTTPS URL to send updates to. Use an empty string to remove webhook integration",
						"type": "string"
					}
				},
				"required": [
					"url"
				],
				"type": "object"
			},
			"stopMessageLiveLocation": {
				"description": "Input for stopMessageLiveLocation",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"inline_message_id": {
						"description": "Required if _chat_id_ and _message_id_ are not specified. Identifier of the inline message",
						"type": "string"
					},
					"message_id": {
						"description": "Required if _inline_message_id_ is not specified. Identifier of the message with live location to stop",
						"type": "integer"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					}
				},
				"type": "object"
			},
			"stopPoll": {
				"description": "Input for stopPoll",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"message_id": {
						"description": "Identifier of the original message with the poll",
						"type": "integer"
					},
					"reply_markup": {
						"$ref": "#/components/schemas/InlineKeyboardMarkup"
					}
				},
				"required": [
					"chat_id",
					"message_id"
				],
				"type": "object"
			},
			"unbanChatMember": {
				"description": "Input for unbanChatMember",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"only_if_banned": {
						"description": "Do nothing if the user is not banned",
						"type": "boolean"
					},
					"user_id": {
						"description": "Unique identifier of the target user",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"user_id"
				],
				"type": "object"
			},
			"unbanChatSenderChat": {
				"description": "Input for unbanChatSenderChat",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"sender_chat_id": {
						"description": "Unique identifier of the target sender chat",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"chat_id",
					"sender_chat_id"
				],
				"type": "object"
			},
			"unpinAllChatMessages": {
				"description": "Input for unpinAllChatMessages",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"unpinChatMessage": {
				"description": "Input for unpinChatMessage",
				"properties": {
					"chat_id": {
						"$ref": "#/components/schemas/ID"
					},
					"message_id": {
						"description": "Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned",
						"type": "integer"
					}
				},
				"required": [
					"chat_id"
				],
				"type": "object"
			},
			"uploadStickerFile": {
				"description": "Input for uploadStickerFile",
				"properties": {
					"png_sticker": {
						"description": "**PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. [More information on Sending Files](https://core.telegram.org/bots/api#sending-files)",
						"type": "string"
					},
					"user_id": {
						"description": "User identifier of sticker file owner",
						"format": "int64",
						"type": "integer"
					}
				},
				"required": [
					"user_id",
					"png_sticker"
				],
				"type": "object"
			}
		}
	},
	"externalDocs": {
		"url": "https://core.telegram.org/bots/api"
	},
	"info": {
		"description": "API for Telegram bots",
		"termsOfService": "https://telegram.org/tos",
		"title": "Telegram Bot API",
		"version": "6.1"
	},
	"openapi": "3.0.3",
	"paths": {
		"/addStickerToSet": {
			"post": {
				"description": "Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields _png_sticker_, _tgs_sticker_, or _webm_sticker_. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#addstickertoset"
				},
				"operationId": "addStickerToSet",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/addStickerToSet"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/answerCallbackQuery": {
			"post": {
				"description": "Use this method to send answers to callback queries sent from [inline keyboards](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, _True_ is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#answercallbackquery"
				},
				"operationId": "answerCallbackQuery",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/answerCallbackQuery"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/answerInlineQuery": {
			"post": {
				"description": "Use this method to send answers to an inline query. On success, _True_ is returned.No more than **50** results per query are allowed.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#answerinlinequery"
				},
				"operationId": "answerInlineQuery",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/answerInlineQuery"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/answerPreCheckoutQuery": {
			"post": {
				"description": "Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api#update) with the field _pre_checkout_query_. Use this method to respond to such pre-checkout queries. On success, _True_ is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#answerprecheckoutquery"
				},
				"operationId": "answerPreCheckoutQuery",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/answerPreCheckoutQuery"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/answerShippingQuery": {
			"post": {
				"description": "If you sent an invoice requesting a shipping address and the parameter _is_flexible_ was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api#update) with a _shipping_query_ field to the bot. Use this method to reply to shipping queries. On success, _True_ is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#answershippingquery"
				},
				"operationId": "answerShippingQuery",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/answerShippingQuery"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/answerWebAppQuery": {
			"post": {
				"description": "Use this method to set the result of an interaction with a [Web App](https://core.telegram.org/bots/webapps) and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a [SentWebAppMessage](https://core.telegram.org/bots/api#sentwebappmessage) object is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#answerwebappquery"
				},
				"operationId": "answerWebAppQuery",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/answerWebAppQuery"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/approveChatJoinRequest": {
			"post": {
				"description": "Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the _can_invite_users_ administrator right. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#approvechatjoinrequest"
				},
				"operationId": "approveChatJoinRequest",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/approveChatJoinRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/banChatMember": {
			"post": {
				"description": "Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#banchatmember"
				},
				"operationId": "banChatMember",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/banChatMember"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/banChatSenderChat": {
			"post": {
				"description": "Use this method to ban a channel chat in a supergroup or a channel. Until the chat is [unbanned](https://core.telegram.org/bots/api#unbanchatsenderchat), the owner of the banned chat won't be able to send messages on behalf of **any of their channels**. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#banchatsenderchat"
				},
				"operationId": "banChatSenderChat",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/banChatSenderChat"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/close": {
			"post": {
				"description": "Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns _True_ on success. Requires no parameters.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#close"
				},
				"operationId": "close",
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/copyMessage": {
			"post": {
				"description": "Use this method to copy messages of any kind. Service messages and invoice messages can't be copied. The method is analogous to the method [forwardMessage](https://core.telegram.org/bots/api#forwardmessage), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api#messageid) of the sent message on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#copymessage"
				},
				"operationId": "copyMessage",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/copyMessage"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessageId"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/createChatInviteLink": {
			"post": {
				"description": "Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method [revokeChatInviteLink](https://core.telegram.org/bots/api#revokechatinvitelink). Returns the new invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#createchatinvitelink"
				},
				"operationId": "createChatInviteLink",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/createChatInviteLink"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultChatInviteLink"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/createInvoiceLink": {
			"post": {
				"description": "Use this method to create a link for an invoice. Returns the created invoice link as _String_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#createinvoicelink"
				},
				"operationId": "createInvoiceLink",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/createInvoiceLink"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultString"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/createNewStickerSet": {
			"post": {
				"description": "Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields _png_sticker_, _tgs_sticker_, or _webm_sticker_. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#createnewstickerset"
				},
				"operationId": "createNewStickerSet",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/createNewStickerSet"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/declineChatJoinRequest": {
			"post": {
				"description": "Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the _can_invite_users_ administrator right. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#declinechatjoinrequest"
				},
				"operationId": "declineChatJoinRequest",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/declineChatJoinRequest"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/deleteChatPhoto": {
			"post": {
				"description": "Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#deletechatphoto"
				},
				"operationId": "deleteChatPhoto",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/deleteChatPhoto"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/deleteChatStickerSet": {
			"post": {
				"description": "Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field _can_set_sticker_set_ optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#deletechatstickerset"
				},
				"operationId": "deleteChatStickerSet",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/deleteChatStickerSet"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/deleteMessage": {
			"post": {
				"description": "Use this method to delete a message, including service messages, with the following limitations:- A message can only be deleted if it was sent less than 48 hours ago.- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.- Bots can delete outgoing messages in private chats, groups, and supergroups.- Bots can delete incoming messages in private chats.- Bots granted _can_post_messages_ permissions can delete outgoing messages in channels.- If the bot is an administrator of a group, it can delete any message there.- If the bot has _can_delete_messages_ permission in a supergroup or a channel, it can delete any message there.Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#deletemessage"
				},
				"operationId": "deleteMessage",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/deleteMessage"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/deleteMyCommands": {
			"post": {
				"description": "Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, [higher level commands](https://core.telegram.org/bots/api#determining-list-of-commands) will be shown to affected users. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#deletemycommands"
				},
				"operationId": "deleteMyCommands",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/deleteMyCommands"
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/deleteStickerFromSet": {
			"post": {
				"description": "Use this method to delete a sticker from a set created by the bot. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#deletestickerfromset"
				},
				"operationId": "deleteStickerFromSet",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/deleteStickerFromSet"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/deleteWebhook": {
			"post": {
				"description": "Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api#getupdates). Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#deletewebhook"
				},
				"operationId": "deleteWebhook",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/deleteWebhook"
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/editChatInviteLink": {
			"post": {
				"description": "Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#editchatinvitelink"
				},
				"operationId": "editChatInviteLink",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/editChatInviteLink"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultChatInviteLink"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/editMessageCaption": {
			"post": {
				"description": "Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise _True_ is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#editmessagecaption"
				},
				"operationId": "editMessageCaption",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/editMessageCaption"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessageOrBoolean"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/editMessageLiveLocation": {
			"post": {
				"description": "Use this method to edit live location messages. A location can be edited until its _live_period_ expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise _True_ is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#editmessagelivelocation"
				},
				"operationId": "editMessageLiveLocation",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/editMessageLiveLocation"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessageOrBoolean"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/editMessageMedia": {
			"post": {
				"description": "Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise _True_ is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#editmessagemedia"
				},
				"operationId": "editMessageMedia",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/editMessageMedia"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessageOrBoolean"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/editMessageReplyMarkup": {
			"post": {
				"description": "Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise _True_ is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#editmessagereplymarkup"
				},
				"operationId": "editMessageReplyMarkup",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/editMessageReplyMarkup"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessageOrBoolean"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/editMessageText": {
			"post": {
				"description": "Use this method to edit text and [game](https://core.telegram.org/bots/api#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise _True_ is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#editmessagetext"
				},
				"operationId": "editMessageText",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/editMessageText"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessageOrBoolean"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/exportChatInviteLink": {
			"post": {
				"description": "Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as _String_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#exportchatinvitelink"
				},
				"operationId": "exportChatInviteLink",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/exportChatInviteLink"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultString"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/forwardMessage": {
			"post": {
				"description": "Use this method to forward messages of any kind. Service messages can't be forwarded. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#forwardmessage"
				},
				"operationId": "forwardMessage",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/forwardMessage"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getChat": {
			"post": {
				"description": "Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api#chat) object on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getchat"
				},
				"operationId": "getChat",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getChat"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultChat"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getChatAdministrators": {
			"post": {
				"description": "Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getchatadministrators"
				},
				"operationId": "getChatAdministrators",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getChatAdministrators"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultArrayOfChatMember"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getChatMember": {
			"post": {
				"description": "Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api#chatmember) object on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getchatmember"
				},
				"operationId": "getChatMember",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getChatMember"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultChatMember"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getChatMemberCount": {
			"post": {
				"description": "Use this method to get the number of members in a chat. Returns _Int_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getchatmembercount"
				},
				"operationId": "getChatMemberCount",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getChatMemberCount"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultInt"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getChatMenuButton": {
			"post": {
				"description": "Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns [MenuButton](https://core.telegram.org/bots/api#menubutton) on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getchatmenubutton"
				},
				"operationId": "getChatMenuButton",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getChatMenuButton"
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getFile": {
			"post": {
				"description": "Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api#getfile) again.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getfile"
				},
				"operationId": "getFile",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getFile"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultFile"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getGameHighScores": {
			"post": {
				"description": "Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an _Array_ of [GameHighScore](https://core.telegram.org/bots/api#gamehighscore) objects.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getgamehighscores"
				},
				"operationId": "getGameHighScores",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getGameHighScores"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultArrayOfGameHighScore"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getMe": {
			"post": {
				"description": "A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api#user) object.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getme"
				},
				"operationId": "getMe",
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultUser"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getMyCommands": {
			"post": {
				"description": "Use this method to get the current list of the bot's commands for the given scope and user language. Returns Array of [BotCommand](https://core.telegram.org/bots/api#botcommand) on success. If commands aren't set, an empty list is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getmycommands"
				},
				"operationId": "getMyCommands",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getMyCommands"
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultArrayOfBotCommand"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getMyDefaultAdministratorRights": {
			"post": {
				"description": "Use this method to get the current default administrator rights of the bot. Returns [ChatAdministratorRights](https://core.telegram.org/bots/api#chatadministratorrights) on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getmydefaultadministratorrights"
				},
				"operationId": "getMyDefaultAdministratorRights",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getMyDefaultAdministratorRights"
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getStickerSet": {
			"post": {
				"description": "Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api#stickerset) object is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getstickerset"
				},
				"operationId": "getStickerSet",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getStickerSet"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultStickerSet"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getUpdates": {
			"post": {
				"description": "Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api#update) objects is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getupdates"
				},
				"operationId": "getUpdates",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getUpdates"
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultArrayOfUpdate"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getUserProfilePhotos": {
			"post": {
				"description": "Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api#userprofilephotos) object.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getuserprofilephotos"
				},
				"operationId": "getUserProfilePhotos",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/getUserProfilePhotos"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultUserProfilePhotos"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/getWebhookInfo": {
			"post": {
				"description": "Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api#getupdates), will return an object with the _url_ field empty.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#getwebhookinfo"
				},
				"operationId": "getWebhookInfo",
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultWebhookInfo"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/leaveChat": {
			"post": {
				"description": "Use this method for your bot to leave a group, supergroup or channel. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#leavechat"
				},
				"operationId": "leaveChat",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/leaveChat"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/logOut": {
			"post": {
				"description": "Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns _True_ on success. Requires no parameters.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#logout"
				},
				"operationId": "logOut",
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/pinChatMessage": {
			"post": {
				"description": "Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#pinchatmessage"
				},
				"operationId": "pinChatMessage",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/pinChatMessage"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/promoteChatMember": {
			"post": {
				"description": "Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass _False_ for all boolean parameters to demote a user. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#promotechatmember"
				},
				"operationId": "promoteChatMember",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/promoteChatMember"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/restrictChatMember": {
			"post": {
				"description": "Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass _True_ for all permissions to lift restrictions from a user. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#restrictchatmember"
				},
				"operationId": "restrictChatMember",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/restrictChatMember"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/revokeChatInviteLink": {
			"post": {
				"description": "Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as [ChatInviteLink](https://core.telegram.org/bots/api#chatinvitelink) object.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#revokechatinvitelink"
				},
				"operationId": "revokeChatInviteLink",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/revokeChatInviteLink"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultChatInviteLink"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendAnimation": {
			"post": {
				"description": "Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendanimation"
				},
				"operationId": "sendAnimation",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendAnimation"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendAudio": {
			"post": {
				"description": "For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api#sendvoice) method instead.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendaudio"
				},
				"operationId": "sendAudio",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendAudio"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendChatAction": {
			"post": {
				"description": "We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendchataction"
				},
				"operationId": "sendChatAction",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendChatAction"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendContact": {
			"post": {
				"description": "Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendcontact"
				},
				"operationId": "sendContact",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendContact"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendDice": {
			"post": {
				"description": "Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#senddice"
				},
				"operationId": "sendDice",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendDice"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendDocument": {
			"post": {
				"description": "Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#senddocument"
				},
				"operationId": "sendDocument",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendDocument"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendGame": {
			"post": {
				"description": "Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendgame"
				},
				"operationId": "sendGame",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendGame"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendInvoice": {
			"post": {
				"description": "Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendinvoice"
				},
				"operationId": "sendInvoice",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendInvoice"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendLocation": {
			"post": {
				"description": "Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendlocation"
				},
				"operationId": "sendLocation",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendLocation"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendMediaGroup": {
			"post": {
				"description": "Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api#message) that were sent is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendmediagroup"
				},
				"operationId": "sendMediaGroup",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendMediaGroup"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultArrayOfMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendMessage": {
			"post": {
				"description": "Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendmessage"
				},
				"operationId": "sendMessage",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendMessage"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendPhoto": {
			"post": {
				"description": "Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendphoto"
				},
				"operationId": "sendPhoto",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendPhoto"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendPoll": {
			"post": {
				"description": "Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendpoll"
				},
				"operationId": "sendPoll",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendPoll"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendSticker": {
			"post": {
				"description": "Use this method to send static .WEBP, [animated](https://telegram.org/blog/animated-stickers) .TGS, or [video](https://telegram.org/blog/video-stickers-better-reactions) .WEBM stickers. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendsticker"
				},
				"operationId": "sendSticker",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendSticker"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendVenue": {
			"post": {
				"description": "Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendvenue"
				},
				"operationId": "sendVenue",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendVenue"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendVideo": {
			"post": {
				"description": "Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api#document)). On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendvideo"
				},
				"operationId": "sendVideo",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendVideo"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendVideoNote": {
			"post": {
				"description": "As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendvideonote"
				},
				"operationId": "sendVideoNote",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendVideoNote"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/sendVoice": {
			"post": {
				"description": "Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api#audio) or [Document](https://core.telegram.org/bots/api#document)). On success, the sent [Message](https://core.telegram.org/bots/api#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#sendvoice"
				},
				"operationId": "sendVoice",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/sendVoice"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessage"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setChatAdministratorCustomTitle": {
			"post": {
				"description": "Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setchatadministratorcustomtitle"
				},
				"operationId": "setChatAdministratorCustomTitle",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setChatAdministratorCustomTitle"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setChatDescription": {
			"post": {
				"description": "Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setchatdescription"
				},
				"operationId": "setChatDescription",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setChatDescription"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setChatMenuButton": {
			"post": {
				"description": "Use this method to change the bot's menu button in a private chat, or the default menu button. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setchatmenubutton"
				},
				"operationId": "setChatMenuButton",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setChatMenuButton"
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setChatPermissions": {
			"post": {
				"description": "Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the _can_restrict_members_ administrator rights. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setchatpermissions"
				},
				"operationId": "setChatPermissions",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setChatPermissions"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setChatPhoto": {
			"post": {
				"description": "Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setchatphoto"
				},
				"operationId": "setChatPhoto",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setChatPhoto"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setChatStickerSet": {
			"post": {
				"description": "Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field _can_set_sticker_set_ optionally returned in [getChat](https://core.telegram.org/bots/api#getchat) requests to check if the bot can use this method. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setchatstickerset"
				},
				"operationId": "setChatStickerSet",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setChatStickerSet"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setChatTitle": {
			"post": {
				"description": "Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setchattitle"
				},
				"operationId": "setChatTitle",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setChatTitle"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setGameScore": {
			"post": {
				"description": "Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the [Message](https://core.telegram.org/bots/api#message) is returned, otherwise _True_ is returned. Returns an error, if the new score is not greater than the user's current score in the chat and _force_ is _False_.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setgamescore"
				},
				"operationId": "setGameScore",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setGameScore"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setMyCommands": {
			"post": {
				"description": "Use this method to change the list of the bot's commands. See [](https://core.telegram.org/bots#commands)[https://core.telegram.org/bots#commands](https://core.telegram.org/bots#commands) for more details about bot commands. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setmycommands"
				},
				"operationId": "setMyCommands",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setMyCommands"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setMyDefaultAdministratorRights": {
			"post": {
				"description": "Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are are free to modify the list before adding the bot. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setmydefaultadministratorrights"
				},
				"operationId": "setMyDefaultAdministratorRights",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setMyDefaultAdministratorRights"
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setPassportDataErrors": {
			"post": {
				"description": "Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setpassportdataerrors"
				},
				"operationId": "setPassportDataErrors",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setPassportDataErrors"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setStickerPositionInSet": {
			"post": {
				"description": "Use this method to move a sticker in a set created by the bot to a specific position. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setstickerpositioninset"
				},
				"operationId": "setStickerPositionInSet",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setStickerPositionInSet"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setStickerSetThumb": {
			"post": {
				"description": "Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Video thumbnails can be set only for video sticker sets only. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setstickersetthumb"
				},
				"operationId": "setStickerSetThumb",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setStickerSetThumb"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/setWebhook": {
			"post": {
				"description": "If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter _secret_token_. If specified, the request will contain a header `X-Telegram-Bot-Api-Secret-Token` with the secret token as content.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#setwebhook"
				},
				"operationId": "setWebhook",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/setWebhook"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/stopMessageLiveLocation": {
			"post": {
				"description": "Use this method to stop updating a live location message before _live_period_ expires. On success, if the message is not an inline message, the edited [Message](https://core.telegram.org/bots/api#message) is returned, otherwise _True_ is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#stopmessagelivelocation"
				},
				"operationId": "stopMessageLiveLocation",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/stopMessageLiveLocation"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultMessageOrBoolean"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/stopPoll": {
			"post": {
				"description": "Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api#poll) is returned.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#stoppoll"
				},
				"operationId": "stopPoll",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/stopPoll"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultPoll"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/unbanChatMember": {
			"post": {
				"description": "Use this method to unban a previously banned user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter _only_if_banned_. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#unbanchatmember"
				},
				"operationId": "unbanChatMember",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/unbanChatMember"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/unbanChatSenderChat": {
			"post": {
				"description": "Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#unbanchatsenderchat"
				},
				"operationId": "unbanChatSenderChat",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/unbanChatSenderChat"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/unpinAllChatMessages": {
			"post": {
				"description": "Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#unpinallchatmessages"
				},
				"operationId": "unpinAllChatMessages",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/unpinAllChatMessages"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/unpinChatMessage": {
			"post": {
				"description": "Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns _True_ on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#unpinchatmessage"
				},
				"operationId": "unpinChatMessage",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/unpinChatMessage"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/Result"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		},
		"/uploadStickerFile": {
			"post": {
				"description": "Use this method to upload a .PNG file with a sticker for later use in _createNewStickerSet_ and _addStickerToSet_ methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api#file) on success.",
				"externalDocs": {
					"url": "https://core.telegram.org/bots/api#uploadstickerfile"
				},
				"operationId": "uploadStickerFile",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/uploadStickerFile"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/ResultFile"
					},
					"default": {
						"$ref": "#/components/responses/Error"
					}
				}
			}
		}
	},
	"servers": [
		{
			"description": "production",
			"url": "https://api.telegram.org/bot{token}/",
			"variables": {
				"token": {
					"default": "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11",
					"description": "Telegram Bot API token"
				}
			}
		},
		{
			"description": "test",
			"url": "https://api.telegram.org/bot{token}/test",
			"variables": {
				"token": {
					"default": "123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11",
					"description": "Telegram Bot API token"
				}
			}
		}
	]
}