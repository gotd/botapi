{
  "openapi": "3.0.3",
  "info": {
    "title": "Telegram Bot API",
    "description": "API for Telegram bots",
    "termsOfService": "https://telegram.org/tos",
    "version": "5.3"
  },
  "servers": [
    {
      "description": "production",
      "url": "https://api.telegram.org/"
    }
  ],
  "paths": {
    "/addStickerToSet": {
      "post": {
        "operationId": "addStickerToSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addStickerToSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/answerCallbackQuery": {
      "post": {
        "operationId": "answerCallbackQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/answerCallbackQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/answerInlineQuery": {
      "post": {
        "operationId": "answerInlineQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/answerInlineQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/answerPreCheckoutQuery": {
      "post": {
        "operationId": "answerPreCheckoutQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/answerPreCheckoutQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/answerShippingQuery": {
      "post": {
        "operationId": "answerShippingQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/answerShippingQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/banChatMember": {
      "post": {
        "operationId": "banChatMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/banChatMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/copyMessage": {
      "post": {
        "operationId": "copyMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/copyMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/createChatInviteLink": {
      "post": {
        "operationId": "createChatInviteLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createChatInviteLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/createNewStickerSet": {
      "post": {
        "operationId": "createNewStickerSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createNewStickerSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/deleteChatPhoto": {
      "post": {
        "operationId": "deleteChatPhoto",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteChatPhoto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/deleteChatStickerSet": {
      "post": {
        "operationId": "deleteChatStickerSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteChatStickerSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/deleteMessage": {
      "post": {
        "operationId": "deleteMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/deleteMyCommands": {
      "post": {
        "operationId": "deleteMyCommands",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteMyCommands"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/deleteStickerFromSet": {
      "post": {
        "operationId": "deleteStickerFromSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteStickerFromSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/deleteWebhook": {
      "post": {
        "operationId": "deleteWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteWebhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/editChatInviteLink": {
      "post": {
        "operationId": "editChatInviteLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editChatInviteLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/editMessageCaption": {
      "post": {
        "operationId": "editMessageCaption",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editMessageCaption"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/editMessageLiveLocation": {
      "post": {
        "operationId": "editMessageLiveLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editMessageLiveLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/editMessageMedia": {
      "post": {
        "operationId": "editMessageMedia",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editMessageMedia"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/editMessageReplyMarkup": {
      "post": {
        "operationId": "editMessageReplyMarkup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editMessageReplyMarkup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/editMessageText": {
      "post": {
        "operationId": "editMessageText",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editMessageText"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/exportChatInviteLink": {
      "post": {
        "operationId": "exportChatInviteLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/exportChatInviteLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/forwardMessage": {
      "post": {
        "operationId": "forwardMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/forwardMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getChat": {
      "post": {
        "operationId": "getChat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getChat"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getChatAdministrators": {
      "post": {
        "operationId": "getChatAdministrators",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getChatAdministrators"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getChatMember": {
      "post": {
        "operationId": "getChatMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getChatMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getChatMemberCount": {
      "post": {
        "operationId": "getChatMemberCount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getChatMemberCount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getFile": {
      "post": {
        "operationId": "getFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getGameHighScores": {
      "post": {
        "operationId": "getGameHighScores",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getGameHighScores"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getMe": {
      "description": "A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object.",
      "post": {
        "operationId": "getMe",
        "responses": {
          "200": {
            "description": "Basic information about the bot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/getMyCommands": {
      "post": {
        "operationId": "getMyCommands",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getMyCommands"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getStickerSet": {
      "post": {
        "operationId": "getStickerSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getStickerSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getUpdates": {
      "post": {
        "operationId": "getUpdates",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getUpdates"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/getUserProfilePhotos": {
      "post": {
        "operationId": "getUserProfilePhotos",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getUserProfilePhotos"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/leaveChat": {
      "post": {
        "operationId": "leaveChat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/leaveChat"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/pinChatMessage": {
      "post": {
        "operationId": "pinChatMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pinChatMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/promoteChatMember": {
      "post": {
        "operationId": "promoteChatMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/promoteChatMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/restrictChatMember": {
      "post": {
        "operationId": "restrictChatMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/restrictChatMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/revokeChatInviteLink": {
      "post": {
        "operationId": "revokeChatInviteLink",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/revokeChatInviteLink"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendAnimation": {
      "post": {
        "operationId": "sendAnimation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendAnimation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendAudio": {
      "post": {
        "operationId": "sendAudio",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendAudio"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendChatAction": {
      "post": {
        "operationId": "sendChatAction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendChatAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendContact": {
      "post": {
        "operationId": "sendContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendContact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendDice": {
      "post": {
        "operationId": "sendDice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendDice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendDocument": {
      "post": {
        "operationId": "sendDocument",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendGame": {
      "post": {
        "operationId": "sendGame",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendGame"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendInvoice": {
      "post": {
        "operationId": "sendInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendLocation": {
      "post": {
        "operationId": "sendLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendMediaGroup": {
      "post": {
        "operationId": "sendMediaGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendMediaGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendMessage": {
      "post": {
        "operationId": "sendMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendPhoto": {
      "post": {
        "operationId": "sendPhoto",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendPhoto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendPoll": {
      "post": {
        "operationId": "sendPoll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendPoll"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendSticker": {
      "post": {
        "operationId": "sendSticker",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendSticker"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendVenue": {
      "post": {
        "operationId": "sendVenue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendVenue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendVideo": {
      "post": {
        "operationId": "sendVideo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendVideo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendVideoNote": {
      "post": {
        "operationId": "sendVideoNote",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendVideoNote"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/sendVoice": {
      "post": {
        "operationId": "sendVoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendVoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setChatAdministratorCustomTitle": {
      "post": {
        "operationId": "setChatAdministratorCustomTitle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setChatAdministratorCustomTitle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setChatDescription": {
      "post": {
        "operationId": "setChatDescription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setChatDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setChatPermissions": {
      "post": {
        "operationId": "setChatPermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setChatPermissions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setChatPhoto": {
      "post": {
        "operationId": "setChatPhoto",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setChatPhoto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setChatStickerSet": {
      "post": {
        "operationId": "setChatStickerSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setChatStickerSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setChatTitle": {
      "post": {
        "operationId": "setChatTitle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setChatTitle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setGameScore": {
      "post": {
        "operationId": "setGameScore",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setGameScore"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setMyCommands": {
      "post": {
        "operationId": "setMyCommands",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setMyCommands"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setPassportDataErrors": {
      "post": {
        "operationId": "setPassportDataErrors",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setPassportDataErrors"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setStickerPositionInSet": {
      "post": {
        "operationId": "setStickerPositionInSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setStickerPositionInSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setStickerSetThumb": {
      "post": {
        "operationId": "setStickerSetThumb",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setStickerSetThumb"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/setWebhook": {
      "post": {
        "operationId": "setWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setWebhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/stopMessageLiveLocation": {
      "post": {
        "operationId": "stopMessageLiveLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stopMessageLiveLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/stopPoll": {
      "post": {
        "operationId": "stopPoll",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stopPoll"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/unbanChatMember": {
      "post": {
        "operationId": "unbanChatMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unbanChatMember"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/unpinAllChatMessages": {
      "post": {
        "operationId": "unpinAllChatMessages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unpinAllChatMessages"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/unpinChatMessage": {
      "post": {
        "operationId": "unpinChatMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unpinChatMessage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    },
    "/uploadStickerFile": {
      "post": {
        "operationId": "uploadStickerFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/uploadStickerFile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {}
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Animation": {
        "type": "object",
        "properties": {
          "duration": {
            "description": "Duration of the video in seconds as defined by sender",
            "type": "integer"
          },
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_name": {
            "description": "Original animation filename as defined by sender",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          },
          "height": {
            "description": "Video height as defined by sender",
            "type": "integer"
          },
          "mime_type": {
            "description": "MIME type of the file as defined by sender",
            "type": "string"
          },
          "thumb": {
            "$ref": "#/components/schemas/PhotoSize",
            "description": "Animation thumbnail as defined by sender"
          },
          "width": {
            "description": "Video width as defined by sender",
            "type": "integer"
          }
        },
        "required": [
          "file_id",
          "file_unique_id",
          "width",
          "height",
          "duration"
        ]
      },
      "Audio": {
        "type": "object",
        "properties": {
          "duration": {
            "description": "Duration of the audio in seconds as defined by sender",
            "type": "integer"
          },
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_name": {
            "description": "Original filename as defined by sender",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          },
          "mime_type": {
            "description": "MIME type of the file as defined by sender",
            "type": "string"
          },
          "performer": {
            "description": "Performer of the audio as defined by sender or by audio tags",
            "type": "string"
          },
          "thumb": {
            "$ref": "#/components/schemas/PhotoSize",
            "description": "Thumbnail of the album cover to which the music file belongs"
          },
          "title": {
            "description": "Title of the audio as defined by sender or by audio tags",
            "type": "string"
          }
        },
        "required": [
          "file_id",
          "file_unique_id",
          "duration"
        ]
      },
      "BotCommand": {
        "type": "object",
        "properties": {
          "command": {
            "description": "Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores",
            "type": "string"
          },
          "description": {
            "description": "Description of the command, 3-256 characters",
            "type": "string"
          }
        },
        "required": [
          "command",
          "description"
        ]
      },
      "BotCommandScopeAllChatAdministrators": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Scope type, must be all_chat_administrators",
            "type": "string",
            "default": "all_chat_administrators"
          }
        },
        "required": [
          "type"
        ]
      },
      "BotCommandScopeAllGroupChats": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Scope type, must be all_group_chats",
            "type": "string",
            "default": "all_group_chats"
          }
        },
        "required": [
          "type"
        ]
      },
      "BotCommandScopeAllPrivateChats": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Scope type, must be all_private_chats",
            "type": "string",
            "default": "all_private_chats"
          }
        },
        "required": [
          "type"
        ]
      },
      "BotCommandScopeChat": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Scope type, must be chat",
            "type": "string",
            "default": "chat"
          }
        },
        "required": [
          "type"
        ]
      },
      "BotCommandScopeChatAdministrators": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Scope type, must be chat_administrators",
            "type": "string",
            "default": "chat_administrators"
          }
        },
        "required": [
          "type"
        ]
      },
      "BotCommandScopeChatMember": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Scope type, must be chat_member",
            "type": "string",
            "default": "chat_member"
          },
          "user_id": {
            "description": "Unique identifier of the target user",
            "type": "integer"
          }
        },
        "required": [
          "type",
          "user_id"
        ]
      },
      "BotCommandScopeDefault": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Scope type, must be default",
            "type": "string",
            "default": "default"
          }
        },
        "required": [
          "type"
        ]
      },
      "CallbackQuery": {
        "type": "object",
        "properties": {
          "chat_instance": {
            "description": "Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games",
            "type": "string"
          },
          "data": {
            "description": "Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field",
            "type": "string"
          },
          "from": {
            "$ref": "#/components/schemas/User",
            "description": "Sender"
          },
          "game_short_name": {
            "description": "Short name of a Game to be returned, serves as the unique identifier for the game",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this query",
            "type": "string"
          },
          "inline_message_id": {
            "description": "Identifier of the message sent via the bot in inline mode, that originated the query",
            "type": "string"
          },
          "message": {
            "$ref": "#/components/schemas/Message",
            "description": "Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old"
          }
        },
        "required": [
          "id",
          "from",
          "chat_instance"
        ]
      },
      "Chat": {
        "type": "object",
        "properties": {
          "bio": {
            "description": "Bio of the other party in a private chat. Returned only in getChat",
            "type": "string"
          },
          "can_set_sticker_set": {
            "description": "True, if the bot can change the group sticker set. Returned only in getChat",
            "type": "boolean"
          },
          "description": {
            "description": "Description, for groups, supergroups and channel chats. Returned only in getChat",
            "type": "string"
          },
          "first_name": {
            "description": "First name of the other party in a private chat",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier",
            "type": "integer"
          },
          "invite_link": {
            "description": "Primary invite link, for groups, supergroups and channel chats. Returned only in getChat",
            "type": "string"
          },
          "last_name": {
            "description": "Last name of the other party in a private chat",
            "type": "string"
          },
          "linked_chat_id": {
            "description": "Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in getChat",
            "type": "integer"
          },
          "location": {
            "$ref": "#/components/schemas/ChatLocation",
            "description": "For supergroups, the location to which the supergroup is connected. Returned only in getChat"
          },
          "message_auto_delete_time": {
            "description": "The time after which all messages sent to the chat will be automatically deleted; in seconds. Returned only in getChat",
            "type": "integer"
          },
          "permissions": {
            "$ref": "#/components/schemas/ChatPermissions",
            "description": "Default chat member permissions, for groups and supergroups. Returned only in getChat"
          },
          "photo": {
            "$ref": "#/components/schemas/ChatPhoto",
            "description": "Chat photo. Returned only in getChat"
          },
          "pinned_message": {
            "$ref": "#/components/schemas/Message",
            "description": "The most recent pinned message (by sending date). Returned only in getChat"
          },
          "slow_mode_delay": {
            "description": "For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in getChat",
            "type": "integer"
          },
          "sticker_set_name": {
            "description": "For supergroups, name of group sticker set. Returned only in getChat",
            "type": "string"
          },
          "title": {
            "description": "Title, for supergroups, channels and group chats",
            "type": "string"
          },
          "type": {
            "description": "Type of chat, can be either “private”, “group”, “supergroup” or “channel”",
            "type": "string"
          },
          "username": {
            "description": "Username, for private chats, supergroups and channels if available",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "ChatInviteLink": {
        "type": "object",
        "properties": {
          "creator": {
            "$ref": "#/components/schemas/User",
            "description": "Creator of the link"
          },
          "expire_date": {
            "description": "Point in time (Unix timestamp) when the link will expire or has been expired",
            "type": "integer"
          },
          "invite_link": {
            "description": "The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with “…”",
            "type": "string"
          },
          "is_primary": {
            "description": "True, if the link is primary",
            "type": "boolean"
          },
          "is_revoked": {
            "description": "True, if the link is revoked",
            "type": "boolean"
          },
          "member_limit": {
            "description": "Maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999",
            "type": "integer"
          }
        },
        "required": [
          "invite_link",
          "creator",
          "is_primary",
          "is_revoked"
        ]
      },
      "ChatLocation": {
        "type": "object",
        "properties": {
          "address": {
            "description": "Location address; 1-64 characters, as defined by the chat owner",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location",
            "description": "The location to which the supergroup is connected. Can't be a live location"
          }
        },
        "required": [
          "location",
          "address"
        ]
      },
      "ChatMemberAdministrator": {
        "type": "object",
        "properties": {
          "can_be_edited": {
            "description": "True, if the bot is allowed to edit administrator privileges of that user",
            "type": "boolean"
          },
          "can_change_info": {
            "description": "True, if the user is allowed to change the chat title, photo and other settings",
            "type": "boolean"
          },
          "can_delete_messages": {
            "description": "True, if the administrator can delete messages of other users",
            "type": "boolean"
          },
          "can_edit_messages": {
            "description": "True, if the administrator can edit messages of other users and can pin messages; channels only",
            "type": "boolean"
          },
          "can_invite_users": {
            "description": "True, if the user is allowed to invite new users to the chat",
            "type": "boolean"
          },
          "can_manage_chat": {
            "description": "True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege",
            "type": "boolean"
          },
          "can_manage_voice_chats": {
            "description": "True, if the administrator can manage voice chats",
            "type": "boolean"
          },
          "can_pin_messages": {
            "description": "True, if the user is allowed to pin messages; groups and supergroups only",
            "type": "boolean"
          },
          "can_post_messages": {
            "description": "True, if the administrator can post in the channel; channels only",
            "type": "boolean"
          },
          "can_promote_members": {
            "description": "True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)",
            "type": "boolean"
          },
          "can_restrict_members": {
            "description": "True, if the administrator can restrict, ban or unban chat members",
            "type": "boolean"
          },
          "custom_title": {
            "description": "Custom title for this user",
            "type": "string"
          },
          "is_anonymous": {
            "description": "True, if the user's presence in the chat is hidden",
            "type": "boolean"
          },
          "status": {
            "description": "The member's status in the chat, always “administrator”",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "Information about the user"
          }
        },
        "required": [
          "status",
          "user",
          "can_be_edited",
          "is_anonymous",
          "can_manage_chat",
          "can_delete_messages",
          "can_manage_voice_chats",
          "can_restrict_members",
          "can_promote_members",
          "can_change_info",
          "can_invite_users"
        ]
      },
      "ChatMemberBanned": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The member's status in the chat, always “kicked”",
            "type": "string"
          },
          "until_date": {
            "description": "Date when restrictions will be lifted for this user; unix time. If 0, then the user is banned forever",
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "Information about the user"
          }
        },
        "required": [
          "status",
          "user",
          "until_date"
        ]
      },
      "ChatMemberLeft": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The member's status in the chat, always “left”",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "Information about the user"
          }
        },
        "required": [
          "status",
          "user"
        ]
      },
      "ChatMemberMember": {
        "type": "object",
        "properties": {
          "status": {
            "description": "The member's status in the chat, always “member”",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "Information about the user"
          }
        },
        "required": [
          "status",
          "user"
        ]
      },
      "ChatMemberOwner": {
        "type": "object",
        "properties": {
          "custom_title": {
            "description": "Custom title for this user",
            "type": "string"
          },
          "is_anonymous": {
            "description": "True, if the user's presence in the chat is hidden",
            "type": "boolean"
          },
          "status": {
            "description": "The member's status in the chat, always “creator”",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "Information about the user"
          }
        },
        "required": [
          "status",
          "user",
          "is_anonymous"
        ]
      },
      "ChatMemberRestricted": {
        "type": "object",
        "properties": {
          "can_add_web_page_previews": {
            "description": "True, if the user is allowed to add web page previews to their messages",
            "type": "boolean"
          },
          "can_change_info": {
            "description": "True, if the user is allowed to change the chat title, photo and other settings",
            "type": "boolean"
          },
          "can_invite_users": {
            "description": "True, if the user is allowed to invite new users to the chat",
            "type": "boolean"
          },
          "can_pin_messages": {
            "description": "True, if the user is allowed to pin messages",
            "type": "boolean"
          },
          "can_send_media_messages": {
            "description": "True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes",
            "type": "boolean"
          },
          "can_send_messages": {
            "description": "True, if the user is allowed to send text messages, contacts, locations and venues",
            "type": "boolean"
          },
          "can_send_other_messages": {
            "description": "True, if the user is allowed to send animations, games, stickers and use inline bots",
            "type": "boolean"
          },
          "can_send_polls": {
            "description": "True, if the user is allowed to send polls",
            "type": "boolean"
          },
          "is_member": {
            "description": "True, if the user is a member of the chat at the moment of the request",
            "type": "boolean"
          },
          "status": {
            "description": "The member's status in the chat, always “restricted”",
            "type": "string"
          },
          "until_date": {
            "description": "Date when restrictions will be lifted for this user; unix time. If 0, then the user is restricted forever",
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "Information about the user"
          }
        },
        "required": [
          "status",
          "user",
          "is_member",
          "can_change_info",
          "can_invite_users",
          "can_pin_messages",
          "can_send_messages",
          "can_send_media_messages",
          "can_send_polls",
          "can_send_other_messages",
          "can_add_web_page_previews",
          "until_date"
        ]
      },
      "ChatMemberUpdated": {
        "type": "object",
        "properties": {
          "chat": {
            "$ref": "#/components/schemas/Chat",
            "description": "Chat the user belongs to"
          },
          "date": {
            "description": "Date the change was done in Unix time",
            "type": "integer"
          },
          "from": {
            "$ref": "#/components/schemas/User",
            "description": "Performer of the action, which resulted in the change"
          },
          "invite_link": {
            "$ref": "#/components/schemas/ChatInviteLink",
            "description": "Chat invite link, which was used by the user to join the chat; for joining by invite link events only"
          },
          "new_chat_member": {
            "$ref": "#/components/schemas/ChatMember",
            "description": "New information about the chat member"
          },
          "old_chat_member": {
            "$ref": "#/components/schemas/ChatMember",
            "description": "Previous information about the chat member"
          }
        },
        "required": [
          "chat",
          "from",
          "date",
          "old_chat_member",
          "new_chat_member"
        ]
      },
      "ChatPermissions": {
        "type": "object",
        "properties": {
          "can_add_web_page_previews": {
            "description": "True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages",
            "type": "boolean"
          },
          "can_change_info": {
            "description": "True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups",
            "type": "boolean"
          },
          "can_invite_users": {
            "description": "True, if the user is allowed to invite new users to the chat",
            "type": "boolean"
          },
          "can_pin_messages": {
            "description": "True, if the user is allowed to pin messages. Ignored in public supergroups",
            "type": "boolean"
          },
          "can_send_media_messages": {
            "description": "True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages",
            "type": "boolean"
          },
          "can_send_messages": {
            "description": "True, if the user is allowed to send text messages, contacts, locations and venues",
            "type": "boolean"
          },
          "can_send_other_messages": {
            "description": "True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages",
            "type": "boolean"
          },
          "can_send_polls": {
            "description": "True, if the user is allowed to send polls, implies can_send_messages",
            "type": "boolean"
          }
        }
      },
      "ChatPhoto": {
        "type": "object",
        "properties": {
          "big_file_id": {
            "description": "File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed",
            "type": "string"
          },
          "big_file_unique_id": {
            "description": "Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          },
          "small_file_id": {
            "description": "File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed",
            "type": "string"
          },
          "small_file_unique_id": {
            "description": "Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          }
        },
        "required": [
          "small_file_id",
          "small_file_unique_id",
          "big_file_id",
          "big_file_unique_id"
        ]
      },
      "ChosenInlineResult": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/User",
            "description": "The user that chose the result"
          },
          "inline_message_id": {
            "description": "Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location",
            "description": "Sender location, only for bots that require user location"
          },
          "query": {
            "description": "The query that was used to obtain the result",
            "type": "string"
          },
          "result_id": {
            "description": "The unique identifier for the result that was chosen",
            "type": "string"
          }
        },
        "required": [
          "result_id",
          "from",
          "query"
        ]
      },
      "Contact": {
        "type": "object",
        "properties": {
          "first_name": {
            "description": "Contact's first name",
            "type": "string"
          },
          "last_name": {
            "description": "Contact's last name",
            "type": "string"
          },
          "phone_number": {
            "description": "Contact's phone number",
            "type": "string"
          },
          "user_id": {
            "description": "Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier",
            "type": "integer"
          },
          "vcard": {
            "description": "Additional data about the contact in the form of a vCard",
            "type": "string"
          }
        },
        "required": [
          "phone_number",
          "first_name"
        ]
      },
      "Dice": {
        "type": "object",
        "properties": {
          "emoji": {
            "description": "Emoji on which the dice throw animation is based",
            "type": "string"
          },
          "value": {
            "description": "Value of the dice, 1-6 for “”, “” and “” base emoji, 1-5 for “” and “” base emoji, 1-64 for “” base emoji",
            "type": "integer"
          }
        },
        "required": [
          "emoji",
          "value"
        ]
      },
      "Document": {
        "type": "object",
        "properties": {
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_name": {
            "description": "Original filename as defined by sender",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          },
          "mime_type": {
            "description": "MIME type of the file as defined by sender",
            "type": "string"
          },
          "thumb": {
            "$ref": "#/components/schemas/PhotoSize",
            "description": "Document thumbnail as defined by sender"
          }
        },
        "required": [
          "file_id",
          "file_unique_id"
        ]
      },
      "EncryptedCredentials": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication",
            "type": "string"
          },
          "hash": {
            "description": "Base64-encoded data hash for data authentication",
            "type": "string"
          },
          "secret": {
            "description": "Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption",
            "type": "string"
          }
        },
        "required": [
          "data",
          "hash",
          "secret"
        ]
      },
      "EncryptedPassportElement": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport” and “address” types. Can be decrypted and verified using the accompanying EncryptedCredentials",
            "type": "string"
          },
          "email": {
            "description": "User's verified email address, available only for “email” type",
            "type": "string"
          },
          "front_side": {
            "$ref": "#/components/schemas/PassportFile",
            "description": "Encrypted file with the front side of the document, provided by the user. Available for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying EncryptedCredentials"
          },
          "hash": {
            "description": "Base64-encoded element hash for using in PassportElementErrorUnspecified",
            "type": "string"
          },
          "phone_number": {
            "description": "User's verified phone number, available only for “phone_number” type",
            "type": "string"
          },
          "reverse_side": {
            "$ref": "#/components/schemas/PassportFile",
            "description": "Encrypted file with the reverse side of the document, provided by the user. Available for “driver_license” and “identity_card”. The file can be decrypted and verified using the accompanying EncryptedCredentials"
          },
          "selfie": {
            "$ref": "#/components/schemas/PassportFile",
            "description": "Encrypted file with the selfie of the user holding a document, provided by the user; available for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be decrypted and verified using the accompanying EncryptedCredentials"
          },
          "type": {
            "description": "Element type. One of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”, “phone_number”, “email”",
            "type": "string"
          }
        },
        "required": [
          "type",
          "hash"
        ]
      },
      "File": {
        "type": "object",
        "properties": {
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_path": {
            "description": "File path. Use https://api.telegram.org/file/bot\u003ctoken\u003e/\u003cfile_path\u003e to get the file",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes, if known",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          }
        },
        "required": [
          "file_id",
          "file_unique_id"
        ]
      },
      "ForceReply": {
        "type": "object",
        "properties": {
          "force_reply": {
            "description": "Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'",
            "type": "boolean"
          },
          "input_field_placeholder": {
            "description": "The placeholder to be shown in the input field when the reply is active; 1-64 characters",
            "type": "string"
          },
          "selective": {
            "description": "Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message",
            "type": "boolean"
          }
        },
        "required": [
          "force_reply"
        ]
      },
      "Game": {
        "type": "object",
        "properties": {
          "animation": {
            "$ref": "#/components/schemas/Animation",
            "description": "Animation that will be displayed in the game message in chats. Upload via BotFather"
          },
          "description": {
            "description": "Description of the game",
            "type": "string"
          },
          "text": {
            "description": "Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters",
            "type": "string"
          },
          "title": {
            "description": "Title of the game",
            "type": "string"
          }
        },
        "required": [
          "title",
          "description"
        ]
      },
      "GameHighScore": {
        "type": "object",
        "properties": {
          "position": {
            "description": "Position in high score table for the game",
            "type": "integer"
          },
          "score": {
            "description": "Score",
            "type": "integer"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "User"
          }
        },
        "required": [
          "position",
          "user",
          "score"
        ]
      },
      "InlineKeyboardButton": {
        "type": "object",
        "properties": {
          "callback_data": {
            "description": "Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes",
            "type": "string"
          },
          "callback_game": {
            "$ref": "#/components/schemas/CallbackGame",
            "description": "Description of the game that will be launched when the user presses the button.NOTE: This type of button must always be the first button in the first row"
          },
          "login_url": {
            "$ref": "#/components/schemas/LoginUrl",
            "description": "An HTTP URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget"
          },
          "pay": {
            "description": "Specify True, to send a Pay button.NOTE: This type of button must always be the first button in the first row",
            "type": "boolean"
          },
          "switch_inline_query": {
            "description": "If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.Note: This offers an easy way for users to start using your bot in inline mode when they are currently in a private chat with it. Especially useful when combined with switch_pm… actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen",
            "type": "string"
          },
          "switch_inline_query_current_chat": {
            "description": "If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options",
            "type": "string"
          },
          "text": {
            "description": "Label text on the button",
            "type": "string"
          },
          "url": {
            "description": "HTTP or tg:// url to be opened when button is pressed",
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "InlineKeyboardMarkup": {
        "type": "object"
      },
      "InlineQuery": {
        "type": "object",
        "properties": {
          "chat_type": {
            "description": "Type of the chat, from which the inline query was sent. Can be either “sender” for a private chat with the inline query sender, “private”, “group”, “supergroup”, or “channel”. The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat",
            "type": "string"
          },
          "from": {
            "$ref": "#/components/schemas/User",
            "description": "Sender"
          },
          "id": {
            "description": "Unique identifier for this query",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location",
            "description": "Sender location, only for bots that request user location"
          },
          "offset": {
            "description": "Offset of the results to be returned, can be controlled by the bot",
            "type": "string"
          },
          "query": {
            "description": "Text of the query (up to 256 characters)",
            "type": "string"
          }
        },
        "required": [
          "id",
          "from",
          "query",
          "offset"
        ]
      },
      "InlineQueryResultArticle": {
        "type": "object",
        "properties": {
          "description": {
            "description": "Short description of the result",
            "type": "string"
          },
          "hide_url": {
            "description": "Pass True, if you don't want the URL to be shown in the message",
            "type": "boolean"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 Bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "thumb_height": {
            "description": "Thumbnail height",
            "type": "integer"
          },
          "thumb_url": {
            "description": "Url of the thumbnail for the result",
            "type": "string"
          },
          "thumb_width": {
            "description": "Thumbnail width",
            "type": "integer"
          },
          "title": {
            "description": "Title of the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be article",
            "type": "string",
            "default": "article"
          },
          "url": {
            "description": "URL of the result",
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "title",
          "input_message_content"
        ]
      },
      "InlineQueryResultAudio": {
        "type": "object",
        "properties": {
          "audio_duration": {
            "description": "Audio duration in seconds",
            "type": "integer"
          },
          "audio_url": {
            "description": "A valid URL for the audio file",
            "type": "string"
          },
          "caption": {
            "description": "Caption, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the audio"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the audio caption. See formatting options for more details",
            "type": "string"
          },
          "performer": {
            "description": "Performer",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "title": {
            "description": "Title",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be audio",
            "type": "string",
            "default": "audio"
          }
        },
        "required": [
          "type",
          "id",
          "audio_url",
          "title"
        ]
      },
      "InlineQueryResultCachedAudio": {
        "type": "object",
        "properties": {
          "audio_file_id": {
            "description": "A valid file identifier for the audio file",
            "type": "string"
          },
          "caption": {
            "description": "Caption, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the audio"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the audio caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "type": {
            "description": "Type of the result, must be audio",
            "type": "string",
            "default": "audio"
          }
        },
        "required": [
          "type",
          "id",
          "audio_file_id"
        ]
      },
      "InlineQueryResultCachedDocument": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the document to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "description": {
            "description": "Short description of the result",
            "type": "string"
          },
          "document_file_id": {
            "description": "A valid file identifier for the file",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the file"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the document caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be document",
            "type": "string",
            "default": "document"
          }
        },
        "required": [
          "type",
          "id",
          "title",
          "document_file_id"
        ]
      },
      "InlineQueryResultCachedGif": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the GIF file to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "gif_file_id": {
            "description": "A valid file identifier for the GIF file",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the GIF animation"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be gif",
            "type": "string",
            "default": "gif"
          }
        },
        "required": [
          "type",
          "id",
          "gif_file_id"
        ]
      },
      "InlineQueryResultCachedMpeg4Gif": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the video animation"
          },
          "mpeg4_file_id": {
            "description": "A valid file identifier for the MP4 file",
            "type": "string"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be mpeg4_gif",
            "type": "string",
            "default": "mpeg4_gif"
          }
        },
        "required": [
          "type",
          "id",
          "mpeg4_file_id"
        ]
      },
      "InlineQueryResultCachedPhoto": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the photo to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "description": {
            "description": "Short description of the result",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the photo"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the photo caption. See formatting options for more details",
            "type": "string"
          },
          "photo_file_id": {
            "description": "A valid file identifier of the photo",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be photo",
            "type": "string",
            "default": "photo"
          }
        },
        "required": [
          "type",
          "id",
          "photo_file_id"
        ]
      },
      "InlineQueryResultCachedSticker": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the sticker"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "sticker_file_id": {
            "description": "A valid file identifier of the sticker",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be sticker",
            "type": "string",
            "default": "sticker"
          }
        },
        "required": [
          "type",
          "id",
          "sticker_file_id"
        ]
      },
      "InlineQueryResultCachedVideo": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the video to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "description": {
            "description": "Short description of the result",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the video"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the video caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be video",
            "type": "string",
            "default": "video"
          },
          "video_file_id": {
            "description": "A valid file identifier for the video file",
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "video_file_id",
          "title"
        ]
      },
      "InlineQueryResultCachedVoice": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the voice message"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the voice message caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "title": {
            "description": "Voice message title",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be voice",
            "type": "string",
            "default": "voice"
          },
          "voice_file_id": {
            "description": "A valid file identifier for the voice message",
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "voice_file_id",
          "title"
        ]
      },
      "InlineQueryResultContact": {
        "type": "object",
        "properties": {
          "first_name": {
            "description": "Contact's first name",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 Bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the contact"
          },
          "last_name": {
            "description": "Contact's last name",
            "type": "string"
          },
          "phone_number": {
            "description": "Contact's phone number",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "thumb_height": {
            "description": "Thumbnail height",
            "type": "integer"
          },
          "thumb_url": {
            "description": "Url of the thumbnail for the result",
            "type": "string"
          },
          "thumb_width": {
            "description": "Thumbnail width",
            "type": "integer"
          },
          "type": {
            "description": "Type of the result, must be contact",
            "type": "string",
            "default": "contact"
          },
          "vcard": {
            "description": "Additional data about the contact in the form of a vCard, 0-2048 bytes",
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "phone_number",
          "first_name"
        ]
      },
      "InlineQueryResultDocument": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the document to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "description": {
            "description": "Short description of the result",
            "type": "string"
          },
          "document_url": {
            "description": "A valid URL for the file",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the file"
          },
          "mime_type": {
            "description": "Mime type of the content of the file, either “application/pdf” or “application/zip”",
            "type": "string"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the document caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "thumb_height": {
            "description": "Thumbnail height",
            "type": "integer"
          },
          "thumb_url": {
            "description": "URL of the thumbnail (JPEG only) for the file",
            "type": "string"
          },
          "thumb_width": {
            "description": "Thumbnail width",
            "type": "integer"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be document",
            "type": "string",
            "default": "document"
          }
        },
        "required": [
          "type",
          "id",
          "title",
          "document_url",
          "mime_type"
        ]
      },
      "InlineQueryResultGame": {
        "type": "object",
        "properties": {
          "game_short_name": {
            "description": "Short name of the game",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "type": {
            "description": "Type of the result, must be game",
            "type": "string",
            "default": "game"
          }
        },
        "required": [
          "type",
          "id",
          "game_short_name"
        ]
      },
      "InlineQueryResultGif": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the GIF file to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "gif_duration": {
            "description": "Duration of the GIF in seconds",
            "type": "integer"
          },
          "gif_height": {
            "description": "Height of the GIF",
            "type": "integer"
          },
          "gif_url": {
            "description": "A valid URL for the GIF file. File size must not exceed 1MB",
            "type": "string"
          },
          "gif_width": {
            "description": "Width of the GIF",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the GIF animation"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "thumb_mime_type": {
            "description": "MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”",
            "type": "string"
          },
          "thumb_url": {
            "description": "URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result",
            "type": "string"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be gif",
            "type": "string",
            "default": "gif"
          }
        },
        "required": [
          "type",
          "id",
          "gif_url",
          "thumb_url"
        ]
      },
      "InlineQueryResultLocation": {
        "type": "object",
        "properties": {
          "heading": {
            "description": "For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified",
            "type": "integer"
          },
          "horizontal_accuracy": {
            "description": "The radius of uncertainty for the location, measured in meters; 0-1500",
            "type": "number"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 Bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the location"
          },
          "latitude": {
            "description": "Location latitude in degrees",
            "type": "number"
          },
          "live_period": {
            "description": "Period in seconds for which the location can be updated, should be between 60 and 86400",
            "type": "integer"
          },
          "longitude": {
            "description": "Location longitude in degrees",
            "type": "number"
          },
          "proximity_alert_radius": {
            "description": "For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified",
            "type": "integer"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "thumb_height": {
            "description": "Thumbnail height",
            "type": "integer"
          },
          "thumb_url": {
            "description": "Url of the thumbnail for the result",
            "type": "string"
          },
          "thumb_width": {
            "description": "Thumbnail width",
            "type": "integer"
          },
          "title": {
            "description": "Location title",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be location",
            "type": "string",
            "default": "location"
          }
        },
        "required": [
          "type",
          "id",
          "latitude",
          "longitude",
          "title"
        ]
      },
      "InlineQueryResultMpeg4Gif": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the video animation"
          },
          "mpeg4_duration": {
            "description": "Video duration in seconds",
            "type": "integer"
          },
          "mpeg4_height": {
            "description": "Video height",
            "type": "integer"
          },
          "mpeg4_url": {
            "description": "A valid URL for the MP4 file. File size must not exceed 1MB",
            "type": "string"
          },
          "mpeg4_width": {
            "description": "Video width",
            "type": "integer"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "thumb_mime_type": {
            "description": "MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”",
            "type": "string"
          },
          "thumb_url": {
            "description": "URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result",
            "type": "string"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be mpeg4_gif",
            "type": "string",
            "default": "mpeg4_gif"
          }
        },
        "required": [
          "type",
          "id",
          "mpeg4_url",
          "thumb_url"
        ]
      },
      "InlineQueryResultPhoto": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the photo to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "description": {
            "description": "Short description of the result",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the photo"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the photo caption. See formatting options for more details",
            "type": "string"
          },
          "photo_height": {
            "description": "Height of the photo",
            "type": "integer"
          },
          "photo_url": {
            "description": "A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB",
            "type": "string"
          },
          "photo_width": {
            "description": "Width of the photo",
            "type": "integer"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "thumb_url": {
            "description": "URL of the thumbnail for the photo",
            "type": "string"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be photo",
            "type": "string",
            "default": "photo"
          }
        },
        "required": [
          "type",
          "id",
          "photo_url",
          "thumb_url"
        ]
      },
      "InlineQueryResultVenue": {
        "type": "object",
        "properties": {
          "address": {
            "description": "Address of the venue",
            "type": "string"
          },
          "foursquare_id": {
            "description": "Foursquare identifier of the venue if known",
            "type": "string"
          },
          "foursquare_type": {
            "description": "Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)",
            "type": "string"
          },
          "google_place_id": {
            "description": "Google Places identifier of the venue",
            "type": "string"
          },
          "google_place_type": {
            "description": "Google Places type of the venue. (See supported types.)",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 Bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the venue"
          },
          "latitude": {
            "description": "Latitude of the venue location in degrees",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude of the venue location in degrees",
            "type": "number"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "thumb_height": {
            "description": "Thumbnail height",
            "type": "integer"
          },
          "thumb_url": {
            "description": "Url of the thumbnail for the result",
            "type": "string"
          },
          "thumb_width": {
            "description": "Thumbnail width",
            "type": "integer"
          },
          "title": {
            "description": "Title of the venue",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be venue",
            "type": "string",
            "default": "venue"
          }
        },
        "required": [
          "type",
          "id",
          "latitude",
          "longitude",
          "title",
          "address"
        ]
      },
      "InlineQueryResultVideo": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the video to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "description": {
            "description": "Short description of the result",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video)"
          },
          "mime_type": {
            "description": "Mime type of the content of video url, “text/html” or “video/mp4”",
            "type": "string"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the video caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "thumb_url": {
            "description": "URL of the thumbnail (JPEG only) for the video",
            "type": "string"
          },
          "title": {
            "description": "Title for the result",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be video",
            "type": "string",
            "default": "video"
          },
          "video_duration": {
            "description": "Video duration in seconds",
            "type": "integer"
          },
          "video_height": {
            "description": "Video height",
            "type": "integer"
          },
          "video_url": {
            "description": "A valid URL for the embedded video player or video file",
            "type": "string"
          },
          "video_width": {
            "description": "Video width",
            "type": "integer"
          }
        },
        "required": [
          "type",
          "id",
          "video_url",
          "mime_type",
          "thumb_url",
          "title"
        ]
      },
      "InlineQueryResultVoice": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this result, 1-64 bytes",
            "type": "string"
          },
          "input_message_content": {
            "$ref": "#/components/schemas/InputMessageContent",
            "description": "Content of the message to be sent instead of the voice recording"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the voice message caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message"
          },
          "title": {
            "description": "Recording title",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be voice",
            "type": "string",
            "default": "voice"
          },
          "voice_duration": {
            "description": "Recording duration in seconds",
            "type": "integer"
          },
          "voice_url": {
            "description": "A valid URL for the voice recording",
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "voice_url",
          "title"
        ]
      },
      "InputContactMessageContent": {
        "type": "object",
        "properties": {
          "first_name": {
            "description": "Contact's first name",
            "type": "string"
          },
          "last_name": {
            "description": "Contact's last name",
            "type": "string"
          },
          "phone_number": {
            "description": "Contact's phone number",
            "type": "string"
          },
          "vcard": {
            "description": "Additional data about the contact in the form of a vCard, 0-2048 bytes",
            "type": "string"
          }
        },
        "required": [
          "phone_number",
          "first_name"
        ]
      },
      "InputInvoiceMessageContent": {
        "type": "object",
        "properties": {
          "currency": {
            "description": "Three-letter ISO 4217 currency code, see more on currencies",
            "type": "string"
          },
          "description": {
            "description": "Product description, 1-255 characters",
            "type": "string"
          },
          "is_flexible": {
            "description": "Pass True, if the final price depends on the shipping method",
            "type": "boolean"
          },
          "max_tip_amount": {
            "description": "The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0",
            "type": "integer"
          },
          "need_email": {
            "description": "Pass True, if you require the user's email address to complete the order",
            "type": "boolean"
          },
          "need_name": {
            "description": "Pass True, if you require the user's full name to complete the order",
            "type": "boolean"
          },
          "need_phone_number": {
            "description": "Pass True, if you require the user's phone number to complete the order",
            "type": "boolean"
          },
          "need_shipping_address": {
            "description": "Pass True, if you require the user's shipping address to complete the order",
            "type": "boolean"
          },
          "payload": {
            "description": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes",
            "type": "string"
          },
          "photo_height": {
            "description": "Photo height",
            "type": "integer"
          },
          "photo_size": {
            "description": "Photo size",
            "type": "integer"
          },
          "photo_url": {
            "description": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for",
            "type": "string"
          },
          "photo_width": {
            "description": "Photo width",
            "type": "integer"
          },
          "provider_data": {
            "description": "A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider",
            "type": "string"
          },
          "provider_token": {
            "description": "Payment provider token, obtained via Botfather",
            "type": "string"
          },
          "send_email_to_provider": {
            "description": "Pass True, if user's email address should be sent to provider",
            "type": "boolean"
          },
          "send_phone_number_to_provider": {
            "description": "Pass True, if user's phone number should be sent to provider",
            "type": "boolean"
          },
          "title": {
            "description": "Product name, 1-32 characters",
            "type": "string"
          }
        },
        "required": [
          "title",
          "description",
          "payload",
          "provider_token",
          "currency"
        ]
      },
      "InputLocationMessageContent": {
        "type": "object",
        "properties": {
          "heading": {
            "description": "For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified",
            "type": "integer"
          },
          "horizontal_accuracy": {
            "description": "The radius of uncertainty for the location, measured in meters; 0-1500",
            "type": "number"
          },
          "latitude": {
            "description": "Latitude of the location in degrees",
            "type": "number"
          },
          "live_period": {
            "description": "Period in seconds for which the location can be updated, should be between 60 and 86400",
            "type": "integer"
          },
          "longitude": {
            "description": "Longitude of the location in degrees",
            "type": "number"
          },
          "proximity_alert_radius": {
            "description": "For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified",
            "type": "integer"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ]
      },
      "InputMediaAnimation": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the animation to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "duration": {
            "description": "Animation duration in seconds",
            "type": "integer"
          },
          "height": {
            "description": "Animation height",
            "type": "integer"
          },
          "media": {
            "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More info on Sending Files »",
            "type": "string"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the animation caption. See formatting options for more details",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be animation",
            "type": "string",
            "default": "animation"
          },
          "width": {
            "description": "Animation width",
            "type": "integer"
          }
        },
        "required": [
          "type",
          "media"
        ]
      },
      "InputMediaAudio": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the audio to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "duration": {
            "description": "Duration of the audio in seconds",
            "type": "integer"
          },
          "media": {
            "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More info on Sending Files »",
            "type": "string"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the audio caption. See formatting options for more details",
            "type": "string"
          },
          "performer": {
            "description": "Performer of the audio",
            "type": "string"
          },
          "title": {
            "description": "Title of the audio",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be audio",
            "type": "string",
            "default": "audio"
          }
        },
        "required": [
          "type",
          "media"
        ]
      },
      "InputMediaDocument": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the document to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "disable_content_type_detection": {
            "description": "Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album",
            "type": "boolean"
          },
          "media": {
            "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More info on Sending Files »",
            "type": "string"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the document caption. See formatting options for more details",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be document",
            "type": "string",
            "default": "document"
          }
        },
        "required": [
          "type",
          "media"
        ]
      },
      "InputMediaPhoto": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the photo to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "media": {
            "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More info on Sending Files »",
            "type": "string"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the photo caption. See formatting options for more details",
            "type": "string"
          },
          "type": {
            "description": "Type of the result, must be photo",
            "type": "string",
            "default": "photo"
          }
        },
        "required": [
          "type",
          "media"
        ]
      },
      "InputMediaVideo": {
        "type": "object",
        "properties": {
          "caption": {
            "description": "Caption of the video to be sent, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "duration": {
            "description": "Video duration in seconds",
            "type": "integer"
          },
          "height": {
            "description": "Video height",
            "type": "integer"
          },
          "media": {
            "description": "File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://\u003cfile_attach_name\u003e” to upload a new one using multipart/form-data under \u003cfile_attach_name\u003e name. More info on Sending Files »",
            "type": "string"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the video caption. See formatting options for more details",
            "type": "string"
          },
          "supports_streaming": {
            "description": "Pass True, if the uploaded video is suitable for streaming",
            "type": "boolean"
          },
          "type": {
            "description": "Type of the result, must be video",
            "type": "string",
            "default": "video"
          },
          "width": {
            "description": "Video width",
            "type": "integer"
          }
        },
        "required": [
          "type",
          "media"
        ]
      },
      "InputTextMessageContent": {
        "type": "object",
        "properties": {
          "disable_web_page_preview": {
            "description": "Disables link previews for links in the sent message",
            "type": "boolean"
          },
          "message_text": {
            "description": "Text of the message to be sent, 1-4096 characters",
            "type": "string"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the message text. See formatting options for more details",
            "type": "string"
          }
        },
        "required": [
          "message_text"
        ]
      },
      "InputVenueMessageContent": {
        "type": "object",
        "properties": {
          "address": {
            "description": "Address of the venue",
            "type": "string"
          },
          "foursquare_id": {
            "description": "Foursquare identifier of the venue, if known",
            "type": "string"
          },
          "foursquare_type": {
            "description": "Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)",
            "type": "string"
          },
          "google_place_id": {
            "description": "Google Places identifier of the venue",
            "type": "string"
          },
          "google_place_type": {
            "description": "Google Places type of the venue. (See supported types.)",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude of the venue in degrees",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude of the venue in degrees",
            "type": "number"
          },
          "title": {
            "description": "Name of the venue",
            "type": "string"
          }
        },
        "required": [
          "latitude",
          "longitude",
          "title",
          "address"
        ]
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "currency": {
            "description": "Three-letter ISO 4217 currency code",
            "type": "string"
          },
          "description": {
            "description": "Product description",
            "type": "string"
          },
          "start_parameter": {
            "description": "Unique bot deep-linking parameter that can be used to generate this invoice",
            "type": "string"
          },
          "title": {
            "description": "Product name",
            "type": "string"
          },
          "total_amount": {
            "description": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)",
            "type": "integer"
          }
        },
        "required": [
          "title",
          "description",
          "start_parameter",
          "currency",
          "total_amount"
        ]
      },
      "KeyboardButton": {
        "type": "object",
        "properties": {
          "request_contact": {
            "description": "If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only",
            "type": "boolean"
          },
          "request_location": {
            "description": "If True, the user's current location will be sent when the button is pressed. Available in private chats only",
            "type": "boolean"
          },
          "request_poll": {
            "$ref": "#/components/schemas/KeyboardButtonPollType",
            "description": "If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only"
          },
          "text": {
            "description": "Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed",
            "type": "string"
          }
        },
        "required": [
          "text"
        ]
      },
      "KeyboardButtonPollType": {
        "type": "object",
        "properties": {
          "type": {
            "description": "If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type",
            "type": "string"
          }
        }
      },
      "LabeledPrice": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)",
            "type": "integer"
          },
          "label": {
            "description": "Portion label",
            "type": "string"
          }
        },
        "required": [
          "label",
          "amount"
        ]
      },
      "Location": {
        "type": "object",
        "properties": {
          "heading": {
            "description": "The direction in which user is moving, in degrees; 1-360. For active live locations only",
            "type": "integer"
          },
          "horizontal_accuracy": {
            "description": "The radius of uncertainty for the location, measured in meters; 0-1500",
            "type": "number"
          },
          "latitude": {
            "description": "Latitude as defined by sender",
            "type": "number"
          },
          "live_period": {
            "description": "Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only",
            "type": "integer"
          },
          "longitude": {
            "description": "Longitude as defined by sender",
            "type": "number"
          },
          "proximity_alert_radius": {
            "description": "Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only",
            "type": "integer"
          }
        },
        "required": [
          "longitude",
          "latitude"
        ]
      },
      "LoginUrl": {
        "type": "object",
        "properties": {
          "bot_username": {
            "description": "Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details",
            "type": "string"
          },
          "forward_text": {
            "description": "New text of the button in forwarded messages",
            "type": "string"
          },
          "request_write_access": {
            "description": "Pass True to request the permission for your bot to send messages to the user",
            "type": "boolean"
          },
          "url": {
            "description": "An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization",
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "MaskPosition": {
        "type": "object",
        "properties": {
          "point": {
            "description": "The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”",
            "type": "string"
          },
          "scale": {
            "description": "Mask scaling coefficient. For example, 2.0 means double size",
            "type": "number"
          },
          "x_shift": {
            "description": "Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position",
            "type": "number"
          },
          "y_shift": {
            "description": "Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position",
            "type": "number"
          }
        },
        "required": [
          "point",
          "x_shift",
          "y_shift",
          "scale"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "animation": {
            "$ref": "#/components/schemas/Animation",
            "description": "Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set"
          },
          "audio": {
            "$ref": "#/components/schemas/Audio",
            "description": "Message is an audio file, information about the file"
          },
          "author_signature": {
            "description": "Signature of the post author for messages in channels, or the custom title of an anonymous group administrator",
            "type": "string"
          },
          "caption": {
            "description": "Caption for the animation, audio, document, photo, video or voice, 0-1024 characters",
            "type": "string"
          },
          "channel_chat_created": {
            "description": "Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel",
            "type": "boolean"
          },
          "chat": {
            "$ref": "#/components/schemas/Chat",
            "description": "Conversation the message belongs to"
          },
          "connected_website": {
            "description": "The domain name of the website on which the user has logged in. More about Telegram Login »",
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact",
            "description": "Message is a shared contact, information about the contact"
          },
          "date": {
            "description": "Date the message was sent in Unix time",
            "type": "integer"
          },
          "delete_chat_photo": {
            "description": "Service message: the chat photo was deleted",
            "type": "boolean"
          },
          "dice": {
            "$ref": "#/components/schemas/Dice",
            "description": "Message is a dice with random value"
          },
          "document": {
            "$ref": "#/components/schemas/Document",
            "description": "Message is a general file, information about the file"
          },
          "edit_date": {
            "description": "Date the message was last edited in Unix time",
            "type": "integer"
          },
          "forward_date": {
            "description": "For forwarded messages, date the original message was sent in Unix time",
            "type": "integer"
          },
          "forward_from": {
            "$ref": "#/components/schemas/User",
            "description": "For forwarded messages, sender of the original message"
          },
          "forward_from_chat": {
            "$ref": "#/components/schemas/Chat",
            "description": "For messages forwarded from channels or from anonymous administrators, information about the original sender chat"
          },
          "forward_from_message_id": {
            "description": "For messages forwarded from channels, identifier of the original message in the channel",
            "type": "integer"
          },
          "forward_sender_name": {
            "description": "Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages",
            "type": "string"
          },
          "forward_signature": {
            "description": "For messages forwarded from channels, signature of the post author if present",
            "type": "string"
          },
          "from": {
            "$ref": "#/components/schemas/User",
            "description": "Sender, empty for messages sent to channels"
          },
          "game": {
            "$ref": "#/components/schemas/Game",
            "description": "Message is a game, information about the game. More about games »"
          },
          "group_chat_created": {
            "description": "Service message: the group has been created",
            "type": "boolean"
          },
          "invoice": {
            "$ref": "#/components/schemas/Invoice",
            "description": "Message is an invoice for a payment, information about the invoice. More about payments »"
          },
          "left_chat_member": {
            "$ref": "#/components/schemas/User",
            "description": "A member was removed from the group, information about them (this member may be the bot itself)"
          },
          "location": {
            "$ref": "#/components/schemas/Location",
            "description": "Message is a shared location, information about the location"
          },
          "media_group_id": {
            "description": "The unique identifier of a media message group this message belongs to",
            "type": "string"
          },
          "message_auto_delete_timer_changed": {
            "$ref": "#/components/schemas/MessageAutoDeleteTimerChanged",
            "description": "Service message: auto-delete timer settings changed in the chat"
          },
          "message_id": {
            "description": "Unique message identifier inside this chat",
            "type": "integer"
          },
          "migrate_from_chat_id": {
            "description": "The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier",
            "type": "integer"
          },
          "migrate_to_chat_id": {
            "description": "The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier",
            "type": "integer"
          },
          "new_chat_title": {
            "description": "A chat title was changed to this value",
            "type": "string"
          },
          "passport_data": {
            "$ref": "#/components/schemas/PassportData",
            "description": "Telegram Passport data"
          },
          "pinned_message": {
            "$ref": "#/components/schemas/Message",
            "description": "Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply"
          },
          "poll": {
            "$ref": "#/components/schemas/Poll",
            "description": "Message is a native poll, information about the poll"
          },
          "proximity_alert_triggered": {
            "$ref": "#/components/schemas/ProximityAlertTriggered",
            "description": "Service message. A user in the chat triggered another user's proximity alert while sharing Live Location"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons"
          },
          "reply_to_message": {
            "$ref": "#/components/schemas/Message",
            "description": "For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply"
          },
          "sender_chat": {
            "$ref": "#/components/schemas/Chat",
            "description": "Sender of the message, sent on behalf of a chat. The channel itself for channel messages. The supergroup itself for messages from anonymous group administrators. The linked channel for messages automatically forwarded to the discussion group"
          },
          "sticker": {
            "$ref": "#/components/schemas/Sticker",
            "description": "Message is a sticker, information about the sticker"
          },
          "successful_payment": {
            "$ref": "#/components/schemas/SuccessfulPayment",
            "description": "Message is a service message about a successful payment, information about the payment. More about payments »"
          },
          "supergroup_chat_created": {
            "description": "Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup",
            "type": "boolean"
          },
          "text": {
            "description": "For text messages, the actual UTF-8 text of the message, 0-4096 characters",
            "type": "string"
          },
          "venue": {
            "$ref": "#/components/schemas/Venue",
            "description": "Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set"
          },
          "via_bot": {
            "$ref": "#/components/schemas/User",
            "description": "Bot through which the message was sent"
          },
          "video": {
            "$ref": "#/components/schemas/Video",
            "description": "Message is a video, information about the video"
          },
          "video_note": {
            "$ref": "#/components/schemas/VideoNote",
            "description": "Message is a video note, information about the video message"
          },
          "voice": {
            "$ref": "#/components/schemas/Voice",
            "description": "Message is a voice message, information about the file"
          },
          "voice_chat_ended": {
            "$ref": "#/components/schemas/VoiceChatEnded",
            "description": "Service message: voice chat ended"
          },
          "voice_chat_participants_invited": {
            "$ref": "#/components/schemas/VoiceChatParticipantsInvited",
            "description": "Service message: new participants invited to a voice chat"
          },
          "voice_chat_scheduled": {
            "$ref": "#/components/schemas/VoiceChatScheduled",
            "description": "Service message: voice chat scheduled"
          },
          "voice_chat_started": {
            "$ref": "#/components/schemas/VoiceChatStarted",
            "description": "Service message: voice chat started"
          }
        },
        "required": [
          "message_id",
          "date",
          "chat"
        ]
      },
      "MessageAutoDeleteTimerChanged": {
        "type": "object",
        "properties": {
          "message_auto_delete_time": {
            "description": "New auto-delete time for messages in the chat",
            "type": "integer"
          }
        },
        "required": [
          "message_auto_delete_time"
        ]
      },
      "MessageEntity": {
        "type": "object",
        "properties": {
          "language": {
            "description": "For “pre” only, the programming language of the entity text",
            "type": "string"
          },
          "length": {
            "description": "Length of the entity in UTF-16 code units",
            "type": "integer"
          },
          "offset": {
            "description": "Offset in UTF-16 code units to the start of the entity",
            "type": "integer"
          },
          "type": {
            "description": "Type of the entity. Can be “mention” (@username), “hashtag” (#hashtag), “cashtag” ($USD), “bot_command” (/start@jobs_bot), “url” (https://telegram.org), “email” (do-not-reply@telegram.org), “phone_number” (+1-212-555-0123), “bold” (bold text), “italic” (italic text), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text_link” (for clickable text URLs), “text_mention” (for users without usernames)",
            "type": "string"
          },
          "url": {
            "description": "For “text_link” only, url that will be opened after user taps on the text",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "For “text_mention” only, the mentioned user"
          }
        },
        "required": [
          "type",
          "offset",
          "length"
        ]
      },
      "MessageId": {
        "type": "object",
        "properties": {
          "message_id": {
            "description": "Unique message identifier",
            "type": "integer"
          }
        },
        "required": [
          "message_id"
        ]
      },
      "OrderInfo": {
        "type": "object",
        "properties": {
          "email": {
            "description": "User email",
            "type": "string"
          },
          "name": {
            "description": "User name",
            "type": "string"
          },
          "phone_number": {
            "description": "User's phone number",
            "type": "string"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/ShippingAddress",
            "description": "User shipping address"
          }
        }
      },
      "PassportData": {
        "type": "object",
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/EncryptedCredentials",
            "description": "Encrypted credentials required to decrypt the data"
          }
        },
        "required": [
          "credentials"
        ]
      },
      "PassportElementErrorDataField": {
        "type": "object",
        "properties": {
          "data_hash": {
            "description": "Base64-encoded data hash",
            "type": "string"
          },
          "field_name": {
            "description": "Name of the data field which has the error",
            "type": "string"
          },
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "source": {
            "description": "Error source, must be data",
            "type": "string",
            "default": "data"
          },
          "type": {
            "description": "The section of the user's Telegram Passport which has the error, one of “personal_details”, “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”",
            "type": "string"
          }
        },
        "required": [
          "source",
          "type",
          "field_name",
          "data_hash",
          "message"
        ]
      },
      "PassportElementErrorFile": {
        "type": "object",
        "properties": {
          "file_hash": {
            "description": "Base64-encoded file hash",
            "type": "string"
          },
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "source": {
            "description": "Error source, must be file",
            "type": "string",
            "default": "file"
          },
          "type": {
            "description": "The section of the user's Telegram Passport which has the issue, one of “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”",
            "type": "string"
          }
        },
        "required": [
          "source",
          "type",
          "file_hash",
          "message"
        ]
      },
      "PassportElementErrorFiles": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "source": {
            "description": "Error source, must be files",
            "type": "string",
            "default": "files"
          },
          "type": {
            "description": "The section of the user's Telegram Passport which has the issue, one of “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”",
            "type": "string"
          }
        },
        "required": [
          "source",
          "type",
          "message"
        ]
      },
      "PassportElementErrorFrontSide": {
        "type": "object",
        "properties": {
          "file_hash": {
            "description": "Base64-encoded hash of the file with the front side of the document",
            "type": "string"
          },
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "source": {
            "description": "Error source, must be front_side",
            "type": "string",
            "default": "front_side"
          },
          "type": {
            "description": "The section of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”",
            "type": "string"
          }
        },
        "required": [
          "source",
          "type",
          "file_hash",
          "message"
        ]
      },
      "PassportElementErrorReverseSide": {
        "type": "object",
        "properties": {
          "file_hash": {
            "description": "Base64-encoded hash of the file with the reverse side of the document",
            "type": "string"
          },
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "source": {
            "description": "Error source, must be reverse_side",
            "type": "string",
            "default": "reverse_side"
          },
          "type": {
            "description": "The section of the user's Telegram Passport which has the issue, one of “driver_license”, “identity_card”",
            "type": "string"
          }
        },
        "required": [
          "source",
          "type",
          "file_hash",
          "message"
        ]
      },
      "PassportElementErrorSelfie": {
        "type": "object",
        "properties": {
          "file_hash": {
            "description": "Base64-encoded hash of the file with the selfie",
            "type": "string"
          },
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "source": {
            "description": "Error source, must be selfie",
            "type": "string",
            "default": "selfie"
          },
          "type": {
            "description": "The section of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”",
            "type": "string"
          }
        },
        "required": [
          "source",
          "type",
          "file_hash",
          "message"
        ]
      },
      "PassportElementErrorTranslationFile": {
        "type": "object",
        "properties": {
          "file_hash": {
            "description": "Base64-encoded file hash",
            "type": "string"
          },
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "source": {
            "description": "Error source, must be translation_file",
            "type": "string",
            "default": "translation_file"
          },
          "type": {
            "description": "Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”",
            "type": "string"
          }
        },
        "required": [
          "source",
          "type",
          "file_hash",
          "message"
        ]
      },
      "PassportElementErrorTranslationFiles": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "source": {
            "description": "Error source, must be translation_files",
            "type": "string",
            "default": "translation_files"
          },
          "type": {
            "description": "Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”",
            "type": "string"
          }
        },
        "required": [
          "source",
          "type",
          "message"
        ]
      },
      "PassportElementErrorUnspecified": {
        "type": "object",
        "properties": {
          "element_hash": {
            "description": "Base64-encoded element hash",
            "type": "string"
          },
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "source": {
            "description": "Error source, must be unspecified",
            "type": "string",
            "default": "unspecified"
          },
          "type": {
            "description": "Type of element of the user's Telegram Passport which has the issue",
            "type": "string"
          }
        },
        "required": [
          "source",
          "type",
          "element_hash",
          "message"
        ]
      },
      "PassportFile": {
        "type": "object",
        "properties": {
          "file_date": {
            "description": "Unix time when the file was uploaded",
            "type": "integer"
          },
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          }
        },
        "required": [
          "file_id",
          "file_unique_id",
          "file_size",
          "file_date"
        ]
      },
      "PhotoSize": {
        "type": "object",
        "properties": {
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          },
          "height": {
            "description": "Photo height",
            "type": "integer"
          },
          "width": {
            "description": "Photo width",
            "type": "integer"
          }
        },
        "required": [
          "file_id",
          "file_unique_id",
          "width",
          "height"
        ]
      },
      "Poll": {
        "type": "object",
        "properties": {
          "allows_multiple_answers": {
            "description": "True, if the poll allows multiple answers",
            "type": "boolean"
          },
          "close_date": {
            "description": "Point in time (Unix timestamp) when the poll will be automatically closed",
            "type": "integer"
          },
          "correct_option_id": {
            "description": "0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot",
            "type": "integer"
          },
          "explanation": {
            "description": "Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters",
            "type": "string"
          },
          "id": {
            "description": "Unique poll identifier",
            "type": "string"
          },
          "is_anonymous": {
            "description": "True, if the poll is anonymous",
            "type": "boolean"
          },
          "is_closed": {
            "description": "True, if the poll is closed",
            "type": "boolean"
          },
          "open_period": {
            "description": "Amount of time in seconds the poll will be active after creation",
            "type": "integer"
          },
          "question": {
            "description": "Poll question, 1-300 characters",
            "type": "string"
          },
          "total_voter_count": {
            "description": "Total number of users that voted in the poll",
            "type": "integer"
          },
          "type": {
            "description": "Poll type, currently can be “regular” or “quiz”",
            "type": "string"
          }
        },
        "required": [
          "id",
          "question",
          "total_voter_count",
          "is_closed",
          "is_anonymous",
          "type",
          "allows_multiple_answers"
        ]
      },
      "PollAnswer": {
        "type": "object",
        "properties": {
          "poll_id": {
            "description": "Unique poll identifier",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User",
            "description": "The user, who changed the answer to the poll"
          }
        },
        "required": [
          "poll_id",
          "user"
        ]
      },
      "PollOption": {
        "type": "object",
        "properties": {
          "text": {
            "description": "Option text, 1-100 characters",
            "type": "string"
          },
          "voter_count": {
            "description": "Number of users that voted for this option",
            "type": "integer"
          }
        },
        "required": [
          "text",
          "voter_count"
        ]
      },
      "PreCheckoutQuery": {
        "type": "object",
        "properties": {
          "currency": {
            "description": "Three-letter ISO 4217 currency code",
            "type": "string"
          },
          "from": {
            "$ref": "#/components/schemas/User",
            "description": "User who sent the query"
          },
          "id": {
            "description": "Unique query identifier",
            "type": "string"
          },
          "invoice_payload": {
            "description": "Bot specified invoice payload",
            "type": "string"
          },
          "order_info": {
            "$ref": "#/components/schemas/OrderInfo",
            "description": "Order info provided by the user"
          },
          "shipping_option_id": {
            "description": "Identifier of the shipping option chosen by the user",
            "type": "string"
          },
          "total_amount": {
            "description": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "from",
          "currency",
          "total_amount",
          "invoice_payload"
        ]
      },
      "ProximityAlertTriggered": {
        "type": "object",
        "properties": {
          "distance": {
            "description": "The distance between the users",
            "type": "integer"
          },
          "traveler": {
            "$ref": "#/components/schemas/User",
            "description": "User that triggered the alert"
          },
          "watcher": {
            "$ref": "#/components/schemas/User",
            "description": "User that set the alert"
          }
        },
        "required": [
          "traveler",
          "watcher",
          "distance"
        ]
      },
      "ReplyKeyboardMarkup": {
        "type": "object",
        "properties": {
          "input_field_placeholder": {
            "description": "The placeholder to be shown in the input field when the keyboard is active; 1-64 characters",
            "type": "string"
          },
          "one_time_keyboard": {
            "description": "Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to false",
            "type": "boolean"
          },
          "resize_keyboard": {
            "description": "Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard",
            "type": "boolean"
          },
          "selective": {
            "description": "Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard",
            "type": "boolean"
          }
        }
      },
      "ReplyKeyboardRemove": {
        "type": "object",
        "properties": {
          "remove_keyboard": {
            "description": "Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)",
            "type": "boolean"
          },
          "selective": {
            "description": "Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet",
            "type": "boolean"
          }
        },
        "required": [
          "remove_keyboard"
        ]
      },
      "ResponseParameters": {
        "type": "object",
        "properties": {
          "migrate_to_chat_id": {
            "description": "The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier",
            "type": "integer"
          },
          "retry_after": {
            "description": "In case of exceeding flood control, the number of seconds left to wait before the request can be repeated",
            "type": "integer"
          }
        }
      },
      "ShippingAddress": {
        "type": "object",
        "properties": {
          "city": {
            "description": "City",
            "type": "string"
          },
          "country_code": {
            "description": "ISO 3166-1 alpha-2 country code",
            "type": "string"
          },
          "post_code": {
            "description": "Address post code",
            "type": "string"
          },
          "state": {
            "description": "State, if applicable",
            "type": "string"
          },
          "street_line1": {
            "description": "First line for the address",
            "type": "string"
          },
          "street_line2": {
            "description": "Second line for the address",
            "type": "string"
          }
        },
        "required": [
          "country_code",
          "state",
          "city",
          "street_line1",
          "street_line2",
          "post_code"
        ]
      },
      "ShippingOption": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Shipping option identifier",
            "type": "string"
          },
          "title": {
            "description": "Option title",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "ShippingQuery": {
        "type": "object",
        "properties": {
          "from": {
            "$ref": "#/components/schemas/User",
            "description": "User who sent the query"
          },
          "id": {
            "description": "Unique query identifier",
            "type": "string"
          },
          "invoice_payload": {
            "description": "Bot specified invoice payload",
            "type": "string"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/ShippingAddress",
            "description": "User specified shipping address"
          }
        },
        "required": [
          "id",
          "from",
          "invoice_payload",
          "shipping_address"
        ]
      },
      "Sticker": {
        "type": "object",
        "properties": {
          "emoji": {
            "description": "Emoji associated with the sticker",
            "type": "string"
          },
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          },
          "height": {
            "description": "Sticker height",
            "type": "integer"
          },
          "is_animated": {
            "description": "True, if the sticker is animated",
            "type": "boolean"
          },
          "mask_position": {
            "$ref": "#/components/schemas/MaskPosition",
            "description": "For mask stickers, the position where the mask should be placed"
          },
          "set_name": {
            "description": "Name of the sticker set to which the sticker belongs",
            "type": "string"
          },
          "thumb": {
            "$ref": "#/components/schemas/PhotoSize",
            "description": "Sticker thumbnail in the .WEBP or .JPG format"
          },
          "width": {
            "description": "Sticker width",
            "type": "integer"
          }
        },
        "required": [
          "file_id",
          "file_unique_id",
          "width",
          "height",
          "is_animated"
        ]
      },
      "StickerSet": {
        "type": "object",
        "properties": {
          "contains_masks": {
            "description": "True, if the sticker set contains masks",
            "type": "boolean"
          },
          "is_animated": {
            "description": "True, if the sticker set contains animated stickers",
            "type": "boolean"
          },
          "name": {
            "description": "Sticker set name",
            "type": "string"
          },
          "thumb": {
            "$ref": "#/components/schemas/PhotoSize",
            "description": "Sticker set thumbnail in the .WEBP or .TGS format"
          },
          "title": {
            "description": "Sticker set title",
            "type": "string"
          }
        },
        "required": [
          "name",
          "title",
          "is_animated",
          "contains_masks"
        ]
      },
      "SuccessfulPayment": {
        "type": "object",
        "properties": {
          "currency": {
            "description": "Three-letter ISO 4217 currency code",
            "type": "string"
          },
          "invoice_payload": {
            "description": "Bot specified invoice payload",
            "type": "string"
          },
          "order_info": {
            "$ref": "#/components/schemas/OrderInfo",
            "description": "Order info provided by the user"
          },
          "provider_payment_charge_id": {
            "description": "Provider payment identifier",
            "type": "string"
          },
          "shipping_option_id": {
            "description": "Identifier of the shipping option chosen by the user",
            "type": "string"
          },
          "telegram_payment_charge_id": {
            "description": "Telegram payment identifier",
            "type": "string"
          },
          "total_amount": {
            "description": "Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies)",
            "type": "integer"
          }
        },
        "required": [
          "currency",
          "total_amount",
          "invoice_payload",
          "telegram_payment_charge_id",
          "provider_payment_charge_id"
        ]
      },
      "Update": {
        "type": "object",
        "properties": {
          "callback_query": {
            "$ref": "#/components/schemas/CallbackQuery",
            "description": "New incoming callback query"
          },
          "channel_post": {
            "$ref": "#/components/schemas/Message",
            "description": "New incoming channel post of any kind — text, photo, sticker, etc"
          },
          "chat_member": {
            "$ref": "#/components/schemas/ChatMemberUpdated",
            "description": "A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify “chat_member” in the list of allowed_updates to receive these updates"
          },
          "chosen_inline_result": {
            "$ref": "#/components/schemas/ChosenInlineResult",
            "description": "The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot"
          },
          "edited_channel_post": {
            "$ref": "#/components/schemas/Message",
            "description": "New version of a channel post that is known to the bot and was edited"
          },
          "edited_message": {
            "$ref": "#/components/schemas/Message",
            "description": "New version of a message that is known to the bot and was edited"
          },
          "inline_query": {
            "$ref": "#/components/schemas/InlineQuery",
            "description": "New incoming inline query"
          },
          "message": {
            "$ref": "#/components/schemas/Message",
            "description": "New incoming message of any kind — text, photo, sticker, etc"
          },
          "my_chat_member": {
            "$ref": "#/components/schemas/ChatMemberUpdated",
            "description": "The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user"
          },
          "poll": {
            "$ref": "#/components/schemas/Poll",
            "description": "New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot"
          },
          "poll_answer": {
            "$ref": "#/components/schemas/PollAnswer",
            "description": "A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself"
          },
          "pre_checkout_query": {
            "$ref": "#/components/schemas/PreCheckoutQuery",
            "description": "New incoming pre-checkout query. Contains full information about checkout"
          },
          "shipping_query": {
            "$ref": "#/components/schemas/ShippingQuery",
            "description": "New incoming shipping query. Only for invoices with flexible price"
          },
          "update_id": {
            "description": "The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially",
            "type": "integer"
          }
        },
        "required": [
          "update_id"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "can_join_groups": {
            "description": "True, if the bot can be invited to groups. Returned only in getMe",
            "type": "boolean"
          },
          "can_read_all_group_messages": {
            "description": "True, if privacy mode is disabled for the bot. Returned only in getMe",
            "type": "boolean"
          },
          "first_name": {
            "description": "User's or bot's first name",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier",
            "type": "integer"
          },
          "is_bot": {
            "description": "True, if this user is a bot",
            "type": "boolean"
          },
          "language_code": {
            "description": "IETF language tag of the user's language",
            "type": "string"
          },
          "last_name": {
            "description": "User's or bot's last name",
            "type": "string"
          },
          "supports_inline_queries": {
            "description": "True, if the bot supports inline queries. Returned only in getMe",
            "type": "boolean"
          },
          "username": {
            "description": "User's or bot's username",
            "type": "string"
          }
        },
        "required": [
          "id",
          "is_bot",
          "first_name"
        ]
      },
      "UserProfilePhotos": {
        "type": "object",
        "properties": {
          "total_count": {
            "description": "Total number of profile pictures the target user has",
            "type": "integer"
          }
        },
        "required": [
          "total_count"
        ]
      },
      "Venue": {
        "type": "object",
        "properties": {
          "address": {
            "description": "Address of the venue",
            "type": "string"
          },
          "foursquare_id": {
            "description": "Foursquare identifier of the venue",
            "type": "string"
          },
          "foursquare_type": {
            "description": "Foursquare type of the venue. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)",
            "type": "string"
          },
          "google_place_id": {
            "description": "Google Places identifier of the venue",
            "type": "string"
          },
          "google_place_type": {
            "description": "Google Places type of the venue. (See supported types.)",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/Location",
            "description": "Venue location. Can't be a live location"
          },
          "title": {
            "description": "Name of the venue",
            "type": "string"
          }
        },
        "required": [
          "location",
          "title",
          "address"
        ]
      },
      "Video": {
        "type": "object",
        "properties": {
          "duration": {
            "description": "Duration of the video in seconds as defined by sender",
            "type": "integer"
          },
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_name": {
            "description": "Original filename as defined by sender",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          },
          "height": {
            "description": "Video height as defined by sender",
            "type": "integer"
          },
          "mime_type": {
            "description": "Mime type of a file as defined by sender",
            "type": "string"
          },
          "thumb": {
            "$ref": "#/components/schemas/PhotoSize",
            "description": "Video thumbnail"
          },
          "width": {
            "description": "Video width as defined by sender",
            "type": "integer"
          }
        },
        "required": [
          "file_id",
          "file_unique_id",
          "width",
          "height",
          "duration"
        ]
      },
      "VideoNote": {
        "type": "object",
        "properties": {
          "duration": {
            "description": "Duration of the video in seconds as defined by sender",
            "type": "integer"
          },
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          },
          "length": {
            "description": "Video width and height (diameter of the video message) as defined by sender",
            "type": "integer"
          },
          "thumb": {
            "$ref": "#/components/schemas/PhotoSize",
            "description": "Video thumbnail"
          }
        },
        "required": [
          "file_id",
          "file_unique_id",
          "length",
          "duration"
        ]
      },
      "Voice": {
        "type": "object",
        "properties": {
          "duration": {
            "description": "Duration of the audio in seconds as defined by sender",
            "type": "integer"
          },
          "file_id": {
            "description": "Identifier for this file, which can be used to download or reuse the file",
            "type": "string"
          },
          "file_size": {
            "description": "File size in bytes",
            "type": "integer"
          },
          "file_unique_id": {
            "description": "Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file",
            "type": "string"
          },
          "mime_type": {
            "description": "MIME type of the file as defined by sender",
            "type": "string"
          }
        },
        "required": [
          "file_id",
          "file_unique_id",
          "duration"
        ]
      },
      "VoiceChatEnded": {
        "type": "object",
        "properties": {
          "duration": {
            "description": "Voice chat duration in seconds",
            "type": "integer"
          }
        },
        "required": [
          "duration"
        ]
      },
      "VoiceChatParticipantsInvited": {
        "type": "object"
      },
      "VoiceChatScheduled": {
        "type": "object",
        "properties": {
          "start_date": {
            "description": "Point in time (Unix timestamp) when the voice chat is supposed to be started by a chat administrator",
            "type": "integer"
          }
        },
        "required": [
          "start_date"
        ]
      },
      "WebhookInfo": {
        "type": "object",
        "properties": {
          "has_custom_certificate": {
            "description": "True, if a custom certificate was provided for webhook certificate checks",
            "type": "boolean"
          },
          "ip_address": {
            "description": "Currently used webhook IP address",
            "type": "string"
          },
          "last_error_date": {
            "description": "Unix time for the most recent error that happened when trying to deliver an update via webhook",
            "type": "integer"
          },
          "last_error_message": {
            "description": "Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook",
            "type": "string"
          },
          "max_connections": {
            "description": "Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery",
            "type": "integer"
          },
          "pending_update_count": {
            "description": "Number of updates awaiting delivery",
            "type": "integer"
          },
          "url": {
            "description": "Webhook URL, may be empty if webhook is not set up",
            "type": "string"
          }
        },
        "required": [
          "url",
          "has_custom_certificate",
          "pending_update_count"
        ]
      },
      "addStickerToSet": {
        "description": "Input for addStickerToSet",
        "type": "object",
        "properties": {
          "emojis": {
            "description": "One or more emoji corresponding to the sticker",
            "type": "string"
          },
          "mask_position": {
            "$ref": "#/components/schemas/MaskPosition",
            "description": "A JSON-serialized object for position where the mask should be placed on faces"
          },
          "name": {
            "description": "Sticker set name",
            "type": "string"
          },
          "user_id": {
            "description": "User identifier of sticker set owner",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "name",
          "emojis",
          "mask_position"
        ]
      },
      "answerCallbackQuery": {
        "description": "Input for answerCallbackQuery",
        "type": "object",
        "properties": {
          "cache_time": {
            "description": "The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0",
            "type": "integer"
          },
          "callback_query_id": {
            "description": "Unique identifier for the query to be answered",
            "type": "string"
          },
          "show_alert": {
            "description": "If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false",
            "type": "boolean"
          },
          "text": {
            "description": "Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters",
            "type": "string"
          },
          "url": {
            "description": "URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @Botfather, specify the URL that opens your game — note that this will only work if the query comes from a callback_game button.Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter",
            "type": "string"
          }
        },
        "required": [
          "callback_query_id",
          "text",
          "show_alert",
          "url",
          "cache_time"
        ]
      },
      "answerInlineQuery": {
        "description": "Input for answerInlineQuery",
        "type": "object",
        "properties": {
          "cache_time": {
            "description": "The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300",
            "type": "integer"
          },
          "inline_query_id": {
            "description": "Unique identifier for the answered query",
            "type": "string"
          },
          "is_personal": {
            "description": "Pass True, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query",
            "type": "boolean"
          },
          "next_offset": {
            "description": "Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes",
            "type": "string"
          },
          "switch_pm_parameter": {
            "description": "Deep-linking parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed.Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities",
            "type": "string"
          },
          "switch_pm_text": {
            "description": "If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter switch_pm_parameter",
            "type": "string"
          }
        },
        "required": [
          "inline_query_id",
          "cache_time",
          "is_personal",
          "next_offset",
          "switch_pm_text",
          "switch_pm_parameter"
        ]
      },
      "answerPreCheckoutQuery": {
        "description": "Input for answerPreCheckoutQuery",
        "type": "object",
        "properties": {
          "error_message": {
            "description": "Required if ok is False. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. \"Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!\"). Telegram will display this message to the user",
            "type": "string"
          },
          "ok": {
            "description": "Specify True if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use False if there are any problems",
            "type": "boolean"
          },
          "pre_checkout_query_id": {
            "description": "Unique identifier for the query to be answered",
            "type": "string"
          }
        },
        "required": [
          "pre_checkout_query_id",
          "ok",
          "error_message"
        ]
      },
      "answerShippingQuery": {
        "description": "Input for answerShippingQuery",
        "type": "object",
        "properties": {
          "error_message": {
            "description": "Required if ok is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. \"Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user",
            "type": "string"
          },
          "ok": {
            "description": "Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)",
            "type": "boolean"
          },
          "shipping_query_id": {
            "description": "Unique identifier for the query to be answered",
            "type": "string"
          }
        },
        "required": [
          "shipping_query_id",
          "ok",
          "error_message"
        ]
      },
      "banChatMember": {
        "description": "Input for banChatMember",
        "type": "object",
        "properties": {
          "revoke_messages": {
            "description": "Pass True to delete all messages from the chat for the user that is being removed. If False, the user will be able to see messages in the group that were sent before the user was removed. Always True for supergroups and channels",
            "type": "boolean"
          },
          "until_date": {
            "description": "Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever. Applied for supergroups and channels only",
            "type": "integer"
          },
          "user_id": {
            "description": "Unique identifier of the target user",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "until_date",
          "revoke_messages"
        ]
      },
      "copyMessage": {
        "description": "Input for copyMessage",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "caption": {
            "description": "New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept",
            "type": "string"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "message_id": {
            "description": "Message identifier in the chat specified in from_chat_id",
            "type": "integer"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the new caption. See formatting options for more details",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "message_id",
          "caption",
          "parse_mode",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "createChatInviteLink": {
        "description": "Input for createChatInviteLink",
        "type": "object",
        "properties": {
          "expire_date": {
            "description": "Point in time (Unix timestamp) when the link will expire",
            "type": "integer"
          },
          "member_limit": {
            "description": "Maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999",
            "type": "integer"
          }
        },
        "required": [
          "expire_date",
          "member_limit"
        ]
      },
      "createNewStickerSet": {
        "description": "Input for createNewStickerSet",
        "type": "object",
        "properties": {
          "contains_masks": {
            "description": "Pass True, if a set of mask stickers should be created",
            "type": "boolean"
          },
          "emojis": {
            "description": "One or more emoji corresponding to the sticker",
            "type": "string"
          },
          "mask_position": {
            "$ref": "#/components/schemas/MaskPosition",
            "description": "A JSON-serialized object for position where the mask should be placed on faces"
          },
          "name": {
            "description": "Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in “_by_\u003cbot username\u003e”. \u003cbot_username\u003e is case insensitive. 1-64 characters",
            "type": "string"
          },
          "title": {
            "description": "Sticker set title, 1-64 characters",
            "type": "string"
          },
          "user_id": {
            "description": "User identifier of created sticker set owner",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "name",
          "title",
          "emojis",
          "contains_masks",
          "mask_position"
        ]
      },
      "deleteChatPhoto": {
        "description": "Input for deleteChatPhoto",
        "type": "object"
      },
      "deleteChatStickerSet": {
        "description": "Input for deleteChatStickerSet",
        "type": "object"
      },
      "deleteMessage": {
        "description": "Input for deleteMessage",
        "type": "object",
        "properties": {
          "message_id": {
            "description": "Identifier of the message to delete",
            "type": "integer"
          }
        },
        "required": [
          "message_id"
        ]
      },
      "deleteMyCommands": {
        "description": "Input for deleteMyCommands",
        "type": "object",
        "properties": {
          "language_code": {
            "description": "A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands",
            "type": "string"
          }
        },
        "required": [
          "language_code"
        ]
      },
      "deleteStickerFromSet": {
        "description": "Input for deleteStickerFromSet",
        "type": "object",
        "properties": {
          "sticker": {
            "description": "File identifier of the sticker",
            "type": "string"
          }
        },
        "required": [
          "sticker"
        ]
      },
      "deleteWebhook": {
        "description": "Input for deleteWebhook",
        "type": "object",
        "properties": {
          "drop_pending_updates": {
            "description": "Pass True to drop all pending updates",
            "type": "boolean"
          }
        },
        "required": [
          "drop_pending_updates"
        ]
      },
      "editChatInviteLink": {
        "description": "Input for editChatInviteLink",
        "type": "object",
        "properties": {
          "expire_date": {
            "description": "Point in time (Unix timestamp) when the link will expire",
            "type": "integer"
          },
          "invite_link": {
            "description": "The invite link to edit",
            "type": "string"
          },
          "member_limit": {
            "description": "Maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999",
            "type": "integer"
          }
        },
        "required": [
          "invite_link",
          "expire_date",
          "member_limit"
        ]
      },
      "editMessageCaption": {
        "description": "Input for editMessageCaption",
        "type": "object",
        "properties": {
          "caption": {
            "description": "New caption of the message, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "inline_message_id": {
            "description": "Required if chat_id and message_id are not specified. Identifier of the inline message",
            "type": "string"
          },
          "message_id": {
            "description": "Required if inline_message_id is not specified. Identifier of the message to edit",
            "type": "integer"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the message caption. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "A JSON-serialized object for an inline keyboard"
          }
        },
        "required": [
          "message_id",
          "inline_message_id",
          "caption",
          "parse_mode",
          "reply_markup"
        ]
      },
      "editMessageLiveLocation": {
        "description": "Input for editMessageLiveLocation",
        "type": "object",
        "properties": {
          "heading": {
            "description": "Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified",
            "type": "integer"
          },
          "horizontal_accuracy": {
            "description": "The radius of uncertainty for the location, measured in meters; 0-1500",
            "type": "number"
          },
          "inline_message_id": {
            "description": "Required if chat_id and message_id are not specified. Identifier of the inline message",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude of new location",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude of new location",
            "type": "number"
          },
          "message_id": {
            "description": "Required if inline_message_id is not specified. Identifier of the message to edit",
            "type": "integer"
          },
          "proximity_alert_radius": {
            "description": "Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified",
            "type": "integer"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "A JSON-serialized object for a new inline keyboard"
          }
        },
        "required": [
          "message_id",
          "inline_message_id",
          "latitude",
          "longitude",
          "horizontal_accuracy",
          "heading",
          "proximity_alert_radius",
          "reply_markup"
        ]
      },
      "editMessageMedia": {
        "description": "Input for editMessageMedia",
        "type": "object",
        "properties": {
          "inline_message_id": {
            "description": "Required if chat_id and message_id are not specified. Identifier of the inline message",
            "type": "string"
          },
          "message_id": {
            "description": "Required if inline_message_id is not specified. Identifier of the message to edit",
            "type": "integer"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "A JSON-serialized object for a new inline keyboard"
          }
        },
        "required": [
          "message_id",
          "inline_message_id",
          "reply_markup"
        ]
      },
      "editMessageReplyMarkup": {
        "description": "Input for editMessageReplyMarkup",
        "type": "object",
        "properties": {
          "inline_message_id": {
            "description": "Required if chat_id and message_id are not specified. Identifier of the inline message",
            "type": "string"
          },
          "message_id": {
            "description": "Required if inline_message_id is not specified. Identifier of the message to edit",
            "type": "integer"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "A JSON-serialized object for an inline keyboard"
          }
        },
        "required": [
          "message_id",
          "inline_message_id",
          "reply_markup"
        ]
      },
      "editMessageText": {
        "description": "Input for editMessageText",
        "type": "object",
        "properties": {
          "disable_web_page_preview": {
            "description": "Disables link previews for links in this message",
            "type": "boolean"
          },
          "inline_message_id": {
            "description": "Required if chat_id and message_id are not specified. Identifier of the inline message",
            "type": "string"
          },
          "message_id": {
            "description": "Required if inline_message_id is not specified. Identifier of the message to edit",
            "type": "integer"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the message text. See formatting options for more details",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "A JSON-serialized object for an inline keyboard"
          },
          "text": {
            "description": "New text of the message, 1-4096 characters after entities parsing",
            "type": "string"
          }
        },
        "required": [
          "message_id",
          "inline_message_id",
          "text",
          "parse_mode",
          "disable_web_page_preview",
          "reply_markup"
        ]
      },
      "exportChatInviteLink": {
        "description": "Input for exportChatInviteLink",
        "type": "object"
      },
      "forwardMessage": {
        "description": "Input for forwardMessage",
        "type": "object",
        "properties": {
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "message_id": {
            "description": "Message identifier in the chat specified in from_chat_id",
            "type": "integer"
          }
        },
        "required": [
          "disable_notification",
          "message_id"
        ]
      },
      "getChat": {
        "description": "Input for getChat",
        "type": "object"
      },
      "getChatAdministrators": {
        "description": "Input for getChatAdministrators",
        "type": "object"
      },
      "getChatMember": {
        "description": "Input for getChatMember",
        "type": "object",
        "properties": {
          "user_id": {
            "description": "Unique identifier of the target user",
            "type": "integer"
          }
        },
        "required": [
          "user_id"
        ]
      },
      "getChatMemberCount": {
        "description": "Input for getChatMemberCount",
        "type": "object"
      },
      "getFile": {
        "description": "Input for getFile",
        "type": "object",
        "properties": {
          "file_id": {
            "description": "File identifier to get info about",
            "type": "string"
          }
        },
        "required": [
          "file_id"
        ]
      },
      "getGameHighScores": {
        "description": "Input for getGameHighScores",
        "type": "object",
        "properties": {
          "chat_id": {
            "description": "Required if inline_message_id is not specified. Unique identifier for the target chat",
            "type": "integer"
          },
          "inline_message_id": {
            "description": "Required if chat_id and message_id are not specified. Identifier of the inline message",
            "type": "string"
          },
          "message_id": {
            "description": "Required if inline_message_id is not specified. Identifier of the sent message",
            "type": "integer"
          },
          "user_id": {
            "description": "Target user id",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "chat_id",
          "message_id",
          "inline_message_id"
        ]
      },
      "getMyCommands": {
        "description": "Input for getMyCommands",
        "type": "object",
        "properties": {
          "language_code": {
            "description": "A two-letter ISO 639-1 language code or an empty string",
            "type": "string"
          }
        },
        "required": [
          "language_code"
        ]
      },
      "getStickerSet": {
        "description": "Input for getStickerSet",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the sticker set",
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "getUpdates": {
        "description": "Input for getUpdates",
        "type": "object",
        "properties": {
          "limit": {
            "description": "Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100",
            "type": "integer"
          },
          "offset": {
            "description": "Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is called with an offset higher than its update_id. The negative offset can be specified to retrieve updates starting from -offset update from the end of the updates queue. All previous updates will forgotten",
            "type": "integer"
          },
          "timeout": {
            "description": "Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only",
            "type": "integer"
          }
        },
        "required": [
          "offset",
          "limit",
          "timeout"
        ]
      },
      "getUserProfilePhotos": {
        "description": "Input for getUserProfilePhotos",
        "type": "object",
        "properties": {
          "limit": {
            "description": "Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100",
            "type": "integer"
          },
          "offset": {
            "description": "Sequential number of the first photo to be returned. By default, all photos are returned",
            "type": "integer"
          },
          "user_id": {
            "description": "Unique identifier of the target user",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "offset",
          "limit"
        ]
      },
      "leaveChat": {
        "description": "Input for leaveChat",
        "type": "object"
      },
      "pinChatMessage": {
        "description": "Input for pinChatMessage",
        "type": "object",
        "properties": {
          "disable_notification": {
            "description": "Pass True, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats",
            "type": "boolean"
          },
          "message_id": {
            "description": "Identifier of a message to pin",
            "type": "integer"
          }
        },
        "required": [
          "message_id",
          "disable_notification"
        ]
      },
      "promoteChatMember": {
        "description": "Input for promoteChatMember",
        "type": "object",
        "properties": {
          "can_change_info": {
            "description": "Pass True, if the administrator can change chat title, photo and other settings",
            "type": "boolean"
          },
          "can_delete_messages": {
            "description": "Pass True, if the administrator can delete messages of other users",
            "type": "boolean"
          },
          "can_edit_messages": {
            "description": "Pass True, if the administrator can edit messages of other users and can pin messages, channels only",
            "type": "boolean"
          },
          "can_invite_users": {
            "description": "Pass True, if the administrator can invite new users to the chat",
            "type": "boolean"
          },
          "can_manage_chat": {
            "description": "Pass True, if the administrator can access the chat event log, chat statistics, message statistics in channels, see channel members, see anonymous administrators in supergroups and ignore slow mode. Implied by any other administrator privilege",
            "type": "boolean"
          },
          "can_manage_voice_chats": {
            "description": "Pass True, if the administrator can manage voice chats",
            "type": "boolean"
          },
          "can_pin_messages": {
            "description": "Pass True, if the administrator can pin messages, supergroups only",
            "type": "boolean"
          },
          "can_post_messages": {
            "description": "Pass True, if the administrator can create channel posts, channels only",
            "type": "boolean"
          },
          "can_promote_members": {
            "description": "Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)",
            "type": "boolean"
          },
          "can_restrict_members": {
            "description": "Pass True, if the administrator can restrict, ban or unban chat members",
            "type": "boolean"
          },
          "is_anonymous": {
            "description": "Pass True, if the administrator's presence in the chat is hidden",
            "type": "boolean"
          },
          "user_id": {
            "description": "Unique identifier of the target user",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "is_anonymous",
          "can_manage_chat",
          "can_post_messages",
          "can_edit_messages",
          "can_delete_messages",
          "can_manage_voice_chats",
          "can_restrict_members",
          "can_promote_members",
          "can_change_info",
          "can_invite_users",
          "can_pin_messages"
        ]
      },
      "restrictChatMember": {
        "description": "Input for restrictChatMember",
        "type": "object",
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/ChatPermissions",
            "description": "A JSON-serialized object for new user permissions"
          },
          "until_date": {
            "description": "Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever",
            "type": "integer"
          },
          "user_id": {
            "description": "Unique identifier of the target user",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "permissions",
          "until_date"
        ]
      },
      "revokeChatInviteLink": {
        "description": "Input for revokeChatInviteLink",
        "type": "object",
        "properties": {
          "invite_link": {
            "description": "The invite link to revoke",
            "type": "string"
          }
        },
        "required": [
          "invite_link"
        ]
      },
      "sendAnimation": {
        "description": "Input for sendAnimation",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "caption": {
            "description": "Animation caption (may also be used when resending animation by file_id), 0-1024 characters after entities parsing",
            "type": "string"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "duration": {
            "description": "Duration of sent animation in seconds",
            "type": "integer"
          },
          "height": {
            "description": "Animation height",
            "type": "integer"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the animation caption. See formatting options for more details",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          },
          "width": {
            "description": "Animation width",
            "type": "integer"
          }
        },
        "required": [
          "duration",
          "width",
          "height",
          "caption",
          "parse_mode",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendAudio": {
        "description": "Input for sendAudio",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "caption": {
            "description": "Audio caption, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "duration": {
            "description": "Duration of the audio in seconds",
            "type": "integer"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the audio caption. See formatting options for more details",
            "type": "string"
          },
          "performer": {
            "description": "Performer",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          },
          "title": {
            "description": "Track name",
            "type": "string"
          }
        },
        "required": [
          "caption",
          "parse_mode",
          "duration",
          "performer",
          "title",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendChatAction": {
        "description": "Input for sendChatAction",
        "type": "object",
        "properties": {
          "action": {
            "description": "Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_voice or upload_voice for voice notes, upload_document for general files, find_location for location data, record_video_note or upload_video_note for video notes",
            "type": "string"
          }
        },
        "required": [
          "action"
        ]
      },
      "sendContact": {
        "description": "Input for sendContact",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "first_name": {
            "description": "Contact's first name",
            "type": "string"
          },
          "last_name": {
            "description": "Contact's last name",
            "type": "string"
          },
          "phone_number": {
            "description": "Contact's phone number",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          },
          "vcard": {
            "description": "Additional data about the contact in the form of a vCard, 0-2048 bytes",
            "type": "string"
          }
        },
        "required": [
          "phone_number",
          "first_name",
          "last_name",
          "vcard",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendDice": {
        "description": "Input for sendDice",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "emoji": {
            "description": "Emoji on which the dice throw animation is based. Currently, must be one of “”, “”, “”, “”, “”, or “”. Dice can have values 1-6 for “”, “” and “”, values 1-5 for “” and “”, and values 1-64 for “”. Defaults to “”",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "emoji",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendDocument": {
        "description": "Input for sendDocument",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "caption": {
            "description": "Document caption (may also be used when resending documents by file_id), 0-1024 characters after entities parsing",
            "type": "string"
          },
          "disable_content_type_detection": {
            "description": "Disables automatic server-side content type detection for files uploaded using multipart/form-data",
            "type": "boolean"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the document caption. See formatting options for more details",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "caption",
          "parse_mode",
          "disable_content_type_detection",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendGame": {
        "description": "Input for sendGame",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "chat_id": {
            "description": "Unique identifier for the target chat",
            "type": "integer"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "game_short_name": {
            "description": "Short name of the game, serves as the unique identifier for the game. Set up your games via Botfather",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be shown. If not empty, the first button must launch the game"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "chat_id",
          "game_short_name",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply",
          "reply_markup"
        ]
      },
      "sendInvoice": {
        "description": "Input for sendInvoice",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "currency": {
            "description": "Three-letter ISO 4217 currency code, see more on currencies",
            "type": "string"
          },
          "description": {
            "description": "Product description, 1-255 characters",
            "type": "string"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "is_flexible": {
            "description": "Pass True, if the final price depends on the shipping method",
            "type": "boolean"
          },
          "max_tip_amount": {
            "description": "The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0",
            "type": "integer"
          },
          "need_email": {
            "description": "Pass True, if you require the user's email address to complete the order",
            "type": "boolean"
          },
          "need_name": {
            "description": "Pass True, if you require the user's full name to complete the order",
            "type": "boolean"
          },
          "need_phone_number": {
            "description": "Pass True, if you require the user's phone number to complete the order",
            "type": "boolean"
          },
          "need_shipping_address": {
            "description": "Pass True, if you require the user's shipping address to complete the order",
            "type": "boolean"
          },
          "payload": {
            "description": "Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes",
            "type": "string"
          },
          "photo_height": {
            "description": "Photo height",
            "type": "integer"
          },
          "photo_size": {
            "description": "Photo size",
            "type": "integer"
          },
          "photo_url": {
            "description": "URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for",
            "type": "string"
          },
          "photo_width": {
            "description": "Photo width",
            "type": "integer"
          },
          "provider_data": {
            "description": "A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider",
            "type": "string"
          },
          "provider_token": {
            "description": "Payments provider token, obtained via Botfather",
            "type": "string"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be shown. If not empty, the first button must be a Pay button"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          },
          "send_email_to_provider": {
            "description": "Pass True, if user's email address should be sent to provider",
            "type": "boolean"
          },
          "send_phone_number_to_provider": {
            "description": "Pass True, if user's phone number should be sent to provider",
            "type": "boolean"
          },
          "start_parameter": {
            "description": "Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a Pay button, allowing multiple users to pay directly from the forwarded message, using the same invoice. If non-empty, forwarded copies of the sent message will have a URL button with a deep link to the bot (instead of a Pay button), with the value used as the start parameter",
            "type": "string"
          },
          "title": {
            "description": "Product name, 1-32 characters",
            "type": "string"
          }
        },
        "required": [
          "title",
          "description",
          "payload",
          "provider_token",
          "currency",
          "max_tip_amount",
          "start_parameter",
          "provider_data",
          "photo_url",
          "photo_size",
          "photo_width",
          "photo_height",
          "need_name",
          "need_phone_number",
          "need_email",
          "need_shipping_address",
          "send_phone_number_to_provider",
          "send_email_to_provider",
          "is_flexible",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply",
          "reply_markup"
        ]
      },
      "sendLocation": {
        "description": "Input for sendLocation",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "heading": {
            "description": "For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified",
            "type": "integer"
          },
          "horizontal_accuracy": {
            "description": "The radius of uncertainty for the location, measured in meters; 0-1500",
            "type": "number"
          },
          "latitude": {
            "description": "Latitude of the location",
            "type": "number"
          },
          "live_period": {
            "description": "Period in seconds for which the location will be updated (see Live Locations, should be between 60 and 86400",
            "type": "integer"
          },
          "longitude": {
            "description": "Longitude of the location",
            "type": "number"
          },
          "proximity_alert_radius": {
            "description": "For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified",
            "type": "integer"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "latitude",
          "longitude",
          "horizontal_accuracy",
          "live_period",
          "heading",
          "proximity_alert_radius",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendMediaGroup": {
        "description": "Input for sendMediaGroup",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "disable_notification": {
            "description": "Sends messages silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "reply_to_message_id": {
            "description": "If the messages are a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendMessage": {
        "description": "Input for sendMessage",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "disable_web_page_preview": {
            "description": "Disables link previews for links in this message",
            "type": "boolean"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the message text. See formatting options for more details",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          },
          "text": {
            "description": "Text of the message to be sent, 1-4096 characters after entities parsing",
            "type": "string"
          }
        },
        "required": [
          "text",
          "parse_mode",
          "disable_web_page_preview",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendPhoto": {
        "description": "Input for sendPhoto",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "caption": {
            "description": "Photo caption (may also be used when resending photos by file_id), 0-1024 characters after entities parsing",
            "type": "string"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the photo caption. See formatting options for more details",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "caption",
          "parse_mode",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendPoll": {
        "description": "Input for sendPoll",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "allows_multiple_answers": {
            "description": "True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False",
            "type": "boolean"
          },
          "close_date": {
            "description": "Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with open_period",
            "type": "integer"
          },
          "correct_option_id": {
            "description": "0-based identifier of the correct answer option, required for polls in quiz mode",
            "type": "integer"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "explanation": {
            "description": "Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing",
            "type": "string"
          },
          "explanation_parse_mode": {
            "description": "Mode for parsing entities in the explanation. See formatting options for more details",
            "type": "string"
          },
          "is_anonymous": {
            "description": "True, if the poll needs to be anonymous, defaults to True",
            "type": "boolean"
          },
          "is_closed": {
            "description": "Pass True, if the poll needs to be immediately closed. This can be useful for poll preview",
            "type": "boolean"
          },
          "open_period": {
            "description": "Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with close_date",
            "type": "integer"
          },
          "question": {
            "description": "Poll question, 1-300 characters",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          },
          "type": {
            "description": "Poll type, “quiz” or “regular”, defaults to “regular”",
            "type": "string"
          }
        },
        "required": [
          "question",
          "is_anonymous",
          "type",
          "allows_multiple_answers",
          "correct_option_id",
          "explanation",
          "explanation_parse_mode",
          "open_period",
          "close_date",
          "is_closed",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendSticker": {
        "description": "Input for sendSticker",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendVenue": {
        "description": "Input for sendVenue",
        "type": "object",
        "properties": {
          "address": {
            "description": "Address of the venue",
            "type": "string"
          },
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "foursquare_id": {
            "description": "Foursquare identifier of the venue",
            "type": "string"
          },
          "foursquare_type": {
            "description": "Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)",
            "type": "string"
          },
          "google_place_id": {
            "description": "Google Places identifier of the venue",
            "type": "string"
          },
          "google_place_type": {
            "description": "Google Places type of the venue. (See supported types.)",
            "type": "string"
          },
          "latitude": {
            "description": "Latitude of the venue",
            "type": "number"
          },
          "longitude": {
            "description": "Longitude of the venue",
            "type": "number"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          },
          "title": {
            "description": "Name of the venue",
            "type": "string"
          }
        },
        "required": [
          "latitude",
          "longitude",
          "title",
          "address",
          "foursquare_id",
          "foursquare_type",
          "google_place_id",
          "google_place_type",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendVideo": {
        "description": "Input for sendVideo",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "caption": {
            "description": "Video caption (may also be used when resending videos by file_id), 0-1024 characters after entities parsing",
            "type": "string"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "duration": {
            "description": "Duration of sent video in seconds",
            "type": "integer"
          },
          "height": {
            "description": "Video height",
            "type": "integer"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the video caption. See formatting options for more details",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          },
          "supports_streaming": {
            "description": "Pass True, if the uploaded video is suitable for streaming",
            "type": "boolean"
          },
          "width": {
            "description": "Video width",
            "type": "integer"
          }
        },
        "required": [
          "duration",
          "width",
          "height",
          "caption",
          "parse_mode",
          "supports_streaming",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendVideoNote": {
        "description": "Input for sendVideoNote",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "duration": {
            "description": "Duration of sent video in seconds",
            "type": "integer"
          },
          "length": {
            "description": "Video width and height, i.e. diameter of the video message",
            "type": "integer"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "duration",
          "length",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "sendVoice": {
        "description": "Input for sendVoice",
        "type": "object",
        "properties": {
          "allow_sending_without_reply": {
            "description": "Pass True, if the message should be sent even if the specified replied-to message is not found",
            "type": "boolean"
          },
          "caption": {
            "description": "Voice message caption, 0-1024 characters after entities parsing",
            "type": "string"
          },
          "disable_notification": {
            "description": "Sends the message silently. Users will receive a notification with no sound",
            "type": "boolean"
          },
          "duration": {
            "description": "Duration of the voice message in seconds",
            "type": "integer"
          },
          "parse_mode": {
            "description": "Mode for parsing entities in the voice message caption. See formatting options for more details",
            "type": "string"
          },
          "reply_to_message_id": {
            "description": "If the message is a reply, ID of the original message",
            "type": "integer"
          }
        },
        "required": [
          "caption",
          "parse_mode",
          "duration",
          "disable_notification",
          "reply_to_message_id",
          "allow_sending_without_reply"
        ]
      },
      "setChatAdministratorCustomTitle": {
        "description": "Input for setChatAdministratorCustomTitle",
        "type": "object",
        "properties": {
          "custom_title": {
            "description": "New custom title for the administrator; 0-16 characters, emoji are not allowed",
            "type": "string"
          },
          "user_id": {
            "description": "Unique identifier of the target user",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "custom_title"
        ]
      },
      "setChatDescription": {
        "description": "Input for setChatDescription",
        "type": "object",
        "properties": {
          "description": {
            "description": "New chat description, 0-255 characters",
            "type": "string"
          }
        },
        "required": [
          "description"
        ]
      },
      "setChatPermissions": {
        "description": "Input for setChatPermissions",
        "type": "object",
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/ChatPermissions",
            "description": "A JSON-serialized object for new default chat permissions"
          }
        },
        "required": [
          "permissions"
        ]
      },
      "setChatPhoto": {
        "description": "Input for setChatPhoto",
        "type": "object"
      },
      "setChatStickerSet": {
        "description": "Input for setChatStickerSet",
        "type": "object",
        "properties": {
          "sticker_set_name": {
            "description": "Name of the sticker set to be set as the group sticker set",
            "type": "string"
          }
        },
        "required": [
          "sticker_set_name"
        ]
      },
      "setChatTitle": {
        "description": "Input for setChatTitle",
        "type": "object",
        "properties": {
          "title": {
            "description": "New chat title, 1-255 characters",
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "setGameScore": {
        "description": "Input for setGameScore",
        "type": "object",
        "properties": {
          "chat_id": {
            "description": "Required if inline_message_id is not specified. Unique identifier for the target chat",
            "type": "integer"
          },
          "disable_edit_message": {
            "description": "Pass True, if the game message should not be automatically edited to include the current scoreboard",
            "type": "boolean"
          },
          "force": {
            "description": "Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters",
            "type": "boolean"
          },
          "inline_message_id": {
            "description": "Required if chat_id and message_id are not specified. Identifier of the inline message",
            "type": "string"
          },
          "message_id": {
            "description": "Required if inline_message_id is not specified. Identifier of the sent message",
            "type": "integer"
          },
          "score": {
            "description": "New score, must be non-negative",
            "type": "integer"
          },
          "user_id": {
            "description": "User identifier",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "score",
          "force",
          "disable_edit_message",
          "chat_id",
          "message_id",
          "inline_message_id"
        ]
      },
      "setMyCommands": {
        "description": "Input for setMyCommands",
        "type": "object",
        "properties": {
          "language_code": {
            "description": "A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the given scope, for whose language there are no dedicated commands",
            "type": "string"
          }
        },
        "required": [
          "language_code"
        ]
      },
      "setPassportDataErrors": {
        "description": "Input for setPassportDataErrors",
        "type": "object",
        "properties": {
          "user_id": {
            "description": "User identifier",
            "type": "integer"
          }
        },
        "required": [
          "user_id"
        ]
      },
      "setStickerPositionInSet": {
        "description": "Input for setStickerPositionInSet",
        "type": "object",
        "properties": {
          "position": {
            "description": "New sticker position in the set, zero-based",
            "type": "integer"
          },
          "sticker": {
            "description": "File identifier of the sticker",
            "type": "string"
          }
        },
        "required": [
          "sticker",
          "position"
        ]
      },
      "setStickerSetThumb": {
        "description": "Input for setStickerSetThumb",
        "type": "object",
        "properties": {
          "name": {
            "description": "Sticker set name",
            "type": "string"
          },
          "user_id": {
            "description": "User identifier of the sticker set owner",
            "type": "integer"
          }
        },
        "required": [
          "name",
          "user_id"
        ]
      },
      "setWebhook": {
        "description": "Input for setWebhook",
        "type": "object",
        "properties": {
          "drop_pending_updates": {
            "description": "Pass True to drop all pending updates",
            "type": "boolean"
          },
          "ip_address": {
            "description": "The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS",
            "type": "string"
          },
          "max_connections": {
            "description": "Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput",
            "type": "integer"
          },
          "url": {
            "description": "HTTPS url to send updates to. Use an empty string to remove webhook integration",
            "type": "string"
          }
        },
        "required": [
          "url",
          "ip_address",
          "max_connections",
          "drop_pending_updates"
        ]
      },
      "stopMessageLiveLocation": {
        "description": "Input for stopMessageLiveLocation",
        "type": "object",
        "properties": {
          "inline_message_id": {
            "description": "Required if chat_id and message_id are not specified. Identifier of the inline message",
            "type": "string"
          },
          "message_id": {
            "description": "Required if inline_message_id is not specified. Identifier of the message with live location to stop",
            "type": "integer"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "A JSON-serialized object for a new inline keyboard"
          }
        },
        "required": [
          "message_id",
          "inline_message_id",
          "reply_markup"
        ]
      },
      "stopPoll": {
        "description": "Input for stopPoll",
        "type": "object",
        "properties": {
          "message_id": {
            "description": "Identifier of the original message with the poll",
            "type": "integer"
          },
          "reply_markup": {
            "$ref": "#/components/schemas/InlineKeyboardMarkup",
            "description": "A JSON-serialized object for a new message inline keyboard"
          }
        },
        "required": [
          "message_id",
          "reply_markup"
        ]
      },
      "unbanChatMember": {
        "description": "Input for unbanChatMember",
        "type": "object",
        "properties": {
          "only_if_banned": {
            "description": "Do nothing if the user is not banned",
            "type": "boolean"
          },
          "user_id": {
            "description": "Unique identifier of the target user",
            "type": "integer"
          }
        },
        "required": [
          "user_id",
          "only_if_banned"
        ]
      },
      "unpinAllChatMessages": {
        "description": "Input for unpinAllChatMessages",
        "type": "object"
      },
      "unpinChatMessage": {
        "description": "Input for unpinChatMessage",
        "type": "object",
        "properties": {
          "message_id": {
            "description": "Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned",
            "type": "integer"
          }
        },
        "required": [
          "message_id"
        ]
      },
      "uploadStickerFile": {
        "description": "Input for uploadStickerFile",
        "type": "object",
        "properties": {
          "user_id": {
            "description": "User identifier of sticker file owner",
            "type": "integer"
          }
        },
        "required": [
          "user_id"
        ]
      }
    }
  }
}
